'From Cuis7.0 [latest update: #6367] on 13 May 2024 at 4:37:08 pm'!


----SNAPSHOT----(13 May 2024 16:37:08) Cuis7.0-32.image priorSource: 0!

----QUIT----(13 May 2024 16:37:13) Cuis7.1-6367-32.image priorSource: 68!

----STARTUP---- (6 June 2024 11:42:23) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6367-32.image!


'From Cuis7.1 [latest update: #6367] on 16 May 2024 at 12:06:13 am'!

TestCase subclass: #SystemOrganizerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-System-Support'!

!classDefinition: #SystemOrganizerTest category: #'BaseImageTests-System-Support' stamp: 'Install-6368-RenameExtentions-Sebastian-2024May16-00h03m-S.V..001.cs.st 6/6/2024 11:42:27'!
TestCase subclass: #SystemOrganizerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-System-Support'!
!Categorizer methodsFor: 'testing' stamp: 'S.V. 5/16/2024 00:04:40'!
                        isPackageCategoryExtension: aCategory fromPackage: aPackageName

	^ (self isPackageCategoryExtension: aCategory) and: [ aCategory 	is: aPackageName substringAt: 2 ]! !
!ClassOrganizer methodsFor: 'accessing' stamp: 'S.V. 5/16/2024 00:05:12'!
              renamePackageCategories: oldPackageName to: newPackageName

	self categories do: [ :aCategory |
		(self isPackageCategoryExtension: aCategory fromPackage: oldPackageName) ifTrue: [
			| newCategory |
			newCategory := aCategory copyReplaceFrom: 2 to: (oldPackageName size + 1) with: newPackageName.
			self renameCategory: aCategory to: newCategory.
		]
	]! !
!SystemOrganizerTest methodsFor: 'testing' stamp: 'S.V. 5/16/2024 00:03:44'!
           testRenameSystemCategoryAlsoRenameClassExtensions
	| oldCategoryName oldExtensionName newCategoryName newExtensionName aClassWithCategoryToRename classOrganizer |

	oldCategoryName := 'ACategoryToRename'.
	oldExtensionName := '*ACategoryToRename SubCategory'.
	newCategoryName := 'NewCategoryName'.
	newExtensionName := '*NewCategoryName SubCategory'.
	aClassWithCategoryToRename := Object subclass: #AClassWithCategoryToRename
		instanceVariableNames: ''
		classVariableNames: ''
		poolDictionaries: ''
		category: oldCategoryName.
	classOrganizer := aClassWithCategoryToRename organization.
	classOrganizer addCategory: oldExtensionName.

	self assert: aClassWithCategoryToRename category equals: oldCategoryName.
	self assert: classOrganizer categories includes: oldExtensionName.
	
	SystemOrganization renameSystemCategory: oldCategoryName to: newCategoryName.

	self assert: aClassWithCategoryToRename category equals: newCategoryName.
	self deny: (classOrganizer categories includes: oldExtensionName).
	self assert: (classOrganizer categories includes: newExtensionName).

	SystemOrganization removeSystemCategory: newCategoryName.! !
!SystemOrganizer methodsFor: 'categories' stamp: 'S.V. 5/16/2024 00:05:52' prior: 16970325!
              renameSystemCategory: oldName to: newName.

	"If it's a top category, rename subcategories first:"
	(self withSubCategoriesOf: oldName) reverseDo: [ :each |
		self renameCategory: each to: newName, (each allButFirst: oldName size)].

	Smalltalk classes do: [ :aClass | 
		aClass organization renamePackageCategories: oldName to: newName
	]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6368-RenameExtentions-Sebastian-2024May16-00h03m-S.V..001.cs.st----!

'From Cuis7.1 [latest update: #6368] on 16 May 2024 at 10:02:21 am'!
!ClassOrganizer methodsFor: 'renaming' stamp: 'HAW 5/16/2024 09:41:31'!
        renamePackageCategoriesFrom: oldPackageName to: newPackageName

	self categories do: [ :aCategory |
		(self isPackageCategoryExtension: aCategory fromPackage: oldPackageName) ifTrue: [
			self renamePackageCategory: aCategory from: oldPackageName to: newPackageName.
		]
	]! !
!ClassOrganizer methodsFor: 'renaming' stamp: 'HAW 5/16/2024 10:01:30'!
   renamePackageCategory: aCategory from: oldPackageName to: newPackageName

	| newCategory |
			
	newCategory := aCategory copyReplaceFrom: 2 to: oldPackageName size + 1 with: newPackageName.
	self renameCategory: aCategory to: newCategory! !
!SystemOrganizer methodsFor: 'categories' stamp: 'HAW 5/16/2024 09:57:40' prior: 50331741!
                    renameSystemCategory: oldName to: newName

	"If it's a top category, rename subcategories first:"
	(self withSubCategoriesOf: oldName) reverseDo: [ :each |
		self renameCategory: each to: newName, (each allButFirst: oldName size)].

	Smalltalk allBehaviorsDo: [ :aClass | 
		aClass organization renamePackageCategoriesFrom: oldName to: newName ]! !

ClassOrganizer removeSelector: #renamePackageCategories:to:!

!methodRemoval: ClassOrganizer #renamePackageCategories:to: stamp: 'Install-6369-RenameExtentions-HernanWilkinson-2024May16-09h38m-HAW.001.cs.st 6/6/2024 11:42:27'!
renamePackageCategories: oldPackageName to: newPackageName

	self categories do: [ :aCategory |
		(self isPackageCategoryExtension: aCategory fromPackage: oldPackageName) ifTrue: [
			| newCategory |
			newCategory := aCategory copyReplaceFrom: 2 to: (oldPackageName size + 1) with: newPackageName.
			self renameCategory: aCategory to: newCategory.
		]
	]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6369-RenameExtentions-HernanWilkinson-2024May16-09h38m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6369] on 16 May 2024 at 4:42:02 pm'!

Smalltalk removeClassNamed: #SystemOrganizerTest!

!classRemoval: #SystemOrganizerTest stamp: 'Install-6370-RenameExtentions-HernanWilkinson-2024May16-16h41m-HAW.001.cs.st 6/6/2024 11:42:27'!
TestCase subclass: #SystemOrganizerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-System-Support'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6370-RenameExtentions-HernanWilkinson-2024May16-16h41m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6370] on 17 May 2024 at 9:30:05 am'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 5/17/2024 09:29:48' prior: 16963725!
   knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dkh'						'Dale Henrichs')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSM' 						'Duane Maxwell')
	#('DSG'						'David Graham')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('pmon'						'Paolo Montrasi')
	#('PHK' 						'Peter Keeler')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6371-AddSebastianAsKnowAuthor-JuanVuletich-2024May17-09h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6367] on 17 May 2024 at 9:18:14 am'!
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:12:17' prior: 16811341!
                              backspace
	"Answer the Character representing a backspace."

	^`Character codePoint: 8`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:11:54' prior: 16811347!
                     cr
	"Answer the Character representing a carriage return."

	^`Character codePoint: 13`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:12:34' prior: 16811353!
                     delete

	^ `Character codePoint: 127`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:12:49' prior: 16811358!
       end

	^ `Character codePoint: 4`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:13:10' prior: 16811362!
            enter
	"Answer the Character representing enter."

	^ `Character codePoint: 3`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:13:24' prior: 16811368!
                              escape
	"Answer the ASCII ESC character"

	^ `Character codePoint: 27`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:13:34' prior: 16811374!
      home

	^ `Character codePoint: 1`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:13:43' prior: 16811378!
           insert

	^ `Character codePoint: 5`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:11:50' prior: 16811382!
         lf
	"Answer the Character representing a linefeed."

	^`Character codePoint: 10`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:14:06' prior: 16811397!
                            newPage
	"Answer the Character representing a form feed."

	^ `Character codePoint: 12`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:14:16' prior: 16811403!
                     null
	"Answer the null Character."

	^ `Character codePoint: 0`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:14:30' prior: 16811408!
             pageDown

	^ `Character codePoint: 12`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:14:40' prior: 16811413!
      pageUp

	^ `Character codePoint: 11`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:14:52' prior: 16811417!
        shortUnderscore
	"Answer the Character representing very short (or invisible) underscore.
	Used to optionally mark subscript in code."

	^ `Character codePoint: 127`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:15:02' prior: 16811426!
       smalltalkDownArrow
	"
	The use of code 31 for a down arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text.
	Cuis holds a down arrow glyph at this code. This is for possible future use.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkDownArrow
	"
	^ `Character codePoint: 31`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:15:08' prior: 16811443!
             smalltalkLeftArrow
	"
	The use of code 28 for a left arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text files.

	Cuis holds a left arrow glyph at this code, that is only used to show $_ as a left arrow,
	when used for assignment of a Smalltalk variable.
	Note that it will be replaced by $_ when saving code files or exporting to OS clipboard.
	Browse senders to see how this works.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkLeftArrow
	"
	^ `Character codePoint: 28`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:15:13' prior: 16811466!
     smalltalkRightArrow
	"
	The use of code 30 for a right arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text.
	Cuis holds a right arrow glyph at this code. This is for possible future use.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkRightArrow
	"
	^ `Character codePoint: 30`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:15:19' prior: 16811483!
         smalltalkUpArrow
	"
	The use of code 29 for an up arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text files.

	Cuis holds an up arrow glyph at this code, that is only used to show $^ as an up arrow,
	when used for return from a Smalltalk method.
	Note that it will be replaced by $^ when saving code files or exporting to OS clipboard.
	Browse senders to see how this works.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkUpArrow
	"
	^ `Character codePoint: 29`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:15:46' prior: 16811505!
                space
	"Answer the Character representing a space."

	^ `Character codePoint: 32`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:16:04' prior: 16811511!
                           tab
	"Answer the Character representing a tab."

	^ `Character codePoint: 9`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 5/17/2024 09:16:19' prior: 16811516!
zeroWidthSpace

	^ `Character codePoint: 16r200B`! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6372-Character-enh-JuanVuletich-2024May17-09h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6372] on 17 May 2024 at 12:21:48 pm'!
!AbstractFont class methodsFor: 'ui' stamp: 'jmv 5/17/2024 12:21:35'!
             fromUser
	"
	Query the user for a Font (FontFamily + pointSize).
	 AbstractFont fromUser
	"
	^self fromUser: FontFamily defaultFamilyAndPointSize ! !
!AbstractFont class methodsFor: 'ui' stamp: 'jmv 5/17/2024 12:21:42'!
    fromUser: priorFont
	"
	Query the user for a Font (FontFamily + pointSize).
	AbstractFont fromUser
	"
	"Present a menu of available fonts, and if one is chosen, return it.
	Otherwise return nil.
	Show only baseFonts i.e. FamilyName, pointSize (but do not include emphasis, such as italic or bold)"

	| fontList fontMenu active ptMenu label spec |
	fontList := FontFamily familyNames.
	fontMenu := MenuMorph new defaultTarget: self.
	fontList do: [:fontName | 
			active := priorFont familyName sameAs: fontName.
			ptMenu := MenuMorph new defaultTarget: self.
			(FontFamily pointSizesFor:fontName ) do: [ :pt | 
					(active and: [pt = priorFont pointSize]) 
						ifTrue: [label := '<on>']
						ifFalse: [label := '<off>'].
					label := label , pt printString , ' pt'.
					ptMenu 
						add: label
						target: fontMenu
						action: #modalSelection:
						argument: { 
								fontName.
								pt}].
			active ifTrue: [label := '<on>'] ifFalse: [label := '<off>'].
			label := label , fontName.
			fontMenu add: label subMenu: ptMenu].
	spec := fontMenu invokeModal.
	spec ifNil: [^nil].
	^FontFamily familyName: spec first pointSize: spec last! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6373-Font-fromUser-JuanVuletich-2024May17-12h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6367] on 14 May 2024 at 11:59:26 am'!
!HierarchicalListMorph methodsFor: 'initialization' stamp: 'jmv 5/14/2024 11:45:33'!
               mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.! !
!HierarchicalListMorph methodsFor: 'initialization' stamp: 'jmv 5/14/2024 11:45:55'!
 model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel

	self model: anObject.
	getListSelector := getListSel.
	getSelectionSelector := getSelectionSel.
	setSelectionSelector := setSelectionSel.
	autoDeselect := true.
	self list: self getList.! !
!PluggableListMorph methodsFor: 'initialization' stamp: 'jmv 5/14/2024 11:46:43'!
             mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.! !
!PluggableListMorph methodsFor: 'initialization' stamp: 'jmv 5/14/2024 11:49:46'!
    model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel

	self model: anObject.
	getListSelector := getListSel.
	getIndexSelector := getSelectionSel.
	setIndexSelector := setSelectionSel.
	autoDeselect := true.
	self
		updateList;
		initForKeystrokes
! !
!PluggableListMorphOfMany methodsFor: 'initialization' stamp: 'jmv 5/14/2024 11:57:56'!
model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel
	"setup a whole load of pluggability options"
	getSelectionListSelector := getListSel.
	setSelectionListSelector := setListSel.
	self model: anObject listGetter: listSel indexGetter: getSelectionSel indexSetter: setSelectionSel! !
!HierarchicalListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 11:50:55' prior: 16874858!
                       model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Create a 'pluggable' list view on the given model parameterized by the given message selectors."

	^ self new
		model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel;
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !
!PluggableListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 11:51:09' prior: 16924100!
         model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Create a 'pluggable' list view on the given model parameterized by the given message selectors."

	^ self new
		model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel;
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !
!PluggableListMorphOfMany class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 11:58:33' prior: 16924365!
   model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	^self new
		model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel;
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6374-PluggableListsRefactor-p1-JuanVuletich-2024May14-11h41m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6368] on 14 May 2024 at 12:18:03 pm'!
!HierarchicalListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:03:23'!
                 withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel
	"Create a 'pluggable' list view on the given model parameterized by the given message selectors."

	^ self new
		model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel! !
!PluggableListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:02:58'!
          withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel
	"Create a 'pluggable' list view on the given model parameterized by the given message selectors."

	^ self new
		model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel! !
!PluggableListMorphOfMany class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:03:59'!
    withModel: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel
	^self new
		model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel! !
!HierarchicalListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:05:27' prior: 50332397!
                      model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^ (self withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !
!PluggableListMorph class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:05:33' prior: 50332415!
    model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^ (self withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !
!PluggableListMorphOfMany class methodsFor: 'instance creation' stamp: 'jmv 5/14/2024 12:07:09' prior: 50332433!
                              model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^(self withModel: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel! !
!CodePackageListWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:15:53' prior: 16825013!
       buildMorphicWindow
	" 
	CodePackageListWindow open: CodePackageList new
	"
	| names fileNames namesPane fileNamesPane 
	upperRow  description summary labelBackground |
	labelBackground := Theme current background.
	
	names := PluggableListMorph
		withModel: model 
		listGetter: #packageNames
		indexGetter: #selectionIndex
		indexSetter: #selectionIndex:.
	namesPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: ' Package Name');
		addMorphUseAll: names.

	fileNames := PluggableListMorph
		withModel: model 
		listGetter: #packageFullNames
		indexGetter: #selectionIndex
		indexSetter: #selectionIndex:.
	fileNames alwaysHideVerticalScrollbar.
	fileNamesPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: ' File Name');
		addMorphUseAll: fileNames.

	upperRow := LayoutMorph newRow.
	upperRow
		addMorph: namesPane proportionalWidth: 0.4;
		addAdjusterAndMorph: fileNamesPane proportionalWidth: 0.6.
		
	description := (TextModelMorph
		textProvider: model
		textGetter: #description 
		textSetter: #description:) emptyTextDisplayMessage: 'Please enter a description for this package'.

	summary := (TextModelMorph
		textProvider: model
		textGetter: #summary) emptyTextDisplayMessage: 'Package summary (No package selected?)'.
	
	names scrollSiblings: {fileNames}.
	fileNames scrollSiblings: {names}.

	self layoutMorph
		addMorph: upperRow proportionalHeight: 0.6;
		addAdjusterAndMorph: self buildButtonPane fixedHeight: Theme current buttonPaneHeight;
		addAdjusterAndMorph: summary fixedHeight: 60;
		addAdjusterAndMorph: description proportionalHeight: 0.25;
		addAdjusterAndMorph: self buildRequirementsPane proportionalHeight: 0.15.
	self setLabel: 'Installed Packages'! !
!CodePackageListWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:16:01' prior: 16825077!
                   buildRequirementsPane

	| requirements deleteReqButton "editReqButton" reqLayout buttonLayout updateReqButton |
	requirements := PluggableListMorph
		withModel: (PackageRequirementsList fromCodePackageList: model)
		listGetter: #requirementsStrings
		indexGetter: #selectionIndex
		indexSetter: #selectionIndex:.
		
	deleteReqButton := (PluggableButtonMorph 
							model: requirements model
							action: #deleteSelectedRequirement 
							label: 'delete')
							setBalloonText: 'Remove selected Feature requirement'.
	deleteReqButton color: self widgetsColor.
	updateReqButton := (PluggableButtonMorph 
							model: requirements model
							action: #updateSelectedRequirement 
							label: 'update')
							setBalloonText: 'Update requirement to current Feature revision'.
	updateReqButton color: self widgetsColor.
							
	buttonLayout := LayoutMorph newRow.
	buttonLayout 
		addMorph: deleteReqButton 
		layoutSpec: (LayoutSpec 
						proportionalWidth: 1.0 
						proportionalHeight: 1.0
						offAxisEdgeWeight: #leftOrTop);
		color: self widgetsColor quiteWhiter;
		addMorph: updateReqButton 
		layoutSpec: (LayoutSpec 
						proportionalWidth: 1.0 
						proportionalHeight: 1.0
						offAxisEdgeWeight: #leftOrTop);
		color: self widgetsColor quiteWhiter.
		
	model when: #changed: send: #updateRequirementsFromPackageList to: requirements model.
	self when: #changed: send: #updateRequirementsFromPackageList to: requirements model.
	requirements model when: #changed: send: #verifyContents to: requirements.
	self when: #changed: send: #verifyContents to: requirements.
	
	reqLayout := LayoutMorph newRow.
	^ reqLayout 
		doAdoptWidgetsColor;
		addMorph: requirements 
			layoutSpec: (LayoutSpec 
							proportionalWidth: 0.8
							proportionalHeight: 1.0 
							offAxisEdgeWeight: #leftOrTop);
		addMorph: buttonLayout 
			layoutSpec: (LayoutSpec 
							proportionalWidth: 0.2 
							proportionalHeight: 1.0 
							offAxisEdgeWeight: #rightOrBottom);
		color: `Color transparent`;
		yourself
		! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:07:38' prior: 16799316!
                               buildMorphicClassList

	^(PluggableListMorph
		withModel: model
		listGetter: #classList
		indexGetter: #classListIndex
		indexSetter: #classListIndex:)
			mainView: self
			menuGetter: #classListMenu
			keystrokeAction: #classListKey:from:! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:08:02' prior: 16799337!
                 buildMorphicMessageCatList

	^(PluggableListMorph
		withModel: model
		listGetter: #messageCategoryList
		indexGetter: #messageCategoryListIndex
		indexSetter: #messageCategoryListIndex:)
			mainView: self
			menuGetter: #messageCategoryMenu
			keystrokeAction: #messageCatListKey:from:! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:08:43' prior: 16799349!
   buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			mainView: self
			menuGetter: #messageListMenu
			keystrokeAction: #messageListKey:from:! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:09:33' prior: 16799383!
                               buildMorphicSystemCategoryList
	^(HierarchicalListMorph
		withModel: model
		listGetter: #systemCategoryRoots
		indexGetter: #selectedSystemCategory
		indexSetter: #setSelectedSystemCategoryTreeItem:)
			mainView: self menuGetter: #systemCategoryMenu keystrokeAction: #systemCatListKey:from:;
			autoDeselect: true;
			autoExpand: true;
			yourself! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:09:47' prior: 16799434!
     buildNoSysCatMorphicWindow
	"A Browser without the class categories list"

	| mySingletonList upperPanes messageCatList messageList classColumn classList |
	mySingletonList := (PluggableListMorph
				withModel: model
				listGetter: #systemCategorySingleton
				indexGetter: #indexIsOne
				indexSetter: #indexIsOne:)
					mainView: self
					menuGetter: #systemCatSingletonMenu
					keystrokeAction: #systemCatSingletonKey:from:.
	mySingletonList hideScrollBarsIndefinitely.

	classList := self buildMorphicClassList.
	classColumn := self buildMorphicClassColumnWith: classList.
	messageCatList := self buildMorphicMessageCatList.
	messageList := self buildMorphicMessageList.
	
	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: classColumn proportionalWidth: 0.3;
		addAdjusterAndMorph: messageCatList proportionalWidth: 0.3;
		addAdjusterAndMorph: messageList proportionalWidth: 0.4.

	messageList allowItemDrag: true.
	messageCatList
		acceptDropsFrom: messageList
		performing: #categorizeUnderCategoryAt:selector:.

	self layoutMorph
		addMorph: mySingletonList fixedHeight: (Preferences at: #standardCodeFont) lineSpacing + 10;
		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.

	model changed: #editSelection! !
!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:10:07' prior: 16823254 overrides: 16799397!
              buildMorphicWindow
	"Create a pluggable version of all the views for a Browser, using Morphic widgets."

	| sysCatList msgCatList upperPanes clsLayout clsList msgList |
	model setSelectedSystemCategory: model systemCategoryList first.
	sysCatList := (PluggableListMorph
			withModel: model 
			listGetter: #systemCategorySingleton
			indexGetter: #indexIsOne 
			indexSetter: #indexIsOne:)
				mainView: self
				menuGetter: #codeFileListMenu
				keystrokeAction: #codeFileListKey:from:.
	sysCatList hideScrollBarsIndefinitely.
	
	msgCatList := (PluggableListMorph
			withModel: model 
			listGetter: #messageCategoryList
			indexGetter: #messageCategoryListIndex 
			indexSetter: #messageCategoryListIndex:)
				mainView: self
				menuGetter: #messageCategoryMenu
				keystrokeAction: nil.

	clsList := self buildMorphicClassList.
	clsLayout := self buildMorphicClassColumnWith: clsList.
	msgList := self buildMorphicMessageList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: clsLayout proportionalWidth: 0.3;
		addAdjusterAndMorph: msgCatList proportionalWidth: 0.3;
		addAdjusterAndMorph: msgList proportionalWidth: 0.4.

	self layoutMorph
		addMorph: sysCatList fixedHeight: (Preferences at: #standardCodeFont) lineSpacing + 10;
		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.
	model changed: #editSelection! !
!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:06:15' prior: 16805289!
 buildMorphicWindow
	"Open a morphic view for the messageSet, whose label is labelString. 
	The listView may be either single or multiple selection type"

	| listPane desiredExtent desiredHeight wine availableHeight |
	listPane := (PluggableListMorphOfMany
		withModel: model
		listGetter: #list
		primarySelectionGetter: #listIndex
		primarySelectionSetter: #toggleListIndex:
		listSelectionGetter: #listSelectionAt:
		listSelectionSetter: #listSelectionAt:put:)
			mainView: self
			menuGetter: #listMenu
			keystrokeAction: #changeListKey:from:.
	desiredExtent := listPane desiredExtent.
	desiredHeight := desiredExtent y.
	wine := RealEstateAgent standardWindowExtent.
	availableHeight := wine y - self labelHeight - (borderWidth * 2).
	desiredExtent x > wine x ifTrue: [
		desiredHeight := desiredHeight + ScrollBar scrollbarThickness ].
	desiredHeight / availableHeight < 0.4
		ifTrue: [		"Number of items is small enough to make for a fixed list regardless of Window resize"
			self layoutMorph
				addMorph: listPane fixedHeight: desiredHeight;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 1.0 ]
		ifFalse: [		"Number of items is large enough to prefer a list proportional to Window resize"
			self layoutMorph
				addMorph: listPane proportionalHeight: 0.4;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.
			listPane limitLayoutHeight ].! !
!VersionsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:10:27' prior: 17003664 overrides: 50332832!
                       buildMorphicWindow
	"Open a morphic view for the messageSet, whose label is labelString. 
	The listView may be either single or multiple selection type"

	| listPane desiredExtent desiredHeight wine availableHeight |
	listPane := (PluggableListMorph
		withModel: model
		listGetter: #list
		indexGetter: #listIndex
		indexSetter: #toggleListIndex:)
			mainView: self
			menuGetter: #listMenu
			keystrokeAction: #changeListKey:from:.
	desiredExtent := listPane desiredExtent.
	desiredHeight := desiredExtent y.
	wine := RealEstateAgent standardWindowExtent.
	availableHeight := wine y - self labelHeight - (borderWidth * 2).
	desiredExtent x > wine x ifTrue: [
		desiredHeight := desiredHeight + ScrollBar scrollbarThickness ].
	desiredHeight / availableHeight < 0.4
		ifTrue: [		"Number of items is small enough to make for a fixed list regardless of Window resize"
			self layoutMorph
				addMorph: listPane fixedHeight: desiredHeight;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 1.0 ]
		ifFalse: [		"Number of items is large enough to prefer a list proportional to Window resize"
			self layoutMorph
				addMorph: listPane proportionalHeight: 0.4;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.
			listPane limitLayoutHeight ].! !
!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:14:30' prior: 16810171!
buildMorphicWindow
	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."

	| changeSetList classList changeSetListPane classListPane
	  messageList upperPanes labelBackground |
	labelBackground := Theme current background.
	model myChangeSet ifNil: [
		"Or whatever was last changed, or is top of list, or whatever"
		model myChangeSet: ChangeSet changeSetForBaseSystem ].

	changeSetList := (PluggableListMorphByItem
				withModel: model
				listGetter: #changeSetList
				indexGetter: #currentChangeSetName
				indexSetter: #showChangeSetNamed:)
					mainView: self
					menuGetter: #changeSetMenu
					keystrokeAction: #changeSetListKey:from:;
						autoDeselect: false.
	changeSetListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Change Set name');
		addMorphUseAll: changeSetList.

	classList := (PluggableListMorphByItem
				withModel: model
				listGetter: #classList
				indexGetter: #currentClassName
				indexSetter: #currentClassName:)
					mainView: self
					menuGetter: #classListMenu
					keystrokeAction: #classListKey:from:.
	classListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Classes');
		addMorphUseAll: classList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: changeSetListPane proportionalWidth: 0.6;
		addAdjusterAndMorph: classListPane proportionalWidth: 0.4.
	
	messageList := (PluggableListMorphByItem
				withModel: model
				listGetter: #messageList
				indexGetter: #currentSelector
				indexSetter: #currentSelector:)
					mainView: self
					menuGetter: #messageMenu
					keystrokeAction: #messageListKey:from:.
	messageList := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Methods');
		addMorphUseAll: messageList.

	self layoutMorph
		addMorph: upperPanes proportionalHeight: 0.25;
		addAdjusterAndMorph: messageList proportionalHeight: 0.2;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55.

	self setLabel: model labelString! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:11:14' prior: 16845109!
                        contextVariableInspector

	^ contextVariableInspector ifNil: [
		contextVariableInspector := (PluggableListMorph
			withModel: model contextVariablesInspector 
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				mainView: self
				menuGetter: #contextFieldListMenu
				keystrokeAction: #inspectorKey:from: ]! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:11:30' prior: 16845209!
   receiverInspector

	^ receiverInspector ifNil: [
		receiverInspector := (PluggableListMorph
			withModel: model receiverInspector
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				mainView: self
				menuGetter: #receiverFieldListMenu
				keystrokeAction: #inspectorKey:from: ]! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:11:42' prior: 16845234!
stackList

	^ stackList ifNil: [
		stackList := (PluggableListMorph
			withModel: model 
			listGetter: #contextStackList
			indexGetter: #contextStackIndex
			indexSetter: #toggleContextStackIndex:)
				mainView: self
				menuGetter: #contextStackMenu
				keystrokeAction: #contextStackKey:from: ]! !
!MethodSetWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:11:53' prior: 16902012!
                     buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			mainView: self
			menuGetter: #messageListMenu
			keystrokeAction: #messageListKey:from:! !
!MessageNamesWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:12:11' prior: 16895228 overrides: 16902025!
      buildMorphicWindow
	"Answer a morphic window with the given initial search string, nil if none"
	"MessageNames open"
	| selectorListView firstRow searchButton secondRow |
	textMorph := (TextModelMorph
		textProvider: model
		textGetter: #searchString
		textSetter: #searchString:
		selectionGetter: #contentsSelection)
		setBalloonText: 'See MessageNames class comment for search string options';
		emptyTextDisplayMessage: 'Type here, then hit Search'.
	textMorph askBeforeDiscardingEdits: false.
	textMorph acceptOnCR: true.
	textMorph hideScrollBarsIndefinitely.
	searchButton := PluggableButtonMorph new
		model: textMorph innerTextMorph;
		label: 'Search';
		action: #acceptContents.
	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.
	firstRow := LayoutMorph newRow.
	firstRow color: self windowColor.
	firstRow
		doAdoptWidgetsColor;
		
			addMorph: searchButton
			proportionalWidth: 0.25;
		
			addMorph: textMorph
			proportionalWidth: 0.75.
	selectorListView := (PluggableListMorph
		withModel: model
		listGetter: #selectorList
		indexGetter: #selectorListIndex
		indexSetter: #selectorListIndex:)
			mainView: self
			menuGetter: #selectorListMenu
			keystrokeAction: #selectorListKey:from:.
	secondRow := LayoutMorph newRow.
	secondRow
		
			addMorph: selectorListView
			proportionalWidth: 0.5;
		
			addAdjusterAndMorph: self buildMorphicMessageList
			proportionalWidth: 0.5.
	self layoutMorph
		
			addMorph: firstRow
			fixedHeight: self defaultButtonPaneHeight + 4;
		
			addAdjusterAndMorph: secondRow
			proportionalHeight: 0.5;
		
			addAdjusterAndMorph: self buildLowerPanes
			proportionalHeight: 0.5.
	model changed: #editSelection! !
!ProtocolBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:12:26' prior: 16932463!
                    buildSelectiveClassList
	"Define the class hierarchy list pane"

	^(PluggableListMorph
		withModel: model
		listGetter: #selectiveClassList
		indexGetter: #selectiveClassListIndex
		indexSetter: #selectiveClassListIndex:)
			mainView: self 
			menuGetter: #protocolClassListMenu 
			keystrokeAction: #protocolClassListKey:from:! !
!PreDebugWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:12:40' prior: 16927768!
                         buildMorphicWindowMessage: messageString
	| notifyPane |
	model expandStack.
	messageString
		ifNil: [
			notifyPane := PluggableListMorph
				withModel: model
				listGetter: #contextStackList
				indexGetter: #contextStackIndex
				indexSetter: #openFullAt: ]
		ifNotNil: [
			notifyPane := TextModelMorph withText: messageString.
			notifyPane askBeforeDiscardingEdits: false ].
	self layoutMorph
		addMorph: (self buttonRowForPreDebugWindow: model) proportionalHeight: 0.2;
		addAdjusterAndMorph: notifyPane proportionalHeight: 0.8! !
!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:12:57' prior: 16862711!
         morphicDirectoryTreePane

	^(HierarchicalListMorph
		withModel: model
		listGetter: #topDirectoryWrappers
		indexGetter: #currentDirectorySelected
		indexSetter: #setSelectedDirectoryTo:)
			mainView: self
			menuGetter: #directoryTreeMenu
			keystrokeAction: nil;
				autoDeselect: false;
				yourself! !
!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:14:41' prior: 16862731!
                  morphicFileListPane

	^(PluggableListMorph
		withModel: model 
		listGetter: #fileList 
		indexGetter: #fileListIndex
		indexSetter: #fileListIndex: )
			mainView: self
			menuGetter: #fileListMenu
			keystrokeAction: #fileListKey:from:! !
!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:13:09' prior: 16883043!
                   buildList

	| list |
	
	list := (PluggableListMorph
			withModel: model 
			listGetter: #fieldList
			indexGetter: #selectionIndex
			indexSetter: #toggleIndex:)
				mainView: self
				menuGetter: #fieldListMenu
				keystrokeAction: #inspectorKey:from:.
	list doubleClickSelector: #inspectSelection.
	
	^list! !
!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:16:18' prior: 16916477!
      buildMorphicWindow

	| textMorph |
	listMorph := (HierarchicalListMorph
			withModel: model
			listGetter: #getList
			indexGetter: #getCurrentSelection
			indexSetter: #noteNewSelection:)
				mainView: self
				menuGetter: #genericMenu
				keystrokeAction: #explorerKey:from:.
	listMorph autoDeselect: false.
	listMorph doubleClickSelector: #inspectSelection.
	textMorph := ((TextModelMorph textProvider: model)
			askBeforeDiscardingEdits: false;
			emptyTextDisplayMessage: 'Smalltalk expression (self is selected item)').
	self layoutMorph
		addMorph: listMorph proportionalHeight: 0.8;
		addAdjusterAndMorph: textMorph proportionalHeight: 0.2.
	self setLabel: model rootObject shortPrintString.! !
!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:13:40' prior: 16930687!
                               buildMorphicWindow
	"Create a pluggable version of me, answer a window"
	| aTextMorph list1 list2 upperRow |
	list1 := (PluggableListMorph
				withModel: model
				listGetter: #processNameList
				indexGetter: #processListIndex
				indexSetter: #processListIndex:)
					mainView: self
					menuGetter: #processListMenu
					keystrokeAction: #processListKey:from:.
	list2 := (PluggableListMorph
				withModel: model
				listGetter: #stackNameList
				indexGetter: #stackListIndex
				indexSetter: #stackListIndex:)
					mainView: self
					menuGetter: #stackListMenu
					keystrokeAction: #stackListKey:from:.
	upperRow := LayoutMorph newRow.
	upperRow
		addMorph: list1 proportionalWidth: 0.5;
		addAdjusterAndMorph: list2 proportionalWidth: 0.5.
	aTextMorph := (TextModelMorph
				textProvider: model
				textGetter: #selectedMethod) emptyTextDisplayMessage: 'Method source (not selected?)'.
	aTextMorph askBeforeDiscardingEdits: false.
	self layoutMorph
		addMorph: upperRow proportionalHeight: 0.5;
		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.
	self setLabel: 'Process Browser'! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:13:52' prior: 16976786!
                        buildErrorsList
	^ PluggableListMorph
		withModel: model
		listGetter: #errorsList
		indexGetter: #selectedErrorTest
		indexSetter: #debugErrorTest:! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:14:05' prior: 16976795!
          buildFailuresList
	^ PluggableListMorph
		withModel: model
		listGetter: #failuresList
		indexGetter: #selectedFailureTest
		indexSetter: #debugFailureTest:! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 5/14/2024 12:06:30' prior: 16976923!
  buildUpperControls
	| refreshButton filterButton stopButton runOneButton runButton runProfiledButton buttonsRow theTestsList column |

	runOneButton := self buildRunOneButton.
	runButton := self buildRunButton.
	runProfiledButton := self buildRunProfiledButton.	

	refreshButton := self buildRefreshButton.
	filterButton := self buildFilterButton.
	stopButton := self buildStopButton.

	theTestsList := (PluggableListMorphOfMany
				withModel: model
				listGetter: #tests
				primarySelectionGetter: #selectedSuite
				primarySelectionSetter: #selectedSuite:
				listSelectionGetter: #listSelectionAt:
				listSelectionSetter: #listSelectionAt:put:)
					mainView: self
					menuGetter: #listMenu
					keystrokeAction: #listKey:from:.
	theTestsList autoDeselect: false.
	theTestsList color: self textBackgroundColor.

	buttonsRow := LayoutMorph newRow.
	buttonsRow doAdoptWidgetsColor.
	buttonsRow color: self buttonColor.
	buttonsRow
		addMorphs: {runButton. runOneButton. runProfiledButton};
		addMorphs: {refreshButton. filterButton. stopButton}.

	column := LayoutMorph newColumn.
	column
		addMorph: theTestsList proportionalHeight: 1;
		addMorph: buttonsRow fixedHeight: self defaultButtonPaneHeight.

	^ column! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6375-PluggableListsRefactor-p2-JuanVuletich-2024May14-12h02m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6367] on 15 May 2024 at 5:41:01 pm'!
!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 5/15/2024 15:26:15' overrides: 16827435!
                       openMessageListMenu
	"Offer the unshifted selector-list menu"

	^ self messageListMenu popUpInWorld! !
!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 5/15/2024 15:26:42' overrides: 16827441!
                         openMessageListMenu2
	"Offer the additional selector-list menu"

	^ self messageListMenu2 popUpInWorld! !
!BrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/15/2024 15:33:24' overrides: 16827570!
                 classListKey: aChar from: view 
	"Respond to a Command key.  I am a model with a list of classes and a 
	code pane, and I also have a listView that has a list of methods.  The 
	view knows how to get the list and selection."

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $x ifTrue: [^ model removeClass].
	aChar = $t ifTrue: [^ model runClassTests ].
	
	^ self messageListKey: aChar from: view! !
!BrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/15/2024 15:31:14' overrides: 16827588!
                       messageCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $o ifTrue: [ ^ model fileOutMessageCategories ].
	aChar = $t ifTrue: [ ^ model runMessageCategoryTests ].
	aChar = $x ifTrue: [ ^ model removeMessageCategory ].
	aChar = $R ifTrue: [ ^ model renameCategory ].
	aChar = $n ifTrue: [ ^ model addCategory ].
	aChar = $N ifTrue: [ ^ model addExtensionCategory ].
	aChar = $e ifTrue: [ ^ model removeEmptyCategories ].
	aChar = $c ifTrue: [ ^ model categorizeAllUncategorizedMethods ].
	aChar = $a ifTrue: [ ^ model alphabetizeMessageCategories ].
	aChar = $r ifTrue: [ ^ model editMessageCategories ]! !
!MethodSetWindow methodsFor: 'menu building' stamp: 'jmv 5/15/2024 15:26:16' overrides: 16827435!
    openMessageListMenu
	"Offer the unshifted selector-list menu"

	^ self messageListMenu popUpInWorld! !
!MethodSetWindow methodsFor: 'menu building' stamp: 'jmv 5/15/2024 15:26:41' overrides: 16827441!
                       openMessageListMenu2
	"Offer the additional selector-list menu"

	^ self messageListMenu2 popUpInWorld! !
!BrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/15/2024 15:30:12' prior: 16799658 overrides: 16827661!
 systemCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent ].
	aChar = $f ifTrue: [ ^ self findClass ].
	aChar = $x ifTrue: [ ^ model removeSystemCategory ].
	aChar = $t ifTrue: [ ^ model runSystemCategoryTests ].
	aChar = $a ifTrue: [ ^ model addSystemCategory ].
	aChar = $A ifTrue: [ ^ model alphabetizeSystemCategories ].
	aChar = $b ifTrue: [ ^ self openSystemCategoryBrowser ].
	aChar = $B ifTrue: [ ^ self browseAllClasses ].
	aChar = $o ifTrue: [ ^ model fileOutSystemCategory ].
	aChar = $u ifTrue: [ ^ model updateSystemCategories ].
	aChar = $R ifTrue: [ ^ model renameSystemCategory ].
	
	^ self classListKey: aChar from: view.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6376-Browser-SmallRefactor-JuanVuletich-2024May15-17h20m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6367] on 15 May 2024 at 5:20:24 pm'!
!MessageSend methodsFor: 'evaluating' stamp: 'jmv 5/15/2024 15:51:16' overrides: 16914245!
               valueWithPossibleArgument: anObject

	^selector last = $:
		ifFalse: [ receiver perform: selector ]
		ifTrue: [ receiver perform: selector with: anObject ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6377-MessageSend-enh-JuanVuletich-2024May15-17h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6377] on 18 May 2024 at 4:01:29 pm'!
!Morph methodsFor: 'menus' stamp: 'jmv 5/16/2024 09:53:46'!
            getMenu
	^ nil! !
!WorldMorph methodsFor: 'world menu' stamp: 'jmv 5/16/2024 09:55:41' overrides: 50333444!
                    getMenu
	"Put up the world menu, triggered by the passed-in event.
	Perhaps a good place to disable it if needed (by answering nil)"

	^(Preferences at: #worldMenu) getMenuIn: self at: self activeHand.! !
!TaskbarMorph methodsFor: 'menu' stamp: 'jmv 5/16/2024 09:53:01' overrides: 50333444!
                             getMenu

	| menu |
	menu := MenuMorph new defaultTarget: self.
	menu
		addLine;
		add: 'Small Height' action: #scaleSmall;
		add: 'Normal Height' action: #scaleNormal;
		add: 'Scale x 2' action: #scaleX2;
		add: 'Scale x 4' action: #scaleX4.
	^menu! !
!Morph methodsFor: 'event handling' stamp: 'jmv 5/16/2024 09:54:33' prior: 16904468!
               mouseButton2Activity
	"Invoke the menu"
	self getMenu ifNotNil: [ :menu |
		menu popUpInWorld: self world.
		"menu invokeModal" ]! !

TranscriptMorph removeSelector: #mouseButton2Activity!

!methodRemoval: TranscriptMorph #mouseButton2Activity stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
mouseButton2Activity

	"Invoke the menu"
	self getMenu ifNotNil: [ :menu |
		menu popUpInWorld: self world.
		"menu invokeModal" ]!

PluggableScrollPane removeSelector: #mouseButton2Activity!

!methodRemoval: PluggableScrollPane #mouseButton2Activity stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
mouseButton2Activity
	"Invoke the menu"
	self getMenu ifNotNil: [ :menu |
		menu popUpInWorld: self world.
		"menu invokeModal" ]!

PluggableScrollPane removeSelector: #getMenu!

!methodRemoval: PluggableScrollPane #getMenu stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
getMenu
	^ nil!

InnerTextMorph removeSelector: #mouseButton2Activity!

!methodRemoval: InnerTextMorph #mouseButton2Activity stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
mouseButton2Activity
	"Invoke the menu"
	self getMenu ifNotNil: [ :menu |
		menu popUpInWorld: self world.
		"menu invokeModal" ]!

TaskbarMorph removeSelector: #mouseButton2Activity!

!methodRemoval: TaskbarMorph #mouseButton2Activity stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
mouseButton2Activity

	| menu |
	menu := MenuMorph new defaultTarget: self.
	menu
		addLine;
		add: 'Small Height' action: #scaleSmall;
		add: 'Normal Height' action: #scaleNormal;
		add: 'Scale x 2' action: #scaleX2;
		add: 'Scale x 4' action: #scaleX4.
	menu popUpInWorld!

WorldMorph removeSelector: #mouseButton2Activity!

!methodRemoval: WorldMorph #mouseButton2Activity stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
mouseButton2Activity

	^self invokeWorldMenu!

WorldMorph removeSelector: #addCustomMenuItems:hand:!

!methodRemoval: WorldMorph #addCustomMenuItems:hand: stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
addCustomMenuItems: menu hand: aHandMorph 
	"Add morph-specific menu itemns to the menu for the hand"

	super addCustomMenuItems: menu hand: aHandMorph.
	menu 
		add: 'desktop menu...'
		target: self
		action: #invokeWorldMenu.
	menu addLine!

WorldMorph removeSelector: #invokeWorldMenu!

!methodRemoval: WorldMorph #invokeWorldMenu stamp: 'Install-6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:27'!
invokeWorldMenu
	"Put up the world menu, triggered by the passed-in event.
	Perhaps a good place to disable it if needed"

	| menu |
	menu := (Preferences at: #worldMenu) getMenuIn: self at: self activeHand.
	menu popUpInWorld: self!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6378-rightClickMenu-Refactor-JuanVuletich-2024May18-15h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6378] on 19 May 2024 at 3:01:44 pm'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
SystemOrganization removeEmptyCategories!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6379-RemoveEmptyCategories-JuanVuletich-2024May19-15h01m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6379] on 20 May 2024 at 10:58:25 am'!
!ProgressiveTestRunner methodsFor: 'show result - private' stamp: 'jmv 5/20/2024 10:57:59' prior: 16931943!
       showDefects
	
	 | defects |
			
	defects := testResult defects.
	"defects size = 1" false
		ifTrue: [ defects anyOne debug ] 
		ifFalse: [ self openTestResultWindow]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6380-ShowOneFailureTheSameAsMany-JuanVuletich-2024May20-10h56m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6379] on 20 May 2024 at 9:54:15 am'!
!PositionableStream methodsFor: 'positioning' stamp: 'jmv 5/19/2024 19:52:39'!
   matchStart: subCollection
	"Set the access position of the receiver to be past the next occurrence of the subCollection.
	If collection is found, answer match start position. If not, answer nil.
	Answer whether subCollection is found.
	No wildcards, and case does matter."

	| pattern startForNextMatch matchStart p |
	pattern := subCollection readStream.
	startForNextMatch := nil.
	[pattern atEnd] whileFalse: [
		self atEnd ifTrue: [^ nil].
		p := self position.
		(self next) = (pattern next) 
			ifTrue: [
				pattern position = 1 ifTrue: [
					startForNextMatch := self position.
					matchStart := p ]]
			ifFalse: [
				pattern position: 0.
				startForNextMatch ifNotNil: [
					self position: startForNextMatch.
					startForNextMatch := nil ]]].
	^matchStart! !
!PositionableStream methodsFor: 'accessing' stamp: 'jmv 5/19/2024 19:58:28' prior: 16926949!
                             upToAll: aCollection
	"Answer a subcollection from the current access position to the occurrence (if any, but not inclusive) of aCollection. If aCollection is not in the stream, answer the entire rest of the stream."

	| startPos endMatch result |
	startPos := self position.
	(self matchStart: aCollection)
		ifNotNil: [ :matchStart |
			endMatch := self position.
			self position: startPos.
			result := self collectionSpecies streamContents: [ :ws |
				[self position < matchStart] whileTrue: [
					ws nextPut: self next ]].
			self position: endMatch.
			^ result ]
		ifNil: [
			self position: startPos.
			^ self upToEnd ]! !
!PositionableStream methodsFor: 'positioning' stamp: 'jmv 5/19/2024 19:52:59' prior: 16927032!
      match: subCollection
	"Set the access position of the receiver to be past the next occurrence of the subCollection. Answer whether subCollection is found.  No wildcards, and case does matter."

	^(self matchStart: subCollection) notNil
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6381-FileStream-match-fix-JuanVuletich-2024May20-09h53m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6381] on 20 May 2024 at 11:05:54 am'!

ProtocolBrowserWindow removeSelector: #update:!

!methodRemoval: ProtocolBrowserWindow #update: stamp: 'Install-6382-Cleanup-JuanVuletich-2024May20-11h05m-jmv.001.cs.st 6/6/2024 11:42:27'!
update: aSymbol
	"Respond to events of the Dependency Mechanism"
	
	super update: aSymbol.
	aSymbol == #relabel
		ifTrue: [self setLabel: model labelString]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6382-Cleanup-JuanVuletich-2024May20-11h05m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6381] on 20 May 2024 at 11:12:50 am'!
!FileIOAccessor methodsFor: 'actions' stamp: 'jmv 5/19/2024 21:00:26' prior: 16860923!
            copy: fromFileEntry to: toFileEntry 
	| readStr writeStr |
	[readStr := (self privateReadOnlyFile: fromFileEntry) binary.
	writeStr := (self privateForceNewFile: toFileEntry) binary.
	self copyFile: readStr toFile: writeStr]
		ensure: [
			readStr
				ifNotNil: [ :r | r close ].
			writeStr
				ifNotNil: [ :w | w close ]].
	toFileEntry parent invalidateChildren! !
!DirectoryEntry methodsFor: 'actions-directory' stamp: 'jmv 5/19/2024 21:02:23' prior: 16849000!
                delete
	self fileAccessor deleteDirectory: self pathName.
	self invalidateChildren.
	parent ifNotNil: [ parent invalidateChildren ].! !
!DirectoryEntry methodsFor: 'actions-directory' stamp: 'jmv 5/19/2024 21:04:09' prior: 16849011!
                       rename: newName

	| fileEntry directoryEntry |
	fileEntry := self parent // newName.
	fileEntry exists
		ifTrue: [ Error signal: 'There already exists a file named: ', fileEntry printString ].
	directoryEntry := self parent / newName.
	directoryEntry exists
		ifTrue: [ Error signal: 'There already exists a directory named: ', fileEntry printString ].
	self fileAccessor renameDirectory: self pathName to: directoryEntry pathName.
	self name: newName.
	self parent 	invalidateChildren.! !
!DirectoryEntry methodsFor: 'private' stamp: 'jmv 5/19/2024 21:01:01' prior: 16849028!
                               assureExistenceDirNamed: localName
	
	localName isEmpty ifTrue: [ ^self ]. "Assumed to exist"
	(self fileAccessor fileOrDirectoryExists: localName in: self) ifTrue: [^ self]. "exists"

	"otherwise check parent first and then create local dir"
	self parent ifNotNil: [:p | p assureExistenceDirNamed: self name].

	self fileAccessor createDirectory: (self / localName) pathName.
	self invalidateChildren! !
!DirectoryEntry methodsFor: 'accessing' stamp: 'jmv 5/20/2024 11:10:02' prior: 16849126!
                  children
	(lastChildrenSync isNil or: [
		"This message may be sent many times. Don't call the primitives too often.
		Any time we invalidate children ourselves (by adding / removing / renaming entries) we send #invalidateChildren.
		Still, if directory contents are modified elsewhere (and especially outside Cuis), there will be a delay until we see those changes."
		(DateAndTime now - lastChildrenSync) totalSeconds > 2]) ifTrue: [
			children := nil ].
	children ifNil: [self initChildren].
	^children! !
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 5/19/2024 20:59:36' prior: 16860591!
           delete
	self fileAccessor deleteFile: self pathName.
	self parent invalidateChildren.! !
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 5/19/2024 20:59:40' prior: 16860610!
                rename: newName

	| fileEntry directoryEntry |
	fileEntry := self parent // newName.
	fileEntry exists
		ifTrue: [ Error signal: 'There already exists a file named: ', fileEntry printString ].
	directoryEntry := self parent / newName.
	directoryEntry exists
		ifTrue: [ Error signal: 'There already exists a directory named: ', fileEntry printString ].
	self fileAccessor rename: self pathName to: fileEntry pathName.
	self name: newName.
	self parent invalidateChildren.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6383-DirectoryEntry-invalidateChildren-whenNeeded-JuanVuletich-2024May20-11h05m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6379] on 20 May 2024 at 10:12:52 am'!

ProtocolBrowser removeSelector: #selectedClassOrMetaClass!

!methodRemoval: ProtocolBrowser #selectedClassOrMetaClass stamp: 'Install-6384-ProtocolBrowser-fix-BernhardPieber-2024May20-10h09m-bp.001.cs.st 6/6/2024 11:42:28'!
selectedClassOrMetaClass
	"Answer the class or metaclass that is currently selected. 
	Answer base if no selection exists."
	| className |
	className := (self selectiveClassListIndex = 0) 
					ifTrue:  [self selectiveClassList last]
					ifFalse:  [self selectiveClassList at: self selectiveClassListIndex].
	^ Smalltalk at: ((className findTokens: ' ') first asSymbol)!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6384-ProtocolBrowser-fix-BernhardPieber-2024May20-10h09m-bp.001.cs.st----!

'From Cuis7.1 [latest update: #6380] on 20 May 2024 at 11:07:10 am'!
!ProtocolBrowser methodsFor: 'private' stamp: 'bp 5/20/2024 11:05:55' prior: 16932314!
   hierarchyForClass: aClass
	"Set the class hierarchy for the list pane"
	| tab |

	selectiveClassList := OrderedCollection new.
	tab := ''.
	aClass withAllSuperclasses reverse do: [:ea | 
		selectiveClassList add: tab , ea name.
		tab := tab , '  '].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6385-ProtocolBrowser-enh-BernhardPieber-2024May20-11h05m-bp.001.cs.st----!

'From Cuis7.1 [latest update: #6384] on 20 May 2024 at 11:50:52 am'!
!Browser methodsFor: 'class list' stamp: 'jmv 5/20/2024 11:48:56' prior: 16797683!
                classListIndex: anInteger 
	"Set anInteger to be the index of the current class selection."

	| className recent canSelectClass classList prevSelectedMessage |

	classList := self classList.
	canSelectClass := classList isInBounds: anInteger.
	selectedClassName := canSelectClass ifTrue: [	| newClassName |
		newClassName := classList at: anInteger ifAbsent: [ nil ].
		newClassName := newClassName ifNotNil: [newClassName withoutLeadingBlanks asSymbol].
		newClassName ].
	self setClassOrganizer.
	prevSelectedMessage := selectedMessage.
	selectedMessage := nil.
	
	self classCommentIndicated ifFalse: [
		self editSelection: (canSelectClass
			ifTrue: [#editClass]
			ifFalse: [ metaClassIndicated | selectedSystemCategory isNil
				ifTrue: [#none]
				ifFalse: [#newClass]])].

	self selectedClass ifNotNil: [
		recent := self class recentClasses.
		className := self selectedClass name.
		(recent includes: className) ifTrue: [recent remove: className].
		recent addFirst: className.
		recent size > 16 ifTrue: [recent removeLast]].

	"Clear selectedMessageCategory if there is no match in the new list of categories"
	(self messageCategoryList indexOf: selectedMessageCategory) = 0 ifTrue: [
		selectedMessageCategory := nil].
		
	"We have to refresh the class list if somebody wants to select a class that does not exist anymore - Hernan"
	anInteger > classList size ifTrue: [ self changed: #classList ].
	self changed: #classSelectionChanged.
	self changed: #classCommentText.
	self changed: #classListIndex.	"update my selection"
	self changed: #messageCategoryList.
	self changed: #messageList.
	self changed: #relabel.
	self acceptedContentsChanged.
	self setSelector: prevSelectedMessage.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6386-KeepSelectedMessageWhenSelectingClass-JuanVuletich-2024May20-11h48m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6386] on 20 May 2024 at 12:22:20 pm'!
!ProtocolBrowserWindow class methodsFor: 'as yet unclassified' stamp: 'jmv 5/20/2024 12:19:34' overrides: 16902303!
                    openFullProtocolForClass: aClass
	"Create and schedule a browser for the entire protocol of the class."
	"
	ProtocolBrowserWindow openFullProtocolForClass: Number.
	"

	| aPBrowser label |

	aPBrowser := ProtocolBrowser new on: aClass.
	label := 'Entire protocol of: ', aClass name.

	^self open: aPBrowser label: label! !
!BrowserWindow methodsFor: 'menu building' stamp: 'jmv 5/20/2024 12:13:05' prior: 16799559!
 messageListMenu2
	"Fill aMenu with the items appropriate when the shift key is held down"

	self flag: #assumesKeyboardShortcuts.
	^DynamicMenuBuilder 
		buildTitled: 'Message List' 
		targeting: self 
		collectingMenuOptionsWith: #messageListMenu2Options 
		changingThemWith: [ :options |
			self addExtraMenu2ItemsTo: options.
			model canShowMultipleMessageCategories ifTrue: [	
				options add: `{ 
					#itemGroup 			-> 		40.
					#itemOrder 			-> 		45.		
					#label 			-> 		'show category (C)'.
					#object 			-> 		#model.
					#selector 			-> 		#showHomeCategory.
					#icon 			-> 		#packageIcon
				} asDictionary` ]].
! !
!BrowserWindow class methodsFor: 'browser menues' stamp: 'jmv 5/20/2024 12:12:25' prior: 16800260!
    messageListMenu2Options
	
	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'toggle diffing (D)'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleDiffing.
				#icon 			-> 		#switchIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of sent messages'.
				#selector 			-> 		#browseAllMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'local senders of...'.
				#selector 			-> 		#browseLocalSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'local implementors of...'.
				#selector 			-> 		#browseLocalImplementors.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'sample instance'.
				#selector 			-> 		#makeSampleInstance.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect instances'.
				#selector 			-> 		#inspectInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inspect subinstances'.
				#selector 			-> 		#inspectSubInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'change category...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		50.
				#label 			-> 		'change sets with this method'.
				#selector 			-> 		#findMethodInChangeSets.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		60.
				#label 			-> 		'revert to previous version'.
				#object 			-> 		#model.
				#selector 			-> 		#revertToPreviousVersion.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu.
				#icon 			-> 		#listAddIcon
			} asDictionary.			
		}`! !
!MethodSetWindow methodsFor: 'menu building' stamp: 'jmv 5/20/2024 12:12:46' prior: 16902135!
           messageListMenu2
	"Fill aMenu with the items appropriate when the shift key is held down"

	self flag: #assumesKeyboardShortcuts.
	^DynamicMenuBuilder 
		buildTitled: 'Message Set' 
		targeting: self 
		collectingMenuOptionsWith: #messageSetMenu2Options 
		changingThemWith: [ :options |
			self addExtraMenu2ItemsTo: options.
			model canShowMultipleMessageCategories ifTrue: [	
				options add: `{ 
					#itemGroup 			-> 		40.
					#itemOrder 			-> 		45.		
					#label 			-> 		'show category (C)'.
					#object 			-> 		#model.
					#selector 			-> 		#showHomeCategory.
					#icon 			-> 		#packageIcon
				} asDictionary` ]].

	! !
!MethodSetWindow class methodsFor: 'browser menues' stamp: 'jmv 5/20/2024 12:12:34' prior: 16902386!
  messageSetMenu2Options
	
	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'toggle diffing (D)'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleDiffing.
				#icon 			-> 		#switchIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of sent messages'.
				#selector 			-> 		#browseAllMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'local senders of...'.
				#selector 			-> 		#browseLocalSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'local implementors of...'.
				#selector 			-> 		#browseLocalImplementors.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'sample instance'.
				#selector 			-> 		#makeSampleInstance.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect instances'.
				#selector 			-> 		#inspectInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inspect subinstances'.
				#selector 			-> 		#inspectSubInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'change category...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		50.
				#label 			-> 		'change sets with this method'.
				#selector 			-> 		#findMethodInChangeSets.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		60.
				#label 			-> 		'revert to previous version'.
				#object 			-> 		#model.
				#selector 			-> 		#revertToPreviousVersion.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu.
				#icon 			-> 		#listAddIcon
			} asDictionary.			
		}`! !

MethodSetWindow class removeSelector: #openSubProtocolForClass:!

!methodRemoval: MethodSetWindow class #openSubProtocolForClass: stamp: 'Install-6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st 6/6/2024 11:42:28'!
openSubProtocolForClass: aClass
	"Create and schedule a browser for the entire protocol of the class."
	"
	ProtocolBrowserWindow openSubProtocolForClass: Number.
	"

	| aPBrowser label |

	aPBrowser := ProtocolBrowser new onSubProtocolOf: aClass.
	label := 'Sub-protocol of: ', aClass name.

	^self open: aPBrowser label: label!

MethodSetWindow class removeSelector: #openFullProtocolForClass:!

!methodRemoval: MethodSetWindow class #openFullProtocolForClass: stamp: 'Install-6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st 6/6/2024 11:42:28'!
openFullProtocolForClass: aClass
	"Create and schedule a browser for the entire protocol of the class."
	"
	ProtocolBrowserWindow openFullProtocolForClass: Number.
	"

	| aPBrowser label |

	aPBrowser := ProtocolBrowser new on: aClass.
	label := 'Entire protocol of: ', aClass name.

	^self open: aPBrowser label: label!

CodeWindow removeSelector: #browseProtocol!

!methodRemoval: CodeWindow #browseProtocol stamp: 'Install-6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st 6/6/2024 11:42:28'!
browseProtocol
	"Create and schedule a new protocol browser on the currently selected class or meta."
	| aPBrowser label |
	model selectedClassOrMetaClass ifNotNil: [ :classOrMetaclass |
		aPBrowser := ProtocolBrowser new onSubProtocolOf: classOrMetaclass.
		label :='Sub-protocol of: ', classOrMetaclass name.
		ProtocolBrowserWindow open: aPBrowser label: label ]!

ProtocolBrowser removeSelector: #onSubProtocolOf:!

!methodRemoval: ProtocolBrowser #onSubProtocolOf: stamp: 'Install-6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st 6/6/2024 11:42:28'!
onSubProtocolOf: aClass
	"Initialize with the entire protocol for the class, aClass,
		but excluding those inherited from Object."
	| selectors |
	selectors := Set new.
	(aClass withAllSuperclassesPreviousTo: Object)
		do: [ :each | selectors addAll: each selectors ].
	self
		initListFrom: selectors asArray sort
		highlighting: aClass.!

MethodSet class removeSelector: #open!

!methodRemoval: MethodSet class #open stamp: 'Install-6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st 6/6/2024 11:42:28'!
open
	^ MethodSetWindow openFullProtocolForClass: Object!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6387-ProtocolBrowser-cleanup-JuanVuletich-2024May20-12h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6387] on 22 May 2024 at 9:11:18 am'!
!PluggableListMorph methodsFor: 'model access' stamp: 'jmv 5/22/2024 09:10:26'!
                           doKeystrokeAction: aChar
	| args |
	keystrokeActionSelector ifNil: [^false].
	args := keystrokeActionSelector numArgs.
	args = 1 ifTrue: [
		mainView perform: keystrokeActionSelector with: aChar.
		^true ].
	args = 2
		ifTrue: [
			mainView
				perform: keystrokeActionSelector
				with: aChar
				with: self.
			^true ].
	^self error: 'keystrokeActionSelector must be a 1- or 2-keyword symbol'.
! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 5/21/2024 16:20:01' prior: 16923412 overrides: 16924561!
  keyStroke: aKeyboardEvent 
	"Process keys"
	| aCharacter |
	(self focusKeyboardFor: aKeyboardEvent) ifTrue: [ ^ self ].
	
	(self arrowKey: aKeyboardEvent) ifNotNil: [ ^ self ].
	
	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	aKeyboardEvent isDelete ifTrue: [ "delete key" ^ self deleteAction ].
	aKeyboardEvent isBackspace ifTrue: [ "backspace key" ^ self deleteAction ].
	
	aCharacter := aKeyboardEvent keyCharacter.
	
	aKeyboardEvent anyModifierKeyPressed
		ifTrue: [
			(self doKeystrokeAction: aCharacter)
				ifTrue: [ ^self ]].
	^ self keyboardSearch: aCharacter! !

PluggableListMorph removeSelector: #keystrokeAction:!

!methodRemoval: PluggableListMorph #keystrokeAction: stamp: 'Install-6388-AvoidFalsePolymorphism-JuanVuletich-2024May22-09h09m-jmv.001.cs.st 6/6/2024 11:42:28'!
keystrokeAction: aChar 
	| args |
	keystrokeActionSelector ifNil: [^false].
	args := keystrokeActionSelector numArgs.
	args = 1 ifTrue: [
		mainView perform: keystrokeActionSelector with: aChar.
		^true ].
	args = 2 
		ifTrue: [
			mainView 
				perform: keystrokeActionSelector
				with: aChar
				with: self.
			^true ].
	^self error: 'keystrokeActionSelector must be a 1- or 2-keyword symbol'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6388-AvoidFalsePolymorphism-JuanVuletich-2024May22-09h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6391] on 22 May 2024 at 1:08:08 pm'!

MethodSet subclass: #ProtocolBrowser
	instanceVariableNames: 'baseClass selectiveClassList selectiveClassListIndex selectedName exclude categoriesList categoriesListIndex '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Browser'!

!classDefinition: #ProtocolBrowser category: #'Tools-Browser' stamp: 'Install-6389-ProtocolBrowser-withMessageCategories-MarianoMontone-2024May22-13h04m-MM.001.cs.st 6/6/2024 11:42:28'!
MethodSet subclass: #ProtocolBrowser
	instanceVariableNames: 'baseClass selectiveClassList selectiveClassListIndex selectedName exclude categoriesList categoriesListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Browser'!
!ProtocolBrowserWindow commentStamp: 'MM 5/22/2024 13:05:42' prior: 16932436!
       A view of the messages available to a class from itself upward through the class hierarchy. The viewed protocol can be pruned by selecting a superclass in the class hierarchy pane.

ProtocolBrowserWindow openFullProtocolForClass: Number.!
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 21:18:44'!
          categoriesList
	
	^ categoriesList! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 22:06:52'!
                   categoriesListIndex
	"Answer the value of categoriesListIndex"

	^ categoriesListIndex ifNil: [0] ifNotNil: [categoriesListIndex]! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/21/2024 10:38:38'!
                    categoriesListIndex: anIndex
	"Set the value of categoriesListIndex"

	categoriesListIndex := anIndex isZero ifTrue:  [nil] ifFalse: [anIndex].
	self changed: #categoriesListIndex. "update my selection"
	self changed: #messageList! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 22:04:08' overrides: 16901299!
                           messageList

	^ self selectedCategory ifNil: [ super messageList]
		ifNotNil: [:category |
			messageList select: [:methodRef | methodRef category == category]]! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 21:59:06'!
                     selectedCategory

	^ categoriesListIndex ifNotNil: [categoriesList at: categoriesListIndex]! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 21:55:31'!
                          updateCategoriesList

	"Update the list of categories"
	
	| categories |
	
	categories := Set new.
	messageList do: [:methodRef | categories add: methodRef category].
	
	categoriesList := categories asSortedCollection.
	
	self changed: #categoriesList! !
!ProtocolBrowser methodsFor: 'as yet unclassified' stamp: 'MM 5/21/2024 10:33:44'!
              selectedMessageName: aSelector
	"Make the given selector be the selected message name"

	| anIndex |
	anIndex := self messageList indexOf: aSelector.
	anIndex > 0 ifTrue:
		[self messageListIndex: anIndex]! !
!ProtocolBrowserWindow methodsFor: 'GUI building' stamp: 'MM 5/21/2024 09:44:57'!
                             buildCategoriesList
	"Define the message categories list pane"

	^ PluggableListMorph
		withModel: model
		listGetter: #categoriesList
		indexGetter: #categoriesListIndex
		indexSetter: #categoriesListIndex:! !
!ProtocolBrowserWindow methodsFor: 'as yet unclassified' stamp: 'MM 5/21/2024 10:34:49' overrides: 16902158!
browseCategoryOfCurrentMethod

	model categoryOfCurrentMethod ifNotNil: [:category| |catIndex selectedMessage|
		selectedMessage := model selectedMessageName.
		catIndex := model categoriesList indexOf: category.
		model categoriesListIndex: catIndex.
		model selectedMessageName: selectedMessage]! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 21:45:15' prior: 16932345!
                            on: aClass
	"Initialize the protocol for the class, aClass."
	"Optionally, the upper part of the protocol is excluded."
	| selectors |
	
	selectors := Set new.
	aClass withAllSuperclasses do: [ :each |
		(exclude includes: each name) ifFalse: [selectors addAll: each selectors]].
	self
		initListFrom: selectors asArray sort
		highlighting: aClass.
	self updateCategoriesList.! !
!ProtocolBrowser methodsFor: 'private' stamp: 'MM 5/20/2024 22:24:41' prior: 16932402!
             selectiveClassListIndex: anObject
	"Set the value of selectiveClassListIndex"

	selectiveClassListIndex := anObject.
	categoriesListIndex := nil.
	self protocolFor: selectiveClassListIndex
! !
!ProtocolBrowserWindow methodsFor: 'GUI building' stamp: 'MM 5/20/2024 21:22:51' prior: 16932445 overrides: 16902025!
         buildMorphicWindow
	"Answer a morphic window that can display the receiver with a class hierarchy"
	| topRow |

	topRow := LayoutMorph newRow.
	topRow 
		addMorph: self buildSelectiveClassList proportionalWidth: 0.25;
		addAdjusterMorph;
		addMorph: self buildCategoriesList proportionalWidth: 0.25;
		addAdjusterMorph;
		addMorph: self buildMorphicMessageList proportionalWidth: 0.5.
	self layoutMorph
		addMorph: topRow proportionalHeight: 0.2;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.8.
	model changed: #editSelection! !

MethodSet subclass: #ProtocolBrowser
	instanceVariableNames: 'baseClass selectiveClassList selectiveClassListIndex selectedName exclude categoriesList categoriesListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Browser'!

!classDefinition: #ProtocolBrowser category: #'Tools-Browser' stamp: 'Install-6389-ProtocolBrowser-withMessageCategories-MarianoMontone-2024May22-13h04m-MM.001.cs.st 6/6/2024 11:42:28'!
MethodSet subclass: #ProtocolBrowser
	instanceVariableNames: 'baseClass selectiveClassList selectiveClassListIndex selectedName exclude categoriesList categoriesListIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Browser'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6389-ProtocolBrowser-withMessageCategories-MarianoMontone-2024May22-13h04m-MM.001.cs.st----!

'From Cuis7.1 [latest update: #6391] on 22 May 2024 at 1:30:47 pm'!
!ProtocolBrowser methodsFor: 'private' stamp: 'jmv 5/22/2024 13:29:02' prior: 50334407!
          selectiveClassListIndex: anObject
	"Set the value of selectiveClassListIndex"

	| hadSelectedCategoryFor |
	selectiveClassListIndex := anObject.
	hadSelectedCategoryFor := categoriesListIndex notNil ifTrue: [selectedMessage].
	categoriesListIndex := nil.
	self protocolFor: selectiveClassListIndex.
	hadSelectedCategoryFor notNil ifTrue: [
		self categoriesListIndex: (categoriesList indexOf: selectedMessage category) ].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6390-ProtocolBrowser-KeepCategorySelection-JuanVuletich-2024May22-13h08m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6388] on 22 May 2024 at 8:22:00 pm'!
!MethodInCallStackToBecomeInvalid methodsFor: 'exception handling' stamp: 'jmv 5/22/2024 20:18:03' prior: 16899713 overrides: 16856165!
                               defaultAction
	"defaultAction aborts the become or clas reshape.
	See references to MethodInCallStackToBecomeInvalid.
	To go ahead with the become or class reshape, do something like:
	[
		BoxedMorph subclass: #PluggableMorph
			instanceVariableNames: 'model menuNshortcutsKey newIvarThatBreaksRunningMethods'
			classVariableNames: ''
			poolDictionaries: ''
			category: 'Morphic-Widgets'.
	] on: MethodInCallStackToBecomeInvalid do: [ :ex | ex resume: true ]
	"
	self resume: false! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6391-MethodInCallStackToBecomeInvalid-defaultAction-JuanVuletich-2024May22-20h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6397] on 22 May 2024 at 8:50:32 pm'!
!ProtoObject methodsFor: 'system primitives' stamp: 'jmv 5/22/2024 20:50:10' prior: 16932123!
  become: otherObject 
	"Primitive. Swap the object pointers of the receiver and the argument.
	All variables in the entire system that used to point to the 
	receiver now point to the argument, and vice-versa.
	Fails if either object is a SmallInteger"

	| selfMethod otherObjectMethod selector contextReceiver errorMessage |
	self class == otherObject class ifFalse: [
		Processor 
			processesDo: [ :p | ] withStackFramestDo: [ :process :context |
				contextReceiver := context receiver.
				(self == contextReceiver or: [ otherObject == contextReceiver ]) ifTrue: [
					selector := context method selector.
					selfMethod := self class lookupSelector: selector.
					otherObjectMethod := otherObject class lookupSelector: selector.
					selfMethod = otherObjectMethod ifFalse: [
						errorMessage := contextReceiver class name, ' has some instance running #', selector, 
							'. This CompiledMethod would become invalid.'.
						errorMessage print.
						MethodInCallStackToBecomeInvalid signal ifFalse: [
							'#become: aborted.' print.
							Error signal: errorMessage, ' #become: aborted. Please see Transcript.'.
							^nil ]]]]
			runningProcessSearchStart: thisContext sender.
		].
	{ self } elementsExchangeIdentityWith: { otherObject }! !
!Object methodsFor: 'system primitives' stamp: 'jmv 5/22/2024 20:49:54' prior: 16915106!
                            becomeForward: otherObject 
	"Primitive. All variables in the entire system that used to point
	to the receiver now point to the argument.
	Fails if either argument is a SmallInteger.

	Please see comment at #elementsForwardIdentityTo:
	"

	| newMethod oldMethod selector errorMessage |
	self class == otherObject class ifFalse: [
		Processor 
			processesDo: [ :p | ] withStackFramestDo: [ :process :context |
				self == context receiver ifTrue: [
					selector := context method selector.
					oldMethod := self class lookupSelector: selector.
					newMethod := otherObject class lookupSelector: selector.
					oldMethod = newMethod ifFalse: [
						errorMessage := self class name, ' has some instance running #', selector, 
							'. This CompiledMethod would become invalid.'.
						errorMessage print.
						MethodInCallStackToBecomeInvalid signal ifFalse: [
							'#becomeForward: aborted.' print.
							Error signal: errorMessage, ' #becomeForward: aborted. Please see Transcript.'.
							^nil ]]]]
			runningProcessSearchStart: thisContext sender.
		].
	{ self } elementsForwardIdentityTo: { otherObject }! !
!Object methodsFor: 'system primitives' stamp: 'jmv 5/22/2024 20:50:04' prior: 16915138!
     becomeForward: otherObject copyHash: copyHash
	"Primitive. All variables in the entire system that used to point to the receiver now point to the argument.
	If copyHash is true, the argument's identity hash bits will be set to those of the receiver.
	Fails if either argument is a SmallInteger.

	Please see comment at #elementsForwardIdentityTo:copyHash:
	"

	| newMethod oldMethod selector errorMessage |
	self class == otherObject class ifFalse: [
		Processor 
			processesDo: [ :p | ] withStackFramestDo: [ :proces :context |
				self == context receiver ifTrue: [
					selector := context method selector.
					oldMethod := self class lookupSelector: selector.
					newMethod := otherObject class lookupSelector: selector.
					oldMethod = newMethod ifFalse: [
						errorMessage := self class name, ' has some instance running #', selector, 
							'. This CompiledMethod would become invalid.'.
						errorMessage print.
						MethodInCallStackToBecomeInvalid signal ifFalse: [
							'#becomeForward:copyHash: aborted.' print.
							Error signal: errorMessage, ' #becomeForward:copyHash: aborted. Please see Transcript.'.
							^nil ]]]]
			runningProcessSearchStart: thisContext sender.
		].
	{ self }
		elementsForwardIdentityTo: { otherObject }
		copyHash: copyHash! !
!ClassDescription methodsFor: 'initialization' stamp: 'jmv 5/22/2024 20:45:28' prior: 16819796!
                              canUpdateFrom: oldClass
	"If some compiled method that will become invalid is currently being executed,
	the shape conversion of instances is extremely insecure.
	Answer if migration of instances looks safe"
	| answer newMethod oldMethod selector newActualClass oldActualClass |
	answer := true.
	Processor 
		processesDo: [ :p | ]
		withStackFramestDo: [ :process :context |
			(context receiver isKindOf: oldClass) ifTrue: [
				oldActualClass := context receiver class.
				self withAllSubclassesDo: [ :c |
					c name = oldActualClass name ifTrue: [
						newActualClass := c ]].
				selector := context method selector.
				oldMethod := oldActualClass lookupSelector: selector.
				newMethod := newActualClass lookupSelector: selector.
				oldMethod = newMethod ifFalse: [
					('Class reshaping: ', context receiver class name, ' has some instance running #', selector, '. This CompiledMethod would become invalid.') print.
					answer := false ].
				]]
		runningProcessSearchStart: nil.
	^answer! !
!ClassBuilder methodsFor: 'class definition' stamp: 'jmv 5/22/2024 20:45:17' prior: 16816303!
                   recompile: force from: oldClass to: newClass mutate: forceMutation
	"Do the necessary recompilation after changing oldClass to newClass.
	If required (e.g., when oldClass ~~ newClass) mutate oldClass to newClass
	and all its subclasses. If forceMutation is true force a mutation even
	if oldClass and newClass are the same."

	| compilationSuccess compilationErrorDescription |
	oldClass
		ifNil: [^ newClass].

	(newClass == oldClass and:[force not and:[forceMutation not]]) ifTrue:[
		^newClass].

	currentClassIndex := 0.
	maxClassIndex := oldClass withAllSubclasses size.

	(oldClass == newClass and:[forceMutation not]) ifTrue:[
		"Recompile from newClass without mutating"
		self informUserDuring:[
			newClass withAllSubclassesDo: [ :cl |
				self showProgressFor: cl.
				cl compileAll]].
		^newClass].
	"Recompile oldClass to newClass"
	self informUserDuring: [
		compilationSuccess := true.
		[self createHierarchy: oldClass to: newClass] on: Error do: [ :exception |
			"If compilation failed, don't continue!!"
			compilationErrorDescription := exception printString.
			compilationSuccess := false ].
	].

	compilationSuccess ifFalse: [
		oldClass superclass removeSubclass: newClass.
		Smalltalk garbageCollect.
		Error signal: compilationErrorDescription, '. Please see Transcript.'.
		^ nil ].

	(newClass canUpdateFrom: oldClass) ifFalse: [
		MethodInCallStackToBecomeInvalid signal ifFalse: [
			oldClass superclass removeSubclass: newClass.
			Smalltalk garbageCollect.
			'Class reshaping aborted.' print.
			Error signal: oldClass name, 
				' has some subInstance running a CompiledMethod that would become invalid. Please see Transcript.'.
			^nil ]].

	"Mutate oldClass to newClass"
	self informUserDuring: [
		self mutateInstances: oldClass to: newClass.
	].
	^oldClass "now mutated to newClass"! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6392-betterHandlingOf-MethodInCallStackToBecomeInvalid-JuanVuletich-2024May22-20h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6392] on 24 May 2024 at 1:03:52 pm'!
!TestCase methodsFor: 'setUp/tearDown' stamp: 'jmv 5/24/2024 10:43:44' overrides: 16932029!
         initialize
	assertCount := 0.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6393-TestCase-enh-JuanVuletich-2024May24-13h03m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6393] on 24 May 2024 at 3:31:30 pm'!
!LargePositiveInteger methodsFor: 'testing' stamp: 'ul 1/22/2012 23:56' overrides: 16886385!
            isPowerOfTwo
	"Return true if the receiver is an integral power of two. Optimized version."
	
	| size |
	1 to: (size := self digitLength) do: [ :index |
		| digit |
		(digit := self digitAt: index) = 0 ifFalse: [ 
			^size = index and: [ digit isPowerOfTwo ] ] ].
	^false! !
!LargeNegativeInteger methodsFor: 'testing' stamp: 'ul 1/22/2012 23:57' overrides: 50334762!
                isPowerOfTwo
	"Return true if the receiver is an integral power of two. Optimized version."
	
	^false! !
!Integer methodsFor: 'testing' stamp: 'ul 1/22/2012 23:56' prior: 16886385!
           isPowerOfTwo
	"Return true if the receiver is an integral power of two."
	
	^self > 0 and: [ (self bitAnd: self - 1) = 0 ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6394-isPowerOfTwo-fix-performanceEnhancements-JuanVuletich-2024May24-15h30m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6392] on 24 May 2024 at 1:05:54 pm'!
!Integer methodsFor: 'mathematical functions' stamp: 'nice 5/4/2019 00:26' prior: 16885855!
                    nthRootRounded: aPositiveInteger
    "Answer the integer nearest the nth root of the receiver.
http://stackoverflow.com/questions/39794338/precise-nth-root
http://smallissimo.blogspot.com.ar/2011/09/clarifying-and-optimizing.html
http://smallissimo.blogspot.com.ar/2011/09/reviewing-fraction-asfloat.html
"
	| guess |
	self = 0 ifTrue: [^0].
	self negative
		ifTrue: [
			aPositiveInteger even ifTrue: [
				^DomainError signal: 'Negative numbers don''t have even roots.' ].
			^(self negated nthRootRounded: aPositiveInteger) negated ].
	guess := self nthRootTruncated: aPositiveInteger.
	^(2 * guess + 1 raisedToInteger: aPositiveInteger) < (self bitShift: aPositiveInteger)
		ifTrue: [guess + 1]
		ifFalse: [guess].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6395-nthRootRounded-fix-NicolasCellier-2024May24-13h05m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6395] on 24 May 2024 at 3:35:05 pm'!
!Number methodsFor: 'mathematical functions' stamp: 'jmv 5/24/2024 12:16:10' prior: 16912678!
                 log: aNumber
	"Answer the log base aNumber of the receiver.
	Note 1:
		Answer an Integer number if receiver and base are both integer (receiver might also be a fraction of the form 1/Integer), and the correct answer is integer too.
	Note2:
		There are several implementors of #log:, #log, #log2 and #ln in the Number hierarchy. Behavior is not consistent when receiver is a negative value. Some implementors answer Float nan, others raise a DomainError. Another possibility would be to answer the correct Complex number.
		It would be good to pick one and make it consistently followed.
	"

	(self <= 0 and: [ aNumber isFloat not])
		ifTrue: [DomainError signal: 'logarithm is only defined for x > 0'].
	aNumber = 2 ifTrue: [^self log2].
	aNumber isPowerOfTwo ifTrue: [^self log2 / aNumber log2].
	^self asFloat log: aNumber! !
!Integer methodsFor: 'mathematical functions' stamp: 'jmv 5/24/2024 12:18:15' prior: 16885796 overrides: 50334830!
                 log: aNumber
	"Answer the log base aNumber of the receiver.
	(3 raisedTo: 215) log: 3
	((3 raisedTo: 215)+(3 raisedTo: 213)) log: 3
	Answers an integer number if appropriate. Doing this is somewhat expensive. If you care about performance and not about using Floats, do 'aNumber asFloat log: another'.
	"
	| superAnswer roundedAnswer |
	self <= 0 ifTrue: [^DomainError signal: 'logarithm is only defined for x > 0'].
	superAnswer := super log: aNumber.
	superAnswer isFloat ifTrue: [
		roundedAnswer := superAnswer rounded.
		(aNumber raisedToInteger: roundedAnswer) = self
			ifTrue: [ ^roundedAnswer ]].
	^superAnswer.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6396-log-allowForIntegerAnswer-JuanVuletich-2024May24-15h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6395] on 24 May 2024 at 3:39:16 pm'!
!LargePositiveInteger methodsFor: 'mathematical functions' stamp: 'nice 7/15/2011 14:06' overrides: 16885753!
                              ln
	"This function is defined because super ln might overflow."
	| res h |
	res := super ln.
	res isFinite ifTrue: [^res].
	h := self highBit.
	^2 ln * h + (self / (1 << h)) asFloat ln! !
!LargeNegativeInteger methodsFor: 'mathematical functions' stamp: 'nice 9/22/2013 00:59' overrides: 50334892!
                      ln
	^DomainError signal: 'ln is only defined for x > 0'! !
!Number methodsFor: 'mathematical functions' stamp: 'jmv 5/24/2024 12:09:43' prior: 16912660!
       ln
	"Answer the natural log of the receiver.
	See comment at #log:"

	self <= 0 ifTrue: [DomainError signal: 'ln is only defined for x > 0'].
	^self asFloat ln! !
!Fraction methodsFor: 'mathematical functions' stamp: 'nice 11/1/2011 18:09' prior: 16870477 overrides: 50334907!
           ln
	"This function is defined because super ln might overflow."
	| res |
	self <= 0 ifTrue: [DomainError signal: 'ln is only defined for x > 0'].
	"Test self < 1 before converting to float in order to avoid precision loss due to gradual underflow."
	numerator < denominator ifTrue: [^self reciprocal ln negated].
	res := super ln.
	res isFinite ifTrue: [^res].
	^numerator ln - denominator ln! !

Integer removeSelector: #ln!

!methodRemoval: Integer #ln stamp: 'Install-6397-ln-fixes-NicolasCellier-2024May24-15h35m-jmv.001.cs.st 6/6/2024 11:42:28'!
ln
	"This function is defined because super ln might overflow."
	| res h |
	self <= 0 ifTrue: [^DomainError signal: 'ln is only defined for x > 0'].
	res := super ln.
	res isFinite ifTrue: [^res].
	h := self highBit.
	^2 ln * h + (self / (1 << h)) asFloat ln!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6397-ln-fixes-NicolasCellier-2024May24-15h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6395] on 24 May 2024 at 3:43:08 pm'!
!LargePositiveInteger methodsFor: 'mathematical functions' stamp: 'nice 2/8/2019 18:26' overrides: 16885785!
                    log2
	"This function is defined because super log2 might overflow."
	| res h |
	res := super log2.
	res isFinite ifTrue: [^res].
	h := self highBit.
	^h + (self / (1 << h)) asFloat log2! !
!LargeNegativeInteger methodsFor: 'mathematical functions' stamp: 'nice 2/8/2019 18:24' overrides: 50334953!
                      log2
	^DomainError signal: 'log2 is only defined for x > 0'! !
!Number methodsFor: 'mathematical functions' stamp: 'jmv 5/24/2024 11:48:32' prior: 16912672!
   log2
	"Answer the base-2 logarithm of the receiver.
	See comment at #log:"

	self <= 0 ifTrue: [DomainError signal: 'log2 is only defined for x > 0'].
	^self asFloat log2! !
!Float methodsFor: 'mathematical functions' stamp: 'nice 3/4/2021 21:34' prior: 16864251 overrides: 50334968!
    log2
	"Answer the base 2 logarithm of the receiver.
	Arrange to answer exact result in case of exact power of 2."

	|  s  |
	 s := self significand.
	^s > 1.3333333333333333
		ifTrue: [(0.5 * s) ln / Ln2 + (1 + self exponent)]
		ifFalse: [s ln / Ln2 + self exponent]! !
!Fraction methodsFor: 'mathematical functions' stamp: 'nice 2/5/2019 13:58' prior: 16870512 overrides: 50334968!
 log2
	"This function is defined because super log2 might overflow."
	| res |
	self <= 0 ifTrue: [DomainError signal: 'log2 is only defined for x > 0'].
	"Test self < 1 before converting to float in order to avoid precision loss due to gradual underflow.
	Also, give an integer answer if possible."
	numerator < denominator ifTrue: [^self reciprocal log2 negated].
	res := super log2.
	res isFinite ifTrue: [^res].
	^numerator log2 - denominator log2! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6398-log2-enhancements-NicolasCellier-2024May24-15h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6391] on 22 May 2024 at 9:45:23 am'!
!Morph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:44:51' prior: 16904174!
                 keyStroke: aKeyboardEvent
	"Handle a keystroke event."

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].! !

TextModelMorph removeSelector: #keystrokeAction:!

!methodRemoval: TextModelMorph #keystrokeAction: stamp: 'Install-6399-KeystrokeAction-removeSupport-JuanVuletich-2024May22-09h35m-jmv.001.cs.st 6/6/2024 11:42:28'!
keystrokeAction: aBlock
	
	scroller keystrokeAction: aBlock!

InnerTextMorph removeSelector: #keystrokeAction:!

!methodRemoval: InnerTextMorph #keystrokeAction: stamp: 'Install-6399-KeystrokeAction-removeSupport-JuanVuletich-2024May22-09h35m-jmv.001.cs.st 6/6/2024 11:42:28'!
keystrokeAction: aBlock
	"Sets the action to perform when user presses any key"

	self setProperty: #keyStroke: toValue: aBlock.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6399-KeystrokeAction-removeSupport-JuanVuletich-2024May22-09h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6391] on 22 May 2024 at 9:54:22 am'!
!Morph methodsFor: 'events-processing' stamp: 'jmv 5/22/2024 09:49:46' prior: 16904670!
                        processKeystroke: aKeyboardEvent
	"System level event handling."

	aKeyboardEvent wasHandled ifTrue: [^self].
	self handlesKeyboard ifFalse: [^self].
	aKeyboardEvent wasHandled: true.
	self keyStroke: aKeyboardEvent! !
!WorldMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:52:17' prior: 17007312 overrides: 50335014!
                               keyStroke: aKeyboardEvent
	self flag: #definesKeyboardShortcuts.

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	"Handle a keystroke event."
	(aKeyboardEvent commandAltKeyPressed or: [ aKeyboardEvent controlKeyPressed ])
		ifTrue: [
			aKeyboardEvent keyCharacter = $b ifTrue: [ Browser open ].
			aKeyboardEvent keyCharacter = $f ifTrue: [ BrowserWindow findClass ].
			aKeyboardEvent keyCharacter = $F ifTrue: [ MethodSetWindow findInSourceCode ].
		].
	"aKeyboardEvent keyCharacter print."
! !
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:50:50' prior: 16881124 overrides: 50335014!
                   keyStroke: aKeyboardEvent

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	autoCompleter 
		ifNil: [ self processKeystrokeEvent: aKeyboardEvent ]
		ifNotNil: [
			autoCompleter
				autoCompletionAround: [ self processKeystrokeEvent: aKeyboardEvent ]
				keyStroke: aKeyboardEvent ].
! !
!PluggableScrollPane methodsFor: 'events' stamp: 'jmv 5/22/2024 09:52:30' prior: 16924561 overrides: 50335014!
 keyStroke: aKeyboardEvent

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	scroller ifNotNil: [
		scroller keyStroke: aKeyboardEvent ].
! !
!HierarchicalListMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:51:48' prior: 16874218 overrides: 50335093!
                  keyStroke: aKeyboardEvent 
	"Process potential command keys"

	| args |
	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	(self arrowKey: aKeyboardEvent) ifNotNil: [ ^ self ].
	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	keystrokeActionSelector ifNil: [^self].
	(args := keystrokeActionSelector numArgs) = 1 
		ifTrue: [^mainView perform: keystrokeActionSelector with: aKeyboardEvent keyCharacter].
	args = 2 
		ifTrue: [
			^mainView 
				perform: keystrokeActionSelector
				with: aKeyboardEvent keyCharacter
				with: self].
	^self error: 'The keystrokeActionSelector must be a 1- or 2-keyword symbol'! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:53:20' prior: 50334232 overrides: 50335093!
  keyStroke: aKeyboardEvent 
	"Process keys"
	| aCharacter |
	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].
	
	(self arrowKey: aKeyboardEvent) ifNotNil: [ ^ self ].
	
	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	aKeyboardEvent isDelete ifTrue: [ "delete key" ^ self deleteAction ].
	aKeyboardEvent isBackspace ifTrue: [ "backspace key" ^ self deleteAction ].
	
	aCharacter := aKeyboardEvent keyCharacter.
	
	aKeyboardEvent anyModifierKeyPressed
		ifTrue: [
			(self doKeystrokeAction: aCharacter)
				ifTrue: [ ^self ]].
	^ self keyboardSearch: aCharacter! !
!TextModelMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:52:47' prior: 16983062 overrides: 50335093!
                        keyStroke: aKeyboardEvent
	"A keystroke was hit while the receiver had keyboard focus.  Pass the keywtroke on to my textMorph, and and also, if I have an event handler, pass it on to that handler"

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	scroller keyStroke: aKeyboardEvent.
! !

InnerTextMorph removeSelector: #processKeystroke:!

!methodRemoval: InnerTextMorph #processKeystroke: stamp: 'Install-6400-keystroke-cleanup-1-JuanVuletich-2024May22-09h45m-jmv.001.cs.st 6/6/2024 11:42:28'!
processKeystroke: aKeyboardEvent
	"System level event handling."

	aKeyboardEvent wasHandled ifTrue:[^self].
	self handlesKeyboard ifFalse: [^ self].
	aKeyboardEvent wasHandled: true.
	self keyStroke: aKeyboardEvent!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6400-keystroke-cleanup-1-JuanVuletich-2024May22-09h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6393] on 22 May 2024 at 10:26:23 am'!
!Morph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:24:40' prior: 50335014!
                             keyStroke: aKeyboardEvent
	"Handle a keystroke event.
	Subclasses should call super, and check if the event was handled."

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ aKeyboardEvent wasHandled: true ].
! !
!Morph methodsFor: 'events-processing' stamp: 'jmv 5/22/2024 10:07:02' prior: 50335049!
               processKeystroke: aKeyboardEvent
	"System level event handling."

	aKeyboardEvent wasHandled ifTrue: [^self].
	self handlesKeyboard ifFalse: [^self].
	self keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled: true.! !
!WorldMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:10:46' prior: 50335060 overrides: 50335183!
                              keyStroke: aKeyboardEvent

	self flag: #definesKeyboardShortcuts.
	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	"Handle a keystroke event."
	(aKeyboardEvent commandAltKeyPressed or: [ aKeyboardEvent controlKeyPressed ])
		ifTrue: [
			aKeyboardEvent keyCharacter = $b ifTrue: [
				Browser open.
				aKeyboardEvent wasHandled: true. ].
			aKeyboardEvent keyCharacter = $f ifTrue: [
				BrowserWindow findClass.
				aKeyboardEvent wasHandled: true. ].
			aKeyboardEvent keyCharacter = $F ifTrue: [
				MethodSetWindow findInSourceCode.
				aKeyboardEvent wasHandled: true. ].
		].
	"aKeyboardEvent keyCharacter print."! !
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:04:53' prior: 50335080 overrides: 50335183!
     keyStroke: aKeyboardEvent

	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	autoCompleter 
		ifNil: [ self processKeystrokeEvent: aKeyboardEvent ]
		ifNotNil: [
			autoCompleter
				autoCompletionAround: [ self processKeystrokeEvent: aKeyboardEvent ]
				keyStroke: aKeyboardEvent ].

	aKeyboardEvent wasHandled: true.
! !
!PluggableScrollPane methodsFor: 'events' stamp: 'jmv 5/22/2024 10:11:54' prior: 50335093 overrides: 50335183!
             keyStroke: aKeyboardEvent

	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	scroller ifNotNil: [
		scroller keyStroke: aKeyboardEvent ].! !
!HierarchicalListMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:15:16' prior: 50335102 overrides: 50335243!
  keyStroke: aKeyboardEvent 
	"Process potential command keys"

	| args |
	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	(self arrowKey: aKeyboardEvent) ifNotNil: [
		^ aKeyboardEvent wasHandled: true ].

	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	keystrokeActionSelector ifNil: [^self].
	(args := keystrokeActionSelector numArgs) = 1 
		ifTrue: [
			mainView perform: keystrokeActionSelector with: aKeyboardEvent keyCharacter.
			^ aKeyboardEvent wasHandled: true ].
	args = 2 
		ifTrue: [
			mainView 
				perform: keystrokeActionSelector
				with: aKeyboardEvent keyCharacter
				with: self.
			^ aKeyboardEvent wasHandled: true ].
	^self error: 'The keystrokeActionSelector must be a 1- or 2-keyword symbol'! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:16:59' prior: 50335126 overrides: 50335243!
   keyStroke: aKeyboardEvent 
	"Process keys"

	| aCharacter |
	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].
	
	(self arrowKey: aKeyboardEvent) ifNotNil: [
		^ aKeyboardEvent wasHandled: true ].

	"All the cases below consume the event."
	aKeyboardEvent wasHandled: true.

	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	aKeyboardEvent isDelete ifTrue: [ "delete key" ^ self deleteAction ].
	aKeyboardEvent isBackspace ifTrue: [ "backspace key" ^ self deleteAction ].
	
	aCharacter := aKeyboardEvent keyCharacter.
	aKeyboardEvent anyModifierKeyPressed
		ifTrue: [
			(self doKeystrokeAction: aCharacter)
				ifTrue: [ ^self ]].
	^ self keyboardSearch: aCharacter! !

TextModelMorph removeSelector: #keyStroke:!

!methodRemoval: TextModelMorph #keyStroke: stamp: 'Install-6401-keystroke-cleanup-2-JuanVuletich-2024May22-10h23m-jmv.001.cs.st 6/6/2024 11:42:28'!
keyStroke: aKeyboardEvent
	"A keystroke was hit while the receiver had keyboard focus.  Pass the keywtroke on to my textMorph, and and also, if I have an event handler, pass it on to that handler"

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ self ].

	scroller keyStroke: aKeyboardEvent.
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6401-keystroke-cleanup-2-JuanVuletich-2024May22-10h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6401] on 24 May 2024 at 4:36:22 pm'!
!FileIOAccessor methodsFor: 'actions' stamp: 'jmv 5/24/2024 16:30:36' prior: 50333698!
      copy: fromFileEntry to: toFileEntry 
	| readStr writeStr |
	[readStr := (self privateReadOnlyFile: fromFileEntry) binary.
	writeStr := (self privateForceNewFile: toFileEntry) binary.
	self copyFile: readStr toFile: writeStr]
		ensure: [
			readStr
				ifNotNil: [ :r | r close ].
			writeStr
				ifNotNil: [ :w | w close ]].
	toFileEntry parent invalidateChildren.
	toFileEntry invalidate.! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jmv 5/24/2024 16:33:41' prior: 16861346!
                              fileSize: fileEntry

	| pathName f size |
	pathName := fileEntry pathName.
	"At least on Linux 64 Cog, opening a directory as a stream and asking #size answers some absurd number: 9223372036854775807"
	(self basicDirectoryExists: pathName) ifTrue: [^ nil ].
	f := UniFileStream new open: pathName forWrite: false.
	f ifNil: [^ nil].
	size := f size.
	f close.
	fileEntry invalidate.
	^ size! !
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 5/24/2024 16:30:58' prior: 50333775!
                               delete
	self fileAccessor deleteFile: self pathName.
	self parent invalidateChildren.
	self invalidate.! !
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 5/24/2024 16:31:43' prior: 50333781!
                              rename: newName

	| fileEntry directoryEntry |
	fileEntry := self parent // newName.
	fileEntry exists
		ifTrue: [ Error signal: 'There already exists a file named: ', fileEntry printString ].
	directoryEntry := self parent / newName.
	directoryEntry exists
		ifTrue: [ Error signal: 'There already exists a directory named: ', fileEntry printString ].
	self fileAccessor rename: self pathName to: fileEntry pathName.
	self name: newName.
	self parent invalidateChildren.
	self invalidate.! !
!FileEntry methodsFor: 'accessing-stream' stamp: 'jmv 5/24/2024 16:32:26' prior: 16860639!
                        appendStreamDo: blockWithArg 
	| stream |
	stream := self appendStream.
	[ blockWithArg value: stream ]
		ensure: [
			stream
				ifNotNil: [ :s | s close ].
			self invalidate ].
! !
!FileEntry methodsFor: 'accessing-stream' stamp: 'jmv 5/24/2024 16:32:46' prior: 16860647!
             forceWriteStreamDo: blockWithArg 
	"If the file already exists, delete it first without asking. Do not raise FileExistsException.
	Creates the directory if it doesn't exist."
	| stream |
	stream := self forceWriteStream.
	[ blockWithArg value: stream ]
		ensure: [
			stream
				ifNotNil: [ :s | s close ].
			self invalidate ].
! !
!FileEntry methodsFor: 'accessing-stream' stamp: 'jmv 5/24/2024 16:33:13' prior: 16860669!
                        writeStreamDo: blockWithArg 
	"If the file already exists raise FileExistsException.
	Creates the directory if it doesn't exist."
	| stream |
	stream := self writeStream.
	[ blockWithArg value: stream ]
		ensure: [
			stream
				ifNotNil: [ :s | s close ].
			self invalidate ].
! !
!FileEntry methodsFor: 'accessing' stamp: 'jmv 5/24/2024 16:28:26' prior: 16860680!
                 appendStream
	"Note: You need to eventually close the stream.
	Usually prefer #appendStreamDo: that closes the file for you."

	self invalidate.
	self exists ifFalse: [
		^ self writeStream ].
	^ (self fileAccessor privateWriteableFile: self) setToEnd! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6402-FileEntry-invalidate-addAFew-JuanVuletich-2024May24-16h28m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6387] on 21 May 2024 at 3:19:31 pm'!

"Postscript:
The MethodInCallStackToBecomeInvalid exception happens because
installing this change set is done during the #performAction of a PluggableButtonMorph.
But no button state will be accessed. In this case, the reshape is safe.
So, resume the MethodInCallStackToBecomeInvalid exception and effectively do the reshape"
	[
		BoxedMorph subclass: #PluggableMorph
			instanceVariableNames: 'model menuNshortcutsKey'
			classVariableNames: ''
			poolDictionaries: ''
			category: 'Morphic-Widgets'.
	] on: MethodInCallStackToBecomeInvalid do: [ :ex | ex resume: true ]
!

!classDefinition: #PluggableMorph category: #'Morphic-Widgets' stamp: 'Install-6403-Add-newIvar-to-PluggableMorph-JuanVuletich-2024May21-15h19m-jmv.003.cs.st 6/6/2024 11:42:29'!
BoxedMorph subclass: #PluggableMorph
	instanceVariableNames: 'model menuNshortcutsKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6403-Add-newIvar-to-PluggableMorph-JuanVuletich-2024May21-15h19m-jmv.003.cs.st----!

'From Cuis7.1 [latest update: #6392] on 22 May 2024 at 12:15:29 pm'!

SystemWindow class
	instanceVariableNames: 'menuNshortcutsProviders '!

!classDefinition: 'SystemWindow class' category: #'Morphic-Widgets' stamp: 'Install-6404-SupportForNewMenusAndShortcutsSpecs-JuanVuletich-2024May22-12h11m-jmv.001.cs.st 6/6/2024 11:42:30'!
SystemWindow class
	instanceVariableNames: 'menuNshortcutsProviders'!
!Morph methodsFor: 'events' stamp: 'jmv 5/22/2024 09:59:03'!
                    keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut."

	| menuNshortcutsSpecs selector shortcutCharacter target widgetKey |
	widgetKey := self menuNshortcutsKey ifNil: [ ^false ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	menuNshortcutsSpecs valuesDo: [ :itemSpec |
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetGetter | self perform: targetGetter ]
					ifNil: [ self ].
				selector := itemSpec fifth.
				target perform: selector.
				^true ]
			]
		].
	^false! !
!Morph methodsFor: 'structure' stamp: 'jmv 5/21/2024 16:02:22'!
                window
	"Return the first enclosing morph that is a kind of Window, or nil if none"
	^self owningWindow! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/16/2024 10:55:14'!
               menuNshortcutsKey
	"
	Nil by default. Specific for each instance for PluggableLists. Maybe class name (and therefore specific for each class) for TextModelMorph or such (^self class name).
	"
	^nil! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/16/2024 10:50:40'!
                 menuNshortcutsSpec: aWidgetKey for: aWidget
	"menuSpec is the Spec for the menu and shortcut keys.
	It is an Array where each entry is
		#(itemNumber 'menu item label'    shortcut    receiver    selector     iconOrNil(optional)    'help text (optional)')
		- itemNumber is an integer or float number, and is only used for ordering of menu items
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiver is either #w (window) or #m (model)
		- selector is #aSymbol. No arguments.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	self withAllOwnersReverseDo: [ :o |
		o ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/15/2024 15:13:03'!
ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs.
	See, for instance, SystemWindow."! !
!PluggableMorph methodsFor: 'access' stamp: 'jmv 5/16/2024 10:52:33' overrides: 50335518!
                       menuNshortcutsKey
	"See senders"
	^menuNshortcutsKey! !
!PluggableMorph methodsFor: 'access' stamp: 'jmv 5/15/2024 15:18:45'!
  menuNshortcutsKey: aSymbol
	"See senders"
	menuNshortcutsKey := aSymbol.! !
!SystemWindow methodsFor: 'submorphs-menus' stamp: 'jmv 5/16/2024 10:44:18' overrides: 50335572!
                   ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	(self perform: aWidgetKey) do: [ :eachSpec |
		aBlock value: eachSpec ].

	(self class registeredMenuAndShortcutsSpecProviders: aWidgetKey) ifNotNil: [ :providers |
		providers do: [ :eachMessageSend |
			(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]].! !
!SystemWindow class methodsFor: 'menu and shortcuts' stamp: 'jmv 5/15/2024 11:23:29'!
          at: aWidgetKey registerMenuAndShortcutsSpecProvider: aMessageSend
	menuNshortcutsProviders ifNil: [ menuNshortcutsProviders := Dictionary new ].
	(menuNshortcutsProviders at: aWidgetKey ifAbsentPut: [ OrderedCollection new ])
		add: aMessageSend! !
!SystemWindow class methodsFor: 'menu and shortcuts' stamp: 'jmv 5/15/2024 12:22:29'!
                 registeredMenuAndShortcutsSpecProviders: aWidgetKey
	menuNshortcutsProviders ifNil: [ ^nil ].
	^menuNshortcutsProviders at: aWidgetKey ifAbsent: nil.! !
!Morph methodsFor: 'events' stamp: 'jmv 5/22/2024 10:02:32' prior: 50335183!
                          keyStroke: aKeyboardEvent
	"Handle a keystroke event.
	Subclasses should call super, and check if the event was handled."

	(self focusKeyboardFor: aKeyboardEvent)
		ifTrue: [ ^ aKeyboardEvent wasHandled: true ].

	aKeyboardEvent anyModifierKeyPressed ifTrue: [
		(self keyboardShortcut: aKeyboardEvent)
			ifTrue: [ ^ aKeyboardEvent wasHandled: true ]].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/21/2024 16:04:10' prior: 50333444!
    getMenu
	"Answer the right-click (contextual) menu."

	| widgetKey menuNshortcutsSpecs itemSpec label menu menuItem shortcutCharacter target selector iconSymbol helpText |
	widgetKey := self menuNshortcutsKey ifNil: [ ^nil ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].

	menu := MenuMorph new.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2
			ifTrue: [ menu addLine ]
			ifFalse: [
				label := itemSpec second.
				shortcutCharacter := itemSpec third.
				target := itemSpec fourth
					ifNotNil: [ :targetGetter | self perform: targetGetter ]
					ifNil: [ self ].
				selector := itemSpec fifth.
				iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
				helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
				menuItem := label isSymbol
					ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
					ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
				iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
				helpText ifNotNil: [ menuItem setBalloonText: helpText ]
				]
		].
	^ menu! !
!HierarchicalListMorph methodsFor: 'menu' stamp: 'jmv 5/16/2024 11:00:00' prior: 16874525 overrides: 50335642!
                        getMenu
	"Answer the menu for this view"

	"Use the new mechanism if provided. See #menuNshortcutsKey"
	super getMenu ifNotNil: [ :menu | 
		^menu ].

	"Fallback to the old way. See #mainView:menuGetter:keystrokeAction:	"
	menuGetter ifNil: [^ nil].
	(menuGetter is: #MessageSend) ifTrue: [
		^menuGetter value ].
	menuGetter numArgs = 0 ifTrue: [
		^ mainView perform: menuGetter ].
	^ self error: 'The menuGetter has an unsupported number of arguments'! !
!PluggableListMorph methodsFor: 'menu' stamp: 'jmv 5/16/2024 11:00:29' prior: 16923729 overrides: 50335642!
          getMenu
	"Answer the menu for this view"

	"Use the new mechanism if provided. See #menuNshortcutsKey"
	super getMenu ifNotNil: [ :menu | 
		^menu ].

	"Fallback to the old way. See #mainView:menuGetter:keystrokeAction:	"
	menuGetter ifNil: [^ nil].
	(menuGetter is: #MessageSend) ifTrue: [
		^menuGetter value ].
	menuGetter numArgs = 0 ifTrue: [
		^ mainView perform: menuGetter ].
	^ self error: 'The menuGetter has an unsupported number of arguments'! !

Morph removeSelector: #model!

SystemWindow class
	instanceVariableNames: 'menuNshortcutsProviders'!

!classDefinition: 'SystemWindow class' category: #'Morphic-Widgets' stamp: 'Install-6404-SupportForNewMenusAndShortcutsSpecs-JuanVuletich-2024May22-12h11m-jmv.001.cs.st 6/6/2024 11:42:30'!
SystemWindow class
	instanceVariableNames: 'menuNshortcutsProviders'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6404-SupportForNewMenusAndShortcutsSpecs-JuanVuletich-2024May22-12h11m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6377] on 18 May 2024 at 3:44:09 pm'!

PluggableListMorphOfMany removeSelector: #model:listGetter:primarySelectionGetter:primarySelectionSetter:listSelectionGetter:listSelectionSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: PluggableListMorphOfMany #model:listGetter:primarySelectionGetter:primarySelectionSetter:listSelectionGetter:listSelectionSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6405-removalsForProtocolsDeprecatedIn-6374-JuanVuletich-2024May18-15h43m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"setup a whole load of pluggability options"
	getSelectionListSelector := getListSel.
	setSelectionListSelector := setListSel.
	self 
		model: anObject
		listGetter: listSel
		indexGetter: getSelectionSel
		indexSetter: setSelectionSel
		mainView: aMainView
		menuGetter: getMenuSel
		keystrokeAction: keyActionSel!

PluggableListMorph removeSelector: #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: PluggableListMorph #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6405-removalsForProtocolsDeprecatedIn-6374-JuanVuletich-2024May18-15h43m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	self model: anObject.
	getListSelector := getListSel.
	getIndexSelector := getSelectionSel.
	setIndexSelector := setSelectionSel.
	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.
	autoDeselect := true.
	self
		updateList;
		initForKeystrokes
!

HierarchicalListMorph removeSelector: #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: HierarchicalListMorph #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6405-removalsForProtocolsDeprecatedIn-6374-JuanVuletich-2024May18-15h43m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	self model: anObject.
	getListSelector := getListSel.
	getSelectionSelector := getSelectionSel.
	setSelectionSelector := setSelectionSel.
	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.
	autoDeselect := true.
	self list: self getList.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6405-removalsForProtocolsDeprecatedIn-6374-JuanVuletich-2024May18-15h43m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6377] on 18 May 2024 at 3:45:28 pm'!

PluggableListMorphOfMany class removeSelector: #model:listGetter:primarySelectionGetter:primarySelectionSetter:listSelectionGetter:listSelectionSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: PluggableListMorphOfMany class #model:listGetter:primarySelectionGetter:primarySelectionSetter:listSelectionGetter:listSelectionSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6406-removalsForProtocolsDeprecatedIn-6375-JuanVuletich-2024May18-15h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^(self withModel: anObject listGetter: listSel primarySelectionGetter: getSelectionSel primarySelectionSetter: setSelectionSel listSelectionGetter: getListSel listSelectionSetter: setListSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel!

PluggableListMorph class removeSelector: #model:listGetter:indexGetter:indexSetter:!

!methodRemoval: PluggableListMorph class #model:listGetter:indexGetter:indexSetter: stamp: 'Install-6406-removalsForProtocolsDeprecatedIn-6375-JuanVuletich-2024May18-15h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel
	"Create a 'pluggable' list view on the given model parameterized by the given message selectors."
	^self model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: nil menuGetter: nil keystrokeAction: nil!

PluggableListMorph class removeSelector: #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: PluggableListMorph class #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6406-removalsForProtocolsDeprecatedIn-6375-JuanVuletich-2024May18-15h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^ (self withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel!

HierarchicalListMorph class removeSelector: #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction:!

!methodRemoval: HierarchicalListMorph class #model:listGetter:indexGetter:indexSetter:mainView:menuGetter:keystrokeAction: stamp: 'Install-6406-removalsForProtocolsDeprecatedIn-6375-JuanVuletich-2024May18-15h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
model: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel
	"Deprecated. Please inline in senders."

	^ (self withModel: anObject listGetter: getListSel indexGetter: getSelectionSel indexSetter: setSelectionSel)
		mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6406-removalsForProtocolsDeprecatedIn-6375-JuanVuletich-2024May18-15h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6377] on 18 May 2024 at 3:45:57 pm'!

CodeWindow removeSelector: #openMessageListMenu!

!methodRemoval: CodeWindow #openMessageListMenu stamp: 'Install-6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:30'!
openMessageListMenu
	"Offer the unshifted selector-list menu"

	^ self messageListMenu popUpInWorld!

CodeWindow removeSelector: #systemCatListKey:from:!

!methodRemoval: CodeWindow #systemCatListKey:from: stamp: 'Install-6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:30'!
systemCatListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also have a listView that has a list of methods.  The view knows how to get the list and selection."

	self flag: #definesKeyboardShortcuts.
	aChar = $f ifTrue: [ ^ self findClass ].
	aChar = $x ifTrue: [ ^ model removeSystemCategory ].
	aChar = $t ifTrue: [ ^ model runSystemCategoryTests ].
	aChar = $a ifTrue: [ ^ model addSystemCategory ].
	aChar = $A ifTrue: [ ^ model alphabetizeSystemCategories ].
	aChar = $b ifTrue: [ ^ self openSystemCategoryBrowser ].
	aChar = $B ifTrue: [ ^ self browseAllClasses ].
	aChar = $o ifTrue: [ ^ model fileOutSystemCategory ].
	aChar = $u ifTrue: [ ^ model updateSystemCategories ].
	aChar = $R ifTrue: [ ^ model renameSystemCategory ].
	
	^ self classListKey: aChar from: view.!

CodeWindow removeSelector: #openMessageListMenu2!

!methodRemoval: CodeWindow #openMessageListMenu2 stamp: 'Install-6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:30'!
openMessageListMenu2
	"Offer the additional selector-list menu"

	^ self messageListMenu2 popUpInWorld!

CodeWindow removeSelector: #classListKey:from:!

!methodRemoval: CodeWindow #classListKey:from: stamp: 'Install-6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:30'!
classListKey: aChar from: view 
	"Respond to a Command key.  I am a model with a list of classes and a 
	code pane, and I also have a listView that has a list of methods.  The 
	view knows how to get the list and selection."

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $x ifTrue: [^ model removeClass].
	aChar = $t ifTrue: [^ model runClassTests ].
	
	^ self messageListKey: aChar from: view!

CodeWindow removeSelector: #messageCatListKey:from:!

!methodRemoval: CodeWindow #messageCatListKey:from: stamp: 'Install-6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st 6/6/2024 11:42:30'!
messageCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $o ifTrue: [ ^ model fileOutMessageCategories ].
	aChar = $t ifTrue: [ ^ model runMessageCategoryTests ].
	aChar = $x ifTrue: [ ^ model removeMessageCategory ].
	aChar = $R ifTrue: [ ^ model renameCategory ].
	aChar = $n ifTrue: [ ^ model addCategory ].
	aChar = $N ifTrue: [ ^ model addExtensionCategory ].
	aChar = $e ifTrue: [ ^ model removeEmptyCategories ].
	aChar = $c ifTrue: [ ^ model categorizeAllUncategorizedMethods ].
	aChar = $a ifTrue: [ ^ model alphabetizeMessageCategories ].
	aChar = $r ifTrue: [ ^ model editMessageCategories ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6407-removalsForProtocolsDeprecatedIn-6376-JuanVuletich-2024May18-15h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6392] on 24 May 2024 at 1:39:27 pm'!
!TileResizeMorph class methodsFor: 'as yet unclassified' stamp: 'MM 5/24/2024 13:36:04'!
          allowedArea
	^(RealEstateAgent maximumUsableAreaInWorld: self runningWorld) insetBy: Theme current fullScreenDeskMargin! !
!SystemWindow methodsFor: 'resize/collapse' stamp: 'MM 5/24/2024 13:32:21' prior: 16971370!
         resizeLeft
	self resize: (self allowedArea right: self allowedArea center x)! !
!SystemWindow methodsFor: 'resize/collapse' stamp: 'MM 5/24/2024 13:32:38' prior: 16971376!
                    resizeRight
	self resize: (self allowedArea left: self allowedArea center x)! !
!TileResizeMorph class methodsFor: 'as yet unclassified' stamp: 'MM 5/24/2024 13:35:48' prior: 16986724!
       calculateTileRegions: aNumber
	
	^ self calculateTileRegionsIn: self allowedArea by: aNumber! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6408-TileResizeAdjustments-MarianoMontone-2024May24-13h13m-MM.001.cs.st----!

'From Cuis7.1 [latest update: #6393] on 24 May 2024 at 1:48:01 pm'!
!SystemWindow methodsFor: 'resize/collapse' stamp: 'MM 5/24/2024 13:46:46' prior: 16971348!
    resizeBottom
	self resize: (self allowedArea top: self allowedArea center y)! !
!SystemWindow methodsFor: 'resize/collapse' stamp: 'MM 5/24/2024 13:46:28' prior: 16971382!
                    resizeTop
	self resize: (self allowedArea bottom: self allowedArea center y)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6409-MoreResizeFixes-MarianoMontone-2024May24-13h46m-MM.001.cs.st----!

'From Cuis7.1 [latest update: #6409] on 27 May 2024 at 2:33:31 pm'!
!Debugger methodsFor: 'context stack menu' stamp: 'jmv 5/27/2024 14:07:40' prior: 16843680!
                          fullStack
	"Change from displaying the minimal stack to a full one."

	self contextStackList size > self class defaultDebugStackSize "Already expanded"
		ifTrue:
			[self changed: #flash]
		ifFalse:
			[self contextStackIndex = 0 ifFalse: [
				self toggleContextStackIndex: self contextStackIndex].
			self fullyExpandStack]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6410-Debugger-fix-JuanVuletich-2024May27-14h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6410] on 27 May 2024 at 11:09:43 am'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/27/2024 10:29:09' prior: 50335642!
          getMenu
	"Answer the right-click (contextual) menu."

	| widgetKey menuNshortcutsSpecs itemSpec label menu menuItem shortcutCharacter target selector iconSymbol helpText |
	widgetKey := self menuNshortcutsKey ifNil: [ ^nil ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].

	menu := MenuMorph new.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2
			ifTrue: [ menu addLine ]
			ifFalse: [
				itemSpec size = 3
					ifTrue: [
						menu addTitle: itemSpec second.
						itemSpec third ifTrue: [ menu addStayUpIcons ]]
					ifFalse: [
						label := itemSpec second.
						shortcutCharacter := itemSpec third.
						target := itemSpec fourth
							ifNotNil: [ :targetGetter | self perform: targetGetter ]
							ifNil: [ self ].
						selector := itemSpec fifth.
						iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
						helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
						menuItem := label isSymbol
							ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
							ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
						iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
						helpText ifNotNil: [ menuItem setBalloonText: helpText ]
					]
				]
		].
	^ menu! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/27/2024 10:23:02' prior: 50335527!
                               menuNshortcutsSpec: aWidgetKey for: aWidget
	"menuSpec is the Spec for the menu and shortcut keys.
	It is an Array where each entry is
		#(itemNumber 'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemNumber is an integer or float number, and is only used for ordering of menu items
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	self withAllOwnersReverseDo: [ :o |
		o ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6411-NewMenuSpec-allowTitle-JuanVuletich-2024May27-11h08m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6410] on 27 May 2024 at 2:38:19 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/27/2024 12:02:36' prior: 50336126!
     getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys the changesets list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| widgetKey menuNshortcutsSpecs itemSpec label menu menuItem shortcutCharacter target selector isEnabledSelector iconSymbol helpText |
	widgetKey := self menuNshortcutsKey ifNil: [ ^nil ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].

	menu := MenuMorph new.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2
			ifTrue: [ menu addLine ]
			ifFalse: [
				itemSpec size = 3
					ifTrue: [
						menu addTitle: itemSpec second.
						itemSpec third ifTrue: [ menu addStayUpIcons ]]
					ifFalse: [
						label := itemSpec second.
						shortcutCharacter := itemSpec third.
						target := itemSpec fourth
							ifNotNil: [ :targetGetter | self perform: targetGetter ]
							ifNil: [ self ].
						selector := itemSpec fifth.
						isEnabledSelector := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
						iconSymbol := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
						helpText := itemSpec size >= 8 ifTrue: [ itemSpec eighth ].
						menuItem := label isSymbol
							ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
							ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
						isEnabledSelector ifNotNil: [ menuItem isEnabled: (target perform: isEnabledSelector) ].
						iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
						helpText ifNotNil: [ menuItem setBalloonText: helpText ]
					]
				]
		].
	^ menu! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6412-NewMenuSpec-allowDisabledMenuItems-JuanVuletich-2024May27-14h37m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6411] on 27 May 2024 at 2:43:19 pm'!
!ChangeListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 11:52:37'!
                               listMenuSpec
	"Spec for the menu and shortcut keys the changes list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(0 		'Change List' 									true)
		#(10		'fileIn selections' 									nil 	model 			fileInSelections 										nil 		nil
					'import the selected items into the image')
		#(20		'fileOut selections...	' 								nil 	model 			fileOutSelections 										nil 		nil
		 			'create a new file containing the selected items')
		#(30		'fileOut current version of selections...' 					nil 					model 			fileOutCurrentVersionsOfSelections 										nil 		nil
 					'create a new file containing the current (in-image) counterparts of the selected methods')
		#(40 		'-----')
		#(50		'compare to current' 									nil 	model 			compareToCurrentVersion 										nil 		nil
 					'open a separate window which shows the text differences between the on-file version and the in-image version.')
		#(60		'toggle diffing (D)' 									$D 	model 			toggleDiffing 										nil 		nil
 					'start or stop showing diffs in the code pane.')
		#(70 		'-----')
		#(80		'select new methods' 									nil 	model 			selectNewMethods 										nil 		nil
 					'select methods in the file that do not currently exist in the image')
		#(90		'select changes for absent classes' 									nil 	model 			selectAllForAbsentClasses 										nil 		nil
					'select methods in the file for classes that are not defined in the image')
		#(100		'select all changes for this class' 									nil 	model 			selectAllForThisClass 										nil 		nil
					'select all methods in the file that belong to the currently-selected class')
		#(110		'select unchanged methods' 									nil 	model 			selectUnchangedMethods 										nil 		nil
					'select methods in the file whose in-image versions are the same as their in-file counterparts')
		#(120		'select methods equivalent to current' 									nil 	model 			selectEquivalentMethods 										nil 		nil
					'select methods in the file whose in-image versions have the same behavior as their in-file counterparts')
		#(130		'select methods older than current' 									nil 	model 			selectMethodsOlderThanCurrent 										nil 		nil
					'select methods in the file that are older than the one currently in the image')
		#(140		'select removals of sent methods' 									nil 	model 			selectRemovalsOfSent 										nil 		nil
					'select all method removals of methods that have some sender in the image')
		#(150 		'-----')
		#(160		'select all (a)' 									$a 	model 			selectAll 										nil 		nil
					'select all the items in the list')
		#(170		'deselect all (A)' 									$A 	model 			deselectAll 										nil 		nil
					'deselect all the items in the list')
		#(180		'invert selections' 									nil 	model 			invertSelections 										nil 		nil
					'select every item that is not currently selected, and deselect every item that *is* currently selected')
		#(190 		'-----')
		#(200		'browse class and method' 									nil 	window 			browseMethodFull 										nil 		nil
					'open a full browser showing the selected method')
		#(210		'browse all versions of single selection' 									nil 	window 			browseVersions 										nil 		nil
					'open a version browser showing the versions of the currently selected method')
		#(220		'browse current versions of selections' 									nil 	window 			browseCurrentVersionsOfSelections 										nil 		nil
					'open a message-list browser showing the current (in-image) counterparts of the selected methods')
		#(230		'destroy current methods of selections' 									nil 	model 			destroyCurrentCodeOfSelections 										nil 		nil
					'remove (*destroy*) the in-image counterparts of all selected methods')
		#(240 		'-----')
		#(250		'remove doIts' 									nil 	model 			removeDoIts 										nil 		nil
					'remove all items that are doIts rather than definitions')
		#(260		'remove older versions' 									nil 	model 			removeOlderMethodVersions 										nil 		nil
					'remove all but the most recent versions of methods in the list')
		#(270		'remove up-to-date versions' 									nil 	model 			removeUpToDate 										nil 		nil
					'remove all items whose code is the same as the counterpart in-image code')
		#(280		'remove empty class comments' 									nil 	model 			removeEmptyClassComments 										nil 		nil
					'remove all empty class comments')
		#(290		'remove selected items' 									nil 	model 			removeSelections 										nil 		nil
					'remove the selected items from the change-list')
		#(300		'remove unselected items' 									nil 	model 			removeNonSelections 										nil 		nil
					'remove all the items not currently selected from the change-list')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 11:53:55'!
            classCommentVersionsMenuSpec
	"Spec for the menu and shortcut keys for a class comment version in the versions list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(0 		'Versions' 							true)
		#(10		'compare to current' 							nil 	model 			compareToCurrentVersion 										nil 		nil
					'compare selected version to the current version')
		#(20		'revert to selected version' 							nil 	model 			fileInSelections 										nil 		nil
					'resubmit the selected version, so that it becomes the current version')
		#(30 		'-----')
		#(40		'toggle diffing (D)' 							$D 	model 			toggleDiffing 										nil 		nil
					'toggle whether or not diffs should be shown here')
		#(50		'update list' 							nil 	model 			reformulateList 										nil 		nil
					'reformulate the list of versions, in case it somehow got out of synch with reality')
		#(60 		'-----')
		#(70		'help...' 							nil 	model 			offerVersionsHelp 										nil 		nil
					'provide an explanation of the use of this tool')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 11:01:52' overrides: 50336325!
                   listMenuSpec
	"Spec for the menu and shortcut keys the versions list."
	^model classCommentIndicated
		ifTrue: [ self classCommentVersionsMenuSpec ]
		ifFalse: [ self methodVersionsMenuSpec ]! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 11:54:09'!
  methodVersionsMenuSpec
	"Spec for the menu and shortcut keys for a method version in the versions list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	answer := #(
				#(0 		'Versions' 									true)
	).
	model listIndex > 0 ifTrue: [
		(model list size > 1 ) ifTrue: [
			answer := answer, #(
				#(10		'compare to current' 									nil 	model 			compareToCurrentVersion 									nil 		nil
							'compare selected version to the current version')
				#(20		'compare to version...' 									nil 	model 			compareToOtherVersion 									nil 		nil
							'compare selected version to another selected version'))].
		answer := answer, #(
				#(30		'revert to selected version (z)' 									$z 	model 			fileInSelections 									nil 		nil
							'resubmit the selected version, so that it becomes the current version'))].
	answer := answer, #(
				#(40		'edit current method (O)' 									$O 	window 			openSingleMessageBrowser 									nil 		nil
							'open a single-message browser on the current version of this method')
				#(50 		'-----')
				#(60		'toggle diffing (D)' 									$D 	model 			toggleDiffing 									nil 		nil
							'toggle whether or not diffs should be shown here')
				#(70		'update list' 									nil 	model 			reformulateList 									nil 		nil
							'reformulate the list of versions, in case it somehow got out of synch with reality')
				#(80 		'-----')
				#(90		'senders (n)' 									$n 	window 			browseSenders 									nil 		nil
							'browse all senders of this selector')
				#(100		'implementors (m)' 									$m 	window 			browseImplementors 									nil 		nil
							'browse all implementors of this selector')
				#(110 		'-----')
				#(120		'help...' 									nil 	model 			offerVersionsHelp 									nil 		nil
							'provide an explanation of the use of this tool')
	).
	^answer! !
!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 5/27/2024 11:01:18' prior: 50332832!
     buildMorphicWindow
	"Open a morphic view for the messageSet, whose label is labelString. 
	The listView may be either single or multiple selection type"

	| listPane desiredExtent desiredHeight wine availableHeight |
	listPane := (PluggableListMorphOfMany
		withModel: model
		listGetter: #list
		primarySelectionGetter: #listIndex
		primarySelectionSetter: #toggleListIndex:
		listSelectionGetter: #listSelectionAt:
		listSelectionSetter: #listSelectionAt:put:)
			menuNshortcutsKey: #listMenuSpec.
	desiredExtent := listPane desiredExtent.
	desiredHeight := desiredExtent y.
	wine := RealEstateAgent standardWindowExtent.
	availableHeight := wine y - self labelHeight - (borderWidth * 2).
	desiredExtent x > wine x ifTrue: [
		desiredHeight := desiredHeight + ScrollBar scrollbarThickness ].
	desiredHeight / availableHeight < 0.4
		ifTrue: [		"Number of items is small enough to make for a fixed list regardless of Window resize"
			self layoutMorph
				addMorph: listPane fixedHeight: desiredHeight;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 1.0 ]
		ifFalse: [		"Number of items is large enough to prefer a list proportional to Window resize"
			self layoutMorph
				addMorph: listPane proportionalHeight: 0.4;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.
			listPane limitLayoutHeight ].! !
!VersionsBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/27/2024 11:01:29' prior: 50332880 overrides: 50336659!
       buildMorphicWindow
	"Open a morphic view for the messageSet, whose label is labelString. 
	The listView may be either single or multiple selection type"

	| listPane desiredExtent desiredHeight wine availableHeight |
	listPane := (PluggableListMorph
		withModel: model
		listGetter: #list
		indexGetter: #listIndex
		indexSetter: #toggleListIndex:)
			menuNshortcutsKey: #listMenuSpec.
	desiredExtent := listPane desiredExtent.
	desiredHeight := desiredExtent y.
	wine := RealEstateAgent standardWindowExtent.
	availableHeight := wine y - self labelHeight - (borderWidth * 2).
	desiredExtent x > wine x ifTrue: [
		desiredHeight := desiredHeight + ScrollBar scrollbarThickness ].
	desiredHeight / availableHeight < 0.4
		ifTrue: [		"Number of items is small enough to make for a fixed list regardless of Window resize"
			self layoutMorph
				addMorph: listPane fixedHeight: desiredHeight;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 1.0 ]
		ifFalse: [		"Number of items is large enough to prefer a list proportional to Window resize"
			self layoutMorph
				addMorph: listPane proportionalHeight: 0.4;
				addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.6.
			listPane limitLayoutHeight ].! !

VersionsBrowserWindow removeSelector: #classCommentVersionsMenu!

!methodRemoval: VersionsBrowserWindow #classCommentVersionsMenu stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
classCommentVersionsMenu
	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: model.				"all commands are implemented by the model, not the view"
	aMenu addTitle: 'versions'.
	aMenu addStayUpIcons.
	aMenu addItemsFromDictionaries: `{
		{
			#label 			-> 		'compare to current'.
			#selector 			-> 		#compareToCurrentVersion.
			#balloonText 	-> 			'compare selected version to the current version'
		} asDictionary.
		{
			#label 			-> 		'revert to selected version'.
			#selector 			-> 		#fileInSelections.
			#balloonText 	-> 			'resubmit the selected version, so that it becomes the current version'
		} asDictionary.
		nil.
		{
			#label 			-> 		'toggle diffing (D)'.
			#selector 			-> 		#toggleDiffing.
			#balloonText 	-> 			'toggle whether or not diffs should be shown here'
		} asDictionary.
		{
			#label 			-> 		'update list'.
			#selector 			-> 		#reformulateList.
			#balloonText 	-> 			'reformulate the list of versions, in case it somehow got out of synch with reality'
		} asDictionary.
		nil.
		{
			#label 			-> 		'help...'.
			#selector 			-> 		#offerVersionsHelp.
			#balloonText 	-> 			'provide an explanation of the use of this tool'
		} asDictionary.
	}`.
	^aMenu!

VersionsBrowserWindow removeSelector: #changeListKey:from:!

!methodRemoval: VersionsBrowserWindow #changeListKey:from: stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
changeListKey: aChar from: view
	"Respond to a Command key in the list pane. of the versions browser"

	self flag: #definesKeyboardShortcuts.
	aChar = $z ifTrue: [^ model fileInSelections].
	^ self messageListKey: aChar from: view!

VersionsBrowserWindow removeSelector: #listMenu!

!methodRemoval: VersionsBrowserWindow #listMenu stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
listMenu
	^model classCommentIndicated
		ifTrue: [ self classCommentVersionsMenu ]
		ifFalse: [ self methodVersionsMenu]!

VersionsBrowserWindow removeSelector: #methodVersionsMenu!

!methodRemoval: VersionsBrowserWindow #methodVersionsMenu stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
methodVersionsMenu
	"Fill aMenu with menu items appropriate to the receiver"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Versions'.
	aMenu addStayUpIcons.
	model listIndex > 0 ifTrue:[
		(model list size > 1 ) ifTrue: [
			aMenu addItemsFromDictionaries: `{
				{
					#label 			-> 			'compare to current'.
					#object 			-> 			#model.
					#selector 			-> 			#compareToCurrentVersion.
					#balloonText 	-> 			'compare selected version to the current version'
				} asDictionary.
				{
					#label 			-> 			'compare to version...'.
					#object 			-> 			#model.
					#selector 			-> 			#compareToOtherVersion.
					#balloonText 	-> 			'compare selected version to another selected version'
				} asDictionary.
			}` ].
		"Note: Revert to selected should be visible for lists of length one for having the ability to revert to an accidentally deleted method"
		aMenu addItemsFromDictionaries: `{
			{
				#label 			-> 			'revert to selected version (z)'.
				#object 			-> 			#model.
				#selector 			-> 			#fileInSelections.
				#balloonText 	-> 			'resubmit the selected version, so that it becomes the current version'
			} asDictionary.
		}` ].

	aMenu addItemsFromDictionaries: `{
		{
			#label 			-> 			'edit current method (O)'.
			#selector 			-> 			#openSingleMessageBrowser.
			#balloonText 	-> 			'open a single-message browser on the current version of this method'
		} asDictionary.
		nil.
		{
			#label 			-> 			'toggle diffing (D)'.
			#object 			-> 			#model.
			#selector 			-> 			#toggleDiffing.
			#balloonText 	-> 			'toggle whether or not diffs should be shown here'
		} asDictionary.
		{
			#label 			-> 			'update list'.
			#object 			-> 			#model.
			#selector 			-> 			#reformulateList.
			#balloonText 	-> 			'reformulate the list of versions, in case it somehow got out of synch with reality'
		} asDictionary.
		nil.
		{
			#label 			-> 			'senders (n)'.
			#selector 			-> 			#browseSenders.
			#balloonText 	-> 			'browse all senders of this selector'
		} asDictionary.
		{
			#label 			-> 			'implementors (m)'.
			#selector 			-> 			#browseImplementors.
			#balloonText 	-> 			'browse all implementors of this selector'
		} asDictionary.
		nil.
		{
			#label 			-> 			'help...'.
			#object 			-> 			#model.
			#selector 			-> 			#offerVersionsHelp.
			#balloonText 	-> 			'provide an explanation of the use of this tool'
		} asDictionary.
	}`.
	^aMenu!

ChangeListWindow removeSelector: #changeListKey:from:!

!methodRemoval: ChangeListWindow #changeListKey:from: stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
changeListKey: aChar from: view
	"Respond to a Command key in the list pane."

	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing].
	aChar = $a ifTrue: [^ model selectAll].
	aChar = $A ifTrue: [^ model deselectAll]!

ChangeListWindow removeSelector: #listMenu!

!methodRemoval: ChangeListWindow #listMenu stamp: 'Install-6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st 6/6/2024 11:42:30'!
listMenu
	"Fill aMenu up so that it comprises the primary changelist-browser menu"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Change List'.
	aMenu addStayUpIcons.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'fileIn selections'.
				#object 			-> 		#model.
				#selector 			-> 		#fileInSelections.
				#balloonText 		-> 		'import the selected items into the image'.
			} asDictionary.
			{
				#label 			-> 		'fileOut selections...	'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutSelections.
				#balloonText 		-> 		'create a new file containing the selected items'.
			} asDictionary.
			{
				#label 			-> 		'fileOut current version of selections...'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutCurrentVersionsOfSelections.
				#balloonText 		-> 		'create a new file containing the current (in-image) counterparts of the selected methods'.
			} asDictionary.
			nil.
			{
				#label 			-> 		'compare to current'.
				#object 			-> 		#model.
				#selector 			-> 		#compareToCurrentVersion.
				#balloonText 		-> 		'open a separate window which shows the text differences between the on-file version and the in-image version.'.
			} asDictionary.
			{
				#label 			-> 		'toggle diffing (D)'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleDiffing.
				#balloonText 	-> 			'start or stop showing diffs in the code pane.'.
			} asDictionary.
			nil.
			{
				#label 			-> 		'select new methods'.
				#object 			-> 		#model.
				#selector 			-> 		#selectNewMethods.
				#balloonText 	-> 			'select methods in the file that do not currently exist in the image'.
			} asDictionary.
			{
				#label 			-> 		'select changes for absent classes'.
				#object 			-> 		#model.
				#selector 			-> 		#selectAllForAbsentClasses.
				#balloonText 	-> 			'select methods in the file for classes that are not defined in the image'.
			} asDictionary.
			{
				#label 			-> 		'select all changes for this class'.
				#object 			-> 		#model.
				#selector 			-> 		#selectAllForThisClass.
				#balloonText 	-> 			'select all methods in the file that belong to the currently-selected class'.
			} asDictionary.
			{
				#label 			-> 		'select unchanged methods'.
				#object 			-> 		#model.
				#selector 		-> 		#selectUnchangedMethods.
				#balloonText 	-> 		'select methods in the file whose in-image versions are the same as their in-file counterparts'.
			} asDictionary.
			{
				#label 			-> 		'select methods equivalent to current'.
				#object 			-> 		#model.
				#selector 			-> 		#selectEquivalentMethods.
				#balloonText 	-> 			'select methods in the file whose in-image versions have the same behavior as their in-file counterparts'.
			} asDictionary.
			{
				#label 			-> 		'select methods older than current'.
				#object 			-> 		#model.
				#selector 			-> 		#selectMethodsOlderThanCurrent.
				#balloonText 	-> 			'select methods in the file that are older than the one currently in the image'.
			} asDictionary.
			{
				#label 			-> 		'select removals of sent methods'.
				#object 			-> 		#model.
				#selector 			-> 		#selectRemovalsOfSent.
				#balloonText 	-> 			'select all method removals of methods that have some sender in the image'.
			} asDictionary.
			nil.
			{
				#label 			-> 		'select all (a)'.
				#object 			-> 		#model.
				#selector 			-> 		#selectAll.
				#balloonText 	-> 			'select all the items in the list'.
			} asDictionary.
			{
				#label 			-> 		'deselect all (A)'.
				#object 			-> 		#model.
				#selector 			-> 		#deselectAll.
				#balloonText 	-> 			'deselect all the items in the list'.
			} asDictionary.
			{
				#label 			-> 		'invert selections'.
				#object 			-> 		#model.
				#selector 			-> 		#invertSelections.
				#balloonText 	-> 			'select every item that is not currently selected, and deselect every item that *is* currently selected'.
			} asDictionary.
			nil.
			{
				#label 			-> 		'browse class and method'.
				#selector 			-> 		#browseMethodFull.
				#balloonText 	-> 			'open a full browser showing the selected method'.
			} asDictionary.
			{
				#label 			-> 		'browse all versions of single selection'.
				#selector 			-> 		#browseVersions.
				#balloonText 	-> 			'open a version browser showing the versions of the currently selected method'.
			} asDictionary.
			{
				#label 			-> 		'browse current versions of selections'.
				#selector 			-> 		#browseCurrentVersionsOfSelections.
				#balloonText 	-> 			'open a message-list browser showing the current (in-image) counterparts of the selected methods'.
			} asDictionary.
			{
				#label 			-> 		'destroy current methods of selections'.
				#object 			-> 		#model.
				#selector 			-> 		#destroyCurrentCodeOfSelections.
				#balloonText 	-> 			'remove (*destroy*) the in-image counterparts of all selected methods'.
			} asDictionary.
			nil.
			{
				#label 			-> 		'remove doIts'.
				#object 			-> 		#model.
				#selector 			-> 		#removeDoIts.
				#balloonText 	-> 			'remove all items that are doIts rather than definitions'.
			} asDictionary.
			{
				#label 			-> 		'remove older versions'.
				#object 			-> 		#model.
				#selector 			-> 		#removeOlderMethodVersions.
				#balloonText 	-> 			'remove all but the most recent versions of methods in the list'.
			} asDictionary.
			{
				#label 			-> 		'remove up-to-date versions'.
				#object 			-> 		#model.
				#selector 			-> 		#removeUpToDate.
				#balloonText 	-> 			'remove all items whose code is the same as the counterpart in-image code'.
			} asDictionary.
			{
				#label 			-> 		'remove empty class comments'.
				#object 			-> 		#model.
				#selector 			-> 		#removeEmptyClassComments.
				#balloonText 	-> 			'remove all empty class comments'.
			} asDictionary.
			{
				#label 			-> 		'remove selected items'.
				#object 			-> 		#model.
				#selector 			-> 		#removeSelections.
				#balloonText 	-> 			'remove the selected items from the change-list'.
			} asDictionary.
			{
				#label 			-> 		'remove unselected items'.
				#object 			-> 		#model.
				#selector 			-> 		#removeNonSelections.
				#balloonText 	-> 			'remove all the items not currently selected from the change-list'.
			} asDictionary.
		}`.
	^ aMenu!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6413-UseNewMenuSpec-ChangeList-VersionsBrowser-JuanVuletich-2024May27-14h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6413] on 27 May 2024 at 4:27:31 pm'!
!ChangeSorter methodsFor: 'access' stamp: 'jmv 5/27/2024 11:57:32'!
   csIsForBase
	^ myChangeSet isForBaseSystem! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 15:54:34'!
                          changeSetListMenuSpec
	"Spec for the menu and shortcut keys the changesets list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	answer := #(
			#(0 		'Change Set' 						true)
			#(10 		'File out and remove (o)' 							$o 	model 			fileOutAndRemove 							nil 				fileOutIcon)
			#(20 		'File out and keep (k)' 							$k 	model 			fileOutAndKeep 							nil 				fileOutIcon)
			#(30 		'-----')
			#(40 		'Rename change set (R)' 					 		$R 	model 			rename 							csIsForBase 				saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			remove 							csIsForBase 				warningIcon)
	).
	model currentCanHavePreambleAndPostscript ifTrue: [
		model currentHasPreamble
			ifTrue: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Edit preamble (p)' 					$p 	model 			addPreamble 							nil 				textEditorIcon)
				#(80 		'Remove preamble' 					nil 	model 			removePreamble 							nil 				listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Add preamble (p)' 					$p 	model 			addPreamble 							nil 				listAddIcon) )].
		model currentHasPostscript
			ifTrue: [ answer  := answer, #(
				#(90 		'Edit postscript...' 					nil 	model 			editPostscript 							nil 				textEditorIcon)
				#(100 		'Remove postscript' 					nil 	model 			removePostscript 							nil 				listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(90 		'Add postscript...' 					nil 	model 			editPostscript 							nil 				listAddIcon) )].
	].

	answer  := answer, #(
		#(110 		'-----')
		#(120 		'conflicts with other change sets' 								nil 	window			browseMethodConflicts 							nil 				emblemImportantIcon
			'Browse all methods that occur both in this change set and in at least one other change set.')
		#(130 		'-----')
		#(140 		'trim history' 								nil 	model			trimHistory 							csIsForBase 				clockIcon
			'Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.')
		#(150 		'view affected class categories' 								nil 	model 			viewAffectedClassCategories 								nil 			packageIcon
			'Show class categories affected by any contained change')
	).
	^answer! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 16:00:14'!
                   classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
			#(0 		'Class List' 						false)
			#(10 		'delete class from change set (d)' 								$d 	model 			forgetClass 						nil 	warningIcon)
			#(20 		'remove class from system (x)' 								$x 	model 			removeClass 						nil 	deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 								$b 	window 			browseMethodFull 						nil 	editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 								$h 	window 			browseHierarchy 						nil 	goTopIcon)
			#(60 		'browse protocol (p)' 								$p 	window 			browseFullProtocol 						nil 	spreadsheetIcon)
			#(70 		'-----')		
			#(80 		'inst var refs...' 								nil 	window 			browseInstVarRefs 						nil 	instanceIcon)
			#(90 		'inst var defs...' 								nil 	window 			browseInstVarDefs 						nil 	instanceIcon)
			#(100 		'class var refs...' 								nil 	window 			browseClassVarRefs 						nil 	classIcon)
			#(110 		'class vars' 								nil 	window 			browseClassVariables 						nil 	classIcon)
			#(120 		'class refs (N)' 								$N 	window 			browseClassRefs 						nil 	classIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/27/2024 16:12:37'!
                messageListMenuSpec
	"Spec for the menu and shortcut keys the message list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								nil 	warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								nil 	deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								nil 	editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								nil 	goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								nil 	scriptIcon)
			#(70 		'browse protocol (p)' 									$p 	window 			browseFullProtocol 								nil 	spreadsheetIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								nil 	fileOutIcon)
			#(100 		'-----')		
			#(110 		'senders of... (n)' 									$n 	window 			browseSendersOfMessages 								nil 	mailForwardIcon)
			#(120 		'implementors of... (m)' 									$m 	window 			browseMessages 								nil 	developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								nil 	goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								nil 	clockIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 5/27/2024 16:08:48' prior: 50332923!
     buildMorphicWindow
	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."

	| changeSetList classList changeSetListPane classListPane
	  messageList upperPanes labelBackground |
	labelBackground := Theme current background.
	model myChangeSet ifNil: [
		"Or whatever was last changed, or is top of list, or whatever"
		model myChangeSet: ChangeSet changeSetForBaseSystem ].

	changeSetList := (PluggableListMorphByItem
				withModel: model
				listGetter: #changeSetList
				indexGetter: #currentChangeSetName
				indexSetter: #showChangeSetNamed:)
					menuNshortcutsKey: #changeSetListMenuSpec;
					autoDeselect: false.
	changeSetListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Change Set name');
		addMorphUseAll: changeSetList.

	classList := (PluggableListMorphByItem
				withModel: model
				listGetter: #classList
				indexGetter: #currentClassName
				indexSetter: #currentClassName:)
					menuNshortcutsKey: #classListMenuSpec.
	classListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Classes');
		addMorphUseAll: classList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: changeSetListPane proportionalWidth: 0.6;
		addAdjusterAndMorph: classListPane proportionalWidth: 0.4.
	
	messageList := (PluggableListMorphByItem
				withModel: model
				listGetter: #messageList
				indexGetter: #currentSelector
				indexSetter: #currentSelector:)
					menuNshortcutsKey: #messageListMenuSpec.
	messageList := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (BoxedMorph new noBorder color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Methods');
		addMorphUseAll: messageList.

	self layoutMorph
		addMorph: upperPanes proportionalHeight: 0.25;
		addAdjusterAndMorph: messageList proportionalHeight: 0.2;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55.

	self setLabel: model labelString! !

ChangeSorterWindow removeSelector: #classListKey:from:!

!methodRemoval: ChangeSorterWindow #classListKey:from: stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
classListKey: aChar from: view
	"Respond to a Command key in the class-list pane."

	self flag: #definesKeyboardShortcuts.
	aChar = $x ifTrue: [^ model removeClass].
	aChar = $d ifTrue: [^ model forgetClass]. 

	^ self messageListKey: aChar from: view "picks up b,h,p"!

ChangeSorterWindow removeSelector: #messageListKey:from:!

!methodRemoval: ChangeSorterWindow #messageListKey:from: stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
messageListKey: aChar from: view
	"Respond to a Command key in the message-list pane."

	self flag: #definesKeyboardShortcuts.
	aChar = $d ifTrue: [^ model forget].
	super messageListKey: aChar from: view!

ChangeSorterWindow removeSelector: #classListMenu!

!methodRemoval: ChangeSorterWindow #classListMenu stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
classListMenu
	"Fill aMenu with items appropriate for the class list"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Class List'.
	aMenu 
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'delete class from change set (d)'.
				#object 			-> 		#model.
				#selector 			-> 		#forgetClass.
				#icon 			-> 		#warningIcon
			} asDictionary.
			{
				#label 			-> 		'remove class from system (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeClass.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#label 			-> 		'browse protocol (p)'.
				#selector 			-> 		#browseFullProtocol.
				#icon 			-> 		#spreadsheetIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'inst var refs...'.
				#selector 			-> 		#browseInstVarRefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#label 			-> 		'inst var defs...'.
				#selector 			-> 		#browseInstVarDefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#label 			-> 		'class var refs...'.
				#selector 			-> 		#browseClassVarRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#label 			-> 		'class vars'.
				#selector 			-> 		#browseClassVariables.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#label 			-> 		'class refs (N)'.
				#selector 			-> 		#browseClassRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
		}`.
	^ aMenu!

ChangeSorterWindow removeSelector: #changeSetMenu!

!methodRemoval: ChangeSorterWindow #changeSetMenu stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
changeSetMenu
	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"

	| aMenu isForBaseSystem |
	self flag: #assumesKeyboardShortcuts.
	isForBaseSystem := model changeSet isForBaseSystem.
	aMenu := MenuMorph new defaultTarget: model.
	aMenu addTitle: 'Change Set'.
	aMenu addStayUpIcons.

	aMenu add: 'File out and remove (o)' 			action: #fileOutAndRemove 	icon: #fileOutIcon.
	aMenu add: 'File out and keep (k)' 				action: #fileOutAndKeep 		icon: #fileOutIcon.
	aMenu addLine.

	aMenu add: 'Rename change set (R)' 			action: #rename 					icon: #saveAsIcon 	enabled: isForBaseSystem.
	aMenu add: 'Destroy change set (x)' 			action: #remove 					icon: #warningIcon 	enabled: isForBaseSystem.
	aMenu addLine.
	model currentCanHavePreambleAndPostscript ifTrue: [
		aMenu addLine.
		model currentHasPreamble
			ifTrue: [
				aMenu add: 'Edit preamble (p)' 		action: #addPreamble 			icon: #textEditorIcon.
				aMenu add: 'Remove preamble' 	action: #removePreamble 		icon: #listRemoveIcon ]
			ifFalse: [
				aMenu add: 'Add preamble (p)' 	action: #addPreamble 			icon: #listAddIcon ].
		model currentHasPostscript
			ifTrue: [
				aMenu add: 'Edit postscript...' 		action: #editPostscript 			icon: #textEditorIcon .
				aMenu add: 'Remove postscript' 	action: #removePostscript 		icon: #listRemoveIcon ]
			ifFalse: [
				aMenu add: 'Add postscript...' 		action: #editPostscript 			icon: #listAddIcon ].
	].
	aMenu addLine.

	"CONFLICTS SECTION"
	(aMenu add: 'conflicts with other change sets' 	target: self 	action: #browseMethodConflicts 	icon: #emblemImportantIcon)
		setBalloonText: 'Browse all methods that occur both in this change set and in at least one other change set.'.
	aMenu addLine.

	"CHECKS SECTION"
	(aMenu add: 'trim history' 						action: #trimHistory 				icon: #clockIcon 		enabled: isForBaseSystem)
		setBalloonText: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.'.

	(aMenu add: 'view affected class categories' action: #viewAffectedClassCategories icon: #packageIcon)
		setBalloonText: ' Show class categories affected by any contained change'.

	^ aMenu!

ChangeSorterWindow removeSelector: #messageMenu!

!methodRemoval: ChangeSorterWindow #messageMenu stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
messageMenu
	"Fill aMenu with items appropriate for the message list; could be for a single or double changeSorter"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'message list'.
	aMenu addStayUpIcons.
	aMenu 
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'delete method from changeSet (d)'.
				#object 			-> 		#model.
				#selector 			-> 		#forget.
				#icon 			-> 		#warningIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'remove method from system (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeMessage.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#label 			-> 		'browse method (O)'.
				#selector 			-> 		#openSingleMessageBrowser.
				#icon 			-> 		#scriptIcon
			} asDictionary.
			{
				#label 			-> 		'browse protocol (p)'.
				#selector 			-> 		#browseFullProtocol.
				#icon 			-> 		#spreadsheetIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'fileOut'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutMessage.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			nil.
			{
				#label 			-> 		'senders of... (n)'.
				#selector 			-> 		#browseSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#label 			-> 		'implementors of... (m)'.
				#selector 			-> 		#browseMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#label 			-> 		'inheritance (i)'.
				#selector 			-> 		#methodInheritance.
				#icon 			-> 		#goDownIcon
			} asDictionary.
			{
				#label 			-> 		'versions (v)'.
				#selector 			-> 		#browseVersions.
				#icon 			-> 		#clockIcon
			} asDictionary.
		}`.
	^ aMenu!

ChangeSorterWindow removeSelector: #changeSetListKey:from:!

!methodRemoval: ChangeSorterWindow #changeSetListKey:from: stamp: 'Install-6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st 6/6/2024 11:42:30'!
changeSetListKey: aChar from: view
	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."

	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing]. 
	aChar = $o ifTrue: [^ model fileOutAndRemove].
	aChar = $k ifTrue: [^ model fileOutAndKeep].
	aChar = $R ifTrue: [^ model rename].
	aChar = $x ifTrue: [^ model remove].

	^ self messageListKey: aChar from: view!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6414-UseNewMenuSpec-ChangeSorter-JuanVuletich-2024May27-16h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6414] on 28 May 2024 at 4:02:03 pm'!
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:58:43'!
 contextClassBrowse

	BrowserWindow
		fullOnClass: model contextVariablesInspector selectedClassOrMetaClass! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:57:09'!
     contextClassProtocol

	ProtocolBrowserWindow
		openFullProtocolForClass: model contextVariablesInspector selectedClassOrMetaClass! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:53:36'!
              inspectContextSelection

	model contextVariablesInspector selectionIndex = 0 ifTrue: [^ self flash].
	^ model contextVariablesInspector selection inspect! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:53:44'!
                      inspectReceiverSelection
	model receiverInspector selectionIndex = 0 ifTrue: [^ self flash].
	^ model receiverInspector  selection inspect! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:58:37'!
     receiverClassBrowse

	BrowserWindow
		fullOnClass: model receiverInspector selectedClassOrMetaClass! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 5/28/2024 15:57:21'!
            receiverClassProtocol

	ProtocolBrowserWindow
		openFullProtocolForClass: model receiverInspector selectedClassOrMetaClass! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 15:13:26'!
              contextStackMenuSpec
	"Spec for the menu and shortcut keys for a class comment version in the versions list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(10		'fullStack (f)' 						$f 	window 			fullStack 						nil 	nil 	'show the complete call stack')
		#(20		'proceed (p)' 						$p 	window 			proceed 						nil 	nil 	'close the debugger and proceed')
		#(30		'restart (r)' 						$r 	window 			restart 						nil 	nil 	'reset this context to its start')
		#(40		'step into send (e)' 						$e 	window 			send 						nil 	nil 	'step into message sends')
		#(50		'step over send (t)' 						$t 	window 			doStep 						nil 	nil 	'step over message sends')
		#(60		'step into block (T)' 						$T 	window 			stepIntoBlock 						nil 	nil 	'step into a code block')
		#(70		'run to cursor' 						nil 	window 			runToCursor 						nil 	nil 	'run to cursor')
		#(80		'where (w)' 						$w 	window 			where 						nil 	nil 	'select current pc range')
		#(90		'peel to first like this' 						nil 	window 			peelToFirst 						nil 	nil 	'peel stack back to the second occurance of selected message')
		#(100 		'-----')
		#(110		'return entered value' 						nil 	window 			returnValue 						nil 	nil 	'lets you enter an expression and return method answering result')
		#(120		'toggle break on entry' 						nil 	model 			toggleBreakOnEntry 						nil 	nil 	'install or uninstall a breakpoint on method entry')
	)! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 15:56:01'!
 contextVariablesListMenuSpec
	"Spec for the menu and shortcut keys for the list of variables in this context.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(10		'inspect (i)' 						$i 	window 			inspectContextSelection 							nil 	inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreContextSelection 							nil 	exploreIcon)
		#(30 		'-----')
		#(40		'browser full (b)' 						$b 	window 			contextClassBrowse 							nil 	editFindReplaceIcon)
		#(50		'browser hierarch (h)' 						$h 	window 			contextClassHierarchy 							nil 	goTopIcon)
		#(60		'browser protocol (p)' 						$p 	window 			contextClassProtocol 							nil 	spreadsheetIcon)
	)! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 15:55:58'!
      receiverVariablesListMenuSpec
	"Spec for the menu and shortcut keys for the list of instance variables in the receiver.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(10		'inspect (i)' 						$i 	window 			inspectReceiverSelection 							nil 	inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreReceiverSelection 							nil 	exploreIcon)
		#(30 		'-----')
		#(40		'browser full (b)' 						$b 	window 			receiverClassBrowse 							nil 	editFindReplaceIcon)
		#(50		'browser hierarch (h)' 						$h 	window 			receiverClassHierarchy 							nil 	goTopIcon)
		#(60		'browser protocol (p)' 						$p 	window 			receiverClassProtocol 							nil 	spreadsheetIcon)
	)! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/28/2024 15:59:15' prior: 50333005!
               contextVariableInspector

	^ contextVariableInspector ifNil: [
		contextVariableInspector := (PluggableListMorph
			withModel: model contextVariablesInspector 
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				menuNshortcutsKey: #contextVariablesListMenuSpec ].		! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/28/2024 15:59:10' prior: 50333019!
             receiverInspector

	^ receiverInspector ifNil: [
		receiverInspector := (PluggableListMorph
			withModel: model receiverInspector
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				menuNshortcutsKey: #receiverVariablesListMenuSpec ].! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 5/28/2024 15:15:17' prior: 50333032!
            stackList

	^ stackList ifNil: [
		stackList := (PluggableListMorph
			withModel: model 
			listGetter: #contextStackList
			indexGetter: #contextStackIndex
			indexSetter: #toggleContextStackIndex:)
				menuNshortcutsKey: #contextStackMenuSpec ].
! !

DebuggerWindow removeSelector: #exploreSelectionIn:!

!methodRemoval: DebuggerWindow #exploreSelectionIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
exploreSelectionIn: anInspector
	"Create and schedule an Explorer on the receiver's model's currently selected object."

	^ anInspector selection explore!

DebuggerWindow removeSelector: #browseClassRefsIn:!

!methodRemoval: DebuggerWindow #browseClassRefsIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
browseClassRefsIn: anInspector

	anInspector selectedClass ifNotNil: [ :cls | 
		Smalltalk browseAllCallsOnClass: cls theNonMetaClass]!

DebuggerWindow removeSelector: #browseHierarchyIn:!

!methodRemoval: DebuggerWindow #browseHierarchyIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
browseHierarchyIn: anInspector
	"Create and schedule a class list browser on the receiver's hierarchy."

	HierarchyBrowserWindow
		onClass: anInspector selectedClassOrMetaClass
		selector: nil!

DebuggerWindow removeSelector: #inspectorKey:from:!

!methodRemoval: DebuggerWindow #inspectorKey:from: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
inspectorKey: aChar from: view
	"Respond to a Command key issued while the cursor is over my field list"

	self flag: #definesKeyboardShortcuts.
	aChar = $i ifTrue: [^ self inspectSelectionIn: view model ].
	aChar = $I ifTrue: [^ self exploreSelectionIn: view model ].
	aChar = $b ifTrue:[^ self browseMethodFullIn: view model ].
	aChar = $h ifTrue:[^ self browseHierarchyIn: view model].
	aChar = $p ifTrue: [^ self browseFullProtocolIn: view model].
	aChar = $N ifTrue: [^ self browseClassRefsIn: view model].!

DebuggerWindow removeSelector: #contextStackKey:from:!

!methodRemoval: DebuggerWindow #contextStackKey:from: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
contextStackKey: aChar from: view
	"Respond to a keystroke in the context list"

	self flag: #definesKeyboardShortcuts.
	aChar = $e ifTrue: [^ self send].
	aChar = $t ifTrue: [^ self doStep].
	aChar = $T ifTrue: [^ self stepIntoBlock].
	aChar = $p ifTrue: [^ self proceed].
	aChar = $r ifTrue: [^ self restart].
	aChar = $f ifTrue: [^ self fullStack].
	aChar = $w ifTrue: [^ self where].

	^ self messageListKey: aChar from: view!

DebuggerWindow removeSelector: #contextFieldListMenu!

!methodRemoval: DebuggerWindow #contextFieldListMenu stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
contextFieldListMenu
	"Arm the supplied menu with items for the field-list of the receiver"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'explore (I)'.
				#selector 			-> 		#exploreContextSelection
			} asDictionary.
			nil.
			{
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#contextClassHierarchy
			} asDictionary.
		}`.
	^ aMenu!

DebuggerWindow removeSelector: #receiverFieldListMenu!

!methodRemoval: DebuggerWindow #receiverFieldListMenu stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
receiverFieldListMenu
	"Arm the supplied menu with items for the field-list of the receiver"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'explore (I)'.
				#selector 			-> 		#exploreReceiverSelection
			} asDictionary.
			nil.
			{
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#receiverClassHierarchy
			} asDictionary.
		}`.
	^ aMenu!

DebuggerWindow removeSelector: #browseMethodFullIn:!

!methodRemoval: DebuggerWindow #browseMethodFullIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
browseMethodFullIn: anInspector
	"Create and schedule a full Browser and then select the current class and message."

	|  myClass |
	(myClass := anInspector selectedClassOrMetaClass) ifNotNil: [
		BrowserWindow fullOnClass: myClass selector: nil]!

DebuggerWindow removeSelector: #contextStackMenu!

!methodRemoval: DebuggerWindow #contextStackMenu stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
contextStackMenu
	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'fullStack (f)'.
				#selector 			-> 		#fullStack
			} asDictionary.
			{
				#label 			-> 		'restart (r)'.
				#selector 			-> 		#restart
			} asDictionary.
			{
				#label 			-> 		'proceed (p)'.
				#selector 			-> 		#proceed
			} asDictionary.
			{
				#label 			-> 		'step (t)'.
				#selector 			-> 		#doStep
			} asDictionary.
			{
				#label 			-> 		'step through (T)'.
				#selector 			-> 		#stepIntoBlock
			} asDictionary.
			{
				#label 			-> 		'send (e)'.
				#selector 			-> 		#send
			} asDictionary.
			{
				#label 			-> 		'where (w)'.
				#selector 			-> 		#where
			} asDictionary.
			{
				#label 			-> 		'peel to first like this'.
				#selector 			-> 		#peelToFirst
			} asDictionary.
			nil.
			{
				#label 			-> 		'return entered value'.
				#selector 			-> 		#returnValue
			} asDictionary.
			{
				#label 			-> 		'toggle break on entry'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleBreakOnEntry
			} asDictionary.
		}`.
	^aMenu!

DebuggerWindow removeSelector: #inspectSelectionIn:!

!methodRemoval: DebuggerWindow #inspectSelectionIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
inspectSelectionIn: anInspector
	"Create and schedule an Inspector on the receiver's model's currently selected object."

	^ anInspector selection inspect!

DebuggerWindow removeSelector: #browseFullProtocolIn:!

!methodRemoval: DebuggerWindow #browseFullProtocolIn: stamp: 'Install-6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st 6/6/2024 11:42:30'!
browseFullProtocolIn: anInspector
	"Spawn a window showing full protocol for the receiver's selection"

	ProtocolBrowserWindow
		openFullProtocolForClass: anInspector selectedClassOrMetaClass!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6415-UseNewMenuSpec-Debugger-JuanVuletich-2024May28-14h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6414] on 28 May 2024 at 4:38:57 pm'!
!Inspector methodsFor: 'user interface support' stamp: 'jmv 5/28/2024 16:12:30'!
       objectSpecificMenuSpecFrom: aWindow

	^nil! !
!DictionaryInspector methodsFor: 'user interface support' stamp: 'jmv 5/28/2024 16:13:06' overrides: 50338175!
   objectSpecificMenuSpecFrom: aWindow

	^aWindow menuSpecForDictionary! !
!SetInspector methodsFor: 'user interface support' stamp: 'jmv 5/28/2024 16:13:26' overrides: 50338175!
                objectSpecificMenuSpecFrom: aWindow

	^aWindow menuSpecForSet! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 16:33:29'!
          fieldListMenuSpec
	"Spec for the menu and shortcut keys for the list of variables in our object.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	answer := #(
		#(10		'inspect (i)' 						$i 	window 			inspectSelection 							nil 	inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreSelection 							nil 	exploreIcon)
		#(30		'copy to clipboard (c)' 						$c 	window 			copySelectionToClipboard 							nil 	copyIcon)
		#(40		'basic inspect' 						nil 	window 			inspectBasic 							nil 	inspectIcon)
		#(50		'references finder' 						nil 	window 			openReferencesFinder 							nil 	exploreIcon)
		#(60		'weight explorer' 						nil 	window 			openWeightExplorer 							nil 	exploreIcon)
	).
	(self model objectSpecificMenuSpecFrom: self) ifNotNil: [ :spec |
		answer := answer, spec ].
	answer := answer, #(
		#(210 		'-----')
		#(220		'browser full (b)' 						$b 	window 			browseMethodFull 							nil 	editFindReplaceIcon)
		#(230		'browser hierarch (h)' 						$h 	window 			browseHierarchy 							nil 	goTopIcon)
		#(240		'browser protocol (p)' 						$p 	window 			browseFullProtocol 							nil 	spreadsheetIcon)
	).
	^answer! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 16:19:55'!
                              menuSpecForDictionary
	"Spec for the menu and shortcut keys for the list of variables in our object.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(100 		'-----')
		#(110		'inspect key' 					nil 	window 			inspectSelectedKey 							nil 	findIcon)
		#(120		'senders of this key' 					nil 	window 			sendersOfSelectedKey 							nil 	mailForwardIcon)
		#(130		'add key' 					nil 	window 			addEntry 							nil 	listAddIcon)
		#(140		'rename key' 					nil 	window 			renameEntry 							nil 	saveAsIcon)
		#(150		'remove' 					nil 	model 			removeSelection 							nil 	listRemoveIcon)
	)! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/28/2024 16:17:59'!
          menuSpecForSet
	"Spec for the menu and shortcut keys for the list of variables in our object.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(100 		'-----')
		#(110		'remove' 			nil 	model 			removeSelection 					nil 	listRemoveIcon)
	)! !
!InspectorWindow methodsFor: 'GUI building' stamp: 'jmv 5/28/2024 16:32:31' prior: 50333183!
                             buildList

	| list |
	
	list := (PluggableListMorph
			withModel: model 
			listGetter: #fieldList
			indexGetter: #selectionIndex
			indexSetter: #toggleIndex:)
				menuNshortcutsKey: #fieldListMenuSpec.
	list doubleClickSelector: #inspectSelection.
	^list! !

InspectorWindow removeSelector: #basicMenuOptions!

!methodRemoval: InspectorWindow #basicMenuOptions stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
basicMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
		{
			#label 			-> 		'inspect (i)'.
			#selector 			-> 		#inspectSelection.
			#icon 			-> 		#inspectIcon
		} asDictionary.
		{
			#label 			-> 		'explore (I)'.
			#selector 			-> 		#exploreSelection.
			#icon 			-> 		#exploreIcon
		} asDictionary.
		{
			#label 			-> 		'copy to clipboard (c)'.
			#selector 			-> 		#copySelectionToClipboard.
			#icon 			-> 		#copyIcon
		} asDictionary.
		{
			#label 			-> 		'basic inspect'.
			#selector 			-> 		#inspectBasic.
			#icon 			-> 		#inspectIcon
		} asDictionary.
		{
			#label 			-> 		'references finder'.
			#selector 			-> 		#openReferencesFinder.
			#icon 			-> 		#exploreIcon
		} asDictionary.
		{
			#label 			-> 		'weight explorer'.
			#selector 			-> 		#openWeightExplorer.
			#icon 			-> 		#exploreIcon
		} asDictionary.
	}`.!

InspectorWindow removeSelector: #fieldListMenu!

!methodRemoval: InspectorWindow #fieldListMenu stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
fieldListMenu
	"Arm the supplied menu with items for the field-list of the receiver"

	| aMenu |
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addItemsFromDictionaries: self basicMenuOptions.
	self model suggestObjectSpecificMenuItemsFor: aMenu from: self.
	aMenu addItemsFromDictionaries: self menuOptionsForBrowsing.
	^ aMenu!

InspectorWindow removeSelector: #menuOptionsForBrowsing!

!methodRemoval: InspectorWindow #menuOptionsForBrowsing stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
menuOptionsForBrowsing

	self flag: #assumesKeyboardShortcuts.
	^ `{
		nil.
		{
			#label 			-> 		'browse full (b)'.
			#selector 			-> 		#browseMethodFull.
			#icon 			-> 		#editFindReplaceIcon
		} asDictionary.
		{
			#label 			-> 		'browse hierarchy (h)'.
			#selector 			-> 		#browseHierarchy.
			#icon 			-> 		#goTopIcon
		} asDictionary.
		{
			#label 			-> 		'browse protocol (p)'.
			#selector 			-> 		#browseFullProtocol.
			#icon 			-> 		#spreadsheetIcon
		} asDictionary.
	}`!

InspectorWindow removeSelector: #inspectorKey:from:!

!methodRemoval: InspectorWindow #inspectorKey:from: stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
inspectorKey: aChar from: view
	"Respond to a Command key issued while the cursor is over my field list"

	self flag: #definesKeyboardShortcuts.
	aChar = $i ifTrue: [^ self inspectSelection].
	aChar = $I ifTrue: [^ self exploreSelection].
	aChar = $b ifTrue:[^ self browseMethodFull].
	aChar = $h ifTrue:[^ self browseHierarchy].
	aChar = $p ifTrue: [^ self browseFullProtocol].
	aChar = $N ifTrue: [^ self browseClassRefs].!

InspectorWindow removeSelector: #browseClassRefs!

!methodRemoval: InspectorWindow #browseClassRefs stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
browseClassRefs

	model selectedClass ifNotNil: [ :cls | 
		Smalltalk browseAllCallsOnClass: cls theNonMetaClass]!

InspectorWindow removeSelector: #menuOptionsForDictionary!

!methodRemoval: InspectorWindow #menuOptionsForDictionary stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
menuOptionsForDictionary

	^ `{
		nil.
		{
			#label 			-> 		'inspect key'.
			#selector 			-> 		#inspectSelectedKey.
			#icon 			-> 		#findIcon
		} asDictionary.
		{
			#label 			-> 		'senders of this key'.
			#selector 			-> 		#sendersOfSelectedKey.
			#icon 			-> 		#mailForwardIcon
		} asDictionary.
		{
			#label 			-> 		'add key'.
			#selector 			-> 		#addEntry.
			#icon 			-> 		#listAddIcon
		} asDictionary.
		{
			#label 			-> 		'rename key'.
			#selector 			-> 		#renameEntry.
			#icon 			-> 		#saveAsIcon
		} asDictionary.
		{
			#label 			-> 		'remove'.
			#object 			-> 		#model.
			#selector 			-> 		#removeSelection.
			#icon 			-> 		#listRemoveIcon
		} asDictionary.
	}`!

InspectorWindow removeSelector: #menuOptionsForSet!

!methodRemoval: InspectorWindow #menuOptionsForSet stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
menuOptionsForSet

	^ `{
		nil.
		{
			#label 			-> 		'remove'.
			#object 			-> 		#model.
			#selector 			-> 		#removeSelection.
			#icon 			-> 		#listRemoveIcon
		} asDictionary.
	}`!

SetInspector removeSelector: #suggestObjectSpecificMenuItemsFor:from:!

!methodRemoval: SetInspector #suggestObjectSpecificMenuItemsFor:from: stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
suggestObjectSpecificMenuItemsFor: aMenu from: aWindow

	aMenu addItemsFromDictionaries: aWindow menuOptionsForSet!

DictionaryInspector removeSelector: #suggestObjectSpecificMenuItemsFor:from:!

!methodRemoval: DictionaryInspector #suggestObjectSpecificMenuItemsFor:from: stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
suggestObjectSpecificMenuItemsFor: aMenu from: aWindow

	aMenu addItemsFromDictionaries: aWindow menuOptionsForDictionary!

Inspector removeSelector: #suggestObjectSpecificMenuItemsFor:from:!

!methodRemoval: Inspector #suggestObjectSpecificMenuItemsFor:from: stamp: 'Install-6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st 6/6/2024 11:42:30'!
suggestObjectSpecificMenuItemsFor: aMenu from: aWindow

	^self!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6416-UseNewMenuSpec-Inspector-JuanVuletich-2024May28-16h02m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6414] on 29 May 2024 at 11:07:25 am'!
!ObjectExplorer methodsFor: 'monitoring' stamp: 'jmv 5/29/2024 10:56:12'!
    isMonitoring
	^monitorList isEmptyOrNil not! !
!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 5/29/2024 10:50:22'!
                              addHaloToSelection
	model getCurrentSelection item addHalo! !
!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 5/29/2024 10:54:57'!
               monitorChanges
	"Start stepping and watching the given wrapper for changes."

	model getCurrentSelection ifNotNil: [ :wrapper |
		model monitorList at: wrapper put: wrapper asString.
		self startSteppingStepTime: 200 ]! !
!ObjectExplorerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 11:05:49'!
        listMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	model getCurrentSelection
		ifNil: [^#()]
		ifNotNil: [ :currSel |
			answer := #(
				#(10		'inspect (i)' 						$i 	window 			inspectSelection 							nil 	inspectIcon)
				#(20		'explore (I)' 						$I 	window 			exploreSelection 							nil 	exploreIcon)
				#(30		'copy to clipboard (c)' 						$c 	window 			copySelectionToClipboard 							nil 	copyIcon)
				#(40		'basic inspect' 						nil 	window 			inspectBasic 							nil 	inspectIcon)
				#(50		'references finder' 						nil 	window 			openReferencesFinder 							nil 	exploreIcon)
				#(60		'weight explorer' 						nil 	window 			openWeightExplorer 							nil 	exploreIcon)
				#(70 		'-----')
				#(80		'browser full (b)' 						$b 	window 			browseMethodFull 							nil 	editFindReplaceIcon)
				#(90		'browser hierarch (h)' 						$h 	window 			browseHierarchy 							nil 	goTopIcon)
				#(100		'browser protocol (p)' 						$p 	window 			browseFullProtocol 							nil 	spreadsheetIcon)).
			(currSel item is: #Morph) ifTrue: [ answer := answer, #(
				#(110 		'-----')
				#(120		'show morph halo' 						nil 	window 			addHaloToSelection 							nil 	editFindReplaceIcon)) ].
			model class == ReferencesExplorer ifTrue: [ answer := answer, #(
				#(210 		'-----')
				#(220		'rescan' 						nil 	window 			rescan 							nil 	editFindReplaceIcon)) ].
			answer := answer, #(
				#(310 		'-----')
				#(320		'monitor changes' 						nil 	window 			monitorChanges 							nil 	editFindReplaceIcon)).
			model isMonitoring ifTrue: [ answer := answer, #(
				#(410 		'-----')
				#(420		'stop monitoring all' 						nil 	window 			stopMonitoring 							nil 	editFindReplaceIcon)) ].
			^answer ].! !
!ObjectExplorerWindow methodsFor: 'GUI building' stamp: 'jmv 5/29/2024 11:06:54' prior: 50333196!
                            buildMorphicWindow

	| textMorph |
	listMorph := (HierarchicalListMorph
			withModel: model
			listGetter: #getList
			indexGetter: #getCurrentSelection
			indexSetter: #noteNewSelection:)
				menuNshortcutsKey: #listMenuSpec.
	listMorph autoDeselect: false.
	listMorph doubleClickSelector: #inspectSelection.
	textMorph := ((TextModelMorph textProvider: model)
			askBeforeDiscardingEdits: false;
			emptyTextDisplayMessage: 'Smalltalk expression (self is selected item)').
	self layoutMorph
		addMorph: listMorph proportionalHeight: 0.8;
		addAdjusterAndMorph: textMorph proportionalHeight: 0.2.
	self setLabel: model rootObject shortPrintString.
! !

ObjectExplorerWindow removeSelector: #genericMenu!

!methodRemoval: ObjectExplorerWindow #genericMenu stamp: 'Install-6417-UseNewMenuSpec-Explorer-JuanVuletich-2024May28-16h38m-jmv.001.cs.st 6/6/2024 11:42:30'!
genericMenu
	"Borrow a menu from my inspector"
	
	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	model getCurrentSelection
		ifNil: [
			aMenu
				add: '*nothing selected*'
				target: self
				action: #yourself]
		ifNotNil: [
			aMenu
				addItemsFromDictionaries: `{
					{
						#label 			-> 		'inspect (i)'.
						#selector 			-> 		#inspectSelection.
						#icon 			-> 		#inspectIcon
					} asDictionary.
					{
						#label 			-> 		'explore (I)'.
						#selector 			-> 		#exploreSelection.
						#icon 			-> 		#exploreIcon
					} asDictionary.
					{
						#label 			-> 		'copy to clipboard (c)'.
						#selector 			-> 		#copySelectionToClipboard.
						#icon 			-> 		#copyIcon
					} asDictionary.
					{
						#label 			-> 		'basic inspect'.
						#selector 			-> 		#inspectBasic.
						#icon 			-> 		#inspectIcon
					} asDictionary.
					{
						#label 			-> 		'references finder'.
						#selector 			-> 		#openReferencesFinder.
						#icon 			-> 		#exploreIcon
					} asDictionary.
					{
						#label 			-> 		'weight explorer'.
						#selector 			-> 		#openWeightExplorer.
						#icon 			-> 		#exploreIcon
					} asDictionary.
					nil.
					{
						#label 			-> 		'browse full (b)'.
						#selector 			-> 		#browseMethodFull.
						#icon 			-> 		#editFindReplaceIcon
					} asDictionary.
					{
						#label 			-> 		'browse hierarchy (h)'.
						#selector 			-> 		#browseHierarchy.
						#icon 			-> 		#goTopIcon
					} asDictionary.
					{
						#label 			-> 		'browse protocol (p)'.
						#selector 			-> 		#browseFullProtocol.
						#icon 			-> 		#spreadsheetIcon
					} asDictionary.
				}`.
			model getCurrentSelection ifNotNil: [ :currSel |
				(currSel item is: #Morph) ifTrue: [
					aMenu addLine.
					aMenu add: 'show morph halo' target: currSel item action: #addHalo]].
			aMenu addLine;
				add: 'monitor changes'
				target: self
				action: #monitor:
				argument: model getCurrentSelection.
			model class == ReferencesExplorer ifTrue: [
				aMenu addLine;
					add: 'rescan'
					target: self
					action: #rescan ]].
	model basicMonitorList isEmptyOrNil
		ifFalse: [
			aMenu addLine;
				add: 'stop monitoring all'
				target: self
				action: #stopMonitoring ].
	^ aMenu!

ObjectExplorerWindow removeSelector: #explorerKey:from:!

!methodRemoval: ObjectExplorerWindow #explorerKey:from: stamp: 'Install-6417-UseNewMenuSpec-Explorer-JuanVuletich-2024May28-16h38m-jmv.001.cs.st 6/6/2024 11:42:30'!
explorerKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	model getCurrentSelection ifNotNil: [

		aChar = $i ifTrue: [^ self inspectSelection].
		aChar = $I ifTrue: [^ self exploreSelection].

		aChar = $b ifTrue: [^ self browseMethodFull].
		aChar = $h ifTrue: [^ self browseHierarchy].
		aChar = $p ifTrue: [^ self browseFullProtocol].
		aChar = $N ifTrue: [^ self browseClassRefs]].!

ObjectExplorerWindow removeSelector: #monitor:!

!methodRemoval: ObjectExplorerWindow #monitor: stamp: 'Install-6417-UseNewMenuSpec-Explorer-JuanVuletich-2024May28-16h38m-jmv.001.cs.st 6/6/2024 11:42:30'!
monitor: anObjectExplorerWrapper
	"Start stepping and watching the given wrapper for changes."

	anObjectExplorerWrapper ifNotNil: [
		model monitorList at: anObjectExplorerWrapper put: anObjectExplorerWrapper asString.
		self startSteppingStepTime: 200 ]!

ObjectExplorer removeSelector: #basicMonitorList!

!methodRemoval: ObjectExplorer #basicMonitorList stamp: 'Install-6417-UseNewMenuSpec-Explorer-JuanVuletich-2024May28-16h38m-jmv.001.cs.st 6/6/2024 11:42:30'!
basicMonitorList
	^monitorList!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6417-UseNewMenuSpec-Explorer-JuanVuletich-2024May28-16h38m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6417] on 29 May 2024 at 12:24:07 pm'!
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 11:30:19' prior: 50337133!
                      changeSetListMenuSpec
	"Spec for the menu and shortcut keys the changesets list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	answer := #(
			#(0 		'Change Set' 						true)
			#(10 		'File out and remove (o)' 							$o 	model 			fileOutAndRemove 							nil 				fileOutIcon)
			#(20 		'File out and keep (k)' 							$k 	model 			fileOutAndKeep 							nil 				fileOutIcon)
			#(30 		'-----')
			#(40 		'Rename change set (R)' 					 		$R 	model 			rename 							csIsForBase 				saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			remove 							csIsForBase 				warningIcon)
	).
	model currentCanHavePreambleAndPostscript ifTrue: [
		model currentHasPreamble
			ifTrue: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Edit preamble (p)' 						$p 	model 			addPreamble 							nil 				textEditorIcon)
				#(80 		'Remove preamble' 						nil 	model 			removePreamble 							nil 				listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Add preamble (p)' 						$p 	model 			addPreamble 							nil 				listAddIcon) )].
		model currentHasPostscript
			ifTrue: [ answer  := answer, #(
				#(90 		'Edit postscript...' 						nil 	model 			editPostscript 							nil 				textEditorIcon)
				#(100 		'Remove postscript' 						nil 	model 			removePostscript 							nil 				listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(90 		'Add postscript...' 						nil 	model 			editPostscript 							nil 				listAddIcon) )].
	].

	answer  := answer, #(
		#(110 		'-----')
		#(120 		'conflicts with other change sets' 								nil 	window			browseMethodConflicts 							nil 				emblemImportantIcon
			'Browse all methods that occur both in this change set and in at least one other change set.')
		#(130 		'-----')
		#(140 		'trim history' 								nil 	model			trimHistory 							csIsForBase 				clockIcon
			'Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.')
		#(150 		'view affected class categories' 								nil 	model 			viewAffectedClassCategories 								nil 			packageIcon
			'Show class categories affected by any contained change')
	).
	^answer! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6418-tweak-JuanVuletich-2024May29-12h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6418] on 29 May 2024 at 12:27:18 pm'!
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 12:05:06'!
 directoryTreeMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| showHiddenTogleAndLabel |
	showHiddenTogleAndLabel := model showHidden asMenuItemTextPrefix, 'show hidden folders and files'.
	^{
		{10. 'delete directory...'. 								nil. 	#model. 			#deleteDirectory. 							nil. 	#warningIcon.
			'Delete the selected directory'}.
		{20. 	showHiddenTogleAndLabel. 							nil. 	#model. 			#toggleShowHidden. 							nil. 	nil.
			'show or hide files and directories that begin with a dot'}.
		{30. 	'show Cuis top as tree root'. 							nil. 	#window. 			#useCuisTopAsTreeRoot. 							nil. 	nil.
			'use the default Cuis top directory'}.
		{40. 'show OS roots as tree root'. 								nil. 	#window. 			#useOSrootsAsTreeRoot. 							nil. 	nil.
			'use the host OS root directories. Drives on Windows; "/" on Unix'}
	}! !
!FileListWindow methodsFor: 'menu commands' stamp: 'jmv 5/29/2024 11:58:59'!
                   useCuisTopAsTreeRoot
	Preferences at: #initialFileListDirectories put: #cuis.
	Preferences saveToDisk: #initialFileListDirectories.

	model changed: #topDirectoryWrappers.
	model updateDirectory.
	model updateFileList.! !
!FileListWindow methodsFor: 'menu commands' stamp: 'jmv 5/29/2024 11:59:02'!
                     useOSrootsAsTreeRoot
	Preferences at: #initialFileListDirectories put: #roots.
	Preferences saveToDisk: #initialFileListDirectories.

	model changed: #topDirectoryWrappers.
	model updateDirectory.
	model updateFileList.! !
!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 5/29/2024 11:48:54' prior: 50333159!
     morphicDirectoryTreePane

	^(HierarchicalListMorph
		withModel: model
		listGetter: #topDirectoryWrappers
		indexGetter: #currentDirectorySelected
		indexSetter: #setSelectedDirectoryTo:)
			menuNshortcutsKey: #directoryTreeMenuSpec;
			autoDeselect: false;
			yourself! !

FileListWindow removeSelector: #directoryTreeMenu!

!methodRemoval: FileListWindow #directoryTreeMenu stamp: 'Install-6419-UseNewMenuSpec-FileListTree-JuanVuletich-2024May29-12h25m-jmv.001.cs.st 6/6/2024 11:42:30'!
directoryTreeMenu
	| aMenu initialDirectoriesMenu  |
	aMenu := MenuMorph new defaultTarget: model.
	(aMenu
		add: 'delete directory...'
		action: #deleteDirectory
		icon: #warningIcon)
			setBalloonText: 'Delete the selected directory'.
	(aMenu
		add: model showHidden asMenuItemTextPrefix, 'show hidden folders and files'
		action: #toggleShowHidden)
			setBalloonText: 'show or hide files and directories that begin with a dot'.
	initialDirectoriesMenu := MenuMorph new.
	#(
		(cuis  		'Cuis top' 'Use the default Cuis top directory')
		(roots  		'OS roots' 'Use the host OS root directories. Drives on Windows; "/" on Unix')
	)
		do: [ :entry |
			(initialDirectoriesMenu
				add: entry second
				target: self
				action: #initialFileListDirectories:
				argument: entry first)
					setBalloonText: entry third ].
	aMenu add: 'default initial directories' subMenu: initialDirectoriesMenu.
	^ aMenu!

FileListWindow removeSelector: #initialFileListDirectories:!

!methodRemoval: FileListWindow #initialFileListDirectories: stamp: 'Install-6419-UseNewMenuSpec-FileListTree-JuanVuletich-2024May29-12h25m-jmv.001.cs.st 6/6/2024 11:42:30'!
initialFileListDirectories: aSymbol
	Preferences at: #initialFileListDirectories put: aSymbol.
	Preferences saveToDisk: #initialFileListDirectories.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6419-UseNewMenuSpec-FileListTree-JuanVuletich-2024May29-12h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6418] on 29 May 2024 at 3:44:40 pm'!
!ProcessBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 15:08:43'!
               processListMenuSpec
	"Spec for the menu and shortcut keys for the list of processes.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| rules answer |
	answer := #().
	model selectedProcess ifNotNil: [ :selectedProcess |
		rules := model class rulesFor: model selectedProcess.
		answer := answer, #(
				#(10		'inspect (i)' 						$i 	window 			inspectProcess 						nil 	inspectIcon)
				#(20		'explore (I)' 						$I 	window 			exploreProcess 						nil 	exploreIcon)
				#(30		'references finder (P)' 						$P 	window 			openReferencesFinder 					nil 		exploreIcon)).
		rules first ifTrue: [
			answer := answer, 
				#((40		'terminate (t)' 						$t 	model 			terminateProcess 						nil 	cancelIcon)).
			selectedProcess isSuspended ifTrue: [ answer := answer,
				#((50		'resume (r)' 						$r 	model 			resumeProcess 						nil 	mediaPlaybackStartIcon))]
			ifFalse: [ answer := answer, 
				#((50 		'suspend (s)' 						$s 	model 			suspendProcess 						nil 	chatIcon))]].
		rules second ifTrue: [ answer := answer, #(
				#(60 		'change priority (p)' 						$p 	window 			changePriority 						nil 	systemMonitorIcon)
				#(70 		'debug (d)' 						$d 	window 			debugProcess 						nil 	debugIcon))].
		(selectedProcess suspendingList isKindOf: Semaphore) ifTrue: [ answer := answer,
				#((80 		'signal Semaphore (S)' 						$S 	model 			signalSemaphore 						nil 	haloHelpIcon))].
		answer := answer, #(
				#(90		'full stack (k)' 						$k 	model 			moreStack 						nil 	systemIcon)
				#(100 		'-----'))].
	answer := answer, #(
				#(110		'find context... (f)' 						$f 	window 			findContext 						nil 	findIcon)
				#(120		'find again (g)' 						$g 	model 			nextContext 						nil 	systemIcon)
				#(130 		'-----')).
	answer := answer, (isStepping ifTrue: [
				#((140		'turn off auto-update (a)' 						$a 	window 			toggleAutoUpdate 						nil 	cancelIcon)) ]
			ifFalse: [
				#((140		'turn on auto-update (a)' 						$a 	window 			toggleAutoUpdate 						nil 	updateIcon)) ]).
	answer := answer, #(
				#(150		'update list (u)' 						$u 	model 			updateProcessList 						nil 	updateIcon)
				#(160 		'-----')).
	answer := answer, (CPUWatcher isMonitoring ifTrue: [
				#((170		'stop CPUWatcher' 						nil 	model 			stopCPUWatcher 						nil 	inspectIcon)) ]
			ifFalse: [
				#((170		'start CPUWatcher' 						nil 	model 			startCPUWatcher 						nil 	inspectIcon)) ]).
	answer := answer, (StackSizeWatcher isWatching ifTrue: [
				#((180		'stop StackSizeWatcher' 						nil 	model 			stopStackSizeWatcher 						nil 	inspectIcon)) ]
			ifFalse: [
				#((180		'start StackSizeWatcher' 						nil 	model 			startStackSizeWatcher 						nil 	inspectIcon)) ]).
	^answer! !
!ProcessBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 12:55:56'!
                  stackMenuSpec
	"Spec for the menu and shortcut keys for the list of stack frames.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^ #(
		#(10		'inspect context (c)' 					$c 	window 			inspectContext 					nil 	inspectIcon)
		#(20		'explore context (C)' 					$C 	window 			exploreContext 					nil 	exploreIcon)
		#(30		'inspect receiver (i)' 					$i 	window 			inspectReceiver 					nil 	inspectIcon)
		#(40		'explore receiver (I)' 					$I 	window 			exploreReceiver 					nil 	exploreIcon)
		#(50		'browse context (b)' 					$b 	window 			browseContext 					nil 	editFindReplaceIcon)
	).! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 12:54:27' prior: 50337751!
   contextStackMenuSpec
	"Spec for the menu and shortcut keys for call stack list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(10		'fullStack (f)' 						$f 	window 			fullStack 						nil 	nil 	'show the complete call stack')
		#(20		'proceed (p)' 						$p 	window 			proceed 						nil 	nil 	'close the debugger and proceed')
		#(30		'restart (r)' 						$r 	window 			restart 						nil 	nil 	'reset this context to its start')
		#(40		'step into send (e)' 						$e 	window 			send 						nil 	nil 	'step into message sends')
		#(50		'step over send (t)' 						$t 	window 			doStep 						nil 	nil 	'step over message sends')
		#(60		'step into block (T)' 						$T 	window 			stepIntoBlock 						nil 	nil 	'step into a code block')
		#(70		'run to cursor' 						nil 	window 			runToCursor 						nil 	nil 	'run to cursor')
		#(80		'where (w)' 						$w 	window 			where 						nil 	nil 	'select current pc range')
		#(90		'peel to first like this' 						nil 	window 			peelToFirst 						nil 	nil 	'peel stack back to the second occurance of selected message')
		#(100 		'-----')
		#(110		'return entered value' 						nil 	window 			returnValue 						nil 	nil 	'lets you enter an expression and return method answering result')
		#(120		'toggle break on entry' 						nil 	model 			toggleBreakOnEntry 						nil 	nil 	'install or uninstall a breakpoint on method entry')
	)! !
!ProcessBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/29/2024 15:41:00' prior: 50333222!
                buildMorphicWindow
	"Create a pluggable version of me, answer a window"
	| aTextMorph list1 list2 upperRow |
	list1 := (PluggableListMorph
				withModel: model
				listGetter: #processNameList
				indexGetter: #processListIndex
				indexSetter: #processListIndex:)
					menuNshortcutsKey: #processListMenuSpec.
	list2 := (PluggableListMorph
				withModel: model
				listGetter: #stackNameList
				indexGetter: #stackListIndex
				indexSetter: #stackListIndex:)
					menuNshortcutsKey: #stackMenuSpec.
	upperRow := LayoutMorph newRow.
	upperRow
		addMorph: list1 proportionalWidth: 0.5;
		addAdjusterAndMorph: list2 proportionalWidth: 0.5.
	aTextMorph := (TextModelMorph
				textProvider: model
				textGetter: #selectedMethod) emptyTextDisplayMessage: 'Method source (not selected?)'.
	aTextMorph askBeforeDiscardingEdits: false.
	self layoutMorph
		addMorph: upperRow proportionalHeight: 0.5;
		addAdjusterAndMorph: aTextMorph proportionalHeight: 0.5.
	self setLabel: 'Process Browser'! !
!ProcessBrowserWindow methodsFor: 'open/close' stamp: 'jmv 5/29/2024 15:06:07' prior: 16930983 overrides: 16970932!
              openInWorld
	
	super openInWorld.
	self startAutoUpdate.
	model startCPUWatcher! !

ProcessBrowserWindow removeSelector: #processListMenu!

!methodRemoval: ProcessBrowserWindow #processListMenu stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:30'!
processListMenu

	| menu rules |
	self flag: #assumesKeyboardShortcuts.
	menu := MenuMorph new defaultTarget: self.

	model selectedProcess
		ifNotNil: [ :selectedProcess |
			rules := model class rulesFor: model selectedProcess.
			menu
				add: 'inspect (i)'				action: #inspectProcess 				icon: #inspectIcon;
				add: 'explore (I)'				action: #exploreProcess 				icon: #exploreIcon;
				add: 'references finder'	action: #openReferencesFinder 		icon: #exploreIcon.
			rules first
				ifTrue: [
					menu add: 'terminate (t)' target: model action: #terminateProcess icon: #cancelIcon.
					selectedProcess isSuspended
						ifTrue: [menu add: 'resume (r)' target: model action: #resumeProcess icon: #mediaPlaybackStartIcon]
						ifFalse: [menu add: 'suspend (s)' target: model action: #suspendProcess icon: #chatIcon]].
			rules second
				ifTrue: [
					menu
						add: 'change priority (p)'	action: #changePriority 	icon: #systemMonitorIcon;
						add: 'debug (d)'				action: #debugProcess 	icon: #debugIcon ].
			(selectedProcess suspendingList isKindOf: Semaphore)
				ifTrue: [menu add: 'signal Semaphore (S)' target: model action: #signalSemaphore icon: #haloHelpIcon ].
			menu add: 'full stack (k)' target: model action: #moreStack icon: #systemIcon.
			menu addLine].

	menu
		add: 'find context... (f)'					action: #findContext 	icon: #findIcon;
		add: 'find again (g)'	target: model 	action: #nextContext 	icon: #systemIcon.
	menu addLine.

	isStepping
		ifTrue: [ 	menu add: 'turn off auto-update (a)' 	action: #toggleAutoUpdate icon: #cancelIcon ]
		ifFalse: [ 	menu add: 'turn on auto-update (a)' 	action: #toggleAutoUpdate icon: #updateIcon ].
		
	menu add: 'update list (u)' target: model action: #updateProcessList icon: #updateIcon.

	menu addLine.
	CPUWatcher isMonitoring
			ifTrue: [ menu add: 'stop CPUWatcher' action: #stopCPUWatcher icon: #inspectIcon ]
			ifFalse: [ menu add: 'start CPUWatcher' action: #startCPUWatcher icon: #inspectIcon ].
	StackSizeWatcher isWatching
			ifTrue: [ menu add: 'stop StackSizeWatcher' action: #stopStackSizeWatcher icon: #inspectIcon ]
			ifFalse: [ menu add: 'start StackSizeWatcher' action: #startStackSizeWatcher  icon: #inspectIcon ].

	^ menu!

ProcessBrowserWindow removeSelector: #stackListKey:from:!

!methodRemoval: ProcessBrowserWindow #stackListKey:from: stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
stackListKey: aKey from: aView 

	self flag: #definesKeyboardShortcuts.
	^ aKey caseOf: {
		[$c] -> [self inspectContext].
		[$C] -> [self exploreContext].
		[$i] -> [self inspectReceiver].
		[$I] -> [self exploreReceiver].
		[$b] -> [self browseContext]}
		 otherwise: [].!

ProcessBrowserWindow removeSelector: #processListKey:from:!

!methodRemoval: ProcessBrowserWindow #processListKey:from: stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
processListKey: aKey from: aView

	self flag: #definesKeyboardShortcuts.
	^ aKey caseOf: {
		[$i] -> [self inspectProcess].
		[$I] -> [self exploreProcess].
		[$P] -> [self openReferencesFinder].
		[$t] -> [model terminateProcess].
		[$r] -> [model resumeProcess].
		[$s] -> [model suspendProcess].
		[$d] -> [self debugProcess].
		[$p] -> [self changePriority].
		[$f] -> [self findContext].
		[$g] -> [model nextContext].
		[$a] -> [self toggleAutoUpdate].
		[$u] -> [model updateProcessList].
		[$S] -> [model signalSemaphore].
		[$k] -> [model moreStack]}
		 otherwise: []!

ProcessBrowserWindow removeSelector: #stopCPUWatcher!

!methodRemoval: ProcessBrowserWindow #stopCPUWatcher stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
stopCPUWatcher
	model stopCPUWatcher!

ProcessBrowserWindow removeSelector: #stackListMenu!

!methodRemoval: ProcessBrowserWindow #stackListMenu stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
stackListMenu
	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	model selectedContext
		ifNil: [^ aMenu].
	aMenu
		add: 'inspect context (c)' 		action: #inspectContext icon: #inspectIcon;
		add: 'explore context (C)' 		action: #exploreContext icon: #exploreIcon;
		add: 'inspect receiver (i)' 		action: #inspectReceiver icon: #inspectIcon;
		add: 'explore receiver (I)' 		action: #exploreReceiver icon: #exploreIcon;
		add: 'browse (b)' 				action: #browseContext icon: #editFindReplaceIcon.
	^aMenu!

ProcessBrowserWindow removeSelector: #startCPUWatcher!

!methodRemoval: ProcessBrowserWindow #startCPUWatcher stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
startCPUWatcher

	model startCPUWatcher!

ProcessBrowserWindow removeSelector: #stopStackSizeWatcher!

!methodRemoval: ProcessBrowserWindow #stopStackSizeWatcher stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
stopStackSizeWatcher
	model stopStackSizeWatcher!

ProcessBrowserWindow removeSelector: #startStackSizeWatcher!

!methodRemoval: ProcessBrowserWindow #startStackSizeWatcher stamp: 'Install-6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st 6/6/2024 11:42:31'!
startStackSizeWatcher

	model startStackSizeWatcher!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6420-UseNewMenuspec-ProcessBrowser-JuanVuletich-2024May29-12h27m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6418] on 29 May 2024 at 4:15:20 pm'!
!TestRunnerWindow methodsFor: 'menu commands' stamp: 'jmv 5/29/2024 16:09:21'!
                       browseSelected
	| cls |
	cls := (model tests at: model selectedSuite ifAbsent: ['']) copyUpTo: Character space.
	cls := cls asSymbol.
	cls := (Smalltalk at: cls ifAbsent: nil).
	cls ifNotNil: [
		BrowserWindow fullOnClass: cls selector: nil ]! !
!TestRunnerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/29/2024 16:13:10'!
                    listMenuSpec
	"Spec for the menu and shortcut keys for the list of test classes.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	| answer |
	answer := #(
		#(0 		'Test Cases Set' 						false)
		#(10		'select all (a)' 					$a 	model 			selectAll 					nil 	selectAllIcon)
		#(20		'deselect all (A)' 					$A 	model 			deselectAll 					nil 	selectAllIcon)
		#(30		'invert selections' 					nil 	model 			invertSelections 					nil 	switchIcon)
		#(40		'filter (f)' 					$f 	model 			setFilter 					nil 	findIcon)
		#(50		'refresh (u)' 					$u 	model 			refreshTests 					nil 	refreshIcon)
		#(60 		'-----')).
	model isRunning ifTrue: [ answer := answer, #(
		#(70		'stop (l)' 					$l 	model 			interruptRun 					nil 	stopIcon))]
	ifFalse: [ answer := answer, #(
		#(70		'run (r)' 					$r 	model 			runTests 					nil 	playIcon)
		#(80		'run one (o)' 					$o 	model 			runOneTest 					nil 	playIcon)
		#(90		'run profiled (p)' 					$p 	model 			runProfiledTests 					nil 	playIcon))].
	model selectedSuite > 0 ifTrue: [ answer := answer, #(
		#(100 		'-----')
		#(110		'browse' 					nil 	window 			browseSelected 					nil 	editFindReplaceIcon))].
	answer := answer, #(
		#(100 		'-----')
		#(110		'log to Transcript' 					nil 	model 			showResult 					nil 	printerIcon)).
	^answer! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'jmv 5/29/2024 16:12:07' prior: 50333276!
                        buildUpperControls
	| refreshButton filterButton stopButton runOneButton runButton runProfiledButton buttonsRow theTestsList column |

	runOneButton := self buildRunOneButton.
	runButton := self buildRunButton.
	runProfiledButton := self buildRunProfiledButton.	

	refreshButton := self buildRefreshButton.
	filterButton := self buildFilterButton.
	stopButton := self buildStopButton.

	theTestsList := (PluggableListMorphOfMany
				withModel: model
				listGetter: #tests
				primarySelectionGetter: #selectedSuite
				primarySelectionSetter: #selectedSuite:
				listSelectionGetter: #listSelectionAt:
				listSelectionSetter: #listSelectionAt:put:)
					menuNshortcutsKey: #listMenuSpec.
	theTestsList autoDeselect: false.
	theTestsList color: self textBackgroundColor.

	buttonsRow := LayoutMorph newRow.
	buttonsRow doAdoptWidgetsColor.
	buttonsRow color: self buttonColor.
	buttonsRow
		addMorphs: {runButton. runOneButton. runProfiledButton};
		addMorphs: {refreshButton. filterButton. stopButton}.

	column := LayoutMorph newColumn.
	column
		addMorph: theTestsList proportionalHeight: 1;
		addMorph: buttonsRow fixedHeight: self defaultButtonPaneHeight.

	^ column! !

TestRunnerWindow removeSelector: #listMenu!

!methodRemoval: TestRunnerWindow #listMenu stamp: 'Install-6421-UseNewMenuSpec-TestRunner-JuanVuletich-2024May29-15h44m-jmv.001.cs.st 6/6/2024 11:42:31'!
listMenu
	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Test Cases';
		add: 'select all (a)' target: model action: #selectAll icon: #selectAllIcon;
		add: 'deselect all (A)' target: model action: #deselectAll icon: #selectAllIcon;
		add: 'invert selections' target: model action: #invertSelections icon: #switchIcon;
		add: 'filter (f)' target: model action: #setFilter icon: #findIcon;
		add: 'refresh (u)' target: model action: #refreshTests icon: #refreshIcon;
		addLine.
	model isRunning
		ifTrue:
			[aMenu add: 'stop (l)' target: model action: #interruptRun icon: #stopIcon]
		ifFalse:
			[aMenu add: 'run (r)' target: model action: #runTests icon: #playIcon;
				add: 'run one (o)' target: model action: #runOneTest icon: #playIcon;
				add: 'run profiled (p)' target: model action: #runProfiledTests icon: #playIcon].
	model selectedSuite > 0 ifTrue: [ | cls |
		cls := (model tests at: model selectedSuite ifAbsent: ['']) copyUpTo: Character space.
		cls := cls asSymbol.
		cls := (Smalltalk at: cls ifAbsent: nil).
		cls ifNotNil: [
			aMenu addLine.
			(aMenu add: 'browse' target: self action: #browse: argument: cls)
				setIcon: #editFindReplaceIcon.
		].
	].
	aMenu addLine.
	aMenu add: 'log to Transcript' target: model action: #showResult icon: #printerIcon.
	^aMenu!

TestRunnerWindow removeSelector: #listKey:from:!

!methodRemoval: TestRunnerWindow #listKey:from: stamp: 'Install-6421-UseNewMenuSpec-TestRunner-JuanVuletich-2024May29-15h44m-jmv.001.cs.st 6/6/2024 11:42:31'!
listKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $a ifTrue: [^ model selectAll].
	aChar = $A ifTrue: [^ model deselectAll].
	aChar = $u ifTrue: [^ self refreshTests].
	aChar = $f ifTrue: [^ model setFilter].
	aChar = $r ifTrue: [^ model runTests].
	aChar = $o ifTrue: [^ model runOneTest].
	aChar = $p ifTrue: [^ model runProfiledTests].
	aChar = $l ifTrue: [^ model interruptRun].!

TestRunnerWindow removeSelector: #browse:!

!methodRemoval: TestRunnerWindow #browse: stamp: 'Install-6421-UseNewMenuSpec-TestRunner-JuanVuletich-2024May29-15h44m-jmv.001.cs.st 6/6/2024 11:42:31'!
browse: aClass
	BrowserWindow fullOnClass: aClass selector: nil!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6421-UseNewMenuSpec-TestRunner-JuanVuletich-2024May29-15h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6421] on 31 May 2024 at 3:17:38 pm'!
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:57:35'!
                               addAsSubclassResponsabilitySelector

	self selectedMessageName ifNotNil: [ :selectedSelector |
		(AddAsSubclassResponsabilityApplier
			on: self for: self selectedClassOrMetaClass>>selectedSelector)
				value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:24:58'!
    addInstVar

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(AddInstanceVariableApplier on: self for: aClass) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:58:41'!
                          addParameter

	self selectedMessageName ifNotNil: [ :oldSelector | 
		RefactoringApplier addParameterApplier
			createAndValueHandlingExceptionsOn: self for: oldSelector in: self selectedClassOrMetaClass ]! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:00:19'!
          changeKeywordOrder

	self selectedMessageName ifNotNil: [ :oldSelector |
		ChangeKeywordsSelectorOrderApplier createAndValueHandlingExceptions: [
			ChangeKeywordsSelectorOrderApplier
				on: self for: oldSelector in: self selectedClassOrMetaClass ]].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:00:47'!
                            inlineMethod

	self selectedMessageName ifNotNil: [ :selectorToInline |
		RefactoringApplier inlineMethodApplier
			createAndValueHandlingExceptionsOn: self
			forMethod: (MethodReference class: self selectedClassOrMetaClass selector: selectorToInline )]! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:01:50'!
                         moveToInstanceOrClassMethod

	self selectedMessageName ifNotNil: [ :selectedSelector |
		(MoveToInstanceOrClassMethodApplier
			on: self
			for: self selectedClassOrMetaClass>>selectedSelector) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:34:13'!
             pushDownInstanceVariable

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(PushDownInstanceVariableApplier on: self at: aClass ) value].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:02:52'!
        pushDownSelectorToOneSubclass

	self selectedMessageName ifNotNil: [ :selectedSelector |
		(PushDownMethodToOneSubclassApplier
			on: self for: self selectedClassOrMetaClass>>selectedSelector) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:03:36'!
              pushDownSelectorToSubclasses

	self selectedMessageName ifNotNil: [ :selectedSelector |
		(PushDownMethodToSubclassesApplier
			on: self for: self selectedClassOrMetaClass>>selectedSelector) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:32:46'!
                pushUpInstanceVariable

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(PushUpInstanceVariableApplier on: self at: aClass ) value].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:04:20'!
            pushUpSelector

	self selectedMessageName ifNotNil: [ :selectedSelector |
		(PushUpMethodApplier
			on: self for: self selectedClassOrMetaClass>>selectedSelector)
				value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:31:35'!
        removeAllUnreferencedInstVar

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RemoveAllUnreferencedInstanceVariablesApplier on: self for: aClass) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:29:58'!
                     removeInstVar

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RemoveInstanceVariableApplier on: self for: aClass) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:05:37'!
                    removeParameter

	self selectedMessageName ifNotNil: [ :oldSelector |
		RefactoringApplier removeParameterApplier
			createAndValueHandlingExceptionsOn: self
			for: oldSelector
			in: self selectedClassOrMetaClass ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 11:28:11'!
                              renameInstVar

	self selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RenameInstanceVariableApplier on: self at: aClass) value ].! !
!Browser methodsFor: 'refactorings' stamp: 'jmv 5/31/2024 12:06:22'!
                     renameSelector

	self selectedMessageName ifNotNil: [ :oldSelector |
		RefactoringApplier renameSelectorApplier
			createAndValueHandlingExceptionsOn: self
			for: oldSelector
			in: self selectedClassOrMetaClass ].! !
!BrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/31/2024 12:06:28' prior: 16799635 overrides: 16827611!
                messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel |
	self flag: #definesKeyboardShortcuts.
	sel := model selectedMessageName.
	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $c ifTrue: [ ^ self browseCategoryOfCurrentMethod ].
			aChar = $R ifTrue: [^ model renameSelector].
			aChar = $A ifTrue: [^ model addParameter ].
			aChar = $S ifTrue: [^ model removeParameter ].
			aChar = $F ifTrue: [^ model inlineMethod ]].
	super messageListKey: aChar from: view! !
!RefactoringMenues class methodsFor: 'browser menues' stamp: 'jmv 5/31/2024 11:33:49' prior: 16936696!
              classListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
			{
				#itemGroup 				-> 		5.
				#itemOrder 				-> 		10.
				#label 				-> 		RefactoringMenues refactoringsLabel.
				#selector 				-> 		#yourself.
				#icon 				-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		20.
				#label 				-> 		'insert superclass...'.
				#object 				-> 		#model.
				#selector 				-> 		#insertSuperclass.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		10.
				#label 				-> 		'add inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#addInstVar.
				#icon 				-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		20.
				#label 				-> 		'rename inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#renameInstVar.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		30.
				#label 				-> 		'remove inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#removeInstVar.
				#icon 				-> 		#deleteIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		40.
				#label 				-> 		'remove all unreferenced inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#removeAllUnreferencedInstVar.
				#icon 				-> 		#deleteIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		50.
				#label 				-> 		'push up inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#pushUpInstanceVariable.
				#icon 				-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		60.
				#label 				-> 		'push down inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#pushDownInstanceVariable.
				#icon 				-> 		#goBottomIcon
			} asDictionary.				
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		30.
				#itemOrder 				-> 		10.
				#label 				-> 		'rename global...'.
				#object 				-> 		#model.
				#selector 				-> 		#renameGlobal.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
	}`.! !
!RefactoringMenues class methodsFor: 'browser menues' stamp: 'jmv 5/31/2024 12:06:33' prior: 16936793!
                          messageListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
		{
			#itemGroup 			-> 		5.
			#itemOrder 			-> 		10.
			#label 			-> 		RefactoringMenues refactoringsLabel.
			#selector 			-> 		#yourself.
			#icon 			-> 		#listAddIcon
		} asDictionary.
			{
				#submenuOf 	-> 				RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'rename... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameSelector.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		15.
				#label 			-> 		'change keyword order...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeKeywordOrder.
				#icon 			-> 		#sendReceiveIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'add parameter...(A)'.
				#object 			-> 		#model.
				#selector 			-> 		#addParameter.
				#icon 			-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		30.
				#label 			-> 		'remove parameter...(S)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeParameter.
				#icon 			-> 		#listRemoveIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'inline method... (F)'.
				#object 			-> 		#model.
				#selector 			-> 		#inlineMethod.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'move to instance/class method'.
				#object 			-> 		#model.
				#selector 			-> 		#moveToInstanceOrClassMethod.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'push up'.
				#object 			-> 		#model.
				#selector 			-> 		#pushUpSelector.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'add in superclass as subclassResponsability'.
				#object 			-> 		#model.
				#selector 			-> 		#addAsSubclassResponsabilitySelector.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		50.
				#label 			-> 		'push down to subclasses'.
				#object 			-> 		#model.
				#selector 			-> 		#pushDownSelectorToSubclasses.
				#icon 			-> 		#goBottomIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		60.
				#label 			-> 		'push down to one subclass'.
				#object 			-> 		#model.
				#selector 			-> 		#pushDownSelectorToOneSubclass.
				#icon 			-> 		#goBottomIcon
			} asDictionary.
			
		}`.
	! !

BrowserWindow removeSelector: #addParameter!

!methodRemoval: BrowserWindow #addParameter stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
addParameter

	model selectedMessageName ifNotNil: [ :oldSelector | 
		RefactoringApplier addParameterApplier createAndValueHandlingExceptionsOn: model for: oldSelector in: model selectedClassOrMetaClass ]!

BrowserWindow removeSelector: #pushUpInstanceVariable!

!methodRemoval: BrowserWindow #pushUpInstanceVariable stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
pushUpInstanceVariable

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(PushUpInstanceVariableApplier on: model at: aClass ) value].!

BrowserWindow removeSelector: #removeInstVar!

!methodRemoval: BrowserWindow #removeInstVar stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
removeInstVar

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RemoveInstanceVariableApplier on: model for: aClass) value ].!

BrowserWindow removeSelector: #renameSelector!

!methodRemoval: BrowserWindow #renameSelector stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
renameSelector

	model selectedMessageName ifNotNil: [ :oldSelector |
		RefactoringApplier renameSelectorApplier createAndValueHandlingExceptionsOn: model for: oldSelector in: model selectedClassOrMetaClass ]!

BrowserWindow removeSelector: #changeKeywordOrder!

!methodRemoval: BrowserWindow #changeKeywordOrder stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
changeKeywordOrder

	model selectedMessageName ifNotNil: [ :oldSelector |
		ChangeKeywordsSelectorOrderApplier createAndValueHandlingExceptions: [
			ChangeKeywordsSelectorOrderApplier on: model for: oldSelector in: model selectedClassOrMetaClass ]].!

BrowserWindow removeSelector: #removeParameter!

!methodRemoval: BrowserWindow #removeParameter stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
removeParameter

	model selectedMessageName ifNotNil: [ :oldSelector |
		RefactoringApplier removeParameterApplier createAndValueHandlingExceptionsOn: model for: oldSelector in: model selectedClassOrMetaClass ].
		
		!

BrowserWindow removeSelector: #pushDownSelectorToSubclasses!

!methodRemoval: BrowserWindow #pushDownSelectorToSubclasses stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
pushDownSelectorToSubclasses

	model selectedMessageName ifNotNil: [ :selectedSelector |
		(PushDownMethodToSubclassesApplier on: model for: model selectedClassOrMetaClass>>selectedSelector) value ].!

BrowserWindow removeSelector: #addAsSubclassResponsabilitySelector!

!methodRemoval: BrowserWindow #addAsSubclassResponsabilitySelector stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
addAsSubclassResponsabilitySelector

	model selectedMessageName ifNotNil: [ :selectedSelector |
		(AddAsSubclassResponsabilityApplier on: model for: model selectedClassOrMetaClass>>selectedSelector) value ].!

BrowserWindow removeSelector: #inlineMethod!

!methodRemoval: BrowserWindow #inlineMethod stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
inlineMethod

	model selectedMessageName ifNotNil: [ :selectorToInline |
		RefactoringApplier inlineMethodApplier
			createAndValueHandlingExceptionsOn: model
			forMethod: (MethodReference class: model selectedClassOrMetaClass selector: selectorToInline )]!

BrowserWindow removeSelector: #renameInstVar!

!methodRemoval: BrowserWindow #renameInstVar stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
renameInstVar

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RenameInstanceVariableApplier on: model at: aClass) value ].!

BrowserWindow removeSelector: #addInstVar!

!methodRemoval: BrowserWindow #addInstVar stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
addInstVar

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(AddInstanceVariableApplier on: model for: aClass) value ].!

BrowserWindow removeSelector: #pushUpSelector!

!methodRemoval: BrowserWindow #pushUpSelector stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
pushUpSelector

	model selectedMessageName ifNotNil: [ :selectedSelector |
		(PushUpMethodApplier on: model for: model selectedClassOrMetaClass>>selectedSelector) value ].!

BrowserWindow removeSelector: #pushDownInstanceVariable!

!methodRemoval: BrowserWindow #pushDownInstanceVariable stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
pushDownInstanceVariable

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(PushDownInstanceVariableApplier on: model at: aClass ) value].!

BrowserWindow removeSelector: #pushDownSelectorToOneSubclass!

!methodRemoval: BrowserWindow #pushDownSelectorToOneSubclass stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
pushDownSelectorToOneSubclass

	model selectedMessageName ifNotNil: [ :selectedSelector |
		(PushDownMethodToOneSubclassApplier on: model for: model selectedClassOrMetaClass>>selectedSelector) value ].!

BrowserWindow removeSelector: #removeAllUnreferencedInstVar!

!methodRemoval: BrowserWindow #removeAllUnreferencedInstVar stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
removeAllUnreferencedInstVar

	model selectedClassOrMetaClass ifNotNil: [ :aClass |
		(RemoveAllUnreferencedInstanceVariablesApplier on: model for: aClass) value ].!

BrowserWindow removeSelector: #moveToInstanceOrClassMethod!

!methodRemoval: BrowserWindow #moveToInstanceOrClassMethod stamp: 'Install-6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st 6/6/2024 11:42:31'!
moveToInstanceOrClassMethod

	model selectedMessageName ifNotNil: [ :selectedSelector |
		(MoveToInstanceOrClassMethodApplier on: model for: model selectedClassOrMetaClass>>selectedSelector) value ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6422-MoveRefactoringApplicationFromWindowToModel-JuanVuletich-2024May31-15h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6421] on 31 May 2024 at 3:19:27 pm'!
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 5/31/2024 11:39:29' prior: 16964670!
                            allCallsOn: aLiteral   "Smalltalk browseAllCallsOn: #open:label:."
	"Answer a Collection of all the methods that call on aLiteral."
	| aCollection specialFlag specialByte |

	#(23 48 'fred' (new open:label:)) size.
	"Example above should find #open:label:, though it is deeply embedded here."

	aCollection := OrderedCollection new.
	specialFlag := self hasSpecialSelector: aLiteral ifTrueSetByte: [:b | specialByte := b ].
	self allBehaviorsDo: [ :class |
		class addMethodsTo: aCollection thatReferenceTo: aLiteral special: specialFlag byte: specialByte ].
	
	^ aCollection! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 5/31/2024 11:46:31' prior: 16965286!
 numberOfSendersOf: aSymbol
	"Answer the count of all the methods that call on aLiteral.
	[ (Smalltalk numberOfSendersOf: #open:label:) ] timeToRun
	[ (Smalltalk numberOfSendersOf: #==) ] timeToRun
	"
	| count specialFlag specialByte |
	count := 0.
	specialFlag := self hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | specialByte := b ].
	self allBehaviorsDo: [ :class |
		count := count + (class whichSelectorsReferTo: aSymbol special: specialFlag byte: specialByte) size ].
	^ count! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6423-NumberOfSendersOf-fix-JuanVuletich-2024May31-15h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6421] on 31 May 2024 at 3:23:58 pm'!
!CodeWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/31/2024 14:28:07' prior: 16827611!
                          messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel class |
	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing].

	sel := model selectedMessageName.
	aChar = $m ifTrue: [  "These next two put up a type in if no message selected"
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].
	aChar = $n ifTrue: [
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].

	"The following require a class selection"
	(class := model selectedClassOrMetaClass) ifNil: [^ self ].
	aChar = $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].
	aChar = $N ifTrue: [^ self browseClassRefs].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $p ifTrue: [^ self browseFullProtocol].

	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $i ifTrue: [^ self methodInheritance].
			aChar = $o ifTrue: [^ model fileOutMessage].
			aChar = $c ifTrue: [^ model copySelector].
			aChar = $v ifTrue: [^ self browseVersions].
			aChar = $C ifTrue: [^ model showHomeCategory].
			aChar = $O ifTrue: [^ self openSingleMessageBrowser].
			aChar = $x ifTrue: [^ model removeMessage].
			aChar = $t ifTrue: [^ model runMethodTest].
			aChar = $r ifTrue: [^ model debugMethodTest]]
		ifNil: [
			aChar = $R ifTrue: [^ model renameClass]]! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/31/2024 14:15:24' prior: 50338257!
                        menuSpecForDictionary
	"Spec for the menu and shortcut keys for the list of variables in our object.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(100 		'-----')
		#(110		'inspect key' 					nil 	window 			inspectSelectedKey 							nil 	editFindReplaceIcon)
		#(120		'senders of this key' 					nil 	window 			sendersOfSelectedKey 							nil 	mailForwardIcon)
		#(130		'add key' 					nil 	window 			addEntry 							nil 	listAddIcon)
		#(140		'rename key' 					nil 	window 			renameEntry 							nil 	saveAsIcon)
		#(150		'remove' 					nil 	model 			removeSelection 							nil 	listRemoveIcon)
	)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6424-tweaks-JuanVuletich-2024May31-15h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6421] on 31 May 2024 at 3:29:33 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/31/2024 12:57:17'!
                              addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	| submenuId menu label target selector isEnabledSelector iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetGetter | self perform: targetGetter ]
		ifNil: [ self ].
	selector := itemSpec fifth.
	isEnabledSelector := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText := itemSpec size >= 8 ifTrue: [ itemSpec eighth ].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
		ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
	isEnabledSelector ifNotNil: [ menuItem isEnabled: (target perform: isEnabledSelector) ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/31/2024 12:58:33'!
                          addLineTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	| submenuId menu |
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	menu addLine.! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/31/2024 12:57:04'!
                 addSubmenuTo: menu fromSpec: itemSpec submenus: submenusDictionary
	| submenu label submenuId target isEnabledSelector iconSymbol helpText menuItem |
	submenu := MenuMorph new.
	label := itemSpec second.
	target := itemSpec fourth
		ifNotNil: [ :targetGetter | self perform: targetGetter ]
		ifNil: [ self ].
	submenuId := itemSpec fifth // 1000.
	isEnabledSelector := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText := itemSpec size >= 8 ifTrue: [ itemSpec eighth ].
	menuItem := menu add: label subMenu: submenu.
	isEnabledSelector ifNotNil: [ menuItem isEnabled: (target perform: isEnabledSelector) ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].
	submenusDictionary at: submenuId put: submenu! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/31/2024 12:14:20'!
               addTitleTo: menu fromSpec: itemSpec
	menu addTitle: itemSpec second.
	itemSpec third ifTrue: [ menu addStayUpIcons ]! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 5/31/2024 12:59:27' prior: 50336234!
                  getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys the changesets list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| widgetKey menuNshortcutsSpecs itemSpec menu submenus |
	widgetKey := self menuNshortcutsKey ifNil: [ ^nil ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6425-NewMenuSpecs-AllowSubmenus-JuanVuletich-2024May31-15h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6421] on 31 May 2024 at 4:20:25 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/31/2024 16:04:28'!
                            classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments. If a Number (multiple of 1000), indicates a subMenu. Indexes of items must be in range.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									nil 		editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									nil 		goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									nil 		spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									nil 		fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									nil 		weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'rename class... (R)' 							$R 	model 			renameClass 									nil 		saveAsIcon)
		#(90		'refactorings' 							nil 	nil 			1000 									nil 		listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									nil 		copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									nil 		deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									nil 		goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									nil 		sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									nil 		editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									nil 		editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									nil 		instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									nil 		instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									nil 		classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									nil 		classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									nil 		classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									nil 		listAddIcon)
		#(260		nil 							$r 	model 			recent) "Shortcut only. No menu entry."

		" 'refactorings' SubMenu"
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									nil 		saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									nil 		listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									nil 		saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									nil 		deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									nil 		deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									nil 		goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									nil 		goBottomIcon)
		#(1090 		'-----')
		#(1100		'add inst var...' 							nil 	model 			addInstVar 									nil 		listAddIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									nil 		junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									nil 		junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									nil 		junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									nil 		classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									nil 		instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									nil 		inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									nil 		inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									nil 		sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 5/31/2024 15:59:56' overrides: 50340588!
                     classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	Each entry is
		#('menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- label is a string or symbol. Symbol means self updating menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Tipically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
		- isEnabledSelector if not nil, it is #aSymbol, and is sent to the receiver (see receierGetter) to ask whether to enable the item.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	^self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						nil 		editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						nil 		editFindReplaceIcon)
				#(30 		'-----')
				#(40		'browse full (b)' 					$b 	window 			browseMethodFull 						nil 		editFindReplaceIcon)
				#(50		'class refs (N)' 					$N 	window 			browseClassRefs 						nil 		classIcon)
				#(60 		'-----')
				#(70		'fileIn' 					nil 	model 			fileInClass 						nil 		updateIcon)
				#(80		'fileOut' 					nil 	model 			fileOutClass 						nil 		fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						nil 		saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						nil 		listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						nil 		deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						nil 		editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						nil 		editFindReplaceIcon)
				#(30 		'-----')
				#(80		'fileOut' 					nil 	model 			fileOutClass 						nil 		fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						nil 		saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						nil 		listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						nil 		deleteIcon)
			) ].! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 5/31/2024 16:07:19' prior: 50332689!
                           buildMorphicClassList

	^(PluggableListMorph
		withModel: model
		listGetter: #classList
		indexGetter: #classListIndex
		indexSetter: #classListIndex:)
			menuNshortcutsKey: #classListMenuSpec.! !
!BrowserWindow methodsFor: 'keyboard shortcuts' stamp: 'jmv 5/31/2024 16:06:37' prior: 50333396!
                         systemCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent ].
	aChar = $f ifTrue: [ ^ self findClass ].
	aChar = $x ifTrue: [ ^ model removeSystemCategory ].
	aChar = $t ifTrue: [ ^ model runSystemCategoryTests ].
	aChar = $a ifTrue: [ ^ model addSystemCategory ].
	aChar = $A ifTrue: [ ^ model alphabetizeSystemCategories ].
	aChar = $b ifTrue: [ ^ self openSystemCategoryBrowser ].
	aChar = $B ifTrue: [ ^ self browseAllClasses ].
	aChar = $o ifTrue: [ ^ model fileOutSystemCategory ].
	aChar = $u ifTrue: [ ^ model updateSystemCategories ].
	aChar = $R ifTrue: [ ^ model renameSystemCategory ].
! !

RefactoringMenues class removeSelector: #classListMenuOptions!

!methodRemoval: RefactoringMenues class #classListMenuOptions stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
			{
				#itemGroup 				-> 		5.
				#itemOrder 				-> 		10.
				#label 				-> 		RefactoringMenues refactoringsLabel.
				#selector 				-> 		#yourself.
				#icon 				-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		20.
				#label 				-> 		'insert superclass...'.
				#object 				-> 		#model.
				#selector 				-> 		#insertSuperclass.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		10.
				#label 				-> 		'add inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#addInstVar.
				#icon 				-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		20.
				#label 				-> 		'rename inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#renameInstVar.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		30.
				#label 				-> 		'remove inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#removeInstVar.
				#icon 				-> 		#deleteIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		40.
				#label 				-> 		'remove all unreferenced inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#removeAllUnreferencedInstVar.
				#icon 				-> 		#deleteIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		50.
				#label 				-> 		'push up inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#pushUpInstanceVariable.
				#icon 				-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		60.
				#label 				-> 		'push down inst var...'.
				#object 				-> 		#model.
				#selector 				-> 		#pushDownInstanceVariable.
				#icon 				-> 		#goBottomIcon
			} asDictionary.				
			{
				#submenuOf 				-> 		RefactoringMenues refactoringsLabel.
				#itemGroup 				-> 		30.
				#itemOrder 				-> 		10.
				#label 				-> 		'rename global...'.
				#object 				-> 		#model.
				#selector 				-> 		#renameGlobal.
				#icon 				-> 		#saveAsIcon
			} asDictionary.
	}`.!

CodeFileBrowserWindow removeSelector: #classListMenu!

!methodRemoval: CodeFileBrowserWindow #classListMenu stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListMenu

	| aMenu itemColl |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Class List'.
	itemColl := OrderedCollection new.
	itemColl addAll:
		{
			{#label -> 'definition'. #object -> #model. #selector -> #editClass. #icon -> #editFindReplaceIcon} asDictionary. 
			{#label -> 'comment'. #object -> #model. #selector -> #editComment. #icon -> #editFindReplaceIcon} asDictionary. 
			nil
		}.
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
		itemColl addAll:
			{
				{#label -> 'browse full (b)'. #selector -> #browseMethodFull. #icon -> #editFindReplaceIcon} asDictionary. 
				{#label -> 'class refs (N)'. #selector -> #browseClassRefs. #icon -> #classIcon} asDictionary. 
				nil. 
				{#label -> 'fileIn'. #object -> #model. #selector -> #fileInClass. #icon -> #updateIcon} asDictionary
			} ].
	itemColl addAll:
		{
			{#label -> 'fileOut'. #object -> #model. #selector -> #fileOutClass. #icon -> #fileOutIcon} asDictionary. 
			nil. 
			{#label -> 'rename...'. #object -> #model. #selector -> #renameClass. #icon -> #saveAsIcon} asDictionary. 
			{#label -> 'remove'. #object -> #model. #selector -> #removeClass. #icon -> #listRemoveIcon} asDictionary. 
			nil. 
			{#label -> 'remove existing'. #object -> #model. #selector -> #removeUnmodifiedCategories. #icon -> #deleteIcon} asDictionary
		}.
	aMenu addItemsFromDictionaries: itemColl.
	^ aMenu.!

CodeFileBrowserWindow removeSelector: #classListKey:from:!

!methodRemoval: CodeFileBrowserWindow #classListKey:from: stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $b ifTrue: [^ self browseMethodFull].
	aChar = $N ifTrue: [^ self browseClassRefs].
	self codeFileListKey: aChar from: view!

BrowserWindow class removeSelector: #classListMenuOptions!

!methodRemoval: BrowserWindow class #classListMenuOptions stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		30.
				#label 			-> 		'browse protocol (p)'.
				#selector 			-> 		#browseFullProtocol.
				#icon 			-> 		#spreadsheetIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutClass.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		5.
				#label 			-> 		'show classes hierarchically'.
				#object 			-> 		#model.
				#selector 			-> 		#enableListClassesHierarchically.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		6.
				#label 			-> 		'show classes alphabetically'.
				#object 			-> 		#model.
				#selector 			-> 		#enableListClassesAlphabetically.
				#icon 			-> 		#sendReceiveIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'show definition'.
				#object 			-> 		#model.
				#selector 			-> 		#editClass.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		30.
				#label 			-> 		'show comment'.
				#object 			-> 		#model.
				#selector 			-> 		#editComment.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'inst var refs...'.
				#selector 			-> 		#browseInstVarRefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'inst var defs...'.
				#selector 			-> 		#browseInstVarDefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'class var refs...'.
				#selector 			-> 		#browseClassVarRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		20.
				#label 			-> 		'class vars'.
				#selector 			-> 		#browseClassVariables.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		30.
				#label 			-> 		'class refs (N)'.
				#selector 			-> 		#browseClassRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		10.
				#label 			-> 		'rename class... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameClass.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		20.
				#label 			-> 		'copy class...'.
				#object 			-> 		#model.
				#selector 			-> 		#copyClass.
				#icon 			-> 		#copyIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		30.
				#label 			-> 		'remove class (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeClass.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		70.
				#itemOrder 			-> 		10.
				#label 			-> 		'run tests (t)'.
				#object 			-> 		#model.
				#selector 			-> 		#runClassTests.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		70.
				#itemOrder 			-> 		20.
				#label 			-> 		BrowserWindow moreMenuLabel.
				#selector 			-> 		#yourself.
				#icon 			-> 		#listAddIcon
			} asDictionary.
		}, BrowserWindow classListMoreMenuOptions`.!

BrowserWindow class removeSelector: #classListMoreMenuOptions!

!methodRemoval: BrowserWindow class #classListMoreMenuOptions stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListMoreMenuOptions

	^ `{			
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		10.
				#label 				-> 		'unsent methods'.
				#selector 				-> 		#browseUnusedMethods.
				#icon 				-> 		#junkIcon.
				#balloonText 				-> 		'browse all methods defined by this class that have no senders'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		20.
				#label 				-> 		'unreferenced inst vars'.
				#selector 				-> 		#showUnreferencedInstVars.
				#icon 				-> 		#junkIcon.
				#balloonText 				-> 		'show a list of all instance variables that are not referenced in methods'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		30.
				#label 				-> 		'unreferenced class vars'.
				#selector 				-> 		#showUnreferencedClassVars.
				#icon 				-> 		#junkIcon.
				#balloonText 				-> 		'show a list of all class variables that are not referenced in methods'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		10.
				#itemOrder 				-> 		40.
				#label 				-> 		'subclass template'.
				#object 				-> 		#model.
				#selector 				-> 		#makeNewSubclass.
				#icon 				-> 		#classIcon.
				#balloonText 				-> 		'put a template into the code pane for defining of a subclass of this class'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		10.
				#label 				-> 		'sample instance'.
				#selector 				-> 		#makeSampleInstance.
				#icon 				-> 		#instanceIcon.
				#balloonText 				-> 		'give me a sample instance of this class, if possible'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		20.
				#label 				-> 		'inspect instances'.
				#selector 				-> 		#inspectInstances.
				#icon 				-> 		#inspectIcon.
				#balloonText 				-> 		'open an inspector on all the extant instances of this class'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		20.
				#itemOrder 				-> 		30.
				#label 				-> 		'inspect subinstances'.
				#selector 				-> 		#inspectSubInstances.
				#icon 				-> 		#inspectIcon.
				#balloonText 				-> 		'open an inspector on all the extant instances of this class and of all of its subclasses'
			} asDictionary.
			{
				#submenuOf 				-> 		BrowserWindow moreMenuLabel.
				#itemGroup 				-> 		30.
				#itemOrder 				-> 		10.
				#label 				-> 		'create inst var accessors'.
				#object 				-> 		#model.
				#selector 				-> 		#createInstVarAccessors.
				#icon 				-> 		#sendReceiveIcon.
				#balloonText 				-> 		'compile instance-variable access methods for any instance variables that do not yet have them'
			} asDictionary.
		}`.
	!

BrowserWindow class removeSelector: #moreMenuLabel!

!methodRemoval: BrowserWindow class #moreMenuLabel stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
moreMenuLabel

	^'more'!

BrowserWindow removeSelector: #classListKey:from:!

!methodRemoval: BrowserWindow #classListKey:from: stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListKey: aChar from: view 
	"Respond to a Command key.  I am a model with a list of classes and a 
	code pane, and I also have a listView that has a list of methods.  The 
	view knows how to get the list and selection."

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $x ifTrue: [^ model removeClass].
	aChar = $t ifTrue: [^ model runClassTests ].
	
	^ self messageListKey: aChar from: view!

BrowserWindow removeSelector: #classListMenu!

!methodRemoval: BrowserWindow #classListMenu stamp: 'Install-6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st 6/6/2024 11:42:31'!
classListMenu
	"Set up the menu to apply to the receiver's class list, honoring the #shifted boolean"

	^DynamicMenuBuilder buildTitled: 'Class List' targeting: self collectingMenuOptionsWith: #classListMenuOptions.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6426-NewMenuSpec-Browser-ClassList-JuanVuletich-2024May31-15h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6426] on 1 June 2024 at 5:42:39 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 6/1/2024 17:42:19' prior: 50331843!
knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dkh'						'Dale Henrichs')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSM' 						'Duane Maxwell')
	#('DSG'						'David Graham')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('pmon'						'Paolo Montrasi')
	#('PHK' 						'Peter Keeler')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6427-AddEzequielAsKnownAuthor-JuanVuletich-2024Jun01-17h42m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6427] on 3 June 2024 at 11:23:22 am'!
!LayoutMorph methodsFor: 'geometry testing' stamp: 'jmv 6/3/2024 11:22:43' overrides: 16905625!
           clipsSubmorphs
	"LayoutMorphs are usually not drawn (doAdoptWidgetsColor is false, they are transparent) and do not clip submorphs.
	A special case is Transcript. It doesn't include a ScrollPane (that usually does clipping),
	so doAdoptWidgetsColor is set to true, and we also want it to clipSubmorphs.
	There may be other similar cases in the future."
	^doAdoptWidgetsColor! !
!Transcript class methodsFor: 'ui' stamp: 'jmv 6/3/2024 11:22:04' prior: 16988500!
                   open
	"
	Transcript open
	"
	| win m |
	win := TranscriptWindow new.
	win
		setLabel: 'Transcript';
		model: Transcript.
	m := TranscriptMorph new.
	win layoutMorph
		"This is needed so the Layout is actually drawn and it actually correctly clips the TranscriptMorph"
		doAdoptWidgetsColor;
		addMorph: m proportionalHeight: 1.
	win model when: #redrawTranscriptArea send: #invalidateBounds to: win.
	^ win openInWorld! !
!TranscriptMorph methodsFor: 'drawing' stamp: 'jmv 6/3/2024 11:07:50' prior: 16988553 overrides: 16796436!
               drawOn: aCanvas
	aCanvas
		fillRectangle: self morphLocalBounds
		color: color.
	Transcript displayTextOn: aCanvas in: self morphLocalBounds.
	Transcript bounds: (self externalizeBoundsToWorld: self morphLocalBounds)
				encompassingIntegerRectangle.
	self updateWorkspace! !

TranscriptWindow removeSelector: #clipsSubmorphs!

!methodRemoval: TranscriptWindow #clipsSubmorphs stamp: 'Install-6428-Transcript-fixDrawingGlitch-JuanVuletich-2024Jun03-11h20m-jmv.001.cs.st 6/6/2024 11:42:31'!
clipsSubmorphs
	"Our contents are not inside a PluggableScrollPane like in other SystemWindows,
	so we do the clipping ourselves."

	^ true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6428-Transcript-fixDrawingGlitch-JuanVuletich-2024Jun03-11h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6428] on 3 June 2024 at 11:44:42 am'!
!FeatureRequirement methodsFor: 'requires' stamp: 'KenD 6/1/2024 14:10:57' prior: 16860029!
       requireUnlessIn: toLoad main: mainFeatureOrNil requiringFeature: requiringFeatureOrNil allRequiringFeatures: chainRequiringMe
	"See if all the requirements can be met and answer the load order"

	(chainRequiringMe includes: self) ifTrue: [
		self error: 'Circular dependence detected. Can not load required packages.' ].
	self isAlreadySatisfied ifFalse: [
		(toLoad anySatisfy: [ :featReq | featReq sameNameAs: self]) ifFalse: [
			(self findPackageFileAsReqOf: mainFeatureOrNil)
				ifTrue: [ | otherRequirements |
					otherRequirements := self requirements.
					otherRequirements ifNotNil: [
						otherRequirements do: [ :requires | 
							requires
								requireUnlessIn: toLoad
								main: (mainFeatureOrNil ifNil: [self])
								requiringFeature: self
								allRequiringFeatures: (chainRequiringMe copyWith: self) ]].
					self == mainFeatureOrNil ifFalse: [
						self addToLoad: toLoad withMyRequirements: otherRequirements ].
					]
				ifFalse: [
					| failureMessage |
					failureMessage := name = #'Cuis-Base'
						ifTrue: [
							(SystemVersion current versionRevision first) > self maxVersion
							ifTrue: [
								'Installing [', requiringFeatureOrNil name, '] has maximum version ',  
									self maxVersion asString, 						String newLineString,
									' which is older than the current Cuis-Base version ',
									 (SystemVersion current versionRevision first) asString
								]
							ifFalse: [
							'Installing [', requiringFeatureOrNil name,
								'] requires base system updated to #', self minRevision printString, String newLineString,
							'But this system is updated to #', SystemVersion current versionRevision second printString, String newLineString,
							'Please install Cuis base system updates and retry.' ]						
						]
						ifFalse: [
							requiringFeatureOrNil notNil
								ifTrue: [
									'Could not find code package file for [', name, '].', String newLineString,
									'Installation of [', requiringFeatureOrNil name, '] failed.']
								ifFalse: [
									'Could not find code package file for [', name, '].', String newLineString,
									'Installation failed.']].
					FeatureRequirementUnsatisfied signal: failureMessage.
				]]].

	^ toLoad! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6429-packageInstallFailMessage-Fix-KenDickey-2024Jun03-11h44m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6429] on 3 June 2024 at 12:06:31 pm'!
!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 6/3/2024 12:05:55'!
                        keystrokeAction: aBlock
	"Sets the action to perform when user presses any key, after regular processing."

	self setProperty: #keyStroke: toValue: aBlock.! !
!TextModelMorph methodsFor: 'initialization' stamp: 'jmv 6/3/2024 12:06:01'!
                    keystrokeAction: aBlock
	"Sets the action to perform when user presses any key, after regular processing."
	
	scroller keystrokeAction: aBlock! !
!Morph methodsFor: 'events-processing' stamp: 'jmv 6/3/2024 12:02:53' prior: 50335193!
                       processKeystroke: aKeyboardEvent
	"System level event handling."

	self handlesKeyboard ifTrue: [
		aKeyboardEvent wasHandled ifFalse: [
			self keyStroke: aKeyboardEvent.
			aKeyboardEvent wasHandled: true.
			self 
				valueOfProperty: #'keyStroke:'
				ifPresentDo: [ :handler | handler value: aKeyboardEvent ]]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6430-keystrokeAction-addItBack-JuanVuletich-2024Jun03-11h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6430] on 4 June 2024 at 6:06:04 am'!
!Morph methodsFor: 'events' stamp: 'jmv 6/4/2024 06:04:58' prior: 50335488!
                 keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target widgetKey |
	widgetKey := self menuNshortcutsKey ifNil: [ ^false ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	menuNshortcutsSpecs valuesDo: [ :itemSpec |
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetGetter | self perform: targetGetter ]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						target perform: selector.
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 06:05:16' prior: 50340436!
           addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetGetter | self perform: targetGetter ]
		ifNil: [ self ].
	selector := itemSpec fifth.
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
		ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 06:01:56' prior: 50340520!
    getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| widgetKey menuNshortcutsSpecs itemSpec menu submenus |
	widgetKey := self menuNshortcutsKey ifNil: [ ^nil ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 06:01:47' prior: 50336173!
                 menuNshortcutsSpec: aWidgetKey for: aWidget
	"menuSpec is the Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number. It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	self withAllOwnersReverseDo: [ :o |
		o ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:02:46' prior: 50340588!
classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(90		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									listAddIcon)
		#(260		nil 							$r 	model 			recent) "Shortcut only. No menu entry."

		" 'refactorings' SubMenu"
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1090 		'-----')
		#(1100		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:02:53' prior: 50340762 overrides: 50341932!
         classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	See coment at Morph >> #getMenu
	"
	^self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(40		'browse full (b)' 					$b 	window 			browseMethodFull 						editFindReplaceIcon)
				#(50		'class refs (N)' 					$N 	window 			browseClassRefs 						classIcon)
				#(60 		'-----')
				#(70		'fileIn' 					nil 	model 			fileInClass 						updateIcon)
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			) ].! !
!ChangeListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:02:58' prior: 50336325!
    listMenuSpec
	"Spec for the menu and shortcut keys the changes list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Change List' 									true)
		#(10		'fileIn selections' 									nil 	model 			fileInSelections 										nil
					'import the selected items into the image')
		#(20		'fileOut selections...	' 								nil 	model 			fileOutSelections 										nil
		 			'create a new file containing the selected items')
		#(30		'fileOut current version of selections...' 					nil 					model 			fileOutCurrentVersionsOfSelections 										nil
 					'create a new file containing the current (in-image) counterparts of the selected methods')
		#(40 		'-----')
		#(50		'compare to current' 									nil 	model 			compareToCurrentVersion 										nil
 					'open a separate window which shows the text differences between the on-file version and the in-image version.')
		#(60		'toggle diffing (D)' 									$D 	model 			toggleDiffing 										nil
 					'start or stop showing diffs in the code pane.')
		#(70 		'-----')
		#(80		'select new methods' 									nil 	model 			selectNewMethods 										nil
 					'select methods in the file that do not currently exist in the image')
		#(90		'select changes for absent classes' 									nil 	model 			selectAllForAbsentClasses 										nil
					'select methods in the file for classes that are not defined in the image')
		#(100		'select all changes for this class' 									nil 	model 			selectAllForThisClass 										nil
					'select all methods in the file that belong to the currently-selected class')
		#(110		'select unchanged methods' 									nil 	model 			selectUnchangedMethods 										nil
					'select methods in the file whose in-image versions are the same as their in-file counterparts')
		#(120		'select methods equivalent to current' 									nil 	model 			selectEquivalentMethods 										nil
					'select methods in the file whose in-image versions have the same behavior as their in-file counterparts')
		#(130		'select methods older than current' 									nil 	model 			selectMethodsOlderThanCurrent 										nil
					'select methods in the file that are older than the one currently in the image')
		#(140		'select removals of sent methods' 									nil 	model 			selectRemovalsOfSent 										nil
					'select all method removals of methods that have some sender in the image')
		#(150 		'-----')
		#(160		'select all (a)' 									$a 	model 			selectAll 										nil
					'select all the items in the list')
		#(170		'deselect all (A)' 									$A 	model 			deselectAll 										nil
					'deselect all the items in the list')
		#(180		'invert selections' 									nil 	model 			invertSelections 										nil
					'select every item that is not currently selected, and deselect every item that *is* currently selected')
		#(190 		'-----')
		#(200		'browse class and method' 									nil 	window 			browseMethodFull 										nil
					'open a full browser showing the selected method')
		#(210		'browse all versions of single selection' 									nil 	window 			browseVersions 										nil
					'open a version browser showing the versions of the currently selected method')
		#(220		'browse current versions of selections' 									nil 	window 			browseCurrentVersionsOfSelections 										nil
					'open a message-list browser showing the current (in-image) counterparts of the selected methods')
		#(230		'destroy current methods of selections' 									nil 	model 			destroyCurrentCodeOfSelections 										nil
					'remove (*destroy*) the in-image counterparts of all selected methods')
		#(240 		'-----')
		#(250		'remove doIts' 									nil 	model 			removeDoIts 										nil
					'remove all items that are doIts rather than definitions')
		#(260		'remove older versions' 									nil 	model 			removeOlderMethodVersions 										nil
					'remove all but the most recent versions of methods in the list')
		#(270		'remove up-to-date versions' 									nil 	model 			removeUpToDate 										nil
					'remove all items whose code is the same as the counterpart in-image code')
		#(280		'remove empty class comments' 									nil 	model 			removeEmptyClassComments 										nil
					'remove all empty class comments')
		#(290		'remove selected items' 									nil 	model 			removeSelections 										nil
					'remove the selected items from the change-list')
		#(300		'remove unselected items' 									nil 	model 			removeNonSelections 										nil
					'remove all the items not currently selected from the change-list')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:04' prior: 50336501!
            classCommentVersionsMenuSpec
	"Spec for the menu and shortcut keys for a class comment version in the versions list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Versions' 							true)
		#(10		'compare to current' 							nil 	model 			compareToCurrentVersion 										nil
					'compare selected version to the current version')
		#(20		'revert to selected version' 							nil 	model 			fileInSelections 										nil
					'resubmit the selected version, so that it becomes the current version')
		#(30 		'-----')
		#(40		'toggle diffing (D)' 							$D 	model 			toggleDiffing 										nil
					'toggle whether or not diffs should be shown here')
		#(50		'update list' 							nil 	model 			reformulateList 										nil
					'reformulate the list of versions, in case it somehow got out of synch with reality')
		#(60 		'-----')
		#(70		'help...' 							nil 	model 			offerVersionsHelp 										nil
					'provide an explanation of the use of this tool')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:10' prior: 50336572!
               methodVersionsMenuSpec
	"Spec for the menu and shortcut keys for a method version in the versions list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
				#(0 		'Versions' 									true)
	).
	model listIndex > 0 ifTrue: [
		(model list size > 1 ) ifTrue: [
			answer := answer, #(
				#(10		'compare to current' 									nil 	model 			compareToCurrentVersion 									nil
							'compare selected version to the current version')
				#(20		'compare to version...' 									nil 	model 			compareToOtherVersion 									nil
							'compare selected version to another selected version'))].
		answer := answer, #(
				#(30		'revert to selected version (z)' 									$z 	model 			fileInSelections 									nil
							'resubmit the selected version, so that it becomes the current version'))].
	answer := answer, #(
				#(40		'edit current method (O)' 									$O 	window 			openSingleMessageBrowser 									nil
							'open a single-message browser on the current version of this method')
				#(50 		'-----')
				#(60		'toggle diffing (D)' 									$D 	model 			toggleDiffing 									nil
							'toggle whether or not diffs should be shown here')
				#(70		'update list' 									nil 	model 			reformulateList 									nil
							'reformulate the list of versions, in case it somehow got out of synch with reality')
				#(80 		'-----')
				#(90		'senders (n)' 									$n 	window 			browseSenders 									nil
							'browse all senders of this selector')
				#(100		'implementors (m)' 									$m 	window 			browseImplementors 									nil
							'browse all implementors of this selector')
				#(110 		'-----')
				#(120		'help...' 									nil 	model 			offerVersionsHelp 									nil
							'provide an explanation of the use of this tool')
	).
	^answer! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:16' prior: 50338796!
           changeSetListMenuSpec
	"Spec for the menu and shortcut keys the changesets list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
			#(0 		'Change Set' 						true)
			#(10 		'File out and remove (o)' 							$o 	model 			fileOutAndRemove 								fileOutIcon)
			#(20 		'File out and keep (k)' 							$k 	model 			fileOutAndKeep 								fileOutIcon)
			#(30 		'-----')
			#(40 		'Rename change set (R)' 					 		$R 	model 			rename 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			remove 								warningIcon)
	).
	model currentCanHavePreambleAndPostscript ifTrue: [
		model currentHasPreamble
			ifTrue: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Edit preamble (p)' 						$p 	model 			addPreamble 								textEditorIcon)
				#(80 		'Remove preamble' 						nil 	model 			removePreamble 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Add preamble (p)' 						$p 	model 			addPreamble 								listAddIcon) )].
		model currentHasPostscript
			ifTrue: [ answer  := answer, #(
				#(90 		'Edit postscript...' 						nil 	model 			editPostscript 								textEditorIcon)
				#(100 		'Remove postscript' 						nil 	model 			removePostscript 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(90 		'Add postscript...' 						nil 	model 			editPostscript 								listAddIcon) )].
	].

	answer  := answer, #(
		#(110 		'-----')
		#(120 		'conflicts with other change sets' 								nil 	window			browseMethodConflicts 								emblemImportantIcon
			'Browse all methods that occur both in this change set and in at least one other change set.')
		#(130 		'-----')
		#(140 		'trim history' 								nil 	model			trimHistory 								clockIcon
			'Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.')
		#(150 		'view affected class categories' 								nil 	model 			viewAffectedClassCategories 								packageIcon
			'Show class categories affected by any contained change')
	).
	model csIsForBase ifFalse: [ "Maybe disable a few: Copy them the same as above, but without selector."
		answer := answer, #(
			#(40 		'Rename change set (R)' 					 		$R 	model 			nil 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			nil 								warningIcon)
			#(140 		'trim history' 							nil 	model			nil 								clockIcon)) ].
	^answer! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:21' prior: 50337233!
  classListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Class List' 						false)
			#(10 		'delete class from change set (d)' 								$d 	model 			forgetClass 						warningIcon)
			#(20 		'remove class from system (x)' 								$x 	model 			removeClass 						deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 								$b 	window 			browseMethodFull 						editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 								$h 	window 			browseHierarchy 						goTopIcon)
			#(60 		'browse protocol (p)' 								$p 	window 			browseFullProtocol 						spreadsheetIcon)
			#(70 		'-----')		
			#(80 		'inst var refs...' 								nil 	window 			browseInstVarRefs 						instanceIcon)
			#(90 		'inst var defs...' 								nil 	window 			browseInstVarDefs 						instanceIcon)
			#(100 		'class var refs...' 								nil 	window 			browseClassVarRefs 						classIcon)
			#(110 		'class vars' 								nil 	window 			browseClassVariables 						classIcon)
			#(120 		'class refs (N)' 								$N 	window 			browseClassRefs 						classIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:26' prior: 50337299!
            messageListMenuSpec
	"Spec for the menu and shortcut keys the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								scriptIcon)
			#(70 		'browse protocol (p)' 									$p 	window 			browseFullProtocol 								spreadsheetIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								fileOutIcon)
			#(100 		'-----')		
			#(110 		'senders of... (n)' 									$n 	window 			browseSendersOfMessages 								mailForwardIcon)
			#(120 		'implementors of... (m)' 									$m 	window 			browseMessages 								developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								clockIcon)
	).
! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:33' prior: 50339208!
                  contextStackMenuSpec
	"Spec for the menu and shortcut keys for call stack list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(10		'fullStack (f)' 						$f 	window 			fullStack 						nil 	'show the complete call stack')
		#(20		'proceed (p)' 						$p 	window 			proceed 						nil 	'close the debugger and proceed')
		#(30		'restart (r)' 						$r 	window 			restart 						nil 	'reset this context to its start')
		#(40		'step into send (e)' 						$e 	window 			send 						nil 	'step into message sends')
		#(50		'step over send (t)' 						$t 	window 			doStep 						nil 	'step over message sends')
		#(60		'step into block (T)' 						$T 	window 			stepIntoBlock 						nil 	'step into a code block')
		#(70		'run to cursor' 						nil 	window 			runToCursor 						nil 	'run to cursor')
		#(80		'where (w)' 						$w 	window 			where 						nil 	'select current pc range')
		#(90		'peel to first like this' 						nil 	window 			peelToFirst 						nil 	'peel stack back to the second occurance of selected message')
		#(100 		'-----')
		#(110		'return entered value' 						nil 	window 			returnValue 						nil 	'lets you enter an expression and return method answering result')
		#(120		'toggle break on entry' 						nil 	model 			toggleBreakOnEntry 						nil 	'install or uninstall a breakpoint on method entry')
	)! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:39' prior: 50337824!
                               contextVariablesListMenuSpec
	"Spec for the menu and shortcut keys for the list of variables in this context.
	See coment at Morph >> #getMenu
	"
	^#(
		#(10		'inspect (i)' 						$i 	window 			inspectContextSelection 							inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreContextSelection 							exploreIcon)
		#(30 		'-----')
		#(40		'browser full (b)' 						$b 	window 			contextClassBrowse 							editFindReplaceIcon)
		#(50		'browser hierarch (h)' 						$h 	window 			contextClassHierarchy 							goTopIcon)
		#(60		'browser protocol (p)' 						$p 	window 			contextClassProtocol 							spreadsheetIcon)
	)! !
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:44' prior: 50337874!
         receiverVariablesListMenuSpec
	"Spec for the menu and shortcut keys for the list of instance variables in the receiver.
	See coment at Morph >> #getMenu
	"
	^#(
		#(10		'inspect (i)' 						$i 	window 			inspectReceiverSelection 							inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreReceiverSelection 							exploreIcon)
		#(30 		'-----')
		#(40		'browser full (b)' 						$b 	window 			receiverClassBrowse 							editFindReplaceIcon)
		#(50		'browser hierarch (h)' 						$h 	window 			receiverClassHierarchy 							goTopIcon)
		#(60		'browser protocol (p)' 						$p 	window 			receiverClassProtocol 							spreadsheetIcon)
	)! !
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:50' prior: 50338903!
                          directoryTreeMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	See coment at Morph >> #getMenu
	"
	| showHiddenTogleAndLabel |
	showHiddenTogleAndLabel := model showHidden asMenuItemTextPrefix, 'show hidden folders and files'.
	^{
		{10. 'delete directory...'. 								nil. 	#model. 			#deleteDirectory. 							#warningIcon.
			'Delete the selected directory'}.
		{20. 	showHiddenTogleAndLabel. 							nil. 	#model. 			#toggleShowHidden. 							nil.
			'show or hide files and directories that begin with a dot'}.
		{30. 	'show Cuis top as tree root'. 							nil. 	#window. 			#useCuisTopAsTreeRoot. 							nil.
			'use the default Cuis top directory'}.
		{40. 'show OS roots as tree root'. 								nil. 	#window. 			#useOSrootsAsTreeRoot. 							nil.
			'use the host OS root directories. Drives on Windows; "/" on Unix'}
	}! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:03:56' prior: 50338191!
             fieldListMenuSpec
	"Spec for the menu and shortcut keys for the list of variables in our object.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
		#(10		'inspect (i)' 						$i 	window 			inspectSelection 							inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreSelection 							exploreIcon)
		#(30		'copy to clipboard (c)' 						$c 	window 			copySelectionToClipboard 							copyIcon)
		#(40		'basic inspect' 						nil 	window 			inspectBasic 							inspectIcon)
		#(50		'references finder' 						nil 	window 			openReferencesFinder 							exploreIcon)
		#(60		'weight explorer' 						nil 	window 			openWeightExplorer 							exploreIcon)
	).
	(self model objectSpecificMenuSpecFrom: self) ifNotNil: [ :spec |
		answer := answer, spec ].
	answer := answer, #(
		#(210 		'-----')
		#(220		'browser full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
		#(230		'browser hierarch (h)' 						$h 	window 			browseHierarchy 							goTopIcon)
		#(240		'browser protocol (p)' 						$p 	window 			browseFullProtocol 							spreadsheetIcon)
	).
	^answer! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:01' prior: 50340380!
                     menuSpecForDictionary
	"Spec for the menu and shortcut keys for the list of variables in our object.
	See coment at Morph >> #getMenu
	"
	^#(
		#(100 		'-----')
		#(110		'inspect key' 					nil 	window 			inspectSelectedKey 							editFindReplaceIcon)
		#(120		'senders of this key' 					nil 	window 			sendersOfSelectedKey 							mailForwardIcon)
		#(130		'add key' 					nil 	window 			addEntry 							listAddIcon)
		#(140		'rename key' 					nil 	window 			renameEntry 							saveAsIcon)
		#(150		'remove' 					nil 	model 			removeSelection 							listRemoveIcon)
	)! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:06' prior: 50338305!
  menuSpecForSet
	"Spec for the menu and shortcut keys for the list of variables in our object.
	See coment at Morph >> #getMenu
	"
	^#(
		#(100 		'-----')
		#(110		'remove' 			nil 	model 			removeSelection 					listRemoveIcon)
	)! !
!ObjectExplorerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:11' prior: 50338559!
               listMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	See coment at Morph >> #getMenu
	"
	| answer |
	model getCurrentSelection
		ifNil: [^#()]
		ifNotNil: [ :currSel |
			answer := #(
				#(10		'inspect (i)' 						$i 	window 			inspectSelection 							inspectIcon)
				#(20		'explore (I)' 						$I 	window 			exploreSelection 							exploreIcon)
				#(30		'copy to clipboard (c)' 						$c 	window 			copySelectionToClipboard 							copyIcon)
				#(40		'basic inspect' 						nil 	window 			inspectBasic 							inspectIcon)
				#(50		'references finder' 						nil 	window 			openReferencesFinder 							exploreIcon)
				#(60		'weight explorer' 						nil 	window 			openWeightExplorer 							exploreIcon)
				#(70 		'-----')
				#(80		'browser full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
				#(90		'browser hierarch (h)' 						$h 	window 			browseHierarchy 							goTopIcon)
				#(100		'browser protocol (p)' 						$p 	window 			browseFullProtocol 							spreadsheetIcon)).
			(currSel item is: #Morph) ifTrue: [ answer := answer, #(
				#(110 		'-----')
				#(120		'show morph halo' 						nil 	window 			addHaloToSelection 							editFindReplaceIcon)) ].
			model class == ReferencesExplorer ifTrue: [ answer := answer, #(
				#(210 		'-----')
				#(220		'rescan' 						nil 	window 			rescan 							editFindReplaceIcon)) ].
			answer := answer, #(
				#(310 		'-----')
				#(320		'monitor changes' 						nil 	window 			monitorChanges 							editFindReplaceIcon)).
			model isMonitoring ifTrue: [ answer := answer, #(
				#(410 		'-----')
				#(420		'stop monitoring all' 						nil 	window 			stopMonitoring 							editFindReplaceIcon)) ].
			^answer ].! !
!ProcessBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:15' prior: 50339047!
               processListMenuSpec
	"Spec for the menu and shortcut keys for the list of processes.
	See coment at Morph >> #getMenu
	"
	| rules answer |
	answer := #().
	model selectedProcess ifNotNil: [ :selectedProcess |
		rules := model class rulesFor: model selectedProcess.
		answer := answer, #(
				#(10		'inspect (i)' 						$i 	window 			inspectProcess 						inspectIcon)
				#(20		'explore (I)' 						$I 	window 			exploreProcess 						exploreIcon)
				#(30		'references finder (P)' 						$P 	window 			openReferencesFinder 						exploreIcon)).
		rules first ifTrue: [
			answer := answer, 
				#((40		'terminate (t)' 						$t 	model 			terminateProcess 						cancelIcon)).
			selectedProcess isSuspended ifTrue: [ answer := answer,
				#((50		'resume (r)' 						$r 	model 			resumeProcess 						mediaPlaybackStartIcon))]
			ifFalse: [ answer := answer, 
				#((50 		'suspend (s)' 						$s 	model 			suspendProcess 						chatIcon))]].
		rules second ifTrue: [ answer := answer, #(
				#(60 		'change priority (p)' 						$p 	window 			changePriority 						systemMonitorIcon)
				#(70 		'debug (d)' 						$d 	window 			debugProcess 						debugIcon))].
		(selectedProcess suspendingList isKindOf: Semaphore) ifTrue: [ answer := answer,
				#((80 		'signal Semaphore (S)' 						$S 	model 			signalSemaphore 						haloHelpIcon))].
		answer := answer, #(
				#(90		'full stack (k)' 						$k 	model 			moreStack 						systemIcon)
				#(100 		'-----'))].
	answer := answer, #(
				#(110		'find context... (f)' 						$f 	window 			findContext 						findIcon)
				#(120		'find again (g)' 						$g 	model 			nextContext 						systemIcon)
				#(130 		'-----')).
	answer := answer, (isStepping ifTrue: [
				#((140		'turn off auto-update (a)' 						$a 	window 			toggleAutoUpdate 						cancelIcon)) ]
			ifFalse: [
				#((140		'turn on auto-update (a)' 						$a 	window 			toggleAutoUpdate 						updateIcon)) ]).
	answer := answer, #(
				#(150		'update list (u)' 						$u 	model 			updateProcessList 						updateIcon)
				#(160 		'-----')).
	answer := answer, (CPUWatcher isMonitoring ifTrue: [
				#((170		'stop CPUWatcher' 						nil 	model 			stopCPUWatcher 						inspectIcon)) ]
			ifFalse: [
				#((170		'start CPUWatcher' 						nil 	model 			startCPUWatcher 						inspectIcon)) ]).
	answer := answer, (StackSizeWatcher isWatching ifTrue: [
				#((180		'stop StackSizeWatcher' 						nil 	model 			stopStackSizeWatcher 						inspectIcon)) ]
			ifFalse: [
				#((180		'start StackSizeWatcher' 						nil 	model 			startStackSizeWatcher 						inspectIcon)) ]).
	^answer! !
!ProcessBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:20' prior: 50339160!
                           stackMenuSpec
	"Spec for the menu and shortcut keys for the list of stack frames.
	See coment at Morph >> #getMenu
	"
	^ #(
		#(10		'inspect context (c)' 					$c 	window 			inspectContext 					inspectIcon)
		#(20		'explore context (C)' 					$C 	window 			exploreContext 					exploreIcon)
		#(30		'inspect receiver (i)' 					$i 	window 			inspectReceiver 					inspectIcon)
		#(40		'explore receiver (I)' 					$I 	window 			exploreReceiver 					exploreIcon)
		#(50		'browse context (b)' 					$b 	window 			browseContext 					editFindReplaceIcon)
	).! !
!TestRunnerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:04:25' prior: 50339517!
                    listMenuSpec
	"Spec for the menu and shortcut keys for the list of test classes.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
		#(0 		'Test Cases Set' 						false)
		#(10		'select all (a)' 					$a 	model 			selectAll 					selectAllIcon)
		#(20		'deselect all (A)' 					$A 	model 			deselectAll 					selectAllIcon)
		#(30		'invert selections' 					nil 	model 			invertSelections 					switchIcon)
		#(40		'filter (f)' 					$f 	model 			setFilter 					findIcon)
		#(50		'refresh (u)' 					$u 	model 			refreshTests 					refreshIcon)
		#(60 		'-----')).
	model isRunning ifTrue: [ answer := answer, #(
		#(70		'stop (l)' 					$l 	model 			interruptRun 					stopIcon))]
	ifFalse: [ answer := answer, #(
		#(70		'run (r)' 					$r 	model 			runTests 					playIcon)
		#(80		'run one (o)' 					$o 	model 			runOneTest 					playIcon)
		#(90		'run profiled (p)' 					$p 	model 			runProfiledTests 					playIcon))].
	model selectedSuite > 0 ifTrue: [ answer := answer, #(
		#(100 		'-----')
		#(110		'browse' 					nil 	window 			browseSelected 					editFindReplaceIcon))].
	answer := answer, #(
		#(100 		'-----')
		#(110		'log to Transcript' 					nil 	model 			showResult 					printerIcon)).
	^answer! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6431-NewMenuAndShortcutSpecs-Enhancements-JuanVuletich-2024Jun04-05h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6431] on 4 June 2024 at 6:11:25 am'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:10:30'!
      systemCatSingletonMenuSpec
	"Spec for the menu and shortcut keys the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class category' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20 		'-----')
		#(30		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(40		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(50 		'-----')
		#(60		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(70 		'-----')
		#(80		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(90		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(100		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:10:23'!
systemCategoriesListMenuSpec
	"Spec for the menu and shortcut keys the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class Categories' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20		'recent classes... (r)' 						$r 	model 			recent 									clockIcon)
		#(30 		'-----')
		#(40		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(50		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(60 		'-----')
		#(70		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(80 		'-----')
		#(90		'reorganize' 						nil 	model 			editSystemCategories 									sendReceiveIcon)
		#(100		'alphabetize (A)' 						$A 	model 			alphabetizeSystemCategories 									fontXGenericIcon)
		#(110 		'-----')
		#(120		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(130		'add item... (a)' 						$a 	model 			addSystemCategory 									newIcon)
		#(140		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(150		'move to... (m)' 						$m 	model 			moveAllToOtherSystemCategory 									saveAsIcon)
		#(160		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
		#(170 		'-----')
		#(180		'move to top' 						nil 	model 			moveSystemCategoryTop 									goTopIcon)
		#(190		'move up' 						nil 	model 			moveSystemCategoryUp 									goUpIcon)
		#(200		'move down' 						nil 	model 			moveSystemCategoryDown 									goDownIcon)
		#(210		'move to bottom' 						nil 	model 			moveSystemCategoryBottom 									fileOutIcon)
		#(220 		'-----')
		#(230		'run tests (t)' 						$t 	model 			runSystemCategoryTests 									weatherFewCloudsIcon)
	)! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/1/2024 11:20:24' prior: 50332726!
     buildMorphicSystemCategoryList
	^(HierarchicalListMorph
		withModel: model
		listGetter: #systemCategoryRoots
		indexGetter: #selectedSystemCategory
		indexSetter: #setSelectedSystemCategoryTreeItem:)
			menuNshortcutsKey: #systemCategoriesListMenuSpec;
			autoDeselect: true;
			autoExpand: true;
			yourself! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/1/2024 11:19:09' prior: 50332740!
             buildNoSysCatMorphicWindow
	"A Browser without the class categories list"

	| mySingletonList upperPanes messageCatList messageList classColumn classList |
	mySingletonList := (PluggableListMorph
				withModel: model
				listGetter: #systemCategorySingleton
				indexGetter: #indexIsOne
				indexSetter: #indexIsOne:)
					menuNshortcutsKey: #systemCatSingletonMenuSpec.
	mySingletonList hideScrollBarsIndefinitely.

	classList := self buildMorphicClassList.
	classColumn := self buildMorphicClassColumnWith: classList.
	messageCatList := self buildMorphicMessageCatList.
	messageList := self buildMorphicMessageList.
	
	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: classColumn proportionalWidth: 0.3;
		addAdjusterAndMorph: messageCatList proportionalWidth: 0.3;
		addAdjusterAndMorph: messageList proportionalWidth: 0.4.

	messageList allowItemDrag: true.
	messageCatList
		acceptDropsFrom: messageList
		performing: #categorizeUnderCategoryAt:selector:.

	self layoutMorph
		addMorph: mySingletonList fixedHeight: (Preferences at: #standardCodeFont) lineSpacing + 10;
		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.

	model changed: #editSelection! !

HierarchyBrowserWindow removeSelector: #systemCatSingletonKey:from:!

!methodRemoval: HierarchyBrowserWindow #systemCatSingletonKey:from: stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCatSingletonKey: aChar from: aView
	^ self systemCatListKey: aChar from: aView!

BrowserWindow class removeSelector: #systemCategoryMenuOptions!

!methodRemoval: BrowserWindow class #systemCategoryMenuOptions stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCategoryMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'find class... (f)'.
				#selector 			-> 		#findClass.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'recent classes... (r)'.
				#object 			-> 		#model.
				#selector 			-> 		#recent.
				#icon 			-> 		#clockIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'browse all (B)'.
				#selector 			-> 		#browseAllClasses.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'browse (b)'.
				#selector 			-> 		#openSystemCategoryBrowser.
				#icon 			-> 		#packageIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut (o)'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutSystemCategory.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'reorganize'.
				#object 			-> 		#model.
				#selector 			-> 		#editSystemCategories.
				#icon 			-> 		#sendReceiveIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'alphabetize (A)'.
				#object 			-> 		#model.
				#selector 			-> 		#alphabetizeSystemCategories.
				#icon 			-> 		#fontXGenericIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'update (u)'.
				#object 			-> 		#model.
				#selector 			-> 		#updateSystemCategories.
				#icon 			-> 		#updateIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		20.
				#label 			-> 		'add item... (a)'.
				#object 			-> 		#model.
				#selector 			-> 		#addSystemCategory.
				#icon 			-> 		#newIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		30.
				#label 			-> 		'rename... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameSystemCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		35.
				#label 			-> 		'move to... (m)'.
				#object 			-> 		#model.
				#selector 			-> 		#moveAllToOtherSystemCategory.
				#icon 			-> 		#saveAsIcon.
				#balloonText 			-> 		'Move all classes in this category to another category'       
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		40.
				#label 			-> 		'remove (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeSystemCategory.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		10.
				#label 			-> 		'move to top'.
				#object 			-> 		#model.
				#selector 			-> 		#moveSystemCategoryTop.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		20.
				#label 			-> 		'move up'.
				#object 			-> 		#model.
				#selector 			-> 		#moveSystemCategoryUp.
				#icon 			-> 		#goUpIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		30.
				#label 			-> 		'move down'.
				#object 			-> 		#model.
				#selector 			-> 		#moveSystemCategoryDown.
				#icon 			-> 		#goDownIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		40.
				#label 			-> 		'move to bottom'.
				#object 			-> 		#model.
				#selector 			-> 		#moveSystemCategoryBottom.
				#icon 			-> 		#goBottomIcon
			} asDictionary.
			{
				#itemGroup 			-> 		70.
				#itemOrder 			-> 		10.
				#label 			-> 		'run tests (t)'.
				#object 			-> 		#model.
				#selector 			-> 		#runSystemCategoryTests.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
		}`.
	!

BrowserWindow class removeSelector: #systemCatSingletonMenuOptions!

!methodRemoval: BrowserWindow class #systemCatSingletonMenuOptions stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCatSingletonMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'find class... (f)'.
				#selector 			-> 		#findClass.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'browse all (B)'.
				#selector 			-> 		#browseAllClasses.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'browse (b)'.
				#selector 			-> 		#openSystemCategoryBrowser.
				#icon 			-> 		#packageIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut (o)'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutSystemCategory.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'update (u)'.
				#object 			-> 		#model.
				#selector 			-> 		#updateSystemCategories.
				#icon 			-> 		#updateIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'rename... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameSystemCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'remove (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeSystemCategory.
				#icon 			-> 		#deleteIcon
			} asDictionary.
		}`.
	!

BrowserWindow removeSelector: #systemCategoryMenu!

!methodRemoval: BrowserWindow #systemCategoryMenu stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCategoryMenu

	^DynamicMenuBuilder buildTitled: 'Class category' targeting: self collectingMenuOptionsWith: #systemCategoryMenuOptions.!

BrowserWindow removeSelector: #systemCatSingletonKey:from:!

!methodRemoval: BrowserWindow #systemCatSingletonKey:from: stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCatSingletonKey: aChar from: aView
	^ self messageListKey: aChar from: aView!

BrowserWindow removeSelector: #systemCatSingletonMenu!

!methodRemoval: BrowserWindow #systemCatSingletonMenu stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCatSingletonMenu

	^DynamicMenuBuilder buildTitled: 'Class category' targeting: self collectingMenuOptionsWith: #systemCatSingletonMenuOptions.
!

BrowserWindow removeSelector: #systemCatListKey:from:!

!methodRemoval: BrowserWindow #systemCatListKey:from: stamp: 'Install-6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st 6/6/2024 11:42:31'!
systemCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $r ifTrue: [^ model recent ].
	aChar = $f ifTrue: [ ^ self findClass ].
	aChar = $x ifTrue: [ ^ model removeSystemCategory ].
	aChar = $t ifTrue: [ ^ model runSystemCategoryTests ].
	aChar = $a ifTrue: [ ^ model addSystemCategory ].
	aChar = $A ifTrue: [ ^ model alphabetizeSystemCategories ].
	aChar = $b ifTrue: [ ^ self openSystemCategoryBrowser ].
	aChar = $B ifTrue: [ ^ self browseAllClasses ].
	aChar = $o ifTrue: [ ^ model fileOutSystemCategory ].
	aChar = $u ifTrue: [ ^ model updateSystemCategories ].
	aChar = $R ifTrue: [ ^ model renameSystemCategory ].
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6432-NewMenuSpecs-Browser-SystemCategoriesList-JuanVuletich-2024Jun04-06h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6431] on 4 June 2024 at 6:14:10 am'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:12:56'!
                        methodCategoriesListMenuSpec
	"Spec for the menu and shortcut keys the method categories list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Categories' 					false)
		#(10		'fileOut (o)' 								$o 	model 			fileOutMessageCategories 										fileOutIcon)
		#(20 		'-----')
		#(30		'reorganize (r)' 								$r 	model 			editMessageCategories 										sendReceiveIcon)
		#(40		'alphabetize (a)' 								$a 	model 			alphabetizeMessageCategories 										fontXGenericIcon)
		#(50		'remove empty categories (e)' 								$e 	model 			removeEmptyCategories 										listRemoveIcon)
		#(60		'categorize all uncategorized (c)' 								$c 	model 			categorizeAllUncategorizedMethods 										packageIcon)
		#(70		'new category... (n)' 								$n 	model 			addCategory 										newIcon)
		#(80		'new extension category... (N)' 								$N 	model 			addExtensionCategory 										listAddIcon)
		#(90 		'-----')
		#(100		'rename... (R)' 								$R 	model 			renameCategory 										saveAsIcon)
		#(110		'remove (x)' 								$x 	model 			removeMessageCategory 										deleteIcon)
		#(120 		'-----')
		#(130		'run tests (t)' 								$t 	model 			runMessageCategoryTests 										weatherFewCloudsIcon)
	)! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:13:13' overrides: 50343330!
                   methodCategoriesListMenuSpec
	"Spec for the menu and shortcut keys the method categories list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Message Categories' 			false)
				#(10		'fileIn' 					nil 	model 			fileInMessageCategories 								updateIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Message Categories' 			false)
			)].
	answer := answer, 
			#(
				#(20		'fileOut' 					nil 	model 			fileOutMessageCategories 								fileOutIcon)
				#(30 		'-----')
				#(40		'reorganize' 					nil 	model 			editMessageCategories 								sendReceiveIcon)
				#(50 		'-----')
				#(60		'add item...' 					nil 	model 			addCategory 								newIcon)
				#(70 		'-----')
				#(80		'rename...' 					nil 	model 			renameCategory 								saveAsIcon)
				#(90		'remove' 					nil 	model 			removeMessageCategory 								listRemoveIcon)
			).
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(100 		'-----')
				#(100		'remove existing' 					nil 	model 			removeUnmodifiedMethods 								deleteIcon)
		) ].
	^answer! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/2/2024 19:31:10' prior: 50332700!
                               buildMorphicMessageCatList

	^(PluggableListMorph
		withModel: model
		listGetter: #messageCategoryList
		indexGetter: #messageCategoryListIndex
		indexSetter: #messageCategoryListIndex:)
			menuNshortcutsKey: #methodCategoriesListMenuSpec.
! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:13:23' prior: 50342925!
         systemCatSingletonMenuSpec
	"Spec for the menu and shortcut keys the one-item system category list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class category' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20 		'-----')
		#(30		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(40		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(50 		'-----')
		#(60		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(70 		'-----')
		#(80		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(90		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(100		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 06:13:30' prior: 50342953!
                             systemCategoriesListMenuSpec
	"Spec for the menu and shortcut keys the system categories list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class Categories' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20		'recent classes... (r)' 						$r 	model 			recent 									clockIcon)
		#(30 		'-----')
		#(40		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(50		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(60 		'-----')
		#(70		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(80 		'-----')
		#(90		'reorganize' 						nil 	model 			editSystemCategories 									sendReceiveIcon)
		#(100		'alphabetize (A)' 						$A 	model 			alphabetizeSystemCategories 									fontXGenericIcon)
		#(110 		'-----')
		#(120		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(130		'add item... (a)' 						$a 	model 			addSystemCategory 									newIcon)
		#(140		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(150		'move to... (m)' 						$m 	model 			moveAllToOtherSystemCategory 									saveAsIcon)
		#(160		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
		#(170 		'-----')
		#(180		'move to top' 						nil 	model 			moveSystemCategoryTop 									goTopIcon)
		#(190		'move up' 						nil 	model 			moveSystemCategoryUp 									goUpIcon)
		#(200		'move down' 						nil 	model 			moveSystemCategoryDown 									goDownIcon)
		#(210		'move to bottom' 						nil 	model 			moveSystemCategoryBottom 									fileOutIcon)
		#(220 		'-----')
		#(230		'run tests (t)' 						$t 	model 			runSystemCategoryTests 									weatherFewCloudsIcon)
	)! !
!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/2/2024 19:31:17' prior: 50332785 overrides: 16799397!
                             buildMorphicWindow
	"Create a pluggable version of all the views for a Browser, using Morphic widgets."

	| sysCatList msgCatList upperPanes clsLayout clsList msgList |
	model setSelectedSystemCategory: model systemCategoryList first.
	sysCatList := (PluggableListMorph
			withModel: model 
			listGetter: #systemCategorySingleton
			indexGetter: #indexIsOne 
			indexSetter: #indexIsOne:)
				mainView: self
				menuGetter: #codeFileListMenu
				keystrokeAction: #codeFileListKey:from:.
	sysCatList hideScrollBarsIndefinitely.
	
	msgCatList := (PluggableListMorph
			withModel: model 
			listGetter: #messageCategoryList
			indexGetter: #messageCategoryListIndex 
			indexSetter: #messageCategoryListIndex:)
				menuNshortcutsKey: #methodCategoriesListMenuSpec.

	clsList := self buildMorphicClassList.
	clsLayout := self buildMorphicClassColumnWith: clsList.
	msgList := self buildMorphicMessageList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: clsLayout proportionalWidth: 0.3;
		addAdjusterAndMorph: msgCatList proportionalWidth: 0.3;
		addAdjusterAndMorph: msgList proportionalWidth: 0.4.

	self layoutMorph
		addMorph: sysCatList fixedHeight: (Preferences at: #standardCodeFont) lineSpacing + 10;
		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.
	model changed: #editSelection! !

CodeFileBrowserWindow removeSelector: #messageCategoryMenu!

!methodRemoval: CodeFileBrowserWindow #messageCategoryMenu stamp: 'Install-6433-NewMenuSpecs-Browser-MethodCategoriesList-JuanVuletich-2024Jun04-06h11m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageCategoryMenu
	| aMenu itemColl |
	aMenu := MenuMorph new defaultTarget: model.
	"All the options are for the model."
	aMenu addTitle: 'Message Category'.
	itemColl := OrderedCollection new.
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
		itemColl add:
			{#label -> 'fileIn'. #selector -> #fileInMessageCategories. #icon -> #updateIcon} asDictionary ].
	itemColl addAll:
		{
			{#label -> 'fileOut'. #selector -> #fileOutMessageCategories. #icon -> #fileOutIcon} asDictionary. 
			nil. 
			{#label -> 'reorganize'. #selector -> #editMessageCategories. #icon -> #sendReceiveIcon} asDictionary. 
			nil. 
			{#label -> 'add item...'. #selector -> #addCategory. #icon -> #newIcon} asDictionary. 
			nil. 
			{#label -> 'rename...'. #selector -> #renameCategory. #icon -> #saveAsIcon} asDictionary. 
			{#label -> 'remove'. #selector -> #removeMessageCategory. #icon -> #listRemoveIcon} asDictionary
		}.
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		itemColl addAll:
			{
				nil. 
				{#label -> 'remove existing'. #selector -> #removeUnmodifiedMethods. #icon -> #deleteIcon} asDictionary
			} ].
	aMenu addItemsFromDictionaries: itemColl.
	^ aMenu.!

BrowserWindow class removeSelector: #messageCategoryMenuOptions!

!methodRemoval: BrowserWindow class #messageCategoryMenuOptions stamp: 'Install-6433-NewMenuSpecs-Browser-MethodCategoriesList-JuanVuletich-2024Jun04-06h11m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageCategoryMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut (o)'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutMessageCategories.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'reorganize (r)'.
				#object 			-> 		#model.
				#selector 			-> 		#editMessageCategories.
				#icon 			-> 		#sendReceiveIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'alphabetize (a)'.
				#object 			-> 		#model.
				#selector 			-> 		#alphabetizeMessageCategories.
				#icon 			-> 		#fontXGenericIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'remove empty categories (e)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeEmptyCategories.
				#icon 			-> 		#listRemoveIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'categorize all uncategorized (c)'.
				#object 			-> 		#model.
				#selector 			-> 		#categorizeAllUncategorizedMethods.
				#icon 			-> 		#packageIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		50.
				#label 			-> 		'new category... (n)'.
				#object 			-> 		#model.
				#selector 			-> 		#addCategory.
				#icon 			-> 		#newIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		60.
				#label 			-> 		'new extension category... (N)'.
				#object 			-> 		#model.
				#selector 			-> 		#addExtensionCategory.
				#icon 			-> 		#listAddIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'rename... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'remove (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeMessageCategory.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'run tests (t)'.
				#object 			-> 		#model.
				#selector 			-> 		#runMessageCategoryTests.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
		}`.
	!

BrowserWindow removeSelector: #messageCategoryMenu!

!methodRemoval: BrowserWindow #messageCategoryMenu stamp: 'Install-6433-NewMenuSpecs-Browser-MethodCategoriesList-JuanVuletich-2024Jun04-06h11m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageCategoryMenu

	^DynamicMenuBuilder buildTitled: 'Message Category' targeting: self collectingMenuOptionsWith: #messageCategoryMenuOptions.
!

BrowserWindow removeSelector: #messageCatListKey:from:!

!methodRemoval: BrowserWindow #messageCatListKey:from: stamp: 'Install-6433-NewMenuSpecs-Browser-MethodCategoriesList-JuanVuletich-2024Jun04-06h11m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageCatListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $o ifTrue: [ ^ model fileOutMessageCategories ].
	aChar = $t ifTrue: [ ^ model runMessageCategoryTests ].
	aChar = $x ifTrue: [ ^ model removeMessageCategory ].
	aChar = $R ifTrue: [ ^ model renameCategory ].
	aChar = $n ifTrue: [ ^ model addCategory ].
	aChar = $N ifTrue: [ ^ model addExtensionCategory ].
	aChar = $e ifTrue: [ ^ model removeEmptyCategories ].
	aChar = $c ifTrue: [ ^ model categorizeAllUncategorizedMethods ].
	aChar = $a ifTrue: [ ^ model alphabetizeMessageCategories ].
	aChar = $r ifTrue: [ ^ model editMessageCategories ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6433-NewMenuSpecs-Browser-MethodCategoriesList-JuanVuletich-2024Jun04-06h11m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6433] on 4 June 2024 at 8:24:58 am'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 08:20:59'!
                messageListMenuSpec
	"Spec for the menu and shortcut keys the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(80		'browse method category (c)' 							$c 	window 			browseCategoryOfCurrentMethod 									editFindReplaceIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							$n 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(170		'implementors of... (m)' 							$m 	window 			browseMessages 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'show category (C)' 								$C 	model 			showHomeCategory 									packageIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 08:12:54' overrides: 50343732!
                     messageListMenuSpec
	"Spec for the menu and shortcut keys the messages list.
	See coment at Morph >> #getMenu
	"
	^ self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileIn' 						nil 	model 			fileInMessage 							updateIcon)
				#(20		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(30 		'-----')
				#(40		'senders (n)' 						$n 	window 			browseSenders 							mailForwardIcon)
				#(50		'implementors (m)' 						$m 	window 			browseImplementors 							developmentIcon)
				#(60		'method inheritance (h)' 						$h 	window 			methodInheritance 							goDownIcon)
				#(70		'browse full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
				#(80		'versions (v)' 						nil 	window 			browseVersions 							clockIcon)
				#(90 		'-----')
				#(100		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(20 		'-----')
				#(30		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)].! !
!MethodSetWindow methodsFor: 'menu building' stamp: 'jmv 6/4/2024 08:16:12' overrides: 50340329!
                    messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel class |
	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing].

	sel := model selectedMessageName.
	aChar = $m ifTrue: [  "These next two put up a type in if no message selected"
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].
	aChar = $n ifTrue: [
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].

	"The following require a class selection"
	(class := model selectedClassOrMetaClass) ifNil: [^ self ].
	aChar = $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].
	aChar = $N ifTrue: [^ self browseClassRefs].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $p ifTrue: [^ self browseFullProtocol].

	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $i ifTrue: [^ self methodInheritance].
			aChar = $o ifTrue: [^ model fileOutMessage].
			aChar = $c ifTrue: [^ model copySelector].
			aChar = $v ifTrue: [^ self browseVersions].
			aChar = $C ifTrue: [^ model showHomeCategory].
			aChar = $O ifTrue: [^ self openSingleMessageBrowser].
			aChar = $x ifTrue: [^ model removeMessage].
			aChar = $t ifTrue: [^ model runMethodTest].
			aChar = $r ifTrue: [^ model debugMethodTest]]
		ifNil: [
			aChar = $R ifTrue: [^ model renameClass]]! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 06:31:57' prior: 50341767!
        addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetGetter | self perform: targetGetter ]
		ifNil: [ self ].
	selector := itemSpec fifth.
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
		ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 06:32:29' prior: 50340484!
    addSubmenuTo: menu fromSpec: itemSpec submenus: submenusDictionary
	| submenu label submenuId iconSymbol helpText menuItem |
	submenu := MenuMorph new.
	label := itemSpec second.
	submenuId := itemSpec fifth // 1000.
	menuItem := menu add: label subMenu: submenu.
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].
	submenusDictionary at: submenuId put: submenu! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 08:10:12' prior: 50332712!
                             buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			menuNshortcutsKey: #messageListMenuSpec.! !
!MethodSetWindow methodsFor: 'menu building' stamp: 'jmv 6/4/2024 08:09:12' prior: 50334031!
             messageListMenu2
	"Fill aMenu with the items appropriate when the shift key is held down"

	self flag: #assumesKeyboardShortcuts.
	^DynamicMenuBuilder 
		buildTitled: 'Message Set' 
		targeting: self 
		collectingMenuOptionsWith: #messageSetMenu2Options 
		changingThemWith: [ :options |
			self addExtraMenu2ItemsTo: options ].! !

RefactoringMenues class removeSelector: #messageListMenuOptions!

!methodRemoval: RefactoringMenues class #messageListMenuOptions stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^ `{
		{
			#itemGroup 			-> 		5.
			#itemOrder 			-> 		10.
			#label 			-> 		RefactoringMenues refactoringsLabel.
			#selector 			-> 		#yourself.
			#icon 			-> 		#listAddIcon
		} asDictionary.
			{
				#submenuOf 	-> 				RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'rename... (R)'.
				#object 			-> 		#model.
				#selector 			-> 		#renameSelector.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		15.
				#label 			-> 		'change keyword order...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeKeywordOrder.
				#icon 			-> 		#sendReceiveIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'add parameter...(A)'.
				#object 			-> 		#model.
				#selector 			-> 		#addParameter.
				#icon 			-> 		#listAddIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		30.
				#label 			-> 		'remove parameter...(S)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeParameter.
				#icon 			-> 		#listRemoveIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'inline method... (F)'.
				#object 			-> 		#model.
				#selector 			-> 		#inlineMethod.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'move to instance/class method'.
				#object 			-> 		#model.
				#selector 			-> 		#moveToInstanceOrClassMethod.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'push up'.
				#object 			-> 		#model.
				#selector 			-> 		#pushUpSelector.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'add in superclass as subclassResponsability'.
				#object 			-> 		#model.
				#selector 			-> 		#addAsSubclassResponsabilitySelector.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		50.
				#label 			-> 		'push down to subclasses'.
				#object 			-> 		#model.
				#selector 			-> 		#pushDownSelectorToSubclasses.
				#icon 			-> 		#goBottomIcon
			} asDictionary.
			{
				#submenuOf -> 					RefactoringMenues refactoringsLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		60.
				#label 			-> 		'push down to one subclass'.
				#object 			-> 		#model.
				#selector 			-> 		#pushDownSelectorToOneSubclass.
				#icon 			-> 		#goBottomIcon
			} asDictionary.
			
		}`.
	!

CodeFileBrowserWindow removeSelector: #messageListMenu!

!methodRemoval: CodeFileBrowserWindow #messageListMenu stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu
	| aMenu itemColl |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Message List'.
	itemColl := OrderedCollection new.
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
		itemColl add:
			{#label -> 'fileIn'. #object -> #model. #selector -> #fileInMessage. #icon -> #updateIcon} asDictionary ].
	itemColl addAll:
		{
			{#label -> 'fileOut'. #object -> #model. #selector -> #fileOutMessage. #icon -> #fileOutIcon} asDictionary. 
			nil
		}.
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
		itemColl addAll:
			{
				{#label -> 'senders (n)'. #selector -> #browseSenders. #icon -> #mailForwardIcon} asDictionary. 
				{#label -> 'implementors (m)'. #selector -> #browseImplementors. #icon -> #developmentIcon} asDictionary. 
				{#label -> 'method inheritance (h)'. #selector -> #methodInheritance. #icon -> #goDownIcon} asDictionary. 
				{#label -> 'versions (v)'. #selector -> #browseVersions. #icon -> #clockIcon} asDictionary
			} ].
	itemColl addAll:
		{
			nil. 
			{#label -> 'remove method (x)'. #object -> #model. #selector -> #removeMessage. #icon -> #deleteIcon} asDictionary
		}.
	aMenu addItemsFromDictionaries: itemColl.
	^ aMenu.!

CodeFileBrowserWindow removeSelector: #messageListKey:from:!

!methodRemoval: CodeFileBrowserWindow #messageListKey:from: stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $b ifTrue: [^ self browseMethodFull].
	super messageListKey: aChar from: view!

BrowserWindow class removeSelector: #messageListMenu2Options!

!methodRemoval: BrowserWindow class #messageListMenu2Options stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu2Options
	
	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'toggle diffing (D)'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleDiffing.
				#icon 			-> 		#switchIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of sent messages'.
				#selector 			-> 		#browseAllMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'local senders of...'.
				#selector 			-> 		#browseLocalSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'local implementors of...'.
				#selector 			-> 		#browseLocalImplementors.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'sample instance'.
				#selector 			-> 		#makeSampleInstance.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect instances'.
				#selector 			-> 		#inspectInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inspect subinstances'.
				#selector 			-> 		#inspectSubInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'change category...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		50.
				#label 			-> 		'change sets with this method'.
				#selector 			-> 		#findMethodInChangeSets.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		60.
				#label 			-> 		'revert to previous version'.
				#object 			-> 		#model.
				#selector 			-> 		#revertToPreviousVersion.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu.
				#icon 			-> 		#listAddIcon
			} asDictionary.			
		}`!

BrowserWindow class removeSelector: #messageListMenuOptions!

!methodRemoval: BrowserWindow class #messageListMenuOptions stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'what to show...'.
				#selector 			-> 		#offerWhatToShowMenu.
				#icon 			-> 		#preferencesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'toggle break on entry'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleBreakOnEntry.
				#icon 			-> 		#debugIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'browse method (O)'.
				#selector 			-> 		#openSingleMessageBrowser.
				#icon 			-> 		#scriptIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'browse protocol (p)'.
				#selector 			-> 		#browseFullProtocol.
				#icon 			-> 		#spreadsheetIcon
			} asDictionary.
			{	#itemGroup  			-> 		20.
				#itemOrder  			-> 		50.
				#label            			-> 		'browse method category (c)'.
				#selector       			-> 		#browseCategoryOfCurrentMethod.
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutMessage.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect CompiledMethod'.
				#object 			-> 		#model.
				#selector 			-> 		#inspectCompiledMethod.
				#icon 			-> 		#exploreIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'senders of... (n)'.
				#selector 			-> 		#browseSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of... (m)'.
				#selector 			-> 		#browseMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inheritance (i)'.
				#selector 			-> 		#methodInheritance.
				#icon 			-> 		#goDownIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'versions (v)'.
				#selector 			-> 		#browseVersions.
				#icon 			-> 		#clockIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'inst var refs...'.
				#selector 			-> 		#browseInstVarRefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		20.
				#label 			-> 		'inst var defs...'.
				#selector 			-> 		#browseInstVarDefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		30.
				#label 			-> 		'class var refs...'.
				#selector 			-> 		#browseClassVarRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		40.
				#label 			-> 		'class variables'.
				#selector 			-> 		#browseClassVariables.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		50.
				#label 			-> 		'class refs (N)'.
				#selector 			-> 		#browseClassRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		10.
				#label 			-> 		'remove method (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeMessage.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		20.
				#label 			-> 		'remove method in hierarchy'.
				#object 			-> 		#model.
				#selector 			-> 		#removeMessageInHierarchy.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		30.
				#label 			-> 		'run test (t)'.
				#object 			-> 		#model.
				#selector 			-> 		#runMethodTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		40.
				#label 			-> 		'debug test (r)'.
				#object 			-> 		#model.
				#selector 			-> 		#debugMethodTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		70.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu2.
				#icon 			-> 		#listAddIcon
			} asDictionary.
		}`.
	!

BrowserWindow removeSelector: #openMessageListMenu!

!methodRemoval: BrowserWindow #openMessageListMenu stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
openMessageListMenu
	"Offer the unshifted selector-list menu"

	^ self messageListMenu popUpInWorld!

BrowserWindow removeSelector: #messageListMenu2!

!methodRemoval: BrowserWindow #messageListMenu2 stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu2
	"Fill aMenu with the items appropriate when the shift key is held down"

	self flag: #assumesKeyboardShortcuts.
	^DynamicMenuBuilder 
		buildTitled: 'Message List' 
		targeting: self 
		collectingMenuOptionsWith: #messageListMenu2Options 
		changingThemWith: [ :options |
			self addExtraMenu2ItemsTo: options.
			model canShowMultipleMessageCategories ifTrue: [	
				options add: `{ 
					#itemGroup 			-> 		40.
					#itemOrder 			-> 		45.		
					#label 			-> 		'show category (C)'.
					#object 			-> 		#model.
					#selector 			-> 		#showHomeCategory.
					#icon 			-> 		#packageIcon
				} asDictionary` ]].
!

BrowserWindow removeSelector: #messageListMenu!

!methodRemoval: BrowserWindow #messageListMenu stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu
	"Answer the message-list menu"

	^DynamicMenuBuilder buildTitled: 'Message List' targeting: self collectingMenuOptionsWith: #messageListMenuOptions.
	!

BrowserWindow removeSelector: #messageListKey:from:!

!methodRemoval: BrowserWindow #messageListKey:from: stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel |
	self flag: #definesKeyboardShortcuts.
	sel := model selectedMessageName.
	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $c ifTrue: [ ^ self browseCategoryOfCurrentMethod ].
			aChar = $R ifTrue: [^ model renameSelector].
			aChar = $A ifTrue: [^ model addParameter ].
			aChar = $S ifTrue: [^ model removeParameter ].
			aChar = $F ifTrue: [^ model inlineMethod ]].
	super messageListKey: aChar from: view!

BrowserWindow removeSelector: #addExtraMenu2ItemsTo:!

!methodRemoval: BrowserWindow #addExtraMenu2ItemsTo: stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
addExtraMenu2ItemsTo: optoins
	"The shifted selector-list menu is being built; some menu items are appropriate only for certain kinds of browsers, and this gives a hook for them to be added as approrpiate.  If any is added here, a line should be added first -- browse reimplementors of this message for examples."!

BrowserWindow removeSelector: #openMessageListMenu2!

!methodRemoval: BrowserWindow #openMessageListMenu2 stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
openMessageListMenu2
	"Offer the additional selector-list menu"

	^ self messageListMenu2 popUpInWorld!

CodeWindow removeSelector: #messageListKey:from:!

!methodRemoval: CodeWindow #messageListKey:from: stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel class |
	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing].

	sel := model selectedMessageName.
	aChar = $m ifTrue: [  "These next two put up a type in if no message selected"
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].
	aChar = $n ifTrue: [
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].

	"The following require a class selection"
	(class := model selectedClassOrMetaClass) ifNil: [^ self ].
	aChar = $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].
	aChar = $N ifTrue: [^ self browseClassRefs].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $p ifTrue: [^ self browseFullProtocol].

	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $i ifTrue: [^ self methodInheritance].
			aChar = $o ifTrue: [^ model fileOutMessage].
			aChar = $c ifTrue: [^ model copySelector].
			aChar = $v ifTrue: [^ self browseVersions].
			aChar = $C ifTrue: [^ model showHomeCategory].
			aChar = $O ifTrue: [^ self openSingleMessageBrowser].
			aChar = $x ifTrue: [^ model removeMessage].
			aChar = $t ifTrue: [^ model runMethodTest].
			aChar = $r ifTrue: [^ model debugMethodTest]]
		ifNil: [
			aChar = $R ifTrue: [^ model renameClass]]!

Browser removeSelector: #canShowMultipleMessageCategories!

!methodRemoval: Browser #canShowMultipleMessageCategories stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
canShowMultipleMessageCategories
	"Answer whether the receiver is capable of showing multiple message categories"

	^ true!

CodeProvider removeSelector: #canShowMultipleMessageCategories!

!methodRemoval: CodeProvider #canShowMultipleMessageCategories stamp: 'Install-6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st 6/6/2024 11:42:31'!
canShowMultipleMessageCategories
	"Answer whether the receiver is capable of showing multiple message categories"

	^ false!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6434-NewMenuSpecs-Browser-MessageList-JuanVuletich-2024Jun04-06h22m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6433] on 4 June 2024 at 9:51:10 am'!
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:47:19'!
               codeFileListMenuSpec
	"Spec for the menu and shortcut keys for the single entry filename list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := 
			#(
				#(0 		'Code File' 			false)
				#(10		'find class... (f)' 					$f 	window 			findClass)
				#(20 		'-----')
			).
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
			answer := answer, #(
				#(30		'fileIn' 					nil 	model 			fileIn) )].
	answer := answer, 
			#(
				#(40		'fileOut' 					nil 	model 			fileOut) ).
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(50		'remove existing' 					nil 	model 			removeUnmodifiedClasses) )].
	^answer! !
!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 09:49:27' prior: 50343512 overrides: 16799397!
                        buildMorphicWindow
	"Create a pluggable version of all the views for a Browser, using Morphic widgets."

	| sysCatList msgCatList upperPanes clsLayout clsList msgList |
	model setSelectedSystemCategory: model systemCategoryList first.
	sysCatList := (PluggableListMorph
			withModel: model 
			listGetter: #systemCategorySingleton
			indexGetter: #indexIsOne 
			indexSetter: #indexIsOne:)
				menuNshortcutsKey: #codeFileListMenuSpec.
	sysCatList hideScrollBarsIndefinitely.
	
	msgCatList := (PluggableListMorph
			withModel: model 
			listGetter: #messageCategoryList
			indexGetter: #messageCategoryListIndex 
			indexSetter: #messageCategoryListIndex:)
				menuNshortcutsKey: #methodCategoriesListMenuSpec.

	clsList := self buildMorphicClassList.
	clsLayout := self buildMorphicClassColumnWith: clsList.
	msgList := self buildMorphicMessageList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: clsLayout proportionalWidth: 0.3;
		addAdjusterAndMorph: msgCatList proportionalWidth: 0.3;
		addAdjusterAndMorph: msgList proportionalWidth: 0.4.

	self layoutMorph
		addMorph: sysCatList fixedHeight: (Preferences at: #standardCodeFont) lineSpacing + 10;
		addAdjusterAndMorph: upperPanes proportionalHeight: 0.3;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.7.
	model changed: #editSelection! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:31:49' prior: 50342070 overrides: 50341932!
                 classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(40		'browse full (b)' 					$b 	window 			browseMethodFull 						editFindReplaceIcon)
				#(50		'class refs (N)' 					$N 	window 			browseClassRefs 						classIcon)
				#(60 		'-----')
				#(70		'fileIn' 					nil 	model 			fileInClass 						updateIcon)
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			) ].! !

CodeFileBrowserWindow removeSelector: #codeFileListMenu!

!methodRemoval: CodeFileBrowserWindow #codeFileListMenu stamp: 'Install-6435-NewMenuSpecs-CodeFileBrowser-codeFileList-JuanVuletich-2024Jun04-08h24m-jmv.001.cs.st 6/6/2024 11:42:31'!
codeFileListMenu
	| aMenu itemColl |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Code File'.
	itemColl := OrderedCollection new.
	itemColl addAll:
		{
			{#label -> 'find class... (f)'. #selector -> #findClass} asDictionary. 
			nil
		}.
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
		itemColl add:
			{#label -> 'fileIn'. #object -> #model. #selector -> #fileIn} asDictionary ].
	itemColl add:
		{#label -> 'fileOut'. #object -> #model. #selector -> #fileOut} asDictionary.
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		itemColl add:
			{#label -> 'remove existing'. #object -> #model. #selector -> #removeUnmodifiedClasses} asDictionary ].
	aMenu addItemsFromDictionaries: itemColl.
	^ aMenu.!

CodeFileBrowserWindow removeSelector: #codeFileListKey:from:!

!methodRemoval: CodeFileBrowserWindow #codeFileListKey:from: stamp: 'Install-6435-NewMenuSpecs-CodeFileBrowser-codeFileList-JuanVuletich-2024Jun04-08h24m-jmv.001.cs.st 6/6/2024 11:42:31'!
codeFileListKey: aChar from: view

	self flag: #definesKeyboardShortcuts.
	aChar = $f ifTrue: [^ self findClass]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6435-NewMenuSpecs-CodeFileBrowser-codeFileList-JuanVuletich-2024Jun04-08h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6433] on 4 June 2024 at 9:52:55 am'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:51:30' prior: 50341932!
  classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(90		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									listAddIcon)
		#(260		nil 							$r 	model 			recent) "Shortcut only. No menu entry."

		" 'refactorings' SubMenu"
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1090 		'-----')
		#(1100		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:51:38' prior: 50343732!
 messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(80		'browse method category (c)' 							$c 	window 			browseCategoryOfCurrentMethod 									editFindReplaceIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							$n 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(170		'implementors of... (m)' 							$m 	window 			browseMessages 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'show category (C)' 								$C 	model 			showHomeCategory 									packageIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:51:42' prior: 50343330!
                             methodCategoriesListMenuSpec
	"Spec for the menu and shortcut keys for the method categories list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Categories' 					false)
		#(10		'fileOut (o)' 								$o 	model 			fileOutMessageCategories 										fileOutIcon)
		#(20 		'-----')
		#(30		'reorganize (r)' 								$r 	model 			editMessageCategories 										sendReceiveIcon)
		#(40		'alphabetize (a)' 								$a 	model 			alphabetizeMessageCategories 										fontXGenericIcon)
		#(50		'remove empty categories (e)' 								$e 	model 			removeEmptyCategories 										listRemoveIcon)
		#(60		'categorize all uncategorized (c)' 								$c 	model 			categorizeAllUncategorizedMethods 										packageIcon)
		#(70		'new category... (n)' 								$n 	model 			addCategory 										newIcon)
		#(80		'new extension category... (N)' 								$N 	model 			addExtensionCategory 										listAddIcon)
		#(90 		'-----')
		#(100		'rename... (R)' 								$R 	model 			renameCategory 										saveAsIcon)
		#(110		'remove (x)' 								$x 	model 			removeMessageCategory 										deleteIcon)
		#(120 		'-----')
		#(130		'run tests (t)' 								$t 	model 			runMessageCategoryTests 										weatherFewCloudsIcon)
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:51:47' prior: 50343422!
                           systemCatSingletonMenuSpec
	"Spec for the menu and shortcut keys for the one-item system category list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class category' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20 		'-----')
		#(30		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(40		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(50 		'-----')
		#(60		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(70 		'-----')
		#(80		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(90		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(100		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:51:56' prior: 50343452!
                         systemCategoriesListMenuSpec
	"Spec for the menu and shortcut keys for the system categories list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class Categories' 					false)
		#(10		'find class... (f)' 						$f 	window 			findClass 									findIcon)
		#(20		'recent classes... (r)' 						$r 	model 			recent 									clockIcon)
		#(30 		'-----')
		#(40		'browse all (B)' 						$B 	window 			browseAllClasses 									editFindReplaceIcon)
		#(50		'browse (b)' 						$b 	window 			openSystemCategoryBrowser 									packageIcon)
		#(60 		'-----')
		#(70		'fileOut (o)' 						$o 	model 			fileOutSystemCategory 									fileOutIcon)
		#(80 		'-----')
		#(90		'reorganize' 						nil 	model 			editSystemCategories 									sendReceiveIcon)
		#(100		'alphabetize (A)' 						$A 	model 			alphabetizeSystemCategories 									fontXGenericIcon)
		#(110 		'-----')
		#(120		'update (u)' 						$u 	model 			updateSystemCategories 									updateIcon)
		#(130		'add item... (a)' 						$a 	model 			addSystemCategory 									newIcon)
		#(140		'rename... (R)' 						$R 	model 			renameSystemCategory 									saveAsIcon)
		#(150		'move to... (m)' 						$m 	model 			moveAllToOtherSystemCategory 									saveAsIcon)
		#(160		'remove (x)' 						$x 	model 			removeSystemCategory 									deleteIcon)
		#(170 		'-----')
		#(180		'move to top' 						nil 	model 			moveSystemCategoryTop 									goTopIcon)
		#(190		'move up' 						nil 	model 			moveSystemCategoryUp 									goUpIcon)
		#(200		'move down' 						nil 	model 			moveSystemCategoryDown 									goDownIcon)
		#(210		'move to bottom' 						nil 	model 			moveSystemCategoryBottom 									fileOutIcon)
		#(220 		'-----')
		#(230		'run tests (t)' 						$t 	model 			runSystemCategoryTests 									weatherFewCloudsIcon)
	)! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:10' prior: 50344641!
     codeFileListMenuSpec
	"Spec for the menu and shortcut keys for the single entry filename list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := 
			#(
				#(0 		'Code File' 			false)
				#(10		'find class... (f)' 					$f 	window 			findClass)
				#(20 		'-----') ).
	self model baseCodeSource isLiveSmalltalkImage ifTrue: [
			answer := answer, #(
				#(30		'fileIn' 					nil 	model 			fileIn) )].
	answer := answer, 
			#(
				#(40		'fileOut' 					nil 	model 			fileOut) ).
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(50		'remove existing' 					nil 	model 			removeUnmodifiedClasses) )].
	^answer! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:15' prior: 50343882 overrides: 50344953!
                   messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^ self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileIn' 						nil 	model 			fileInMessage 							updateIcon)
				#(20		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(30 		'-----')
				#(40		'senders (n)' 						$n 	window 			browseSenders 							mailForwardIcon)
				#(50		'implementors (m)' 						$m 	window 			browseImplementors 							developmentIcon)
				#(60		'method inheritance (h)' 						$h 	window 			methodInheritance 							goDownIcon)
				#(70		'browse full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
				#(80		'versions (v)' 						nil 	window 			browseVersions 							clockIcon)
				#(90 		'-----')
				#(100		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(20 		'-----')
				#(30		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)].! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:18' prior: 50343372 overrides: 50345103!
                   methodCategoriesListMenuSpec
	"Spec for the menu and shortcut keys for the method categories list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := self model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Message Categories' 			false)
				#(10		'fileIn' 					nil 	model 			fileInMessageCategories 								updateIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Message Categories' 			false)
			)].
	answer := answer, 
			#(
				#(20		'fileOut' 					nil 	model 			fileOutMessageCategories 								fileOutIcon)
				#(30 		'-----')
				#(40		'reorganize' 					nil 	model 			editMessageCategories 								sendReceiveIcon)
				#(50 		'-----')
				#(60		'add item...' 					nil 	model 			addCategory 								newIcon)
				#(70 		'-----')
				#(80		'rename...' 					nil 	model 			renameCategory 								saveAsIcon)
				#(90		'remove' 					nil 	model 			removeMessageCategory 								listRemoveIcon)
			).
	self model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(100 		'-----')
				#(100		'remove existing' 					nil 	model 			removeUnmodifiedMethods 								deleteIcon)
		) ].
	^answer! !
!ChangeListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:23' prior: 50342122!
                listMenuSpec
	"Spec for the menu and shortcut keys for the changes list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Change List' 									true)
		#(10		'fileIn selections' 									nil 	model 			fileInSelections 										nil
					'import the selected items into the image')
		#(20		'fileOut selections...	' 								nil 	model 			fileOutSelections 										nil
		 			'create a new file containing the selected items')
		#(30		'fileOut current version of selections...' 					nil 					model 			fileOutCurrentVersionsOfSelections 										nil
 					'create a new file containing the current (in-image) counterparts of the selected methods')
		#(40 		'-----')
		#(50		'compare to current' 									nil 	model 			compareToCurrentVersion 										nil
 					'open a separate window which shows the text differences between the on-file version and the in-image version.')
		#(60		'toggle diffing (D)' 									$D 	model 			toggleDiffing 										nil
 					'start or stop showing diffs in the code pane.')
		#(70 		'-----')
		#(80		'select new methods' 									nil 	model 			selectNewMethods 										nil
 					'select methods in the file that do not currently exist in the image')
		#(90		'select changes for absent classes' 									nil 	model 			selectAllForAbsentClasses 										nil
					'select methods in the file for classes that are not defined in the image')
		#(100		'select all changes for this class' 									nil 	model 			selectAllForThisClass 										nil
					'select all methods in the file that belong to the currently-selected class')
		#(110		'select unchanged methods' 									nil 	model 			selectUnchangedMethods 										nil
					'select methods in the file whose in-image versions are the same as their in-file counterparts')
		#(120		'select methods equivalent to current' 									nil 	model 			selectEquivalentMethods 										nil
					'select methods in the file whose in-image versions have the same behavior as their in-file counterparts')
		#(130		'select methods older than current' 									nil 	model 			selectMethodsOlderThanCurrent 										nil
					'select methods in the file that are older than the one currently in the image')
		#(140		'select removals of sent methods' 									nil 	model 			selectRemovalsOfSent 										nil
					'select all method removals of methods that have some sender in the image')
		#(150 		'-----')
		#(160		'select all (a)' 									$a 	model 			selectAll 										nil
					'select all the items in the list')
		#(170		'deselect all (A)' 									$A 	model 			deselectAll 										nil
					'deselect all the items in the list')
		#(180		'invert selections' 									nil 	model 			invertSelections 										nil
					'select every item that is not currently selected, and deselect every item that *is* currently selected')
		#(190 		'-----')
		#(200		'browse class and method' 									nil 	window 			browseMethodFull 										nil
					'open a full browser showing the selected method')
		#(210		'browse all versions of single selection' 									nil 	window 			browseVersions 										nil
					'open a version browser showing the versions of the currently selected method')
		#(220		'browse current versions of selections' 									nil 	window 			browseCurrentVersionsOfSelections 										nil
					'open a message-list browser showing the current (in-image) counterparts of the selected methods')
		#(230		'destroy current methods of selections' 									nil 	model 			destroyCurrentCodeOfSelections 										nil
					'remove (*destroy*) the in-image counterparts of all selected methods')
		#(240 		'-----')
		#(250		'remove doIts' 									nil 	model 			removeDoIts 										nil
					'remove all items that are doIts rather than definitions')
		#(260		'remove older versions' 									nil 	model 			removeOlderMethodVersions 										nil
					'remove all but the most recent versions of methods in the list')
		#(270		'remove up-to-date versions' 									nil 	model 			removeUpToDate 										nil
					'remove all items whose code is the same as the counterpart in-image code')
		#(280		'remove empty class comments' 									nil 	model 			removeEmptyClassComments 										nil
					'remove all empty class comments')
		#(290		'remove selected items' 									nil 	model 			removeSelections 										nil
					'remove the selected items from the change-list')
		#(300		'remove unselected items' 									nil 	model 			removeNonSelections 										nil
					'remove all the items not currently selected from the change-list')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:26' prior: 50336563 overrides: 50345339!
                    listMenuSpec
	"Spec for the menu and shortcut keys for the versions list."
	^model classCommentIndicated
		ifTrue: [ self classCommentVersionsMenuSpec ]
		ifFalse: [ self methodVersionsMenuSpec ]! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:29' prior: 50342360!
                  changeSetListMenuSpec
	"Spec for the menu and shortcut keys for the changesets list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
			#(0 		'Change Set' 						true)
			#(10 		'File out and remove (o)' 							$o 	model 			fileOutAndRemove 								fileOutIcon)
			#(20 		'File out and keep (k)' 							$k 	model 			fileOutAndKeep 								fileOutIcon)
			#(30 		'-----')
			#(40 		'Rename change set (R)' 					 		$R 	model 			rename 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			remove 								warningIcon)
	).
	model currentCanHavePreambleAndPostscript ifTrue: [
		model currentHasPreamble
			ifTrue: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Edit preamble (p)' 						$p 	model 			addPreamble 								textEditorIcon)
				#(80 		'Remove preamble' 						nil 	model 			removePreamble 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Add preamble (p)' 						$p 	model 			addPreamble 								listAddIcon) )].
		model currentHasPostscript
			ifTrue: [ answer  := answer, #(
				#(90 		'Edit postscript...' 						nil 	model 			editPostscript 								textEditorIcon)
				#(100 		'Remove postscript' 						nil 	model 			removePostscript 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(90 		'Add postscript...' 						nil 	model 			editPostscript 								listAddIcon) )].
	].

	answer  := answer, #(
		#(110 		'-----')
		#(120 		'conflicts with other change sets' 								nil 	window			browseMethodConflicts 								emblemImportantIcon
			'Browse all methods that occur both in this change set and in at least one other change set.')
		#(130 		'-----')
		#(140 		'trim history' 								nil 	model			trimHistory 								clockIcon
			'Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.')
		#(150 		'view affected class categories' 								nil 	model 			viewAffectedClassCategories 								packageIcon
			'Show class categories affected by any contained change')
	).
	model csIsForBase ifFalse: [ "Maybe disable a few: Copy them the same as above, but without selector."
		answer := answer, #(
			#(40 		'Rename change set (R)' 					 		$R 	model 			nil 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			nil 								warningIcon)
			#(140 		'trim history' 							nil 	model			nil 								clockIcon)) ].
	^answer! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:36' prior: 50342441!
                              classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Class List' 						false)
			#(10 		'delete class from change set (d)' 								$d 	model 			forgetClass 						warningIcon)
			#(20 		'remove class from system (x)' 								$x 	model 			removeClass 						deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 								$b 	window 			browseMethodFull 						editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 								$h 	window 			browseHierarchy 						goTopIcon)
			#(60 		'browse protocol (p)' 								$p 	window 			browseFullProtocol 						spreadsheetIcon)
			#(70 		'-----')		
			#(80 		'inst var refs...' 								nil 	window 			browseInstVarRefs 						instanceIcon)
			#(90 		'inst var defs...' 								nil 	window 			browseInstVarDefs 						instanceIcon)
			#(100 		'class var refs...' 								nil 	window 			browseClassVarRefs 						classIcon)
			#(110 		'class vars' 								nil 	window 			browseClassVariables 						classIcon)
			#(120 		'class refs (N)' 								$N 	window 			browseClassRefs 						classIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 09:52:39' prior: 50342479!
        messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								scriptIcon)
			#(70 		'browse protocol (p)' 									$p 	window 			browseFullProtocol 								spreadsheetIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								fileOutIcon)
			#(100 		'-----')		
			#(110 		'senders of... (n)' 									$n 	window 			browseSendersOfMessages 								mailForwardIcon)
			#(120 		'implementors of... (m)' 									$m 	window 			browseMessages 								developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								clockIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6436-Tweaks-JuanVuletich-2024Jun04-09h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6436] on 4 June 2024 at 11:12:16 am'!
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:03:47'!
            messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders 									mailForwardIcon)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 									listRemoveIcon)
		#(2110 		'filter message list...' 								nil 	window 			filterMessageList 									findIcon)
		#(2120		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2130		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2140		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
		#(2150 		'-----')
		#(2160 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 									classIcon)
		#(2170 		'sort by class name' 								nil 	model 			sortByClassName 									classIcon)
		#(2180 		'sort by selector' 								nil 	model 			sortBySelector 									scriptIcon)
		#(2190 		'sort by date' 								nil 	model 			sortByDate 									dateIcon)
		#(2200 		'reverse sort' 								nil 	model 			sortReverse 									redoIcon)
	).
! !
!ProtocolBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 10:43:36' overrides: 50345665!
                 messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^ super messageListMenuSpec, #(
		#(80		'browse method category (c)' 							$c 	window 			browseCategoryOfCurrentMethod 									editFindReplaceIcon)
		#(2100 		'XXremove from this browser')
		#(2110 		'XXfilter message list...'))! !
!MethodSetWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 10:35:53' prior: 50333045!
    buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			menuNshortcutsKey: #messageListMenuSpec.! !

MethodSetWindow class removeSelector: #messageSetMenuOptions!

!methodRemoval: MethodSetWindow class #messageSetMenuOptions stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageSetMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'what to show...'.
				#selector 			-> 		#offerWhatToShowMenu.
				#icon 			-> 		#preferencesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'toggle break on entry'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleBreakOnEntry.
				#icon 			-> 		#debugIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'browse method (O)'.
				#selector 			-> 		#openSingleMessageBrowser.
				#icon 			-> 		#scriptIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'browse protocol (p)'.
				#selector 			-> 		#browseFullProtocol.
				#icon 			-> 		#spreadsheetIcon
			} asDictionary.
			{	#itemGroup  			-> 		20.
				#itemOrder  			-> 		50.
				#label            			-> 		'browse method category (c)'.
				#selector       			-> 			#browseCategoryOfCurrentMethod.
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'fileOut'.
				#object 			-> 		#model.
				#selector 			-> 		#fileOutMessage.
				#icon 			-> 		#fileOutIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect CompiledMethod'.
				#object 			-> 		#model.
				#selector 			-> 		#inspectCompiledMethod.
				#icon 			-> 		#exploreIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'senders of... (n)'.
				#selector 			-> 		#browseSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of... (m)'.
				#selector 			-> 		#browseMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inheritance (i)'.
				#selector 			-> 		#methodInheritance.
				#icon 			-> 		#goDownIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'versions (v)'.
				#selector 			-> 		#browseVersions.
				#icon 			-> 		#clockIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'inst var refs...'.
				#selector 			-> 		#browseInstVarRefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		20.
				#label 			-> 		'inst var defs...'.
				#selector 			-> 		#browseInstVarDefs.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		30.
				#label 			-> 		'class var refs...'.
				#selector 			-> 		#browseClassVarRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		40.
				#label 			-> 		'class variables'.
				#selector 			-> 		#browseClassVariables.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		50.
				#label 			-> 		'class refs (N)'.
				#selector 			-> 		#browseClassRefs.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		10.
				#label 			-> 		'remove method (x)'.
				#object 			-> 		#model.
				#selector 			-> 		#removeMessage.
				#icon 			-> 		#deleteIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		20.
				#label 			-> 		'run test (t)'.
				#object 			-> 		#model.
				#selector 			-> 		#runMethodTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		60.
				#itemOrder 			-> 		30.
				#label 			-> 		'debug test (r)'.
				#object 			-> 		#model.
				#selector 			-> 		#debugMethodTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		70.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu2.
				#icon 			-> 		#listAddIcon
			} asDictionary.
		}`.
	!

MethodSetWindow class removeSelector: #messageSetMenu2Options!

!methodRemoval: MethodSetWindow class #messageSetMenu2Options stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageSetMenu2Options
	
	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'toggle diffing (D)'.
				#object 			-> 		#model.
				#selector 			-> 		#toggleDiffing.
				#icon 			-> 		#switchIcon
			} asDictionary.
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'implementors of sent messages'.
				#selector 			-> 		#browseAllMessages.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'local senders of...'.
				#selector 			-> 		#browseLocalSendersOfMessages.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'local implementors of...'.
				#selector 			-> 		#browseLocalImplementors.
				#icon 			-> 		#classIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'sample instance'.
				#selector 			-> 		#makeSampleInstance.
				#icon 			-> 		#instanceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'inspect instances'.
				#selector 			-> 		#inspectInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'inspect subinstances'.
				#selector 			-> 		#inspectSubInstances.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		40.
				#label 			-> 		'change category...'.
				#object 			-> 		#model.
				#selector 			-> 		#changeCategory.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		50.
				#label 			-> 		'change sets with this method'.
				#selector 			-> 		#findMethodInChangeSets.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		60.
				#label 			-> 		'revert to previous version'.
				#object 			-> 		#model.
				#selector 			-> 		#revertToPreviousVersion.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'more...'.
				#selector 			-> 		#openMessageListMenu.
				#icon 			-> 		#listAddIcon
			} asDictionary.			
		}`!

MethodSetWindow removeSelector: #openMessageListMenu!

!methodRemoval: MethodSetWindow #openMessageListMenu stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
openMessageListMenu
	"Offer the unshifted selector-list menu"

	^ self messageListMenu popUpInWorld!

MethodSetWindow removeSelector: #browseCategoryOfCurrentMethod!

!methodRemoval: MethodSetWindow #browseCategoryOfCurrentMethod stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
browseCategoryOfCurrentMethod

	model categoryOfCurrentMethod ifNotNil: [:category| |catIndex selectedMessage|
		selectedMessage := model selectedMessageName.
		catIndex := model classOrMetaClassOrganizer categories indexOf: category.
		model messageCategoryListIndex: catIndex + 1.
		model selectedMessageName: selectedMessage]!

MethodSetWindow removeSelector: #messageListMenu2!

!methodRemoval: MethodSetWindow #messageListMenu2 stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu2
	"Fill aMenu with the items appropriate when the shift key is held down"

	self flag: #assumesKeyboardShortcuts.
	^DynamicMenuBuilder 
		buildTitled: 'Message Set' 
		targeting: self 
		collectingMenuOptionsWith: #messageSetMenu2Options 
		changingThemWith: [ :options |
			self addExtraMenu2ItemsTo: options ].!

MethodSetWindow removeSelector: #messageListKey:from:!

!methodRemoval: MethodSetWindow #messageListKey:from: stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListKey: aChar from: view
	"Respond to a Command key.  I am a model with a code pane, and I also
	have a listView that has a list of methods.  The view knows how to get
	the list and selection."

	| sel class |
	self flag: #definesKeyboardShortcuts.
	aChar = $D ifTrue: [^ model toggleDiffing].

	sel := model selectedMessageName.
	aChar = $m ifTrue: [  "These next two put up a type in if no message selected"
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].
	aChar = $n ifTrue: [
		^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].

	"The following require a class selection"
	(class := model selectedClassOrMetaClass) ifNil: [^ self ].
	aChar = $b ifTrue: [^ BrowserWindow fullOnClass: class selector: sel].
	aChar = $N ifTrue: [^ self browseClassRefs].
	aChar = $h ifTrue: [^ self browseHierarchy].
	aChar = $p ifTrue: [^ self browseFullProtocol].

	sel
		ifNotNil: [
			"The following require a method selection"
			aChar = $i ifTrue: [^ self methodInheritance].
			aChar = $o ifTrue: [^ model fileOutMessage].
			aChar = $c ifTrue: [^ model copySelector].
			aChar = $v ifTrue: [^ self browseVersions].
			aChar = $C ifTrue: [^ model showHomeCategory].
			aChar = $O ifTrue: [^ self openSingleMessageBrowser].
			aChar = $x ifTrue: [^ model removeMessage].
			aChar = $t ifTrue: [^ model runMethodTest].
			aChar = $r ifTrue: [^ model debugMethodTest]]
		ifNil: [
			aChar = $R ifTrue: [^ model renameClass]]!

MethodSetWindow removeSelector: #messageListMenu!

!methodRemoval: MethodSetWindow #messageListMenu stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
messageListMenu
	"Answer the message-list menu"

	^DynamicMenuBuilder buildTitled: 'Message Set' targeting: self collectingMenuOptionsWith: #messageSetMenuOptions.
	!

MethodSetWindow removeSelector: #addExtraMenu2ItemsTo:!

!methodRemoval: MethodSetWindow #addExtraMenu2ItemsTo: stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
addExtraMenu2ItemsTo: options
	"The shifted selector-list menu is being built.  Add items specific to MessageSet"

	model growable ifTrue: [
		options add: `{
			#itemGroup 			-> 		40.
			#itemOrder 			-> 		31.		
			#label 			-> 		'remove from this browser'.
			#object 			-> 		#model.
			#selector 			-> 		#removeMessageFromBrowser.
			#icon 			-> 		#listRemoveIcon 
		} asDictionary`.
		options add:`{
			#itemGroup 			-> 		40.
			#itemOrder 			-> 		32.		
			#label 			-> 		'filter message list...'.
			#selector 			-> 		#filterMessageList.
			#icon 			-> 		#findIcon
		} asDictionary`	].

	options add: `{
			#itemGroup 			-> 		41.
			#itemOrder 			-> 		33.		
			#label 			-> 		'sort by class hierarchy'.
			#object 			-> 		#model.	
			#selector 			-> 		#sortByClassHierarchy.
			#icon 			-> 		#classIcon
		} asDictionary`.
	options add: `{
			#itemGroup 			-> 		41.
			#itemOrder 			-> 		34.		
			#label 			-> 		'sort by class name'.
			#object 			-> 		#model.	
			#selector 			-> 		#sortByClassName.
			#icon 			-> 		#classIcon
		} asDictionary`.
	options add: `{
			#itemGroup 			-> 		41.
			#itemOrder 			-> 		35.		
			#label 			-> 		'sort by selector'.
			#object 			-> 		#model.	
			#selector 			-> 		#sortBySelector.
			#icon 			-> 		#scriptIcon
		} asDictionary`.
	options add: `{
			#itemGroup 			-> 		41.
			#itemOrder 			-> 		36.		
			#label 			-> 		'sort by date'.
			#object 			-> 		#model.	
			#selector 			-> 		#sortByDate.
			#icon 			-> 		#dateIcon
		} asDictionary`.
	options add: `{
			#itemGroup 			-> 		41.
			#itemOrder 			-> 		37.		
			#label 			-> 		'reverse sort'.
			#object 			-> 		#model.	
			#selector 			-> 		#sortReverse.
			#icon 			-> 		#redoIcon
		} asDictionary`.

!

MethodSetWindow removeSelector: #openMessageListMenu2!

!methodRemoval: MethodSetWindow #openMessageListMenu2 stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
openMessageListMenu2
	"Offer the additional selector-list menu"

	^ self messageListMenu2 popUpInWorld!

ProtocolBrowser removeSelector: #growable!

!methodRemoval: ProtocolBrowser #growable stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
growable
	"Answer whether the receiver is subject to manual additions and deletions"

	^ false!

MethodSet removeSelector: #growable!

!methodRemoval: MethodSet #growable stamp: 'Install-6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st 6/6/2024 11:42:31'!
growable
	"Answer whether the receiver is capable of growing/shrinking dynamically"

	^ true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6437-NewMenuSpecs-MethodSet-MessageList-JuanVuletich-2024Jun04-10h56m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6436] on 4 June 2024 at 11:20:35 am'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:16:12' prior: 50344953!
                              messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(80		'browse method category (c)' 							$c 	window 			browseCategoryOfCurrentMethod 									editFindReplaceIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'show category (C)' 								$C 	model 			showHomeCategory 									packageIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:19:02' prior: 50345615!
               messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								scriptIcon)
			#(70 		'browse protocol (p)' 									$p 	window 			browseFullProtocol 								spreadsheetIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								fileOutIcon)
			#(100 		'-----')		
			#(110		'senders of... (n)' 									nil 	window 			browseSendersOfMessages 								mailForwardIcon)
			#(111		nil 									$n 	window 			browseSenders)
			#(120		'implementors of... (m)' 									nil 	window 			browseMessages 								developmentIcon)
			#(121		nil 									$m 	window 			browseImplementors)		
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								clockIcon)
	).
! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:15:51' prior: 50345665!
                              messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 									listRemoveIcon)
		#(2110 		'filter message list...' 								nil 	window 			filterMessageList 									findIcon)
		#(2120		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2130		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2140		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
		#(2150 		'-----')
		#(2160 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 									classIcon)
		#(2170 		'sort by class name' 								nil 	model 			sortByClassName 									classIcon)
		#(2180 		'sort by selector' 								nil 	model 			sortBySelector 									scriptIcon)
		#(2190 		'sort by date' 								nil 	model 			sortByDate 									dateIcon)
		#(2200 		'reverse sort' 								nil 	model 			sortReverse 									redoIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6438-sendersNimplementors-shortcutNotSameAsMenu-JuanVuletich-2024Jun04-11h12m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6436] on 4 June 2024 at 11:47:16 am'!
!ProtocolBrowser methodsFor: 'message category functions' stamp: 'jmv 6/4/2024 11:30:06'!
  showHomeCategory
	"Show the home category of the selected method."

	self categoryOfCurrentMethod ifNotNil: [ :category | | catIndex selector |
		selector := self selectedMessageName.
		catIndex := self categoriesList indexOf: category.
		self categoriesListIndex: catIndex.
		self selectedMessageName: selector ].
! !
!Browser methodsFor: 'message category functions' stamp: 'jmv 6/1/2011 15:06' prior: 16798177!
  showHomeCategory
	"Show the home category of the selected method.  This is only really useful if one is in a tool that supports the showing of categories.  Thus, it's good in browsers and hierarchy browsers but not in message-list browsers"

	| aSelector |
	(aSelector := self selectedMessageName) ifNotNil: [
		self selectOriginalCategoryForCurrentMethod.
		self selectedMessageName: aSelector]! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:42:37' prior: 50346258!
               messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'select method category (C)' 								$C 	model 			showHomeCategory 									editFindReplaceIcon)
		#(2111		nil 								$c 	model 			copySelector)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:45:43' prior: 50346458!
      messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(80		nil 							$c 	model 			copySelector)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 									listRemoveIcon)
		#(2110 		'filter message list...' 								nil 	window 			filterMessageList 									findIcon)
		#(2120		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2130		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2140		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
		#(2150 		'-----')
		#(2160 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 									classIcon)
		#(2170 		'sort by class name' 								nil 	model 			sortByClassName 									classIcon)
		#(2180 		'sort by selector' 								nil 	model 			sortBySelector 									scriptIcon)
		#(2190 		'sort by date' 								nil 	model 			sortByDate 									dateIcon)
		#(2200 		'reverse sort' 								nil 	model 			sortReverse 									redoIcon)
	).
! !
!ProtocolBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 11:45:45' prior: 50345794 overrides: 50346773!
     messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^ super messageListMenuSpec, #(
		#(81		'select method category (C)' 							$C 	model 			showHomeCategory 						editFindReplaceIcon)
		#(2100 		'XXremove from this browser')
		#(2110 		'XXfilter message list...'))! !

ProtocolBrowserWindow removeSelector: #browseCategoryOfCurrentMethod!

!methodRemoval: ProtocolBrowserWindow #browseCategoryOfCurrentMethod stamp: 'Install-6439-Cleanup-JuanVuletich-2024Jun04-11h20m-jmv.001.cs.st 6/6/2024 11:42:32'!
browseCategoryOfCurrentMethod

	model categoryOfCurrentMethod ifNotNil: [:category| |catIndex selectedMessage|
		selectedMessage := model selectedMessageName.
		catIndex := model categoriesList indexOf: category.
		model categoriesListIndex: catIndex.
		model selectedMessageName: selectedMessage]!

BrowserWindow removeSelector: #browseCategoryOfCurrentMethod!

!methodRemoval: BrowserWindow #browseCategoryOfCurrentMethod stamp: 'Install-6439-Cleanup-JuanVuletich-2024Jun04-11h20m-jmv.001.cs.st 6/6/2024 11:42:32'!
browseCategoryOfCurrentMethod

	model categoryOfCurrentMethod ifNotNil: [:category| |catIndex selectedMessage|
		selectedMessage := model selectedMessageName.
		catIndex := model classOrMetaClassOrganizer categories indexOf: category.
		model messageCategoryListIndex: catIndex + 1.
		model selectedMessageName: selectedMessage]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6439-Cleanup-JuanVuletich-2024Jun04-11h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6436] on 4 June 2024 at 12:14:23 pm'!
!ProtocolBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 12:11:33'!
            classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 						$b 	window 			browseMethodFull 						editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 						$h 	window 			browseHierarchy 						goTopIcon)
	)! !
!ProtocolBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 12:12:47' prior: 50333125!
                    buildSelectiveClassList
	"Define the class hierarchy list pane"

	^(PluggableListMorph
		withModel: model
		listGetter: #selectiveClassList
		indexGetter: #selectiveClassListIndex
		indexSetter: #selectiveClassListIndex:)
			menuNshortcutsKey: #classListMenuSpec.
! !

ProtocolBrowserWindow removeSelector: #protocolClassListKey:from:!

!methodRemoval: ProtocolBrowserWindow #protocolClassListKey:from: stamp: 'Install-6440-NewMenuSpecs-ProtocolBrowser-ClassList-JuanVuletich-2024Jun04-11h47m-jmv.001.cs.st 6/6/2024 11:42:32'!
protocolClassListKey: aChar from: view 
	"Respond to a Command key.  I am a model with a list of 
	classes and a list of methods.  The 
	view knows how to get the list and selection."

	self flag: #definesKeyboardShortcuts.
	aChar = $b ifTrue: [^ self browseMethodFull ].
	aChar = $h ifTrue: [^ self browseHierarchy].
	
	^ nil!

ProtocolBrowserWindow removeSelector: #protocolClassListMenu!

!methodRemoval: ProtocolBrowserWindow #protocolClassListMenu stamp: 'Install-6440-NewMenuSpecs-ProtocolBrowser-ClassList-JuanVuletich-2024Jun04-11h47m-jmv.001.cs.st 6/6/2024 11:42:32'!
protocolClassListMenu
	"Fill aMenu with items appropriate for the class list"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Class List'.
	aMenu 
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'browse full (b)'.
				#selector 			-> 		#browseMethodFull.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#label 			-> 		'browse hierarchy (h)'.
				#selector 			-> 		#browseHierarchy.
				#icon 			-> 		#goTopIcon
			} asDictionary.

		}`.
	^ aMenu!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6440-NewMenuSpecs-ProtocolBrowser-ClassList-JuanVuletich-2024Jun04-11h47m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6436] on 4 June 2024 at 12:27:06 pm'!
!MessageNamesWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 12:22:14'!
             selectorListMenuSpec
	"Spec for the menu and shortcut keys for the selectors list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Selectors' 					false)
		#(10		'senders (n)' 						$n 	window 			browseSenders 						mailForwardIcon)
		#(20		'implementors of... (m)' 						$m 	window 			browseImplementors 						developmentIcon)
	).
! !
!MessageNamesWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 12:25:59' prior: 50333059 overrides: 16902025!
                           buildMorphicWindow
	"Answer a morphic window with the given initial search string, nil if none"
	"MessageNames open"
	| selectorListView firstRow searchButton secondRow |
	textMorph := (TextModelMorph
		textProvider: model
		textGetter: #searchString
		textSetter: #searchString:
		selectionGetter: #contentsSelection)
		setBalloonText: 'See MessageNames class comment for search string options';
		emptyTextDisplayMessage: 'Type here, then hit Search'.
	textMorph askBeforeDiscardingEdits: false.
	textMorph acceptOnCR: true.
	textMorph hideScrollBarsIndefinitely.
	searchButton := PluggableButtonMorph new
		model: textMorph innerTextMorph;
		label: 'Search';
		action: #acceptContents.
	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.
	firstRow := LayoutMorph newRow.
	firstRow color: self windowColor.
	firstRow
		doAdoptWidgetsColor;
		
			addMorph: searchButton
			proportionalWidth: 0.25;
		
			addMorph: textMorph
			proportionalWidth: 0.75.
	selectorListView := (PluggableListMorph
		withModel: model
		listGetter: #selectorList
		indexGetter: #selectorListIndex
		indexSetter: #selectorListIndex:)
			menuNshortcutsKey: #selectorListMenuSpec.
	secondRow := LayoutMorph newRow.
	secondRow
		
			addMorph: selectorListView
			proportionalWidth: 0.5;
		
			addAdjusterAndMorph: self buildMorphicMessageList
			proportionalWidth: 0.5.
	self layoutMorph
		
			addMorph: firstRow
			fixedHeight: self defaultButtonPaneHeight + 4;
		
			addAdjusterAndMorph: secondRow
			proportionalHeight: 0.5;
		
			addAdjusterAndMorph: self buildLowerPanes
			proportionalHeight: 0.5.
	model changed: #editSelection! !

MessageNamesWindow removeSelector: #selectorListMenu!

!methodRemoval: MessageNamesWindow #selectorListMenu stamp: 'Install-6441-NewMenuSpecs-MessageNames-SelectorList-JuanVuletich-2024Jun04-12h14m-jmv.001.cs.st 6/6/2024 11:42:32'!
selectorListMenu
	"Answer the menu associated with the selectorList"

	| aMenu |
	self flag: #assumesKeyboardShortcuts.
	aMenu := MenuMorph new defaultTarget: self.
	(aMenu add: 'senders (n)' action: #browseSenders icon: #mailForwardIcon)
		setBalloonText: 'browse senders of the chosen selector'.
	^ aMenu!

MessageNamesWindow removeSelector: #selectorListKey:from:!

!methodRemoval: MessageNamesWindow #selectorListKey:from: stamp: 'Install-6441-NewMenuSpecs-MessageNames-SelectorList-JuanVuletich-2024Jun04-12h14m-jmv.001.cs.st 6/6/2024 11:42:32'!
selectorListKey: aChar from: view
	"Respond to a Command key in the message-list pane."

	self flag: #definesKeyboardShortcuts.
	aChar = $n ifTrue: [ ^ self browseSenders ].
	aChar = $b ifTrue: [ ^ self browseMethodFull ].
	aChar = $m ifTrue: [ ^ self browseImplementors ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6441-NewMenuSpecs-MessageNames-SelectorList-JuanVuletich-2024Jun04-12h14m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6441] on 4 June 2024 at 2:40:29 pm'!
!Morph methodsFor: 'events' stamp: 'jmv 6/4/2024 13:20:13' prior: 50341740!
          keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target widgetKey |
	widgetKey := self menuNshortcutsKey ifNil: [ ^false ].
	menuNshortcutsSpecs := self menuNshortcutsSpec: widgetKey for: self.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	menuNshortcutsSpecs valuesDo: [ :itemSpec |
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetOrGetter |
						targetOrGetter isSymbol
							ifTrue: [ 	self perform: targetOrGetter ]
							ifFalse: [ targetOrGetter ]]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						target perform: selector.
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/4/2024 13:20:06' prior: 50343972!
                   addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetOrGetter |
			targetOrGetter isSymbol
				ifTrue: [ 	self perform: targetOrGetter ]
				ifFalse: [ targetOrGetter ]]
		ifNil: [ self ].
	selector := itemSpec fifth.
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: #() ]
		ifFalse: [ menu add: label target: target action: selector argumentList: #() ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6442-AllowArbitraryTargetsInMenuSpecs-JuanVuletich-2024Jun04-14h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6441] on 4 June 2024 at 2:41:29 pm'!

ActiveModel subclass: #SimpleServiceEntry
	instanceVariableNames: 'provider label selector useLineAfter stateSelector description argumentGetter buttonLabel argumentProvider triggerFileListChanged sortOrder icon keyboardShortcutCharacter '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-FileList'!

!classDefinition: #SimpleServiceEntry category: #'Tools-FileList' stamp: 'Install-6443-keyboardShortcut-SimpleServiceEntry-JuanVuletich-2024Jun04-14h40m-jmv.001.cs.st 6/6/2024 11:42:32'!
ActiveModel subclass: #SimpleServiceEntry
	instanceVariableNames: 'provider label selector useLineAfter stateSelector description argumentGetter buttonLabel argumentProvider triggerFileListChanged sortOrder icon keyboardShortcutCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-FileList'!
!SimpleServiceEntry methodsFor: 'accessing' stamp: 'jmv 6/4/2024 12:45:39'!
  keyboardShortcutCharacter
	^keyboardShortcutCharacter! !
!SimpleServiceEntry methodsFor: 'accessing' stamp: 'jmv 6/4/2024 12:36:33'!
                           keyboardShortcutCharacter: aCharacter
	keyboardShortcutCharacter := aCharacter! !

ActiveModel subclass: #SimpleServiceEntry
	instanceVariableNames: 'provider label selector useLineAfter stateSelector description argumentGetter buttonLabel argumentProvider triggerFileListChanged sortOrder icon keyboardShortcutCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-FileList'!

!classDefinition: #SimpleServiceEntry category: #'Tools-FileList' stamp: 'Install-6443-keyboardShortcut-SimpleServiceEntry-JuanVuletich-2024Jun04-14h40m-jmv.001.cs.st 6/6/2024 11:42:32'!
ActiveModel subclass: #SimpleServiceEntry
	instanceVariableNames: 'provider label selector useLineAfter stateSelector description argumentGetter buttonLabel argumentProvider triggerFileListChanged sortOrder icon keyboardShortcutCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-FileList'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6443-keyboardShortcut-SimpleServiceEntry-JuanVuletich-2024Jun04-14h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6441] on 4 June 2024 at 2:43:46 pm'!
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 12:48:38'!
                             fileListMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	See coment at Morph >> #getMenu
	"
	^model fileName
		ifNil: [ self noFileSelectedMenuSpec ]
		ifNotNil: [ self fileSelectedMenuSpec ]! !
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 13:27:25'!
                       fileSelectedMenuSpec
	| itemsPart1 itemsPart2 itemsPart3 itemsPart4 services |
	itemsPart1 := model itemsForAnyFile1.
	itemsPart2 := model itemsForFileEntry: model selectedFileEntry.
	itemsPart3 := model itemsForAnyFile2.
	itemsPart4 := model itemsForNoFile.
	itemsPart1 notEmpty ifTrue: [ itemsPart1 last useLineAfter: true ].
	itemsPart2 notEmpty ifTrue: [ itemsPart2 last useLineAfter: true ].
	itemsPart3 notEmpty ifTrue: [ itemsPart3 last useLineAfter: true ].
	services := itemsPart1, itemsPart2, itemsPart3, itemsPart4.
	services do: [ :svc |
		svc argumentProvider: model.
		svc when: #fileListChanged send: #updateFileList to: model ].
	^Array streamContents: [ :strm | | itemId |
		itemId :=0.
		services do: [ :service |
			itemId := itemId + 10.
			"strm nextPut: {itemId. service label. service keyboardShortcutCharacter . #model. service selector. service iconSpec}."
			strm nextPut: {itemId. service label. service keyboardShortcutCharacter . service. #performService. service iconSpec}.
			service useLineAfter ifTrue: [
				itemId := itemId + 10.
				strm nextPut: {itemId. '-----'} ]]].! !
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 12:52:40'!
                        noFileSelectedMenuSpec
	^Array streamContents: [ :strm | | itemId |
		itemId :=0.
		model itemsForNoFile do: [ :service |
			itemId := itemId + 10.
			strm nextPut: {itemId. service label. service keyboardShortcutCharacter . #model. service selector. service iconSpec}.
			service useLineAfter ifTrue: [
				itemId := itemId + 10.
				strm nextPut: {itemId. '-----'} ]]].! !
!FileList methodsFor: 'own services' stamp: 'jmv 6/4/2024 12:38:21' prior: 16861968!
                    serviceAddNewDirectory
	"Answer a service entry characterizing the 'add new directory' command"

	^ (SimpleServiceEntry
		provider: self
		label: 'add new directory (N)'
		selector: #addNewDirectory
		description: 'adds a new, empty directory (folder)'
		icon: #listAddIcon)
			keyboardShortcutCharacter: $N! !
!FileList methodsFor: 'own services' stamp: 'jmv 6/4/2024 12:38:15' prior: 16861981!
                    serviceAddNewFile
	"Answer a service entry characterizing the 'add new file' command"

	^ (SimpleServiceEntry 
		provider: self 
		label: 'add new file (n)' 
		selector: #addNewFile 
		description: 'create a new,. empty file, and add it to the current directory.'
		icon: #newIcon)
			keyboardShortcutCharacter: $n! !
!FileList methodsFor: 'own services' stamp: 'jmv 6/4/2024 12:38:12' prior: 16862002!
             serviceDeleteFile

	^ (SimpleServiceEntry
		provider: self
		label: 'delete (x)'
		selector: #deleteFile
		description: 'delete the seleted item'
		icon: #deleteIcon)
			keyboardShortcutCharacter: $x! !
!FileList methodsFor: 'own services' stamp: 'jmv 6/4/2024 12:38:07' prior: 16862031!
serviceRenameFile

	^ (SimpleServiceEntry
		provider: self
		label: 'rename (R)'
		selector: #renameFile
		description: 'rename file'
		icon: #saveAsIcon)
			keyboardShortcutCharacter: $R! !
!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 6/4/2024 13:33:43' prior: 50333172!
      morphicFileListPane

	^(PluggableListMorph
		withModel: model 
		listGetter: #fileList 
		indexGetter: #fileListIndex
		indexSetter: #fileListIndex: )
			menuNshortcutsKey: #fileListMenuSpec.! !

FileListWindow removeSelector: #fileListKey:from:!

!methodRemoval: FileListWindow #fileListKey:from: stamp: 'Install-6444-NewMenuSpecs-FileList-JuanVuletich-2024Jun04-14h41m-jmv.001.cs.st 6/6/2024 11:42:32'!
fileListKey: aChar from: aView

	self flag: #definesKeyboardShortcuts.
	aChar = $x ifTrue: [ ^ aView model deleteFile ].
	aChar = $R ifTrue: [ ^ aView model renameFile ].
	aChar = $n ifTrue: [ ^ aView model addNewFile ].
	aChar = $N ifTrue: [ ^ aView model addNewDirectory ].!

FileListWindow removeSelector: #noFileSelectedMenu!

!methodRemoval: FileListWindow #noFileSelectedMenu stamp: 'Install-6444-NewMenuSpecs-FileList-JuanVuletich-2024Jun04-14h41m-jmv.001.cs.st 6/6/2024 11:42:32'!
noFileSelectedMenu

	| aMenu |
	aMenu := MenuMorph new defaultTarget: model.
	^ aMenu
		addServices: model itemsForNoFile 
		for: model
		extraLines: #()!

FileListWindow removeSelector: #fileListMenu!

!methodRemoval: FileListWindow #fileListMenu stamp: 'Install-6444-NewMenuSpecs-FileList-JuanVuletich-2024Jun04-14h41m-jmv.001.cs.st 6/6/2024 11:42:32'!
fileListMenu
	^model fileName
		ifNil: [ self noFileSelectedMenu ]
		ifNotNil: [ self fileSelectedMenu ]!

FileListWindow removeSelector: #fileSelectedMenu!

!methodRemoval: FileListWindow #fileSelectedMenu stamp: 'Install-6444-NewMenuSpecs-FileList-JuanVuletich-2024Jun04-14h41m-jmv.001.cs.st 6/6/2024 11:42:32'!
fileSelectedMenu

	| itemsPart1 itemsPart2 itemsPart3 itemsPart4 n1 n2 n3 services aMenu |
	aMenu := MenuMorph new defaultTarget: model.
	itemsPart1 := model itemsForAnyFile1.
	itemsPart2 := model itemsForFileEntry: model selectedFileEntry.
	itemsPart3 := model itemsForAnyFile2.
	itemsPart4 := model itemsForNoFile.
	n1 := itemsPart1 size.
	n2 := n1 + itemsPart2 size.
	n3 := n2 + itemsPart3 size.
	services := itemsPart1, itemsPart2, itemsPart3, itemsPart4.
	services do: [ :svc | svc when: #fileListChanged send: #updateFileList to: model ].
	^ aMenu 
		addServices: services 
		for: model
		extraLines:{ n1 . n2 . n3 }
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6444-NewMenuSpecs-FileList-JuanVuletich-2024Jun04-14h41m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6441] on 4 June 2024 at 2:44:49 pm'!

MenuMorph removeSelector: #addServices:for:extraLines:!

!methodRemoval: MenuMorph #addServices:for:extraLines: stamp: 'Install-6445-Cleanup-JuanVuletich-2024Jun04-14h43m-jmv.001.cs.st 6/6/2024 11:42:32'!
addServices: services for: served extraLines: linesArray

	services withIndexDo: [:service :i |
		service addServiceFor: served toMenu: self.
		submorphs last setBalloonText: service description.
		(linesArray includes: i) | service useLineAfter 
			ifTrue: [self addLine]].
!

SimpleServiceEntry removeSelector: #addServiceFor:toMenu:!

!methodRemoval: SimpleServiceEntry #addServiceFor:toMenu: stamp: 'Install-6445-Cleanup-JuanVuletich-2024Jun04-14h43m-jmv.001.cs.st 6/6/2024 11:42:32'!
addServiceFor: served toMenu: aMenu
	argumentProvider := served.
	aMenu 
		add: self label 
		target: self 
		action: #performService
		icon: icon.
	self useLineAfter ifTrue: [ aMenu addLine ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6445-Cleanup-JuanVuletich-2024Jun04-14h43m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6445] on 4 June 2024 at 5:50:19 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/4/2024 17:49:57' prior: 50346622!
        messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(161		nil 							$n 	window 			browseSenders)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(171		nil 							$m 	window 			browseImplementors)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'select method category (C)' 								$C 	model 			showHomeCategory 									editFindReplaceIcon)
		#(2111		nil 								$c 	model 			copySelector)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6446-Bugfix-JuanVuletich-2024Jun04-17h49m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6426] on 4 June 2024 at 4:26:27 pm'!
!CodeProvider methodsFor: 'message list' stamp: 'eem 5/31/2024 17:20:01'!
              messageList
	"Answer the list of messages being displayed by the receiver, if any.
	 By default answer nil. Subclasses that present a list of messages override."

	^nil! !
!CodeProvider methodsFor: 'message list menu' stamp: 'eem 5/31/2024 17:23:31' prior: 16826427!
                     fileOutMessage
	"Put a description of the selected message on a file"

	self selectedMessageName ifNotNil:
		[^self selectedClassOrMetaClass fileOutMethod: self selectedMessageName].
	self messageList ifNotNil:
		[:theMethods|
		self request: 'Enter file name'
			initialAnswer: 'methods.st'
			do: [ :filename |
				DirectoryEntry fileOutsDirectory // filename writeStreamDo:
					[ :stream |
					stream timeStamp.
					theMethods do:
						[ :methodRef |
						methodRef actualClass
							printMethodChunk: methodRef methodSymbol
							withPreamble: true
							on: stream
							moveSource: false
							toFile: 0 ]]]]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6447-FileOutAll-ifNoneSelected-EliotEmilioMiranda-2024May31-19h05m-eem.002.cs.st----!

'From Cuis7.1 [latest update: #6426] on 4 June 2024 at 4:26:27 pm'!
!SHParserST80 methodsFor: 'parse' stamp: 'eem 6/2/2024 17:21:15' prior: 16942474!
                 parsePrimitive
	self scanNext.
	currentTokenFirst isDigit 
		ifTrue: [self scanPast: #integer]
		ifFalse: [
			self failUnless: ('''#' includes: currentTokenFirst).
			self parseStringOrSymbol.
			currentToken = 'module:' ifTrue: [
				self scanPast: #module.
				self failUnless: ('''#' includes: currentTokenFirst).
				self parseStringOrSymbol]].
	currentToken = 'error:' ifTrue: [
		self scanPast: #primitive. "there's no rangeType for error"
		self isName
			ifTrue: [ self scanPast: #patternTempVar ]
			ifFalse: [ self parseStringOrSymbol ] ].
	self failUnless: currentToken = '>'.
	self scanPast: #primitiveOrExternalCallEnd! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6448-AllowSymbolsInNamedPrimitiveCalls-EliotEmilioMiranda-2024May31-19h05m-eem.002.cs.st----!

'From Cuis7.1 [latest update: #6448] on 5 June 2024 at 10:02:45 am'!
!ByteArray methodsFor: 'access - Numeric Types' stamp: 'jmv 6/5/2024 10:00:06'!
  int8At: index bigEndian: dummyArgument
	"Return a 8-bit signed integer quantity from the given byte index.
	Endiannes is irrelevant for 8 bit quantities. dummyArgument is included for consistency,
	and because #int8At: is implemented in FFI package."

	| result |
	result := self at: index.
	result < 16r80 ifTrue: [ ^result ].
	^result - 16r100! !
!ByteArray methodsFor: 'access - Numeric Types' stamp: 'jmv 6/5/2024 10:00:50'!
                   int8At: index put: value bigEndian: dummyArgument
	"Store a 8-bit signed integer quantity at the given byte index
	Endiannes is irrelevant for 8 bit quantities. dummyArgument is included for consistency,
	and because #int8At: is implemented in FFI package."

	| unsignedValue |
	(unsignedValue := value) < 0 ifTrue: [
		unsignedValue := unsignedValue + 16r100 ].
	self at: index put: unsignedValue.
	^value! !
!ByteArray methodsFor: 'access - Numeric Types' stamp: 'jmv 6/5/2024 10:00:58'!
                      uint8At: index bigEndian: dummyArgument
	"Return a 8-bit unsigned integer quantity from the given byte index.
	Endiannes is irrelevant for 8 bit quantities. dummyArgument is included for consistency,
	and because #int8At: is implemented in FFI package."

	^self at: index! !
!ByteArray methodsFor: 'access - Numeric Types' stamp: 'jmv 6/5/2024 10:01:02'!
                             uint8At: index put: value bigEndian: dummyArgument
	"Store a 8-bit unsigned integer quantity at the given byte index.
	Endiannes is irrelevant for 8 bit quantities. dummyArgument is included for consistency,
	and because #int8At: is implemented in FFI package."

	^self at: index put: value! !

ByteArray removeSelector: #uint8At:!

!methodRemoval: ByteArray #uint8At: stamp: 'Install-6449-ByteArray-int8At-protocol-addEndianessDummyArgument-JuanVuletich-2024Jun05-10h00m-jmv.001.cs.st 6/6/2024 11:42:32'!
uint8At: index
	"Return a 8-bit unsigned integer quantity from the given byte index.
	Endiannes is irrelevant for 8 bit quantities"

	^self at: index!

ByteArray removeSelector: #int8At:!

!methodRemoval: ByteArray #int8At: stamp: 'Install-6449-ByteArray-int8At-protocol-addEndianessDummyArgument-JuanVuletich-2024Jun05-10h00m-jmv.001.cs.st 6/6/2024 11:42:32'!
int8At: index
	"Return a 8-bit signed integer quantity from the given byte index.
	Endiannes is irrelevant for 8 bit quantities"

	| result |
	result := self at: index.
	result < 16r80 ifTrue: [ ^result ].
	^result - 16r100!

ByteArray removeSelector: #uint8At:put:!

!methodRemoval: ByteArray #uint8At:put: stamp: 'Install-6449-ByteArray-int8At-protocol-addEndianessDummyArgument-JuanVuletich-2024Jun05-10h00m-jmv.001.cs.st 6/6/2024 11:42:32'!
uint8At: index put: value
	"Store a 8-bit unsigned integer quantity at the given byte index.
	Endiannes is irrelevant for 8 bit quantities"

	^self at: index put: value!

ByteArray removeSelector: #int8At:put:!

!methodRemoval: ByteArray #int8At:put: stamp: 'Install-6449-ByteArray-int8At-protocol-addEndianessDummyArgument-JuanVuletich-2024Jun05-10h00m-jmv.001.cs.st 6/6/2024 11:42:32'!
int8At: index put: value
	"Store a 8-bit signed integer quantity at the given byte index
	Endiannes is irrelevant for 8 bit quantities"

	| unsignedValue |
	(unsignedValue := value) < 0 ifTrue: [
		unsignedValue := unsignedValue + 16r100 ].
	self at: index put: unsignedValue.
	^value!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6449-ByteArray-int8At-protocol-addEndianessDummyArgument-JuanVuletich-2024Jun05-10h00m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6449] on 5 June 2024 at 10:48:12 am'!
!SystemDictionary methodsFor: 'retrieving' stamp: 'eem 6/5/2024 10:37:47'!
                     allSelect: aUnaryBlock localTo: aClass
	"Answer a SortedCollection of each method in the hierarchy of aClass
	 for which aUnaryBlock answers true when evaluated with the method."
	| aCollection |
	aCollection := SortedCollection new.
	aClass allSuperclasses, aClass withAllSubclasses do:
		[:class |
		class selectorsAndMethodsDo:
			[:sel :meth|
			(aUnaryBlock value: meth) ifTrue:
				[aCollection add: (MethodReference class: class selector: sel)]]].
	^aCollection! !
!SystemDictionary methodsFor: 'browsing' stamp: 'eem 6/5/2024 10:42:36'!
                               browseAllSelect: aUnaryBlock localTo: aClass
	"Create and schedule a message browser on each method in the hierarchy of aClass
	 for which aUnaryBlock answers true when evaluated with the method.
	For example, Smalltalk browseAllSelect: [:m| m sendsSelector: #size] localTo: Collection."
	self browseMessageList: (self allSelect: aUnaryBlock localTo: aClass) name: 'selected messages in', aClass name! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'eem 6/5/2024 10:37:34' prior: 16965064!
                 allSelect: aUnaryBlock
	"Answer a SortedCollection of each method in the system
	 for which aUnaryBlock answers true when evaluated with the method."
	| aCollection |
	aCollection := SortedCollection new.
	self allBehaviorsDo: [ :class |
		class selectorsAndMethodsDo: [ :sel :meth |
			(aUnaryBlock value: meth) ifTrue: [
				aCollection add: (MethodReference class: class selector: sel)
			]]].
	^ aCollection! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6450-allSelectLocalTo-EliotEmilioMiranda-2024Jun05-10h34m-eem.001.cs.st----!

'From Cuis7.1 [latest update: #6449] on 5 June 2024 at 10:56:36 am'!
!CompiledMethod methodsFor: 'printing' stamp: 'eem 6/5/2024 10:55:56' prior: 16833593!
         printPrimitiveOn: aStream
	"Print the primitive on aStream"
	| primIndex primDecl |
	(primIndex := self primitive) = 0 ifTrue:
		[^self].
	primIndex = 120 ifTrue: "External call spec"
		[^aStream print: (self literalAt: 1); newLine].
	aStream nextPutAll: '<primitive: '.
	primIndex = 117
		ifTrue:
			[primDecl := self literalAt: 1.
			(primDecl at: 2) printOn: aStream.
			(primDecl at: 1) ifNotNil: [ :moduleName |
				aStream nextPutAll:' module: '.
				moduleName printOn: aStream]]
		ifFalse:
			[aStream print: primIndex].
	self primitiveErrorVariableName ifNotNil: [ :primitiveErrorVariableName |
		aStream nextPutAll: ' error: '; nextPutAll: primitiveErrorVariableName].
	aStream nextPut: $>; newLine! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6451-CompiledMethod-printPrimitiveOn-EliotEmilioMiranda-2024Jun05-10h34m-eem.001.cs.st----!

'From Cuis7.1 [latest update: #6451] on 5 June 2024 at 5:21:51 pm'!
!String class methodsFor: 'instance creation' stamp: 'jmv 6/5/2024 17:20:27' prior: 16960241!
           percentEscapingNonAsciiAndThoseIn: aCharacterMapByteArray bytes: aByteArray
	"Percent encode any byte not in the ASCII range.
	Also encode any in aCharacterMap.
	Replace them with %XX where XX are the hexadecimal digits.
	See https://en.wikipedia.org/wiki/URL_encoding
	
	String percentEscapingNonAscii: '‚äô' bytes
	"

	^String streamContents: [ :strm |
		aByteArray do: [ :byte | 
			(byte > 127 or: [
						aCharacterMapByteArray isNil or: [
							(aCharacterMapByteArray at: byte+1) = 1 ]])
				ifTrue: [
					strm nextPut: $%.
					strm nextPut: (byte // 16) asHexDigit.
					strm nextPut: (byte \\ 16) asHexDigit ]
				ifFalse: [ strm nextPut: (Character codePoint: byte) ]]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6452-String-PercentEscapingFix-JuanVuletich-2024Jun05-17h16m-jmv.001.cs.st----!

		Preferences at: #saveReleaseOptionsInWorldMenu put: true!

----QUIT----(6 June 2024 11:42:51) Cuis7.1-6452-32.image priorSource: 141!

----STARTUP---- (8 July 2024 12:00:14) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6452-32.image!


'From Cuis7.1 [latest update: #6452] on 6 June 2024 at 5:23:08 pm'!
!Character methodsFor: 'testing' stamp: 'jmv 6/6/2024 16:04:41' prior: 16810759!
  isSeparator
	"Answer whether the receiver is one of the separator characters"
	"Also see #separators"

	^ #(32 "space"
		9 "tab"
		10 "line feed"
		13 "cr"
		12 "form feed"
		160 "non-breaking space"
		8203 "Character zeroWidthSpace")
			statePointsTo: self codePoint! !
!Character class methodsFor: 'instance creation' stamp: 'jmv 6/6/2024 17:22:40' prior: 16811330!
                separators
	"Answer the separator characters"
	"Also see #isSeparator"

	^ #(32 "space"
		9 "tab"
		10 "line feed"
		13 "cr"
		12 "form feed"
		160 "non-breaking space"
		8203 "Character zeroWidthSpace")
			collect: [ :v | Character codePoint: v ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6453-Non-breaking-space-isSeparator-JuanVuletich-2024Jun06-17h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 6 June 2024 at 5:26:22 pm'!
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 6/6/2024 14:32:09'!
                              backQuote
	"Not specifically untypeable, but cumbersome to use in source code."

	^ `Character codePoint: 96`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 6/6/2024 14:31:09'!
                doubleQuote
	"Not specifically untypeable, but cumbersome to use in source code."

	^ `Character codePoint: 34`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 6/6/2024 17:26:00'!
              noBreakSpace

	^ `Character codePoint: 16rA0`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 6/6/2024 14:31:33'!
                singleQuote
	"Not specifically untypeable, but cumbersome to use in source code."

	^ `Character codePoint: 39`! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6454-Character-tweaks-JuanVuletich-2024Jun06-17h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 6 June 2024 at 5:42:56 pm'!
!CharacterSequence methodsFor: 'converting' stamp: 'jmv 6/6/2024 17:27:30'!
       withDoubleColonsDoubled
	"Return a copy of the receiver with any double colons duplicated.
	Useful for turning text into Smalltalk comments."

	^self species streamContents: [ :stream |
		self do: [ :c |
			stream nextPut: c.
			c = $"
				ifTrue: [ stream nextPut: c ]]].! !
!CharacterSequence methodsFor: 'converting' stamp: 'jmv 6/6/2024 17:36:44'!
withDoubleColonsUndoubled
	"Do the inverse of #withDoubleColonsDoubled"

	| lastWasDoubleColon |
	^self species streamContents: [ :stream |
		lastWasDoubleColon := false.
		self do: [ :c |
			c = $"
				ifTrue: [
					lastWasDoubleColon
						ifFalse: [
							stream nextPut: c.
							lastWasDoubleColon := true ]
						ifTrue: [
							lastWasDoubleColon := false]]
				ifFalse: [
					stream nextPut: c.
					lastWasDoubleColon := false ]]].! !
!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 6/6/2024 17:41:52' overrides: 16980546!
                               enclose: aKeyboardEvent
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	| startIndex stopIndex oldSelection new enlargedBy |
	"This implementation is only for commenting and uncommenting code.
	Other cases are handled by the super implementation.
	This implementation only handles String and discards Text attributes."
	aKeyboardEvent keyCharacter = $" ifFalse: [
		^super enclose: aKeyboardEvent ].

	startIndex := self startIndex.
	stopIndex := self stopIndex.
	oldSelection := self selection string.
	((startIndex > 1 and: [stopIndex <= model textSize])
			and: [ (model actualContents at: startIndex-1) = $"
				and: [(model actualContents at: stopIndex) = $"]])
		ifTrue: [
			"already enclosed in double colons; make selection no longer a comment"
			self selectFrom: startIndex-1 to: stopIndex.
			self replaceSelectionWith: oldSelection withDoubleColonsUndoubled ]
		ifFalse: [
			"not enclosed in double colons; make selection a comment"
			new := oldSelection withDoubleColonsDoubled.
			enlargedBy := new size - oldSelection size.
			self replaceSelectionWith: $" asString, new, $" asString.
			self selectFrom: startIndex+1 to: stopIndex + enlargedBy ].
	^ true.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6455-Comment-Uncomment-code-JuanVuletich-2024Jun06-17h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6455] on 6 June 2024 at 6:56:22 pm'!
!MenuMorph methodsFor: 'control' stamp: 'jmv 6/6/2024 18:53:31' prior: 16894007!
                deleteIfPopUp: evt
	"Remove this menu from the screen if stayUp is not true. If it is a submenu, also remove its owning menu."

	| h |
	stayUp ifFalse: [ 
		h := evt ifNotNil: [ evt hand ].
		h ifNil: [
			self world ifNotNil: [ :w | h := h activeHand ]].
		h ifNil: [ h := self activeHand ].
		self delete.
		h ifNotNil: [
			h newKeyboardFocus: prevKbdFocus.
			"h newMouseFocus: prevMouseFocus."
			h newMouseFocus: nil.
			].
		popUpOwner ifNotNil: [
			popUpOwner isSelected: false.
			popUpOwner deleteIfPopUp: evt ]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6456-MenuMorph-fix-JuanVuletich-2024Jun06-18h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6456] on 10 June 2024 at 9:19:02 am'!

Smalltalk renameClassNamed: #DraggeableButtonMorph as: #DraggableButtonMorph!

!classRenamed: #DraggeableButtonMorph as: #DraggableButtonMorph stamp: 'Install-6457-Correct-DraggableButtonMorph-name-JuanVuletich-2024Jun10-09h18m-jmv.001.cs.st 7/8/2024 12:00:17'!
Smalltalk renameClassNamed: #DraggeableButtonMorph as: #DraggableButtonMorph!
!ScrollBar methodsFor: 'initialization' stamp: 'jmv 6/10/2024 09:18:25' prior: 16945645!
          initializeSlider
	"initialize the receiver's slider"

	sliderShadow := BoxedMorph new noBorder.
	self addMorph: sliderShadow.
	sliderShadow hide.
		
	slider := DraggableButtonMorph new.
	slider model: self.
	slider grabSelector: #sliderGrabbedAt:.
	slider dragSelector: #scrollTo:.
	slider action: #sliderReleased.
	self addMorph: slider.

	self computeSlider! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6457-Correct-DraggableButtonMorph-name-JuanVuletich-2024Jun10-09h18m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6457] on 10 June 2024 at 9:35:11 am'!
!SystemWindow methodsFor: 'submorphs-menus' stamp: 'jmv 6/7/2024 15:39:22' prior: 50335592 overrides: 50335572!
                         ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	(self perform: aWidgetKey) do: aBlock.

	(self class registeredMenuAndShortcutsSpecProviders: aWidgetKey) ifNotNil: [ :providers |
		providers do: [ :eachMessageSend |
			(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6458-Tweak-JuanVuletich-2024Jun10-09h34m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6458] on 10 June 2024 at 10:02:29 am'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 09:57:05'!
           allMenuNshortcutsSpecs
	"menuSpec is the Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number. It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	self menuNshortcutsSpecsDo: [ :menuItemSpec |
		menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ].
	self allOwnersDo: [ :o |
		o menuNshortcutsSpecsFor: self do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 09:47:37'!
                              menuNshortcutsSpecsDo: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 09:51:23'!
                            menuNshortcutsSpecsFor: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs.
	See implementors."! !
!SystemWindow methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 09:51:01' overrides: 50348301!
               menuNshortcutsSpecsFor: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	aWidget menuNshortcutsKey ifNotNil: [ :widgetKey |
		(self perform: widgetKey) do: aBlock.
		(self class registeredMenuAndShortcutsSpecProviders: widgetKey) ifNotNil: [ :providers |
			providers do: [ :eachMessageSend |
				(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]]].! !
!Morph methodsFor: 'events' stamp: 'jmv 6/10/2024 09:57:18' prior: 50347154!
               keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	menuNshortcutsSpecs valuesDo: [ :itemSpec |
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetOrGetter |
						targetOrGetter isSymbol
							ifTrue: [ 	self perform: targetOrGetter ]
							ifFalse: [ targetOrGetter ]]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						target perform: selector.
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 09:57:14' prior: 50341802!
     getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| menuNshortcutsSpecs itemSpec menu submenus |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !

SystemWindow removeSelector: #ownMenuNshortcutsSpecs:for:do:!

!methodRemoval: SystemWindow #ownMenuNshortcutsSpecs:for:do: stamp: 'Install-6459-MenuNShortcutSpecs-tweaks-JuanVuletich-2024Jun10-09h59m-jmv.001.cs.st 7/8/2024 12:00:17'!
ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	(self perform: aWidgetKey) do: aBlock.

	(self class registeredMenuAndShortcutsSpecProviders: aWidgetKey) ifNotNil: [ :providers |
		providers do: [ :eachMessageSend |
			(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]].!

Morph removeSelector: #ownMenuNshortcutsSpecs:for:do:!

!methodRemoval: Morph #ownMenuNshortcutsSpecs:for:do: stamp: 'Install-6459-MenuNShortcutSpecs-tweaks-JuanVuletich-2024Jun10-09h59m-jmv.001.cs.st 7/8/2024 12:00:17'!
ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs.
	See, for instance, SystemWindow."!

Morph removeSelector: #menuNshortcutsSpec:for:!

!methodRemoval: Morph #menuNshortcutsSpec:for: stamp: 'Install-6459-MenuNShortcutSpecs-tweaks-JuanVuletich-2024Jun10-09h59m-jmv.001.cs.st 7/8/2024 12:00:17'!
menuNshortcutsSpec: aWidgetKey for: aWidget
	"menuSpec is the Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number. It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	self withAllOwnersReverseDo: [ :o |
		o ownMenuNshortcutsSpecs: aWidgetKey for: aWidget do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6459-MenuNShortcutSpecs-tweaks-JuanVuletich-2024Jun10-09h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6459] on 10 June 2024 at 3:03:53 pm'!
!TextEditor methodsFor: 'new selection' stamp: 'jmv 6/10/2024 11:44:27' prior: 16981096!
                           selectWordOrDelimitedTextAt: localEventPosition
	"Select delimited text or word--the result of double-clicking."

	| hitCharacterBlock range p |
	p := localEventPosition x - 1 @ localEventPosition y.
	hitCharacterBlock := textComposition characterBlockIncludingPoint: p.
	range := self
		delimitedRangeAt: hitCharacterBlock stringIndex
		hitOnRightHalf: p x  > hitCharacterBlock center x
		leftDelimiters: '([{<'
		rightDelimiters: ')]}>'
		simpleDelimiters: '|''"`'.
	self selectFrom: range first to: range last.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6460-DelimitedTextSelection-tweak-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6461] on 11 June 2024 at 10:21:19 am'!
!ChangeList methodsFor: 'menu actions' stamp: 'jmv 6/11/2024 10:06:58' prior: 16804662!
                           selectRemovalsOfSent
	"Selects all method removal for sent methods"

	1 to: changeList size do: [ :i | | change isRemovalOfSent |
		change := changeList at: i.
		isRemovalOfSent := change isMethodDeletion and: [
			Smalltalk isThereAReferenceTo: change methodSelector ].
		isRemovalOfSent := isRemovalOfSent or:
			(change isDoIt and: [
				change string includesSubString: 'removeSelector: #' ] and: [
					Smalltalk isThereAReferenceTo: (change string copyAfterLast: $#) asSymbol ]).
		listSelections at: i put: isRemovalOfSent ].
	self changed: #allSelections.
	self changed: #annotation! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6461-SelectRemovalsOfSent-fix-JuanVuletich-2024Jun11-10h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6460] on 11 June 2024 at 4:01:10 pm'!
!TextEditor methodsFor: 'attributes' stamp: 'jmv 6/11/2024 15:59:49' prior: 16980353!
                     offerColorMenu
	"Present a menu of available colors, and if one is chosen, apply it to the current selection."
	"This is a user command, and generates undo"

	| attribute colors index thisSel |
	thisSel := self selection.
	colors := #(#black #magenta #red #yellow #green #blue #cyan #white ).
	index := (PopUpMenu
		labelArray: colors ", #('choose color...' )
		lines: (Array with: colors size)") startUpMenu.
	index = 0 ifTrue: [ ^ true ].
	index <= colors size
		ifTrue: [ attribute := TextColor color: (Color perform: (colors at: index)) ]
		ifFalse: [
			index := index - colors size - 1.
			"Re-number!!!!!!"
			index = 0 ifTrue: [ attribute := self chooseColor ].
			thisSel ifNil: [ ^ true ]].
	attribute ifNotNil: [ self applyAttribute: attribute ].
	morph updateFromTextComposition.
	^ true.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6462-ColorMenuFix-JuanVuletich-2024Jun11-15h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6462] on 11 June 2024 at 5:05:49 pm'!
!TheWorldMenu class methodsFor: 'menu building' stamp: 'jmv 6/11/2024 17:01:18' prior: 16984359!
    helpMenuOptions

	^ `{
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'About this System...'.
				#object 			-> 		Smalltalk.
				#selector 			-> 		#aboutThisSystem.
				#icon 			-> 		#helpIcon.
				#balloonText 			-> 		'current version information.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'Terse Guide to Cuis'.
				#selector 			-> 		#openTerseGuide.
				#icon 			-> 		#helpIcon.
				#balloonText 			-> 		'explore Cuis Smalltalk'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		30.
				#label 			-> 		'Class Comment Browser'.
				#selector 			-> 		#openCommentGuide.
				#icon 			-> 		#helpIcon.
				#balloonText 			-> 		'Search & explore Cuis Class Comments. Requires cloning "Cuis-Smalltalk-Tools" git repo.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		40.
				#label 			-> 		'Code management in Cuis'.
				#object 			-> 		Utilities.
				#selector 			-> 		#openCodeManagementInCuis.
				#icon 			-> 		#helpIcon.
				#balloonText 			-> 		'Features are kept in Packages.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		50.
				#label 			-> 		'Using GitHub to host Cuis packages'.
				#object 			-> 		Utilities.
				#selector 			-> 		#openCuisAndGitHub.
				#icon 			-> 		#helpIcon.
				#balloonText 			-> 		'GitHub usage pattern.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'Editor keyboard shortcuts'.
				#object 			-> 		SmalltalkEditor.
				#selector 			-> 		#openHelp.
				#icon 			-> 		#keyboardShortcutsIcon.
				#balloonText 			-> 		'summary of keyboard shortcuts in editors for Smalltalk code.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'Useful Expressions'.
				#object 			-> 		Utilities.
				#selector 			-> 		#openUsefulExpressions.
				#icon 			-> 		#chatIcon.
				#balloonText 			-> 		'a window full of useful expressions.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'VM Statistics'.
				#selector 			-> 		#vmStatistics.
				#icon 			-> 		#systemMonitorIcon.
				#balloonText 			-> 		'obtain some intriguing data about the vm.'
			} asDictionary.
			{
				#submenuOf 			-> 		TheWorldMenu helpLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'Space Left'.
				#selector 			-> 		#garbageCollect.
				#icon 			-> 		#removableMediaIcon.
				#balloonText 			-> 		'perform a full garbage-collection and report how many bytes of space remain in the image.'
			} asDictionary.
		}`! !
!TheWorldMenu class methodsFor: 'menu building' stamp: 'jmv 6/11/2024 17:01:37' prior: 16984957!
       worldMenuOptions
	| options |
	options := `
		TheWorldMenu worldMainMenuOptions,
		"TheWorldMenu additionalMenuOptions,"
		TheWorldMenu preferencesMenuOptions,
		TheWorldMenu windowsMenuOptions,
		TheWorldMenu helpMenuOptions,
		TheWorldMenu changesMenuOptions,
		TheWorldMenu debugMenuOptions`.
		(Preferences at: #saveReleaseOptionsInWorldMenu) ifTrue: [
			options := options, TheWorldMenu worldSaveReleaseImagesMenuOptions ].
	^options! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6463-ClassCommentBrowser-helpBalloon-contents-JuanVuletich-2024Jun11-17h01m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6463] on 11 June 2024 at 6:08:49 pm'!
!InnerTextMorph methodsFor: 'private' stamp: 'jmv 6/11/2024 18:07:08' prior: 16881440!
                           installEditorAndTextComposition
	"Install an editor for my textComposition. Install also the textComposition."
	| e tc |
	
	"Editor and TextComposition are assigned here atomically."
	e := model editorClass new morph: self.
	e model: model.
	tc := TextComposition new.
	"Keep critical section short"
	self mutex critical: [
		editor := e.
		textComposition := tc.
		tc
			setModel: model;
			extentForComposing: self extentForComposing.
		e textComposition: tc.
		tc editor: e ].
	e setEmphasisHereFromText.
	tc composeAll.
	e resetState.
	self fit.
	self selectionChanged.
	self possiblyChanged.

	"Add extras. Text Styler and Autocompleter"
	self stylerClass:
		((Preferences at: #syntaxHighlightingAsYouType) ifTrue: [
			model textStylerClass ]).
	self autoCompleterClass:
		model autoCompleterClass! !
!InnerTextMorph methodsFor: 'private' stamp: 'jmv 6/11/2024 18:07:12' prior: 16881478!
  releaseEditorAndTextComposition
	"Editor and TextComposition instantiation is lazy -- they will be created only when needed"

	editor := nil.
	textComposition := nil.
	self possiblyChanged.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6464-FixArtifactsWithEmbeddedMorphsInText-JuanVuletich-2024Jun11-18h07m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6464] on 12 June 2024 at 9:40:54 am'!
!ClassBuilder methodsFor: 'class mutation' stamp: 'jmv 6/12/2024 09:40:21' prior: 16817185!
                    update: oldClass to: newClass
	"Convert oldClass, all its instances and possibly its meta class into newClass,
	 instances of newClass and possibly its meta class. The process is surprisingly
	 simple in its implementation and surprisingly complex in its nuances and potentially
	 bad side effects.
	 We can rely on two assumptions (which are critical):
		#1: The method #updateInstancesFrom: will not create any lasting pointers to
			 'old' instances ('old' is quote on quote since #updateInstancesFrom: will do
			 a become of the old vs. the new instances and therefore it will not create
			 pointers to *new* instances before the #become: which are *old* afterwards)
		#2: The non-preemptive execution of the critical piece of code guarantees that
			 nobody can get a hold by 'other means' (such as process interruption and
			 reflection) on the old instances.
	 Given the above two, we know that after #updateInstancesFrom: there are no pointers
	 to any old instances. After the forwarding become there will be no pointers to the old
	 class or meta class either.
	 Andreas Raab, 2/27/2003 23:42"
	| meta allInstances |
	meta := oldClass isMeta.
	"Note: Everything from here on will run without the ability to get interrupted
	to prevent any other process to create new instances of the old class."
	["Note: The following removal may look somewhat obscure and needs an explanation.
	  When we mutate the class hierarchy we create new classes for any existing subclass.
	  So it may look as if we don't have to remove the old class from its superclass. However,
	  at the top of the hierarchy (the first class we reshape) that superclass itself is not newly
	  created so therefore it will hold both the oldClass and newClass in its (obsolete or not)
	  subclasses. Since the #become: below will transparently replace the pointers to oldClass
	  with newClass the superclass would have newClass in its subclasses TWICE. With rather
	  unclear effects if we consider that we may convert the meta-class hierarchy itself (which
	  is derived from the non-meta class hierarchy).
	  Due to this problem ALL classes are removed from their superclass just prior to converting
	  them. Here, breaking the superclass/subclass invariant really doesn't matter since we will
	  effectively remove the oldClass (becomeForward:) just a few lines below."

		"Convert the instances of oldClass into instances of newClass.
		Note: #canUpdateFrom: has already been called. Instance mutation is safe wrt methods currently in execution."
		allInstances := oldClass allInstances.
		allInstances notEmpty ifTrue: [
			newClass updateInstances: allInstances asArray from: oldClass isMeta: meta ].

		oldClass superclass ifNotNil: [ :oldSuperclass |
			oldSuperclass removeSubclass: oldClass.
			oldSuperclass removeObsoleteSubclass: oldClass ].

		"make sure that the VM cache is clean"
		oldClass methodDict do: [:cm | cm flushCache].

		meta
			ifTrue: [
				oldClass becomeForward: newClass.
				oldClass updateMethodBindingsTo: oldClass binding]
			ifFalse: [
				{oldClass. oldClass class} elementsForwardIdentityTo: {newClass. newClass class}.
				oldClass updateMethodBindingsTo: oldClass binding.
				oldClass class updateMethodBindingsTo: oldClass class binding].

		"eem 5/31/2014 07:22 At this point there used to be a garbage collect whose purpose was
		 to ensure no old instances existed after the becomeForward:.  Without the GC it was possible
		 to resurrect old instances using e.g. allInstancesDo:.  This was because the becomeForward:
		 updated references from the old objects to new objects but didn't destroy the old objects.
		 But as of late 2013/early 2014 becomeForward: has been modified to free all the old objects."
	] valueUnpreemptively! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6465-DontFailWhenRedefiningSubclassesOfNil-JuanVuletich-2024Jun12-09h34m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6465] on 12 June 2024 at 11:15:13 am'!
!PluggableButtonMorph methodsFor: 'accessing' stamp: 'jmv 6/12/2024 11:14:45' prior: 16922588!
  icon: aForm
	icon := aForm.
	magnifiedIcon := nil.
	self redrawNeeded.! !
!PluggableButtonMorph methodsFor: 'accessing' stamp: 'jmv 6/12/2024 11:14:32' prior: 16922623!
                       label: aStringOrNil font: aFontOrNil
	"Label this button with the given string."
	label := aStringOrNil.
	font := aFontOrNil.
	(self fontToUse notNil and: [ label notNil ])
		ifTrue: [ "Add a bit of padding"
			extent := (self fontToUse widthOfString: label) + 10 @ (self fontToUse lineSpacing + 10) ].
	self redrawNeeded.! !
!PluggableButtonMorph methodsFor: 'accessing' stamp: 'jmv 6/12/2024 11:14:41' prior: 16922635!
                           magnifiedIcon: aForm
	"Meaning: Don't magnify aForm to adapt it to our extent."

	icon := nil.
	magnifiedIcon := aForm.
	self redrawNeeded.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6466-RedrawButtonsWhenLabelFontOrIconChanges-JuanVuletich-2024Jun12-11h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6466] on 13 June 2024 at 12:00:21 pm'!
!Class methodsFor: 'accessing class hierarchy' stamp: 'jmv 6/13/2024 11:57:18' overrides: 16787874!
                          superclass: aClass 
	"Change the receiver's superclass to be aClass.
	Keep the subclass / superclass invariant.
	Not to be used lightly!!
	Usually used only to create subclasses of nil."

	| oldSuperclass |
	oldSuperclass := superclass.
	super superclass: aClass.
	(oldSuperclass notNil and: [ oldSuperclass ~~ superclass ]) ifTrue: [
		oldSuperclass removeSubclass: self ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6467-superclass-setter-keepSubclassSuperclassInvariant-JuanVuletich-2024Jun13-11h46m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6467] on 13 June 2024 at 2:19:38 pm'!
!Debugger methodsFor: 'context stack menu' stamp: 'jmv 6/13/2024 14:18:45' prior: 16843650!
              doStep
	"Send the selected message in the accessed method, and regain control 
	after the invoked method returns."
	
	| currentContext newContext |

	interruptedProcess isTerminated ifTrue: [^self inform: 'Debugging terminated'].

	currentContext := self selectedContext.
	newContext := self handleLabelUpdatesIn: [interruptedProcess completeStep: currentContext]
						whenExecuting: currentContext.
	newContext == currentContext ifTrue:
		[newContext := interruptedProcess stepToSendOrReturn].
	self contextStackIndex > 1
		ifTrue: [self resetContext: newContext]
		ifFalse:
			[newContext == currentContext
				ifTrue: [self changed: #contentsSelection.
						self updateInspectors]
				ifFalse: [self resetContext: newContext]].
! !
!Debugger methodsFor: 'context stack menu' stamp: 'jmv 6/13/2024 14:18:48' prior: 16843789!
   send
	"Send the selected message in the accessed method, and take control in 
	the method invoked to allow further step or send."

	interruptedProcess isTerminated ifTrue: [^self inform: 'Debugging terminated'].

	self checkContextSelection.
	interruptedProcess step: self selectedContext.
	self resetContext: interruptedProcess stepToSendOrReturn.
! !
!Debugger methodsFor: 'context stack menu' stamp: 'jmv 6/13/2024 14:18:52' prior: 16843800!
   stepIntoBlock
	"Send messages until you return to the present method context.
	 Used to step into a block in the method."

	interruptedProcess isTerminated ifTrue: [^self inform: 'Debugging terminated'].

	self 
		handleLabelUpdatesIn: [interruptedProcess stepToHome: self selectedContext]
		whenExecuting: self selectedContext.
	self resetContext: interruptedProcess stepToSendOrReturn! !
!Debugger class methodsFor: 'instance creation' stamp: 'jmv 6/13/2024 13:41:12' prior: 16844371!
                         newDebugging: aBlock
	"Create a new process to debug aBlock"

	| processToDebug debugger |
	debugger := self new.
	processToDebug := aBlock newProcessForDebugging name: 'debugIt'.
	debugger process: processToDebug context: processToDebug suspendedContext.
		
	^ debugger! !
!BlockClosure methodsFor: 'scheduling' stamp: 'jmv 6/13/2024 13:56:47'!
      newProcessForDebugging
	"Answer a Process running the code in the receiver. The process is not 
	scheduled."
	<primitive: 19> "Simulation guard"
	^Process
		forContext: self asContext
		priority: Processor activePriority! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6468-DebugIt-dontStepWhenDone-JuanVuletich-2024Jun13-14h16m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6468] on 13 June 2024 at 3:24:49 pm'!
!BlockClosure methodsFor: 'scheduling' stamp: 'jmv 6/13/2024 15:22:33' prior: 16793518!
     newProcess
	"Answer a Process running the code in the receiver. The process is not 
	scheduled."
	<primitive: 19> "Simulation guard"
	| p |
	p := Process
		forContext: [
			self value.
			p suspend] asContext
		priority: Processor activePriority.
	^p! !
!BlockClosure methodsFor: 'scheduling' stamp: 'jmv 6/13/2024 15:16:39' prior: 50349048!
          newProcessForDebugging
	"Answer a Process running the code in the receiver. The process is not 
	scheduled."
	<primitive: 19> "Simulation guard"
	| p |
	p := Process
		forContext: [
			self value.
			p terminate] asContext
		priority: Processor activePriority.
	^p! !
!BlockClosure methodsFor: 'scheduling' stamp: 'jmv 6/13/2024 15:23:32' prior: 16793529!
                            newProcessWith: anArray 
	"Answer a Process running the code in the receiver. The receiver's block 
	arguments are bound to the contents of the argument, anArray. The 
	process is not scheduled."
	<primitive: 19> "Simulation guard"
	| p |
	p := Process
		forContext: [
			self valueWithArguments: anArray.
			p suspend] asContext
		priority: Processor activePriority.
	^p! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6469-newProcess-moreRobust-JuanVuletich-2024Jun13-15h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6469] on 16 June 2024 at 4:44:22 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 6/16/2024 16:44:00' prior: 50341307!
           knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dkh'						'Dale Henrichs')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSM' 						'Duane Maxwell')
	#('DSG'						'David Graham')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('kdpm' 						'Kevin P√©rez Machado')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('pmon'						'Paolo Montrasi')
	#('PHK' 						'Peter Keeler')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6470-AddKevinAsKnownAuthor-JuanVuletich-2024Jun16-16h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6470] on 16 June 2024 at 5:11:48 pm'!
!HierarchicalListMorph methodsFor: 'events' stamp: 'jmv 6/16/2024 17:10:59' prior: 16874173 overrides: 16904138!
                     doubleClick: aMouseButtonEvent localPosition: localEventPosition
	doubleClickSelector ifNotNil: [
		^ (self window ifNil: [self model]) perform: doubleClickSelector].
	selectedMorph ifNotNil: [
		self toggleExpandedState: selectedMorph.
		self scrollSelectionIntoView ]! !
!HierarchicalListMorph methodsFor: 'initialization' stamp: 'jmv 6/14/2024 15:32:22' prior: 16874353!
          doubleClickSelector: aSymbol
	doubleClickSelector := aSymbol.
	self autoDeselect: false. ! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 6/16/2024 17:11:21' prior: 16923362 overrides: 16904138!
                     doubleClick: aMouseButtonEvent localPosition: localEventPosition
	| index |
	doubleClickSelector ifNil: [
		^super doubleClick: aMouseButtonEvent localPosition: localEventPosition ].
	index := self rowAtLocation: localEventPosition.
	index = 0 ifTrue: [
		^super doubleClick: aMouseButtonEvent localPosition: localEventPosition ].
	index == self visualSelectionIndex
		ifFalse: [ self setSelectionIndex: index ].
	^ (self window ifNil: [self model]) perform: doubleClickSelector! !
!PluggableListMorph methodsFor: 'initialization' stamp: 'jmv 6/14/2024 15:32:25' prior: 16923605!
                            doubleClickSelector: aSymbol
	doubleClickSelector := aSymbol.
	self autoDeselect: false. ! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6471-doubleClickSelector-sentToWindowNotModel-JuanVuletich-2024Jun16-17h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6471] on 16 June 2024 at 5:20:03 pm'!
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/14/2024 15:17:41' prior: 50340844!
                     buildMorphicClassList

	^(PluggableListMorph
		withModel: model
		listGetter: #classList
		indexGetter: #classListIndex
		indexSetter: #classListIndex:)
			menuNshortcutsKey: #classListMenuSpec;
			doubleClickSelector: #browseMethodFull.! !
!BrowserWindow methodsFor: 'GUI building' stamp: 'jmv 6/14/2024 15:17:47' prior: 50344028!
                    buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			menuNshortcutsKey: #messageListMenuSpec;
			doubleClickSelector: #browseMethodFull.! !
!MethodSetWindow methodsFor: 'GUI building' stamp: 'jmv 6/14/2024 15:17:50' prior: 50345808!
  buildMorphicMessageList
	"Build a morphic message list, with #messageList as its list-getter"

	^(PluggableListMorph
		withModel: model
		listGetter: #messageList
		indexGetter: #messageListIndex
		indexSetter: #messageListIndex:)
			menuNshortcutsKey: #messageListMenuSpec;
			doubleClickSelector: #browseMethodFull.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6472-DoubleClickOnMethodOrClassOpensNewBrowser-JuanVuletich-2024Jun16-17h15m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6472] on 17 June 2024 at 12:05:26 pm'!
!Behavior methodsFor: 'accessing class hierarchy' stamp: 'eem 6/17/2024 12:03:48' prior: 16787773!
       allSubclassesWithLevelDo: classAndLevelBlock startingLevel: level sortByCategory: sortByCategoryBoolean
	"Walk the tree of subclasses, giving the class and its level.
	 Sort nicely: major order is alphabetical by category name, and within a category alphabetical by class name.
	 Earlier versions used the order of the category within the system organization, but that gives different orders
	 when programmers reorder the system categories to suit their wishes. Since this order decides the order of
	 package file-outs, ignoring the speicifc system category order and using its alphabetical order is important
	 for stable package file-out. eem; '24/6/17"

	classAndLevelBlock value: self value: level.
	self == Class ifTrue:  [^ self].  "Don't visit all the metaclasses"
	"Visit subclasses in alphabetical order, either by category and name, or just by name"
	self subclasses
		sort: [ :a :b |
			sortByCategoryBoolean
				ifTrue: [ (a category ifNil: ['']) < (b category ifNil: ['']) or: [ a category = b category and: [ a name <= b name ]]]
				ifFalse: [ a name <= b name ]
			];
		do: [ :subclass |
			subclass
				allSubclassesWithLevelDo: classAndLevelBlock
				startingLevel: level + 1
				sortByCategory: sortByCategoryBoolean ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6473-SortBySystemCategoryNameNotSystemCategoryIndex-EliotEmilioMiranda-2024June17-12h05m-eem.001.cs.st----!

'From Cuis7.1 [latest update: #6472] on 17 June 2024 at 10:09:53 pm'!

TestCase removeSelector: #assert:isNotCloseTo:withPrecision:!

!methodRemoval: TestCase #assert:isNotCloseTo:withPrecision: stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
assert: aFloatNumber isNotCloseTo: anotherFloatNumber withPrecision: aPrecision 

	self deny: (self is: aFloatNumber closeTo: anotherFloatNumber withPrecision: aPrecision)
!

TestCase removeSelector: #is:closeTo:withPrecision:!

!methodRemoval: TestCase #is:closeTo:withPrecision: stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
is: aNumber closeTo: anotherNumber withPrecision: aPrecision
	"This way of comparing numbers could be useful for many tests, but there is no single correct way to do it for numerical algorithms. That's why this method is here and not at Float."

	aNumber = 0 ifTrue: [ ^ anotherNumber abs < aPrecision ].
	
	^ (aNumber - anotherNumber) abs < (aPrecision * (aNumber abs max: anotherNumber abs))!

TestCase removeSelector: #assert:isNotCloseTo:!

!methodRemoval: TestCase #assert:isNotCloseTo: stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
assert: aNumber isNotCloseTo: anotherNumber
 
	self assert: aNumber isNotCloseTo: anotherNumber withPrecision: self defaultPrecision !

TestCase removeSelector: #assert:isCloseTo:!

!methodRemoval: TestCase #assert:isCloseTo: stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
assert: aNumber isCloseTo: anotherNumber 

	self assert: aNumber isCloseTo: anotherNumber withPrecision: self defaultPrecision !

TestCase removeSelector: #defaultPrecision!

!methodRemoval: TestCase #defaultPrecision stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
defaultPrecision

	^ 0.0001
	!

TestCase removeSelector: #assert:isCloseTo:withPrecision:!

!methodRemoval: TestCase #assert:isCloseTo:withPrecision: stamp: 'Install-6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
assert: aNumber isCloseTo: anotherNumber withPrecision: aPrecision 

	self assert: (self is: aNumber closeTo: anotherNumber withPrecision: aPrecision)!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6474-Cleanup-JuanVuletich-2024Jun17-22h04m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6472] on 17 June 2024 at 7:50:56 pm'!
!Object methodsFor: 'as yet unclassified' stamp: 'jmv 6/17/2024 19:42:51'!
             run: aSelector with: arguments in: aReceiver

	self halt: 'This object can not behave like a CompiledMethod!!'.
! !
!Behavior methodsFor: 'testing method dictionary' stamp: 'jmv 6/17/2024 19:50:23' prior: 16788759!
         thoroughWhichSelectorsReferTo: literal special: specialFlag byte: specialByte
	"Answer a set of selectors whose methods access the argument as a 
	literal. Dives into the compact literal notation, making it slow but 
	thorough "

	| who |
	who := Set new.
	self selectorsAndMethodsDo: [ :sel :method |
		(method is: #CompiledMethod) ifTrue: [
			((method hasLiteralThorough: literal) or: [specialFlag and: [method scanFor: specialByte]])
				ifTrue: [
					((literal isVariableBinding) not
						or: [method sendsToSuper not
						"N.B. (method indexOfLiteral: literal) < method numLiterals copes with looking for
						Float bindingOf: #NaN, since (Float bindingOf: #NaN) ~= (Float bindingOf: #NaN)."
						or: [(method indexOfLiteral: literal) ~= 0]])
							ifTrue: [who add: sel]]]].
	^ who.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6475-ObjectsAsMethods-dontCrash-JuanVuletich-2024Jun17-19h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6480] on 18 June 2024 at 10:11:06 am'!
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 10:08:47' prior: 16797748!
       createHierarchyTreeOf: classes
	"Create a tree from a collection of classes. Keep ordering while doing it.
	The Each node in the tree is an Association with a class as key and a collection
	of child nodes as value."

	| classesWithSubclassIndexes |

	"For each class, collect the indexes of its included subclasses."
	classesWithSubclassIndexes := classes collect: [ :eachClass | 
		| subclasses subclassIndexes |
		subclasses := classes select: [ :class | class superclass = eachClass ].
		subclassIndexes := subclasses collect: [ :child | classes indexOf: child ].
		Association key: eachClass value: subclassIndexes ].

	"Now replace the indexes by the actual Associations, forming a tree.
	Remove them from the root collection."
	classesWithSubclassIndexes copy do: [ :classAndSubclassIndexes |
		classAndSubclassIndexes value: (classAndSubclassIndexes value collect: [ :idx | 
			| subclassAssociation |
			subclassAssociation := classesWithSubclassIndexes at: idx.
			classesWithSubclassIndexes at: idx put: nil.
			subclassAssociation ])].

	^ classesWithSubclassIndexes select: [ :ea | ea notNil ].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6476-ClearerCode-JuanVuletich-2024Jun18-10h08m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6476] on 18 June 2024 at 11:04:19 am'!

HierarchyBrowser removeSelector: #selectClass:!

!methodRemoval: HierarchyBrowser #selectClass: stamp: 'Install-6477-cleanup-JuanVuletich-2024Jun18-11h04m-jmv.001.cs.st 7/8/2024 12:00:18'!
selectClass: classNotMeta
	
	self classListIndex: (self classListIndexOf: classNotMeta name)!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6477-cleanup-JuanVuletich-2024Jun18-11h04m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6477] on 18 June 2024 at 2:09:31 pm'!
!CharacterSequence methodsFor: 'converting' stamp: 'jmv 6/18/2024 12:50:58'!
                       withoutPossibleSuffix: aString
	"
	'Elvis' withoutPossibleSuffix: 'vis'
	'Elvis' withoutPossibleSuffix: 'Paul'
	"
	^(self endsWith: aString)
		ifTrue: [ self copyFrom: 1 to: self size - aString size ]
		ifFalse: [self]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6478-withoutPossibleSuffix-JuanVuletich-2024Jun18-14h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6477] on 18 June 2024 at 2:10:44 pm'!
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 12:48:37' prior: 16797736!
               classListIndexOf: classNameToFind

	"Answer the index of the aClassName selection."

	classNameToFind ifNil: [ ^0 ].
	^self classList findFirst: [ :displayed | | start |
		"Works regardless of currently showing hierarchically or alphabetically."
		start := displayed firstNonSeparator.
		start-1 + classNameToFind size		 = 		displayed size and: [
			displayed is: classNameToFind substringAt: start ]]! !

CharacterSequence removeSelector: #afterBlanksEndsWith:!

!methodRemoval: CharacterSequence #afterBlanksEndsWith: stamp: 'Install-6479-Cleanup-JuanVuletich-2024Jun18-14h09m-jmv.001.cs.st 7/8/2024 12:00:18'!
afterBlanksEndsWith: aTail

	^(self endsWith: aTail) and: [ self firstNonSeparator = (self size - aTail size + 1) ]
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6479-Cleanup-JuanVuletich-2024Jun18-14h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6479] on 18 June 2024 at 2:27:00 pm'!
!Browser methodsFor: 'self-updating' stamp: 'jmv 6/18/2024 14:14:18'!
             classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName

	| currentSelectedClass |
	
	selectedSystemCategory = aCategoryName ifTrue: [
		currentSelectedClass := self selectedClass.
		currentSelectedClass ifNil: [ 
			selectedClassName = oldClassName ifTrue: [ 
				currentSelectedClass := aClass ]].
	 	self changed: #classList.
		self selectClass: currentSelectedClass ].! !
!BrowserWindow methodsFor: 'updating' stamp: 'jmv 6/18/2024 14:13:16' prior: 16799678 overrides: 16826898!
  classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName

	self canDiscardEdits ifTrue: [
		self model classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName ].! !

Browser removeSelector: #originalSelectedClassName!

!methodRemoval: Browser #originalSelectedClassName stamp: 'Install-6480-Cleanup-JuanVuletich-2024Jun18-14h25m-jmv.001.cs.st 7/8/2024 12:00:18'!
originalSelectedClassName
	"Returns the selectedClassName no matter if it exits or not.
	It is used for refreshing the browser when renaming a class - Hernan"

	^selectedClassName!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6480-Cleanup-JuanVuletich-2024Jun18-14h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6479] on 18 June 2024 at 2:29:30 pm'!
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 11:10:08' prior: 16797873 overrides: 16826513!
                  selectedClass
	"Answer the class that is currently selected. Answer nil if no selection 
	exists."

	^selectedClassName ifNotNil: [
		Smalltalk at: selectedClassName ifAbsent: nil ]! !
!Browser methodsFor: 'running tests' stamp: 'jmv 6/18/2024 11:11:52' prior: 16799068!
                 runClassTests

	self selectedClass ifNotNil: [ :selectedClass |
		(ProgressiveTestRunner for: (TestSuite forClass: selectedClass)) value ].
! !
!CodeFileBrowser methodsFor: 'class list' stamp: 'jmv 6/18/2024 14:19:47' prior: 16822750 overrides: 50349794!
 selectedClass
	"Answer the class that is currently selected. Answer nil if no selection 
	exists."

	^selectedClassName ifNotNil: [
		caseCodeSource classNamed: selectedClassName ]! !

HierarchyBrowser removeSelector: #selectedClassName!

!methodRemoval: HierarchyBrowser #selectedClassName stamp: 'Install-6481-Cleanup-JuanVuletich-2024Jun18-14h27m-jmv.001.cs.st 7/8/2024 12:00:18'!
selectedClassName
	"Answer the name of the class currently selected.   di
	  bug fix for the case where name cannot be found -- return nil rather than halt"

	| aName |
	
	aName := super selectedClassName.
	^ aName ifNotNil: [aName withoutLeadingBlanks asSymbol]!

Browser removeSelector: #selectedClassName!

!methodRemoval: Browser #selectedClassName stamp: 'Install-6481-Cleanup-JuanVuletich-2024Jun18-14h27m-jmv.001.cs.st 7/8/2024 12:00:18'!
selectedClassName
	"Answer the name of the current class. Answer nil if no selection exists."

	^selectedClassName ifNotNil: [ 
		"I send #defaultClassList and no #classList because when showing classes hierarchically we should remove spaces to see
		if class name is in the list and that consumes more time - Hernan"
		(self defaultClassList includes: selectedClassName) ifTrue: [ selectedClassName ]]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6481-Cleanup-JuanVuletich-2024Jun18-14h27m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6487] on 18 June 2024 at 2:35:25 pm'!
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 11:13:51'!
                         basicClassList
	"Answer an array of the class names of the selected category. Answer an 
	empty array if no selection exists."
	selectedSystemCategory ifNil: [^ #()].
	^ systemOrganizer fullListAtCategoryNamed: selectedSystemCategory! !
!SinglePackageBrowser methodsFor: 'lists' stamp: 'jmv 6/18/2024 11:13:49' overrides: 50349860!
                    basicClassList
	"Answer an array of the class names of the selected category. Answer an 
	empty array if no selection exists."
	| answer |
	answer := selectedSystemCategory
		ifNil: [#()]
		ifNotNil: [
			(package includesSystemCategory: selectedSystemCategory)
				ifTrue: [ systemOrganizer listAtCategoryNamed: selectedSystemCategory ]
				ifFalse: [ 
					package extensionClassNamesIn: (selectedSystemCategory copyFrom: 2 to: selectedSystemCategory size) ]].
	selectedClassName ifNil: [
		answer isEmpty ifFalse: [
			selectedClassName := answer first.
			self setClassOrganizer.
			self editSelection: #editClass ]].
	^answer! !
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 11:14:06' prior: 16797671!
                   classList

	^ listClassesHierarchically
		ifTrue: [self hierarchicalClassList]
		ifFalse: [self basicClassList].! !
!Browser methodsFor: 'class list' stamp: 'jmv 6/18/2024 11:14:45' prior: 16797813!
                         hierarchicalClassList
	"classNames are an arbitrary collection of classNames of the system.
	Reorder those class names so that they are sorted and indended by inheritance"

	| classes |
	classes := self basicClassList collect: [:sym | Smalltalk classNamed: sym].
	^ self
		flattenHierarchyTree: (self createHierarchyTreeOf: classes)
		on: OrderedCollection new
		indent: ''.
! !

SinglePackageBrowser removeSelector: #defaultClassList!

!methodRemoval: SinglePackageBrowser #defaultClassList stamp: 'Install-6482-Cleanup-JuanVuletich-2024Jun18-14h33m-jmv.001.cs.st 7/8/2024 12:00:18'!
defaultClassList
	"Answer an array of the class names of the selected category. Answer an 
	empty array if no selection exists."
	| answer |
	answer := selectedSystemCategory
		ifNil: [#()]
		ifNotNil: [
			(package includesSystemCategory: selectedSystemCategory)
				ifTrue: [ systemOrganizer listAtCategoryNamed: selectedSystemCategory ]
				ifFalse: [ 
					package extensionClassNamesIn: (selectedSystemCategory copyFrom: 2 to: selectedSystemCategory size) ]].
	selectedClassName ifNil: [
		answer isEmpty ifFalse: [
			selectedClassName := answer first.
			self setClassOrganizer.
			self editSelection: #editClass ]].
	^answer!

Browser removeSelector: #defaultClassList!

!methodRemoval: Browser #defaultClassList stamp: 'Install-6482-Cleanup-JuanVuletich-2024Jun18-14h33m-jmv.001.cs.st 7/8/2024 12:00:18'!
defaultClassList
	"Answer an array of the class names of the selected category. Answer an 
	empty array if no selection exists."
	selectedSystemCategory ifNil: [^ #()].
	^ systemOrganizer fullListAtCategoryNamed: selectedSystemCategory!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6482-Cleanup-JuanVuletich-2024Jun18-14h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6482] on 18 June 2024 at 4:50:37 pm'!
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 6/18/2024 16:39:40'!
                              numberOfDirectSendersOf: aSymbol
	"Answer the count of all the methods that call on aLiteral.
	[ (Smalltalk numberOfSendersOf: #open:label:) ] timeToRun
	[ (Smalltalk numberOfDirectSendersOf: #open:label:) ] timeToRun
	[ (Smalltalk numberOfSendersOf: #==) ] timeToRun
	[ (Smalltalk numberOfDirectSendersOf: #==) ] timeToRun
	"
	| count specialFlag specialByte |
	count := 0.
	specialFlag := self hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | specialByte := b ].
	self allBehaviorsDo: [ :class |
		class selectorsAndMethodsDo: [ :sel :method |
			((method hasLiteral: aSymbol) or: [specialFlag and: [(method scanFor: specialByte)]])
				ifTrue: [ count := count + 1 ]]].
	^ count! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 6/18/2024 16:42:29' prior: 50340302!
                      numberOfSendersOf: aSymbol
	"Answer the count of all the methods that call on aLiteral.
	[ (Smalltalk numberOfSendersOf: #open:label:) ] timeToRun
	[ (Smalltalk numberOfSendersOf: #==) ] timeToRun
	
	See #numberOfDirectSendersOf:
	"
	| count specialFlag specialByte |
	count := 0.
	specialFlag := self hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | specialByte := b ].
	self allBehaviorsDo: [ :class |
		count := count + (class whichSelectorsReferTo: aSymbol special: specialFlag byte: specialByte) size ].
	^ count! !
!CodeProvider methodsFor: 'annotation' stamp: 'jmv 6/18/2024 16:40:20' prior: 16825387!
                              annotationForSelector: aSelector ofClass: aClass
	"Provide a line of content for an annotation pane, representing  
	information about the given selector and class"

	| method |
	aSelector == #Comment
		ifTrue: [^ self annotationForClassCommentFor: aClass].
	aSelector == #Definition
		ifTrue: [^ self annotationForClassDefinitionFor: aClass].

	method := aClass compiledMethodAt: aSelector ifAbsent: nil.
	^ String streamContents: [ :strm |
		(Preferences at: #methodAnnotations)
			do: [ :each |
				each caseOf: {
					[#firstComment] -> [
						strm nextPutAll: (aClass firstCommentAt: aSelector) ].
					[#masterComment] -> [
						strm nextPutAll: ((aClass supermostPrecodeCommentFor: aSelector) ifNil: ['']) ].
					[#documentation] -> [
						strm nextPutAll: ((aClass precodeCommentOrInheritedCommentFor: aSelector) ifNil: ['']) ].
					[#timeStamp] -> [ | stamp |
						stamp := self timeStamp.
						strm nextPutAll: (stamp size > 0 ifTrue: [stamp] ifFalse: ['no timestamp'])].
					[#linesOfCode] -> [
						method notNil ifTrue: [
							strm
								print: method linesOfCode;
								nextPutAll: ' lines of code' ]].
					[#messageSendsCount] -> [
						method notNil ifTrue: [
							strm
								print: method messageSendsCount;
								nextPutAll: ' message sends' ]].
					[#messageCategory] -> [
						strm nextPutAll: (( aClass organization categoryOfElement: aSelector) ifNil: ['']) ].
					[#sendersCount] -> [ | sendersCount |
						sendersCount := Smalltalk numberOfDirectSendersOf: aSelector.
						sendersCount := sendersCount = 1
								ifTrue: ['1 direct sender']
								ifFalse: [sendersCount printString , ' direct senders'].
						strm nextPutAll: sendersCount ].
					[#implementorsCount] -> [ | implementorsCount |
						implementorsCount := Smalltalk numberOfImplementorsOf: aSelector.
						implementorsCount := implementorsCount = 1
								ifTrue: ['1 implementor']
								ifFalse: [implementorsCount printString , ' implementors'].
						strm nextPutAll: implementorsCount ].
					[#priorVersionsCount] -> [
						self addPriorVersionsCountForSelector: aSelector ofClass: aClass to: strm].
					[#priorTimeStamp] -> [ | stamp |
						stamp := VersionsBrowser
								timeStampFor: aSelector
								class: aClass
								reverseOrdinal: 2.
						strm nextPutAll: 'prior timestamp: '; nextPutAll: (stamp ifNil: ['None']) ].
					[#packages] -> [
						method notNil ifTrue: [
							(CodePackage packageOfMethod: method methodReference ifNone: nil)
								ifNil: [ strm nextPutAll: 'in no package' ]
								ifNotNil: [ :codePackage |
									strm nextPutAll: 'in package '; nextPutAll: codePackage packageName ]]].
					[#changeSets] -> [ | aList |
						aList := ChangeSet allChangeSetsWithClass: aClass selector: aSelector.
						aList notEmpty
							ifTrue: [ aList size = 1
									ifTrue: [strm nextPutAll: 'only in change set']
									ifFalse: [strm nextPutAll: 'in change sets:'].
								aList
									do: [:aChangeSet | strm nextPut: Character space; nextPutAll: aChangeSet name ]
									separatedBy: [ strm nextPut: $, ]]
							ifFalse: [strm nextPutAll: 'in no change set']].
					[#allChangeSets] -> [ | aList |
						aList := ChangeSet allChangeSetsWithClass: aClass selector: aSelector.
						aList notEmpty
							ifTrue: [ aList size = 1
									ifTrue: [strm nextPutAll: 'only in change set']
									ifFalse: [strm nextPutAll: 'in change sets:'].
								aList
									do: [:aChangeSet | strm nextPut: Character space; nextPutAll: aChangeSet name ]
									separatedBy: [ strm nextPut: $, ]]
							ifFalse: [strm nextPutAll: 'in no change set']].
					[#allBaseSystemChangeSets] -> [ | aList |
						aList := (ChangeSet allChangeSetsWithClass: aClass selector: aSelector) select: [ :it | it isForBaseSystem ].
						aList notEmpty
							ifTrue: [ aList size = 1
									ifTrue: [strm nextPutAll: 'only in base system change set']
									ifFalse: [strm nextPutAll: 'in base system change sets:'].
								aList
									do: [:aChangeSet | strm nextPut: Character space; nextPutAll: aChangeSet name ]
									separatedBy: [ strm nextPut: $, ]]
							ifFalse: [strm nextPutAll: 'in no base system change set']].
					[#closuresInfo] -> [
						strm nextPutAll: (aClass closuresInfoAt: aSelector)].
					
				}]
			separatedBy: [ strm nextPutAll: self annotationSeparator ].
		(method notNil and: [method hasBreakpoint]) ifTrue: [
			strm nextPutAll: self annotationSeparator.
			strm nextPutAll: '[Breakpoint]' ]
	].! !
!ChangeList methodsFor: 'viewing access' stamp: 'jmv 6/18/2024 16:40:39' prior: 16804727 overrides: 16825298!
annotation
	"Answer the string to be shown in an annotation pane.  Make plain that the annotation is associated with the current in-image version of the code, not of the selected disk-based version, and if the corresponding method is missing from the in-image version, mention that fact."

	| change count selectedCount ann1 ann2 |
	change := self currentChange.
	
	change isNil ifTrue: [
		count := listSelections size.
		selectedCount := listSelections count: [ :flag | flag ].
		^ 'Total items: ', count printString, ' - Selected items: ', selectedCount printString ].

	change changeType == #classDefinition ifTrue: [
		ann1 := change isMetaClassChange ifTrue: [ 'Metaclass' ] ifFalse: [ 'Class' ].
		ann2 := (Smalltalk includesKey: change changeClassName) ifTrue: [ ' already exists' ] ifFalse: [ ' not in system' ].
		^ann1, ann2 ].
	
	(self selectedMessageName isNil or: [self selectedClassOrMetaClass isNil])
		ifTrue: [^ ''].

	^ change methodSelector notNil
		ifFalse: [ super annotation]
		ifTrue: [
			(self isNewMethod: change)
				ifTrue: [
					String streamContents: [ :strm | | sel |
						sel := change methodSelector.
						strm
							nextPutAll: change changeClassName;
							nextPutAll: ' >> ';
							nextPutAll: sel;
							nextPutAll: ' is not present in the system. It has '.
							count := Smalltalk numberOfImplementorsOf: sel.
							count = 1
								ifTrue: [strm nextPutAll: '1 implementor']
								ifFalse: [count printOn: strm. strm nextPutAll: ' implementors' ].
							strm nextPutAll: ' and '.
							count := Smalltalk numberOfDirectSendersOf: sel.
							count = 1
								ifTrue: [strm nextPutAll: '1 direct sender.']
								ifFalse: [count printOn: strm. strm nextPutAll: ' direct senders.' ].
						]
					]
				ifFalse: [
					'current version: ', super annotation]]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6483-AvoidRecentAnnotationSeriousSlowdown-JuanVuletich-2024Jun18-16h47m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6483] on 18 June 2024 at 4:10:56 pm'!
!Behavior methodsFor: 'enumerating' stamp: 'sqr 6/18/2024 16:06:10'!
                   withAllSuperAndSubclassesDo: aBlock
	self allSuperclassesDo: aBlock.
	aBlock value: self.
	self allSubclassesDo: aBlock! !
!Object methodsFor: 'tracing' stamp: 'sqr 6/18/2024 16:04:34' prior: 16915758!
                      inboundPointersExcluding: objectsToExclude
"Answer a list of all objects in the system that point to me, excluding those in the collection of objectsToExclude. I do my best to avoid creating any temporary objects that point to myself, especially method and block contexts."

	| allObjectsToExclude |
	Smalltalk garbageCollect.
	"Do this to get rid of just created MethodContext instance."
	Smalltalk primitiveGarbageCollect.

	allObjectsToExclude := { thisContext }, objectsToExclude.
	^Smalltalk allObjects select: [ :object |
		((object statePointsTo: self) or: 			[object class == self])
			and: [(allObjectsToExclude statePointsTo: object) not]
		]! !
!SystemDictionary methodsFor: 'class names' stamp: 'sqr 6/18/2024 16:05:04' prior: 16962446!
                   fillCaches
	"Fill cachedClassNames and cachedNonClassNames. Return an array with the calculated values."

	| classNames nonClassNames |
	classNames := IdentitySet new.
	nonClassNames := IdentitySet new.
	self keysAndValuesDo: [ :key :value |
		"The key == value name test below addresses two separate issues:
			1) Obsolete classes, where key = #Foo and value name = 'AnObsoleteFoo'
			2) Aliases, i.e., Smalltalk at: #OtherName put: aClass"
		(value class isMeta and: [ key == value name ])
			ifTrue: [ classNames add: key ]
			ifFalse: [ nonClassNames add: key ] ].
	classNames := classNames asArray sort.
	nonClassNames := nonClassNames asArray sort.
	cachedClassNames := classNames.
	cachedNonClassNames := nonClassNames.
	^{ classNames. nonClassNames }! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'sqr 6/18/2024 16:06:29' prior: 16964836!
          allImplementorsOf: aSelector  localTo: aClass
	"Answer a sorted Collection of all the methods that implement the message
	aSelector in, above, or below the given class."

	| aSet cls |
	aSet := Set new.
	cls := aClass theNonMetaClass.
	cls withAllSuperAndSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	cls class withAllSuperAndSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	^aSet asArray sort! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sqr 6/18/2024 16:05:15' prior: 16966147!
                 send: startUpOrShutDown toClassesNamedIn: startUpOrShutDownList with: argument
	"Send the message #startUp: or #shutDown: to each class named in the list.
	The argument indicates if the system is about to quit (for #shutDown:) or if
	the image is ia real startup (or just continue after image save) (for #startUp:).
	If any name cannot be found, then remove it from the list."

	| removals class |
	removals := OrderedCollection new.
	startUpOrShutDownList do:
		[:name |
		class := self at: name ifAbsent: nil.
		class
			ifNil: [removals add: name]
			ifNotNil: [class perform: startUpOrShutDown with: argument]].

	"Remove any obsolete entries, but after the iteration"
	"Well, not. Better just ignore them. Maybe it is stuff, like SoundPlayer, that was moved to optional packages, and can be loaded again anytime."
	"startUpOrShutDownList removeAll: removals"! !
!DataStream class methodsFor: 'as yet unclassified' stamp: 'sqr 6/18/2024 16:05:27' prior: 16841684!
                        initCachedState
	"TypeMap maps Smalltalk classes to type ID numbers which identify the data stream primitive formats.  nextPut: writes these IDs to the data stream.  NOTE: Changing these type ID numbers will invalidate all extant data stream files.  Adding new ones is OK.  
	Classes named here have special formats in the file.  If such a class has a subclass, it will use type 9 and write correctly.  It will just be slow.  (Later write the class name in the special format, then subclasses can use the type also.)
	 See nextPut:, next, typeIDFor:, & ReferenceStream>>isAReferenceType:"
	"
	DataStream initCachedState
	"

	| refTypes t |
	refTypes := OrderedCollection new.
	t := TypeMap := Dictionary newWithRoomForMoreThan: 80. "sparse for fast hashing"

	t at: UndefinedObject put: 1.   refTypes add: 0.
	t at: True put: 2.   refTypes add: 0.
	t at: False put: 3.   refTypes add: 0.
	t at: SmallInteger put: 4.	 refTypes add: 0.
	t at: String put: 5.   refTypes add: 1.
	t at: Symbol put: 6.   refTypes add: 1.
	t at: ByteArray put: 7.   refTypes add: 1.
	t at: Array put: 8.   refTypes add: 1.
	"(type ID 9 is for arbitrary instances of any class, cf. typeIDFor:)"
		refTypes add: 1.
	"(type ID 10 is for references, cf. ReferenceStream>>tryToPutReference:)"
		refTypes add: 0.
	t at: Bitmap put: 11.   refTypes add: 1.

	t at: Metaclass put: 12.   refTypes add: 0.
	"Type ID 13 is used for HyperSqueak User classes that must be reconstructed."
		refTypes add: 1.

	t at: Float put: 14.  refTypes add: 1.
	t at: BoxedFloat64 put: 14.
	t at: SmallFloat64 put: 14.

	"15: Deprecated compact Rects."
		refTypes add: 1.

	"type ID 16 is an instance with short header.  See beginInstance:size:"
		refTypes add: 1.

	t at: String put: 17.   refTypes add: 1.	"new String format, 1 or 4 bytes of length"
	t at: WordArray put: 18.  refTypes add: 1.	"bitmap-like"
	"t at: WordArrayForSegment put: 19."  refTypes add: 1.		"bitmap-like"
	t at: Float32Array put: 20.  refTypes add: 1.	"And all other word arrays, both 16-bit and 32-bit.  See methods in ArrayedCollection.  Overridden in SoundBuffer."
	"For all classes that are like WordArrays, store them the way ColorArray is stored.  As bits, and able to change endianness."
	Smalltalk do: [:cls |
		cls isBehavior ifTrue: [
			cls isPointers not & cls isVariable & cls isWords ifTrue: [
				(t includesKey: cls) ifFalse: [t at: cls put: 20]]]].

	t at: CompiledMethod put: 21.  refTypes add: 1.	"special creation method"

	t at: Character put: 22. refTypes add: 0.

	t at: UnicodeString put: 23.   refTypes add: 1.
	t at: UnicodeSymbol put: 24.   refTypes add: 1.

	"t at:  put: 25.  refTypes add: 0."
	ReferenceTypes := refTypes.		"save it"! !
!Behavior methodsFor: 'methods' stamp: 'sqr 6/18/2024 16:06:37' prior: 16789399!
           addTo: aSet methodsThatReferenceInHierarchyTo: aSymbol special: special byte: byte.
	
	self withAllSuperAndSubclassesDo: [ :class |
		class addMethodsTo: aSet thatReferenceTo: aSymbol special: special byte: byte ] 
		! !

UndefinedObject removeSelector: #subclassesDoGently:!

!methodRemoval: UndefinedObject #subclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
subclassesDoGently: aBlock
	"Evaluate aBlock with all subclasses of nil.  Others are not direct subclasses of Class."

	^ Class subclassesDoGently: [:cl | 
			cl isMeta ifTrue: [aBlock value: cl soleInstance]].!

Metaclass removeSelector: #subclassesDoGently:!

!methodRemoval: Metaclass #subclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
subclassesDoGently: aBlock
	"Evaluate aBlock for each of the receiver's immediate subclasses."
	thisClass subclassesDo: [:aSubclass |
		"The following test is for Class class which has to exclude
			the Metaclasses being subclasses of Class."
		aSubclass isInMemory ifTrue: [
			aSubclass isMeta ifFalse: [aBlock value: aSubclass class]]].!

Class removeSelector: #subclassesDoGently:!

!methodRemoval: Class #subclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
subclassesDoGently: aBlock 
	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."
	subclasses
		ifNotNil: [subclasses do: aBlock]!

Behavior removeSelector: #allSubclassesDoGently:!

!methodRemoval: Behavior #allSubclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
allSubclassesDoGently: aBlock 
	"Evaluate the argument, aBlock, for each of the receiver's subclasses."

	self subclassesDoGently: 
		[:cl | 
		cl isInMemory ifTrue: [
			aBlock value: cl.
			cl allSubclassesDoGently: aBlock]]!

Behavior removeSelector: #subclassesDoGently:!

!methodRemoval: Behavior #subclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
subclassesDoGently: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."

	^self subclassesDo: aBlock!

Behavior removeSelector: #withAllSuperAndSubclassesDoGently:!

!methodRemoval: Behavior #withAllSuperAndSubclassesDoGently: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
withAllSuperAndSubclassesDoGently: aBlock
	self allSuperclassesDo: aBlock.
	aBlock value: self.
	self allSubclassesDoGently: aBlock!

Dictionary removeSelector: #at:ifPresentAndInMemory:!

!methodRemoval: Dictionary #at:ifPresentAndInMemory: stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
at: key ifPresentAndInMemory: aBlock
	"Lookup the given key in the receiver. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer nil."

	| v |
	v := self at: key ifAbsent: [^ nil].
	v isInMemory ifFalse: [^ nil].
	^ aBlock value: v
!

ProtoObject removeSelector: #isInMemory!

!methodRemoval: ProtoObject #isInMemory stamp: 'Install-6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st 7/8/2024 12:00:18'!
isInMemory
	"All normal objects are."
	^ true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6484-Cleanup-isInMemory-AndresValloud-2024Jun18-16h03m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 18 June 2024 at 10:38:08 pm'!

WeakSet removeSelector: #do:after:!

!methodRemoval: WeakSet #do:after: stamp: 'Install-6485-Cleanup-Symbol-AndresValloud-2024Jun18-22h32m-sqr.001.cs.st 7/8/2024 12:00:18'!
do: aBlock after: anElement
	| each startIndex |

	tally = 0 ifTrue: [^self].
	startIndex := anElement ifNil: [1] ifNotNil:
		[self findElementOrNil: anElement].
	startIndex + 1 to: array size do:
		[:index |
			((each := array at: index) == nil or: [each == flag])
				ifFalse: [aBlock value: each]
		]!

Symbol class removeSelector: #thatStarts:skipping:!

!methodRemoval: Symbol class #thatStarts:skipping: stamp: 'Install-6485-Cleanup-Symbol-AndresValloud-2024Jun18-22h32m-sqr.001.cs.st 7/8/2024 12:00:18'!
thatStarts: leadingCharacters skipping: skipSym
	"Answer a selector symbol that starts with leadingCharacters.
	Symbols beginning with a lower-case letter handled directly here.
	Ignore case after first char.
	If skipSym is not nil, it is a previous answer; start searching after it.
	If no symbols are found, answer nil.
	Used by Alt-q (Command-q) routines"

	| size firstMatch key |

	size := leadingCharacters size.
	size = 0 ifTrue: [^skipSym ifNil: [#''] ifNotNil: [nil]].

	firstMatch := leadingCharacters at: 1.
	size > 1 ifTrue: [key := leadingCharacters copyFrom: 2 to: size].

	self allSymbolTablesDo: [:each |
			each size >= size ifTrue:
				[
					((each at: 1) == firstMatch and:
						[key == nil or:
							[(each findString: key startingAt: 2 caseSensitive: false) = 2]])
								ifTrue: [^each]
				]
		] after: skipSym.

	^nil

"Symbol thatStarts: 'sf' skipping: nil"
"Symbol thatStarts: 'sf' skipping: #sfpGetFile:with:with:with:with:with:with:with:with:"
"Symbol thatStarts: 'candidate' skipping: nil"
!

Symbol class removeSelector: #allSymbolTablesDo:after:!

!methodRemoval: Symbol class #allSymbolTablesDo:after: stamp: 'Install-6485-Cleanup-Symbol-AndresValloud-2024Jun18-22h32m-sqr.001.cs.st 7/8/2024 12:00:18'!
allSymbolTablesDo: aBlock after: aSymbol

	Symbols do: aBlock after: aSymbol!

SymbolSet removeSelector: #do:after:!

!methodRemoval: SymbolSet #do:after: stamp: 'Install-6485-Cleanup-Symbol-AndresValloud-2024Jun18-22h32m-sqr.001.cs.st 7/8/2024 12:00:18'!
do: aBlock after: aSymbol

	| found |
	found := false.
	self do:
		[:each |
			found ifTrue: [aBlock value: each].
			each = aSymbol ifTrue: [found := true]
		]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6485-Cleanup-Symbol-AndresValloud-2024Jun18-22h32m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 18 June 2024 at 11:05:43 pm'!
!TestCase class methodsFor: 'accessing' stamp: 'sqr 6/18/2024 22:55:03'!
            sortedTestSelectorsFrom: aCollection

	^(aCollection asArray select: [:each | self isTestSelector: each]) sort! !
!TestCase class methodsFor: 'testing' stamp: 'sqr 6/18/2024 22:50:05'!
       isTestMethod: aCompiledMethod

	^(self isTestSelector: aCompiledMethod selector)
		and: [aCompiledMethod methodClass inheritsFrom: TestCase]! !
!TestCase class methodsFor: 'testing' stamp: 'sqr 6/18/2024 22:52:12'!
         isTestSelector: aSelector

	^aSelector beginsWith: self testSelectorPrefix
		:: and: [aSelector numArgs isZero]! !
!TestCase class methodsFor: 'testing' stamp: 'sqr 6/18/2024 22:48:31'!
      testSelectorPrefix

	^'test'! !
!CompiledMethod methodsFor: 'testing' stamp: 'sqr 6/18/2024 22:48:53' prior: 16833426!
         isTestMethod

    ^TestCase isTestMethod: self! !
!TestCase class methodsFor: 'accessing' stamp: 'sqr 6/18/2024 22:55:16' prior: 16975686!
                     allTestSelectors

	^self sortedTestSelectorsFrom: self allSelectors! !
!TestCase class methodsFor: 'accessing' stamp: 'sqr 6/18/2024 22:55:25' prior: 16975698!
testSelectors

	^self sortedTestSelectorsFrom: self selectors! !

UnicodeSymbol removeSelector: #testSelectorPrefix!

!methodRemoval: UnicodeSymbol #testSelectorPrefix stamp: 'Install-6486-Cleanup-Tests-AndresValloud-2024Jun18-22h38m-sqr.001.cs.st 7/8/2024 12:00:18'!
testSelectorPrefix

	^self class testSelectorPrefix !

UnicodeSymbol removeSelector: #isTestSelector!

!methodRemoval: UnicodeSymbol #isTestSelector stamp: 'Install-6486-Cleanup-Tests-AndresValloud-2024Jun18-22h38m-sqr.001.cs.st 7/8/2024 12:00:18'!
isTestSelector
	
	^(self beginsWith: self testSelectorPrefix) and: [ self numArgs isZero ]!

Symbol removeSelector: #testSelectorPrefix!

!methodRemoval: Symbol #testSelectorPrefix stamp: 'Install-6486-Cleanup-Tests-AndresValloud-2024Jun18-22h38m-sqr.001.cs.st 7/8/2024 12:00:18'!
testSelectorPrefix

	^self class testSelectorPrefix !

Symbol removeSelector: #isTestSelector!

!methodRemoval: Symbol #isTestSelector stamp: 'Install-6486-Cleanup-Tests-AndresValloud-2024Jun18-22h38m-sqr.001.cs.st 7/8/2024 12:00:18'!
isTestSelector
	
	^(self beginsWith: self testSelectorPrefix) and: [ self numArgs isZero ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6486-Cleanup-Tests-AndresValloud-2024Jun18-22h38m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6486] on 19 June 2024 at 9:33:07 am'!

UnicodeSymbol class removeSelector: #testSelectorPrefix!

!methodRemoval: UnicodeSymbol class #testSelectorPrefix stamp: 'Install-6487-Cleaup-JuanVuletich-2024Jun19-09h32m-jmv.001.cs.st 7/8/2024 12:00:18'!
testSelectorPrefix

	^ 'test'.!

Symbol class removeSelector: #testSelectorPrefix!

!methodRemoval: Symbol class #testSelectorPrefix stamp: 'Install-6487-Cleaup-JuanVuletich-2024Jun19-09h32m-jmv.001.cs.st 7/8/2024 12:00:18'!
testSelectorPrefix

	^ 'test'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6487-Cleaup-JuanVuletich-2024Jun19-09h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6483] on 18 June 2024 at 4:03:41 pm'!
!CompiledMethod methodsFor: 'literals' stamp: 'sqr 6/18/2024 15:36:24' prior: 16833686!
          hasLiteral: literal
	"Answer whether the receiver references the argument, literal."
	2 to: self numLiterals - 1 do: "exclude superclass + selector/properties"
		[:index |
		(literal literalEqual: (self objectAt: index)) ifTrue: [^true]].
	^false! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6488-MonomorphicCallsAreFasterThanMegamorphicCalls-AndresValloud-2024Jun18-15h16m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 18 June 2024 at 11:09:05 pm'!
!CodeWindow methodsFor: 'menu commands' stamp: 'sqr 6/18/2024 23:07:20' prior: 16827225!
                   browseVersions
	"Create and schedule a Versions Browser, showing all versions of the 
	currently selected message. Answer the browser or nil."
	| method class |
	model selectedMessageName isNil ifTrue: [
		^ VersionsBrowserWindow
			browseCommentOf: model selectedClass ].
	method := model currentCompiledMethod.
	"because maybe the method has been removed --- unhelpful"
	method isNil ifTrue: [^self].
	class := method methodClass.
	^ VersionsBrowserWindow
		browseVersionsOf: method
		class: class
		meta: class isMeta
		category: (class organization categoryOfElement: method selector)
		selector: method selector! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6489-FixWalkbackWhenAskingVersionsOfJustDeletedMEthod-AndresValloud-2024Jun18-23h05m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6489] on 26 June 2024 at 9:36:08 am'!
!CodeProvider class methodsFor: 'services' stamp: 'jmv 6/26/2024 09:30:27'!
            normalizeCodeForSaving: aTextOrString in: aClassOrMetaclass
	"Adapt edited code to be suitable or logging.
	Answer is a plain text.
	Additionally, if code was modified for better look and edition experience, normalize it.
	This may include reverting to ':=' for assignment, '^' for return, and any replacements of
	ASCII by Unicode symbols done by Shout.
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:"

	| answer |
	answer := aTextOrString asPlainString.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkUpArrow asString` with: '^'.
	^answer! !
!Behavior methodsFor: 'compiling' stamp: 'jmv 4/26/2024 12:19:58' prior: 16787472!
 compile: code notifying: requestor 
	"Compile the argument, code, as source code in the context of the 
	receiver and install the result in the receiver's method dictionary. The 
	second argument, requestor, is to be notified if an error occurs. The 
	argument code is either a string or an object that converts to a string or 
	a PositionableStream. This method also saves the source code."
	
	| methodAndNode updatedCode |
	methodAndNode := self
		basicCompile: code
		notifying: requestor
		trailer: self defaultMethodTrailer
		ifFail: [^nil].
	"Re-fetching source code may be needed if, for example, some variable declaration was corrected during compilation."
	updatedCode := CodeProvider normalizeCodeForSaving: (requestor ifNil: [code] ifNotNil: [requestor text]) in: self.
	methodAndNode method putSource: updatedCode fromParseNode: methodAndNode node inFile: 2
			withPreamble: [ :f | f newLine; nextPut: $!!; nextChunkPut: 'Behavior method'; newLine].
	self addSelectorSilently: methodAndNode selector withMethod: methodAndNode method.
	^ methodAndNode selector! !
!ClassDescription methodsFor: 'compiling' stamp: 'jmv 4/26/2024 12:20:06' prior: 16818948!
                  compile: code classified: category withStamp: changeStamp notifying: requestor logSource: logSource
	
	| methodAndNode selector isExistingMethod updatedCode |	
	methodAndNode := self basicCompile: code notifying: requestor 
							trailer: self defaultMethodTrailer ifFail: [^nil].
	selector := methodAndNode selector.
	isExistingMethod := self includesSelector: selector.
	isExistingMethod
		ifTrue: [
			(self theNonMetaClass isOkToChangeMethod: selector isMeta: self isMeta)
				ifFalse: [self error: 'Method modification not allowed']]
		ifFalse: [
			(self theNonMetaClass isOkToAddMethod: selector isMeta: self isMeta)
				ifFalse: [self error: 'Method addition not allowed']].
	logSource ifTrue: [
		"Re-fetching source code may be needed if, for example, some variable declaration was corrected during compilation."
		updatedCode := CodeProvider normalizeCodeForSaving: (requestor ifNil: [code] ifNotNil: [requestor text]) in: self.
		self logMethodSource: updatedCode forMethodWithNode: methodAndNode 
			inCategory: category withStamp: changeStamp notifying: requestor.
	].
	self addAndClassifySelector: selector withMethod: methodAndNode 
		method inProtocol: category notifying: requestor.
	^ methodAndNode selector! !
!Clipboard methodsFor: 'accessing' stamp: 'jmv 4/26/2024 12:21:16' prior: 16821220!
                             storeObject: anObject
	"Set new contents on the clipboard. Also export to OS.
	anObject can be a:
		String
		Text
		Form
		Morph
		Object.
	OS clipboard supports String. Other formats might be supported if ExtendedClipboardInterface is present and operative."

	| primitiveFormat id |

	"Store a copy of the object. This is appropriate in case the original object is modified after being copied to the clipboard.
	Another copy must be made again when pasting, as the same object could be pasted many times.
	Besides, store the original object, but weakly (so we don't prevent it GCed). The original object might be used in workspaces."
	(anObject isString or: [ anObject is: #Text])
		ifTrue: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: nil ]
		ifFalse: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: anObject ].
	
	self noteRecentClipping: contents.

	"Store on OS clipboard using ExtendedClipboardInterface if present.
	Warning: This has not yet been adapted to UTF-8 Unicode"
	self extendedClipboardInterface ifNotNil: [ :interface |
		interface canStore ifTrue: [
			id := self idFor: contents.
			contents isString
				ifTrue: [ ^interface storeString: contents id: id ].
			(contents is: #Text)
				ifTrue: [ ^interface storeText: contents id: id ].
			(contents is: #Form)
				ifTrue: [ ^interface storeForm: contents id: id ].
			(contents is: #Morph)
				ifTrue: [ ^interface storeForm: (contents imageForm: 32) id: id ].
			^interface storeString: contents asString id: id ]].

	"Otherwise use the clipboard primitives in the VM"
	"The VM uses UTF-8 for clipboard"
	primitiveFormat := self stringOrIdFor: contents.
	"See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also CodeProvider class >> #normalizeCodeForCodeFiles:	"
	primitiveFormat := primitiveFormat copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkLeftArrow asString with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkUpArrow asString with: '^'.
	primitiveFormat := primitiveFormat asUtf8Bytes.
	self primitiveClipboardString: primitiveFormat! !

CodeProvider class removeSelector: #normalizeCodeForCodeFiles:!

!methodRemoval: CodeProvider class #normalizeCodeForCodeFiles: stamp: 'Install-6490-autoCodeNormalization-tweaks-JuanVuletich-2024Jun26-09h26m-jmv.001.cs.st 7/8/2024 12:00:18'!
normalizeCodeForCodeFiles: aTextOrString
	"Adapt edited code to be suitable or logging.
	Answer is a plain text.
	Additionally, if code was modified for better look and edition experience, normalize it.
	This may include reverting to ':=' for assignment, '^' for return, and any replacements of
	ASCII by Unicode symbols done by Shout.
	See also SHTextStylerST80 >> #privateConvert
	See also Clipboard >> #storeObject:"

	| answer |
	answer := aTextOrString asPlainString.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkUpArrow asString` with: '^'.
	^answer!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6490-autoCodeNormalization-tweaks-JuanVuletich-2024Jun26-09h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6490] on 26 June 2024 at 12:37:36 pm'!

TextProvider subclass: #CodeProvider
	instanceVariableNames: 'currentCompiledMethod contentsSymbol '
	classVariableNames: 'CodeNormalizers '
	poolDictionaries: ''
	category: 'System-Text'!

!classDefinition: #CodeProvider category: #'System-Text' stamp: 'Install-6491-PluggableCodeNormalization-JuanVuletich-2024Jun26-12h24m-jmv.001.cs.st 7/8/2024 12:00:18'!
TextProvider subclass: #CodeProvider
	instanceVariableNames: 'currentCompiledMethod contentsSymbol'
	classVariableNames: 'CodeNormalizers'
	poolDictionaries: ''
	category: 'System-Text'!
!CodeProvider class methodsFor: 'services' stamp: 'jmv 6/26/2024 12:27:35'!
              addCodeNormalizer: aBlock
	"aBlock should have one argument, the code to process,
	and should evaluate to the processed code
	CodeProvider addCodeNormalizer: [ :code :cls | code, 'This is an extra comment1' asSmalltalkComment ].
	CodeProvider addCodeNormalizer: [ :code :cls | cls compilerClass new format: code in: cls notifying: nil. ].
	CodeProvider addCodeNormalizer: [ :code :cls | code, 'This is an extra comment2' asSmalltalkComment ].
	""
	CodeProvider clearCodeNormalizers.
	"
	CodeNormalizers := CodeNormalizers
		ifNil: [ { aBlock } ]
		ifNotNil: [ CodeNormalizers copyWith: aBlock ].! !
!CodeProvider class methodsFor: 'services' stamp: 'jmv 6/26/2024 11:11:31'!
                             clearCodeNormalizers
	"Just forget them."

	CodeNormalizers := nil.
! !
!CodeProvider class methodsFor: 'services' stamp: 'jmv 6/26/2024 12:28:03' prior: 50350769!
                            normalizeCodeForSaving: aTextOrString in: aClassOrMetaclass
	"Adapt edited code to be suitable for saving to sources or changes files.
	Answer is a plain text.
	Additionally, if code was modified for better look and edition experience, normalize it.
	This may include reverting to ':=' for assignment, '^' for return, and any replacements of
	ASCII by Unicode symbols done by Shout.
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:"

	| answer |
	answer := aTextOrString asPlainString.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkUpArrow asString` with: '^'.
	"Apply code any normalization services. For example, try:
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment1' asSmalltalkComment ].
	CodeProvider addCodeNormalizer: [ :code :cls | cls compilerClass new format: code in: cls notifying: nil. ].
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment2' asSmalltalkComment ].
	""
	CodeProvider clearCodeNormalizers.
	"
	CodeNormalizers ifNotNil: [
		CodeNormalizers do: [ :each |
			answer := each value: answer value: aClassOrMetaclass ]].
	^answer.! !

TextProvider subclass: #CodeProvider
	instanceVariableNames: 'currentCompiledMethod contentsSymbol'
	classVariableNames: 'CodeNormalizers'
	poolDictionaries: ''
	category: 'System-Text'!

!classDefinition: #CodeProvider category: #'System-Text' stamp: 'Install-6491-PluggableCodeNormalization-JuanVuletich-2024Jun26-12h24m-jmv.001.cs.st 7/8/2024 12:00:18'!
TextProvider subclass: #CodeProvider
	instanceVariableNames: 'currentCompiledMethod contentsSymbol'
	classVariableNames: 'CodeNormalizers'
	poolDictionaries: ''
	category: 'System-Text'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6491-PluggableCodeNormalization-JuanVuletich-2024Jun26-12h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6491] on 28 June 2024 at 11:01:26 am'!
!Float methodsFor: 'converting' stamp: 'jmv 6/28/2024 10:58:34'!
   asMatching32BitSingleDecimalRepresentation
	"Answer a Float that prints the same as the 32 bit single precision that best represents us.
	This is not just us with a reduced mantissa.
	Compare the following:

	0.1 print. 										'Regular 64 bit Double (Float). Works as expected'.
	(Float32Array with: 0.1) first print. 										'64 bits Double built from 32 bit Single Precision. Annoying to most users.'.
	(Float32Array with: 0.1) first asMatching32BitSingleDecimalRepresentation print.
		'Last is the 64 bits Double that would have been built from user input if no intermediate 32 bits Single was involved' print.

	Float pi print. 										'Regular 64 bit Double (Float). Works as expected'.
	(Float32Array with: Float pi) first print. 										'64 bits Double built from 32 bit Single Precision. Annoying to most users.'.
	(Float32Array with: Float pi) first asMatching32BitSingleDecimalRepresentation print.
		'Last is the 64 bits Double that would have been built from user input if no intermediate 32 bits Single was involved' print.
	"

	| mantissaBitsToUse answerAbs printed |
	mantissaBitsToUse := 24.
	self isNaN ifTrue: [ ^self ].
	self isInfinite ifTrue: [ ^self ].
	self = 0.0 ifTrue: [ ^self ].
	printed := String streamContents: [ :strm |
		(self > 0 ifTrue: [ self ] ifFalse: [ self negated ])
			absPrintOn: strm base: 10 mantissaSignificantBits: mantissaBitsToUse ].
	answerAbs := Number readFrom: printed.
	^self > 0 ifTrue: [ answerAbs ] ifFalse: [ answerAbs negated ].! !
!Float methodsFor: 'printing' stamp: 'nice 4/20/2010 22:48' prior: 16865134!
                        absPrintExactlyOn: aStream base: base
	"Print my value on a stream in the given base.  Assumes that my value is strictly
	positive; negative numbers, zero, and NaNs have already been handled elsewhere.
	Based upon the algorithm outlined in:
	Robert G. Burger and R. Kent Dybvig
	Printing Floating Point Numbers Quickly and Accurately
	ACM SIGPLAN 1996 Conference on Programming Language Design and Implementation
	June 1996.
	https://www.cs.indiana.edu/~dyb/pubs/FP-Printing-PLDI96.pdf
	This version guarantees that the printed representation exactly represents my value
	by using exact integer arithmetic.
	See also #absPrintOn:base:mantissaSignificantBits:"

	| significand exp baseExpEstimate r s mPlus mMinus scale roundingIncludesLimits d tc1 tc2 fixedFormat decPointCount slowbit shead |
	self isInfinite ifTrue: [aStream nextPutAll: 'Infinity'. ^ self].
	significand := self significandAsInteger.
	roundingIncludesLimits := significand even.
	"What follows is equivalent, but faster than
		exp := self exponentPart - 52."
	exp := (self exponent - 52) max: MinValLogBase2.
	baseExpEstimate := (self exponent * base asFloat reciprocalLogBase2 - 1.0e-10) ceiling.
	exp >= 0
		ifTrue:
			[significand ~= 16r10000000000000
				ifTrue:
					[r := significand bitShift: 1 + exp.
					s := 2.
					mPlus := mMinus := 1 bitShift: exp]
				ifFalse:
					[r := significand bitShift: 2 + exp.
					s := 4.
					mPlus := 2 * (mMinus := 1 bitShift: exp)]]
		ifFalse:
			[(exp = MinValLogBase2 or: [significand ~= 16r10000000000000])
				ifTrue:
					[r := significand bitShift: 1.
					s := 1 bitShift: 1 - exp.
					mPlus := mMinus := 1]
				ifFalse:
					[r := significand bitShift: 2.
					s := 1 bitShift: 2 - exp.
					mPlus := 2.
					mMinus := 1]].
	baseExpEstimate >= 0
		ifTrue: [s := s * (base raisedToInteger: baseExpEstimate)]
		ifFalse:
			[scale := base raisedToInteger: baseExpEstimate negated.
			r := r * scale.
			mPlus := mPlus * scale.
			mMinus := mMinus * scale].
	((r + mPlus < s) not and: [roundingIncludesLimits or: [r + mPlus > s]])
		ifTrue: [baseExpEstimate := baseExpEstimate + 1]
		ifFalse:
			[r := r * base.
			mPlus := mPlus * base.
			mMinus := mMinus * base].
	(fixedFormat := baseExpEstimate between: -3 and: 6)
		ifTrue:
			[decPointCount := baseExpEstimate.
			baseExpEstimate <= 0
				ifTrue: [aStream nextPutAll: ('0.000000' truncateTo: 2 - baseExpEstimate)]]
		ifFalse:
			[decPointCount := 1].
	slowbit := 1 - s lowBit .
	shead := s bitShift: slowbit.
	[d := (r bitShift: slowbit) // shead.
	r := r - (d * s).
	(tc1 := (r > mMinus) not and: [roundingIncludesLimits or: [r < mMinus]]) |
	(tc2 := (r + mPlus < s) not and: [roundingIncludesLimits or: [r + mPlus > s]])] whileFalse:
		[aStream nextPut: (Character digitValue: d).
		r := r * base.
		mPlus := mPlus * base.
		mMinus := mMinus * base.
		decPointCount := decPointCount - 1.
		decPointCount = 0 ifTrue: [aStream nextPut: $.]].
	tc2 ifTrue:
		[(tc1 not or: [r * 2 >= s]) ifTrue: [d := d + 1]].
	aStream nextPut: (Character digitValue: d).
	decPointCount > 0
		ifTrue:
		[decPointCount - 1 to: 1 by: -1 do: [:i | aStream nextPut: $0].
		aStream nextPutAll: '.0'].
	fixedFormat ifFalse:
		[aStream nextPut: $e.
		aStream nextPutAll: (baseExpEstimate - 1) printString]! !
!Float methodsFor: 'printing' stamp: 'jmv 9/24/2018 13:40:36' prior: 16865245!
                    absPrintOn: aStream base: base mantissaSignificantBits: significantBits
	"Print my value on a stream in the given base.  Assumes that my value is strictly
	positive; negative numbers, zero, and NaNs have already been handled elsewhere.
	Based upon the algorithm outlined in:
	Robert G. Burger and R. Kent Dybvig
	Printing Floating Point Numbers Quickly and Accurately
	ACM SIGPLAN 1996 Conference on Programming Language Design and Implementation
	June 1996.
	https://www.cs.indiana.edu/~dyb/pubs/FP-Printing-PLDI96.pdf
	Note: This version performs all calculations with Floats instead of LargeIntegers, and loses
	about 3 lsbs of accuracy compared to an exact conversion. Therefore it is likely to be correct
	with significantBits up to 51.
	See also #absPrintExactlyOn:base:"

	| fBase exp baseExpEstimate r s mPlus mMinus scale d tc1 tc2 fixedFormat decPointCount |
	self isInfinite ifTrue: [aStream nextPutAll: 'Infinity'. ^ self].
	fBase := base asFloat.
	exp := self exponent.
	baseExpEstimate := (exp * fBase reciprocalLogBase2 - 1.0e-10) ceiling.
	exp >= 0
		ifTrue:
			[r := self.
			s := 1.0.
			mPlus := 1.0 timesTwoPower: exp - significantBits.
			mMinus := self significand ~= 1.0 ifTrue: [mPlus] ifFalse: [mPlus / 2.0]]
		ifFalse:
			[r := self timesTwoPower: significantBits.
			s := 1.0 timesTwoPower:  significantBits.
			mMinus := 1.0 timesTwoPower: (exp max: -1024).
			mPlus :=
				(exp = MinValLogBase2) | (self significand ~= 1.0)
					ifTrue: [mMinus]
					ifFalse: [mMinus * 2.0]].
	baseExpEstimate >= 0
		ifTrue:
			[exp = 1023
				ifTrue:   "scale down to prevent overflow to Infinity during conversion"
					[r := r / fBase.
					s := s * (fBase raisedToInteger: baseExpEstimate - 1).
					mPlus := mPlus / fBase.
					mMinus := mMinus / fBase]
				ifFalse:
					[s := s * (fBase raisedToInteger: baseExpEstimate)]]
		ifFalse:
			[exp < -1023
				ifTrue:   "scale up to prevent denorm reciprocals overflowing to Infinity"
					[d := (53 * fBase reciprocalLogBase2 - 1.0e-10) ceiling.
					scale := fBase raisedToInteger: d.
					r := r * scale.
					mPlus := mPlus * scale.
					mMinus := mMinus * scale.
					scale := fBase raisedToInteger: (baseExpEstimate + d) negated]
				ifFalse:
				[scale := fBase raisedToInteger: baseExpEstimate negated].
			s := s / scale].
	(r + mPlus >= s)
		ifTrue: [baseExpEstimate := baseExpEstimate + 1]
		ifFalse:
			[s := s / fBase].
	(fixedFormat := baseExpEstimate between: -3 and: 6)
		ifTrue:
			[decPointCount := baseExpEstimate.
			baseExpEstimate <= 0
				ifTrue: [aStream nextPutAll: ('0.000000' truncateTo: 2 - baseExpEstimate)]]
		ifFalse:
			[decPointCount := 1].
	[d := (r / s) truncated.
	r := r - (d * s).
	(tc1 := r <= mMinus) | (tc2 := r + mPlus >= s)] whileFalse:
		[aStream nextPut: (Character digitValue: d).
		r := r * fBase.
		mPlus := mPlus * fBase.
		mMinus := mMinus * fBase.
		decPointCount := decPointCount - 1.
		decPointCount = 0 ifTrue: [aStream nextPut: $.]].
	tc2 ifTrue:
		[tc1 not | (tc1 & (r*2.0 >= s)) ifTrue: [d := d + 1]].
	aStream nextPut: (Character digitValue: d).
	decPointCount > 0
		ifTrue:
		[decPointCount - 1 to: 1 by: -1 do: [:i | aStream nextPut: $0].
		aStream nextPutAll: '.0'].
	fixedFormat ifFalse:
		[aStream nextPut: $e.
		aStream nextPutAll: (baseExpEstimate - 1) printString]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6492-asMatchingSinglePrecisionDecimalRepresentation-JuanVuletich-2024Jun28-10h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6455] on 1 July 2024 at 4:34:08 pm'!
!String methodsFor: 'testing' stamp: 'fgz 7/1/2024 16:33:58'!
        isIntegerDenotation
	"Answer true if the receiver denotes an integer number."
	
	^(self size > 1 and: [
		self first = $- and: [ (self findFirst: [:each | each isDigit not ] startingAt: 2) = 0 ]
			]) or: [ self size > 0 and: [ self allSatisfy: [:each | each isDigit ] ] ]

! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6493-String-IntegerDenotation-FelipeZak-2024Jul01-16h32m-fgz.001.cs.st----!

'From Cuis7.1 [latest update: #6493] on 5 July 2024 at 12:18:04 pm'!

ArrayedCollection variableDoubleByteSubclass: #DoubleByteArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

!classDefinition: #DoubleByteArray category: #'Collections-Arrayed' stamp: 'Install-6494-DoubleByteArray-DoubleWordArray-LucianoEstebanNotarfrancesco-2024Jul05-12h12m-len.001.cs.st 7/8/2024 12:00:18'!
ArrayedCollection variableDoubleByteSubclass: #DoubleByteArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!
!DoubleByteArray commentStamp: '<historical>' prior: 0!
                   DoubleByteArrays store 16-bit unsigned Integer values, between 0 and 16rFFFF.
!

ArrayedCollection variableDoubleWordSubclass: #DoubleWordArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

!classDefinition: #DoubleWordArray category: #'Collections-Arrayed' stamp: 'Install-6494-DoubleByteArray-DoubleWordArray-LucianoEstebanNotarfrancesco-2024Jul05-12h12m-len.001.cs.st 7/8/2024 12:00:18'!
ArrayedCollection variableDoubleWordSubclass: #DoubleWordArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!
!DoubleWordArray commentStamp: '<historical>' prior: 0!
                         DoubleWordArrays store 64-bit unsigned Integer values, between 0 and 16rFFFFFFFFFFFFFFFF.
!
!DoubleByteArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:26:16' overrides: 16946620!
      atAllPut: value
	"Fill the receiver with the given value."
	<primitive: 145>
	super atAllPut: value! !
!DoubleByteArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:16:29' overrides: 16783592!
                           byteSize
	^self size * 2! !
!DoubleByteArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:18:48' overrides: 16783609!
      bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 2! !
!DoubleByteArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:17:53' overrides: 16783368!
      defaultElement
	^0! !
!DoubleByteArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 12:14:53'!
 signedAt: index
	"Return the 16-bit signed integer value at the given index of the receiver."

	<primitive: 143>
	index isInteger ifTrue: [self errorSubscriptBounds: index].
	index isNumber ifTrue: [^ self at: index truncated].
	self errorNonIntegerIndex.
! !
!DoubleByteArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 12:14:59'!
                   signedAt: index put: value
	"Store the given 16-bit signed integer at the given index in the receiver."

	<primitive: 144>
	index isInteger
		ifTrue: [
			(index >= 1 and: [index <= self size])
				ifTrue: [self errorImproperStore]
				ifFalse: [self errorSubscriptBounds: index]].
	index isNumber ifTrue: [^ self at: index truncated put: value].
	self errorNonIntegerIndex.
! !
!DoubleByteArray methodsFor: 'private' stamp: 'len 5/16/2019 06:21:22' overrides: 16947099!
         replaceFrom: start to: stop with: replacement startingAt: repStart 
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 105>
	super replaceFrom: start to: stop with: replacement startingAt: repStart! !
!DoubleWordArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:26:24' overrides: 16946620!
                atAllPut: value
	"Fill the receiver with the given value."
	<primitive: 145>
	super atAllPut: value! !
!DoubleWordArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:16:45' overrides: 16783592!
                           byteSize
	^self size * 8! !
!DoubleWordArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:19:05' overrides: 16783609!
      bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 8! !
!DoubleWordArray methodsFor: 'accessing' stamp: 'len 5/16/2019 06:18:00' overrides: 16783368!
      defaultElement
	^0! !
!DoubleWordArray methodsFor: 'private' stamp: 'len 5/16/2019 06:21:40' overrides: 16947099!
              replaceFrom: start to: stop with: replacement startingAt: repStart 
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 105>
	super replaceFrom: start to: stop with: replacement startingAt: repStart! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6494-DoubleByteArray-DoubleWordArray-LucianoEstebanNotarfrancesco-2024Jul05-12h12m-len.001.cs.st----!

'From Cuis7.1 [latest update: #6494] on 5 July 2024 at 12:32:46 pm'!

Smalltalk removeClassNamed: #ShortRunArray!

!classRemoval: #ShortRunArray stamp: 'Install-6495-Remove-ShortRunArray-JuanVuletich-2024Jul05-12h32m-jmv.001.cs.st 7/8/2024 12:00:18'!
ArrayedCollection variableWordSubclass: #ShortRunArray
	instanceVariableNames: ''
	classVariableNames: 'LastSaveOrder'
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6495-Remove-ShortRunArray-JuanVuletich-2024Jul05-12h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6494] on 5 July 2024 at 12:37:02 pm'!
!UnicodeString class methodsFor: 'services' stamp: 'jmv 7/5/2024 12:33:23' prior: 16994347!
                    utf16WordsFromUtf8: utf8ByteArray  includeBOM: wantsBOM
	"Convert the given string from UTF-8 to UTF-16.
	Include BOM if requested.
	https://en.wikipedia.org/wiki/UTF-16
	UnicodeString codePointsFromUtf8: #[36 226 130 172 240 144 144 183 240 164 173 162].
	(UnicodeString utf16WordsFromUtf8: #[36 226 130 172 240 144 144 183 240 164 173 162]
		includeBOM: false) asArray collect: [ :w | w hex ].
	(UnicodeString utf16WordsFromUtf8: #[36 226 130 172 240 144 144 183 240 164 173 162]
		includeBOM: true) asArray collect: [ :w | w hex ].
	"

	^DoubleByteArray streamContents: [ :strm | | s byteIndex n |
		wantsBOM ifTrue: [
			strm nextPut: 16rFEFF ].
		s := utf8ByteArray size.
		byteIndex := 1.
		[  byteIndex <= s ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: utf8ByteArray
				into: nil
				into: [ :codePoint |
					Character
						evaluate: [ :word | strm nextPut: word ]
						withUtf16WordsOf: codePoint ].
			byteIndex := byteIndex + n ]].! !

Smalltalk removeClassNamed: #ShortWordArray!

!classRemoval: #ShortWordArray stamp: 'Install-6496-UseDoubleByteArrayForUtf16-RemoveShortWordArray-JuanVuletich-2024Jul05-12h32m-jmv.001.cs.st 7/8/2024 12:00:18'!
ShortIntegerArray variableWordSubclass: #ShortWordArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6496-UseDoubleByteArrayForUtf16-RemoveShortWordArray-JuanVuletich-2024Jul05-12h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6496] on 5 July 2024 at 3:30:19 pm'!

WordArray removeSelector: #bytesPerElement!

!methodRemoval: WordArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 4!

ShortPointArray removeSelector: #bytesPerElement!

!methodRemoval: ShortPointArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement

	^ 4.
	!

ShortIntegerArray removeSelector: #bytesPerElement!

!methodRemoval: ShortIntegerArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	^2!

PointArray removeSelector: #bytesPerElement!

!methodRemoval: PointArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement

	^ 8!

Float64Array removeSelector: #bytesPerElement!

!methodRemoval: Float64Array #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	^8!

Float32PointArray removeSelector: #bytesPerElement!

!methodRemoval: Float32PointArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement

	^ 8!

DoubleWordArray removeSelector: #bytesPerElement!

!methodRemoval: DoubleWordArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 8!

DoubleByteArray removeSelector: #bytesPerElement!

!methodRemoval: DoubleByteArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 2!

ColorArray removeSelector: #bytesPerElement!

!methodRemoval: ColorArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement

	^4!

ByteArray removeSelector: #bytesPerElement!

!methodRemoval: ByteArray #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."
	^ 1!

ArrayedCollection removeSelector: #bytesPerElement!

!methodRemoval: ArrayedCollection #bytesPerElement stamp: 'Install-6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerElement
	^self class isBytes ifTrue: [ 1 ] ifFalse: [ 4 ].
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6497-bytesPerElement-remove-JuanVuletich-2024Jul05-15h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6496] on 5 July 2024 at 3:32:23 pm'!
!ArrayedCollection class methodsFor: 'aux' stamp: 'jmv 7/5/2024 15:24:22'!
            bytesPerBasicElement
	"Answer the number of bytes that each of my basic elements requires.
	In other words:
		self basicSize * self class bytesPerBasicElement
	should equal the space required on disk by my variable sized representation."
	self isBytes ifTrue: [ ^1 ].
	self isDoubleBytes ifTrue: [ ^2 ].
	self isWords ifTrue: [ ^4 ].
	self isDoubleWords ifTrue: [ ^8 ].
	^Smalltalk wordSize.
! !
!AffineTransformation class methodsFor: 'aux' stamp: 'jmv 7/5/2024 15:24:45'!
      bytesPerBasicElement
	"Answer the number of bytes that each of my basic elements requires.
	In other words:
		self basicSize * self class bytesPerBasicElement
	should equal the space required on disk by my variable sized representation."
	self isBytes ifTrue: [ ^1 ].
	self isDoubleBytes ifTrue: [ ^2 ].
	self isWords ifTrue: [ ^4 ].
	self isDoubleWords ifTrue: [ ^8 ].
	^Smalltalk wordSize.
! !
!ArrayedCollection methodsFor: 'objects from disk' stamp: 'jmv 7/5/2024 15:24:51' prior: 16783592!
                 byteSize
	^self basicSize * self class bytesPerBasicElement
! !
!AffineTransformation methodsFor: 'objects from disk' stamp: 'jmv 7/5/2024 15:24:55' prior: 16781164!
                          byteSize
	^self basicSize * self class bytesPerBasicElement! !
!SpaceTally methodsFor: 'fileOut' stamp: 'jmv 7/5/2024 15:25:46' prior: 16957863!
               printSpaceAnalysis: threshold on: aStream
	"Warning!!
	This is most likely wrong. It was written for 32 bit V3 images.
	Please take a look at #spaceForInstancesOf:
	Review both methods, and any other one that might be related.
	"
	"
	SpaceTally new printSpaceAnalysis: 1 on:(FileStream forceNewFileNamed: 'STspace.text')
	"
	"sd-This method should be rewrote to be more coherent within the rest of the class 
	ie using preAllocate and spaceForInstanceOf:"

	"If threshold > 0, then only those classes with more than that number
	of instances will be shown, and they will be sorted by total instance space.
	If threshold = 0, then all classes will appear, sorted by name."

	| codeSpace instCount instSpace totalCodeSpace totalInstCount totalInstSpace eltSize n totalPercent percent |
	Smalltalk garbageCollect.
	totalCodeSpace := totalInstCount := totalInstSpace := n := 0.
	results := OrderedCollection new.
	'Taking statistics...'
		displayProgressAt: Sensor mousePoint
		from: 0 to: Smalltalk classNames size
		during: [ :barBlock |
			Smalltalk allClassesDo: [ :cl |
				codeSpace := cl spaceUsed.
				barBlock value: (n := n+1).
				Smalltalk garbageCollectMost.
				instCount := cl instanceCount.
				instSpace := 8 * instCount. "Object headers""Warning: The 3rd header word for big objects is not considered!!"
				cl isVariable
					ifTrue: [
						eltSize := cl bytesPerBasicElement.
						cl allInstancesDo: [ :x |
							instSpace := instSpace + (x basicSize * eltSize)]]
					ifFalse: [instSpace := instSpace + (cl instSize * instCount * 4)].
				results add: (SpaceTallyItem analyzedClassName: cl name codeSize: codeSpace instanceCount:  instCount spaceForInstances: instSpace).
				totalCodeSpace := totalCodeSpace + codeSpace.
				totalInstCount := totalInstCount + instCount.
				totalInstSpace := totalInstSpace + instSpace]].
	totalPercent := 0.0.

	aStream timeStamp.
	aStream
		nextPutAll: ('Class' padded: #right to: 30 with: $ );
		nextPutAll: ('code space' padded: #left to: 12 with: $ );
		nextPutAll: ('# instances' padded: #left to: 12 with: $ );
		nextPutAll: ('inst space' padded: #left to: 12 with: $ );
		nextPutAll: ('percent' padded: #left to: 8 with: $ ); newLine.

	threshold > 0 ifTrue: [
		"If inst count threshold > 0, then sort by space"
		results := (results select: [:s | s instanceCount >= threshold or: [s spaceForInstances > (totalInstSpace // 500)]])
			asArray sort: [:s :s2 | s spaceForInstances > s2 spaceForInstances]].

	results do: [:s |
		aStream
			nextPutAll: (s analyzedClassName padded: #right to: 30 with: $ );
			nextPutAll: (s codeSize printString padded: #left to: 12 with: $ );
			nextPutAll: (s instanceCount printString padded: #left to: 12 with: $ );
			nextPutAll: (s spaceForInstances printString padded: #left to: 14 with: $ ).
		percent := s spaceForInstances*100.0/totalInstSpace.
		totalPercent := totalPercent + percent.
		percent >= 0.1 ifTrue: [
			percent printOn: aStream integerDigits: 6 padWith: $  fractionDigits: 1 positiveIndicator: nil ].
		aStream newLine].

	aStream
		newLine; nextPutAll: ('Total' padded: #right to: 30 with: $ );
		nextPutAll: (totalCodeSpace printString padded: #left to: 12 with: $ );
		nextPutAll: (totalInstCount printString padded: #left to: 12 with: $ );
		nextPutAll: (totalInstSpace printString padded: #left to: 14 with: $ ).
	totalPercent printOn: aStream integerDigits: 6 padWith: $  fractionDigits: 1 positiveIndicator: nil! !

AffineTransformation removeSelector: #bytesPerBasicElement!

!methodRemoval: AffineTransformation #bytesPerBasicElement stamp: 'Install-6498-better-bytesPerBasicElement-JuanVuletich-2024Jul05-15h30m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerBasicElement
	"Answer the number of bytes that each of my basic elements requires.
	In other words:
		self basicSize * self bytesPerBasicElement
	should equal the space required on disk by my variable sized representation."
	^self class isBytes ifTrue: [ 1 ] ifFalse: [ 4 ]!

ArrayedCollection removeSelector: #bytesPerBasicElement!

!methodRemoval: ArrayedCollection #bytesPerBasicElement stamp: 'Install-6498-better-bytesPerBasicElement-JuanVuletich-2024Jul05-15h30m-jmv.001.cs.st 7/8/2024 12:00:18'!
bytesPerBasicElement
	"Answer the number of bytes that each of my basic elements requires.
	In other words:
		self basicSize * self bytesPerBasicElement
	should equal the space required on disk by my variable sized representation."
	^self class isBytes ifTrue: [ 1 ] ifFalse: [ 4 ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6498-better-bytesPerBasicElement-JuanVuletich-2024Jul05-15h30m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6498] on 5 July 2024 at 3:34:11 pm'!
!Form methodsFor: 'private' stamp: 'jmv 7/5/2024 15:22:29' prior: 16869541!
                           hackBits64: bitThing
	"This method provides an initialization so that BitBlt may be used, eg, to 
	copy ByteArrays and other non-pointer objects efficiently.
	The resulting form looks 8 wide, 8 deep, and bitThing-size-in-words high."
	bitThing class isBits ifFalse: [self error: 'bitThing must be a non-pointer object'].
	depth := 8.
	width := 8.
	height := bitThing byteSize // width.
	bits := bitThing! !
!Form methodsFor: 'private' stamp: 'jmv 7/5/2024 15:22:23' prior: 16869558!
                             hackBits: bitThing
	"This method provides an initialization so that BitBlt may be used, eg, to 
	copy ByteArrays and other non-pointer objects efficiently.
	The resulting form looks 4 wide, 8 deep, and bitThing-size-in-words high."
	bitThing class isBits ifFalse: [self error: 'bitThing must be a non-pointer object'].
	depth := 8.
	width := 4.
	height := bitThing byteSize // width.
	bits := bitThing! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6499-cleaner-hackBits-JuanVuletich-2024Jul05-15h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6498] on 5 July 2024 at 3:34:33 pm'!
!Behavior methodsFor: 'testing' stamp: 'jmv 7/5/2024 15:06:58' prior: 16787065!
 isBytes
	"Answer whether the receiver's instances have indexed 8-bit integer slots.
	If true, #isBits is also true.
	The class format is
		<5 bits inst spec><16 bits inst size>
	where the 5-bit inst spec is
			0	= 0 sized objects (UndefinedObject True False et al)
			1	= non-indexable objects with inst vars (Point et al)
			2	= indexable objects with no inst vars (Array et al)
			3	= indexable objects with inst vars (MethodContext AdditionalMethodState et al)
			4	= weak indexable objects with inst vars (WeakArray et al)
			5	= weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
			6	= unused
			7	= immediates (SmallInteger, Character)
			8	= unused
			9	= 64-bit indexable
		10-11	= 32-bit indexable (Bitmap)
		12-15	= 16-bit indexable
		16-23	= 8-bit indexable
		24-31	= compiled methods (CompiledMethod)"

	^ self instSpec >= 16! !
!Behavior methodsFor: 'testing' stamp: 'jmv 7/5/2024 15:07:05' prior: 16787100!
                      isDoubleBytes
	"Answer whether the receiver's instances have indexed 16-bit integer slots.
	If true, #isBits is also true.
	The class format is
		<5 bits inst spec><16 bits inst size>
	where the 5-bit inst spec is
			0	= 0 sized objects (UndefinedObject True False et al)
			1	= non-indexable objects with inst vars (Point et al)
			2	= indexable objects with no inst vars (Array et al)
			3	= indexable objects with inst vars (MethodContext AdditionalMethodState et al)
			4	= weak indexable objects with inst vars (WeakArray et al)
			5	= weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
			6	= unused
			7	= immediates (SmallInteger, Character)
			8	= unused
			9	= 64-bit indexable
		10-11	= 32-bit indexable (Bitmap)
		12-15	= 16-bit indexable
		16-23	= 8-bit indexable
		24-31	= compiled methods (CompiledMethod)"

	^ self instSpec = 12! !
!Behavior methodsFor: 'testing' stamp: 'jmv 7/5/2024 15:07:09' prior: 16787129!
                isDoubleWords
	"Answer whether the receiver's instances have indexed 64-bit integer slots.
	If true, #isBits is also true.
	 The class format is
		<5 bits inst spec><16 bits inst size>
	 where the 5-bit inst spec is
			0	= 0 sized objects (UndefinedObject True False et al)
			1	= non-indexable objects with inst vars (Point et al)
			2	= indexable objects with no inst vars (Array et al)
			3	= indexable objects with inst vars (MethodContext AdditionalMethodState et al)
			4	= weak indexable objects with inst vars (WeakArray et al)
			5	= weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
			6	= unused
			7	= immediates (SmallInteger, Character)
			8	= unused
			9	= 64-bit indexable
		10-11	= 32-bit indexable (Bitmap)
		12-15	= 16-bit indexable
		16-23	= 8-bit indexable
		24-31	= compiled methods (CompiledMethod)"

	^ self instSpec = 9! !
!Behavior methodsFor: 'testing' stamp: 'jmv 7/5/2024 15:07:13' prior: 16787261!
               isWords
	"Answer whether the receiver's instances have indexed 32-bit integer slots.
	If true, #isBits is also true.
	The class format is
		<5 bits inst spec><16 bits inst size>
	where the 5-bit inst spec is
			0	= 0 sized objects (UndefinedObject True False et al)
			1	= non-indexable objects with inst vars (Point et al)
			2	= indexable objects with no inst vars (Array et al)
			3	= indexable objects with inst vars (MethodContext AdditionalMethodState et al)
			4	= weak indexable objects with inst vars (WeakArray et al)
			5	= weak non-indexable objects with inst vars (ephemerons) (Ephemeron)
			6	= unused
			7	= immediates (SmallInteger, Character)
			8	= unused
			9	= 64-bit indexable
		10-11	= 32-bit indexable (Bitmap)
		12-15	= 16-bit indexable
		16-23	= 8-bit indexable
		24-31	= compiled methods (CompiledMethod)"

	^ self instSpec = 10! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6500-NicerComments-JuanVuletich-2024Jul05-15h34m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6500] on 5 July 2024 at 3:48:33 pm'!
!DoubleByteArray commentStamp: '<historical>' prior: 50351411!
                DoubleByteArrays store 16-bit unsigned Integer values, between 0 and 16rFFFF, or signed integers in the 16bit range, i.e. between -16r8000 and 16r7FFF.!

DoubleByteArray variableDoubleByteSubclass: #Int16PointArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

!classDefinition: #Int16PointArray category: #'Collections-Arrayed' stamp: 'Install-6501-Int16PointArray-JuanVuletich-2024Jul05-15h47m-jmv.001.cs.st 7/8/2024 12:00:18'!
DoubleByteArray variableDoubleByteSubclass: #Int16PointArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!
!Int16PointArray commentStamp: '<historical>' prior: 0!
                    This class stores points that are in signed short integer range (e.g., -32767 <= value <= 32768).!
!PointArray commentStamp: '<historical>' prior: 16926195!
   This class stores 32bit Signed Integer points in place. It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations.!
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:00:17' overrides: 16913512!
 at: index
	"Return the element (e.g., point) at the given index"
	^(self signedAt: index * 2 - 1) @ (self signedAt: index * 2).
! !
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:00:28' overrides: 16913530!
                               at: index put: aPoint
	"Store the argument aPoint at the given index"
	self signedAt: index * 2 - 1 put: aPoint x asInteger.
	self signedAt: index * 2 put: aPoint y asInteger.
	^aPoint.
! !
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:00:42'!
                         at: index putX: aNumber
	"Store the argument aPoint at the given index"
	self signedAt: index * 2 - 1 put: aNumber asInteger.
! !
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:00:49'!
                     at: index putY: aNumber
	"Store the argument aPoint at the given index"
	self signedAt: index * 2 put: aNumber asInteger.
! !
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:01:31' overrides: 50351457!
     defaultElement
	"Return the default element of the receiver"
	^0@0.
! !
!Int16PointArray methodsFor: 'accessing' stamp: 'jmv 7/5/2024 15:01:59' overrides: 16783334!
                           size
	"Return the number of elements in the receiver"
	^ super size // 2.
! !
!Int16PointArray class methodsFor: 'instance creation' stamp: 'jmv 7/5/2024 15:38:22' overrides: 16783750!
       new: n
	^super new: n * 2.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6501-Int16PointArray-JuanVuletich-2024Jul05-15h47m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6500] on 5 July 2024 at 3:46:50 pm'!
!TrueTypeFontFamily class methodsFor: 'instance creation' stamp: 'jmv 7/5/2024 15:46:15' prior: 16990597!
                              readAllTrueTypeFontsIn: aDirectoryEntry
	"
	TrueTypeFontFamily readAllTrueTypeFontsIn: DirectoryEntry trueTypeFontsDirectory / 'DejaVu' / 'DejaVuSans'
	"
	| readFamilyNames |
	readFamilyNames := TTFontDescription readTrueTypeFontsIn: aDirectoryEntry.
	readFamilyNames do: [ :familyName |
		| ttDescriptions baseTTDescription family |
		ttDescriptions := TTFontDescription withFamilyName: familyName.
		baseTTDescription := ttDescriptions at: 0.
		family := TrueTypeFontFamily baseTTFontDescription: baseTTDescription.
		ttDescriptions do: [ :ttfDesc |
			ttfDesc emphasis = 0 ifFalse: [
				family addTTFontDescription: ttfDesc ]].
		FontFamily addFamily: family ].
	^readFamilyNames! !
!TTGlyph methodsFor: 'private-initialization' stamp: 'jmv 7/5/2024 15:36:46' prior: 16973797!
                   initializeContours: numContours with: endPoints
	"Initialize the contours for creation of the glyph."
	| startPt pts endPt |
	contours := Array new: numContours.
	startPt := -1.
	1 to: numContours do:[:i|
		endPt := endPoints at: i.
		pts := Int16PointArray new: endPt - startPt.
		contours at: i put: (TTContourConstruction on: pts).
		startPt := endPt].! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
TrueTypeFontFamily readAllTrueTypeFontsIn: DirectoryEntry trueTypeFontsDirectory / 'DejaVu' / 'DejaVuSans'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6502-User-Int16PointArray-not-ShortPointArray-JuanVuletich-2024Jul05-15h36m-jmv.003.cs.st----!

'From Cuis7.1 [latest update: #6502] on 5 July 2024 at 3:56:38 pm'!
!ArrayedCollection commentStamp: 'jmv 7/5/2024 15:56:07' prior: 16783287!
                          I am an abstract superclass for collections of elements with the same storage size. My subclasses typically allocate storage as fixed size blocks. 

Element access is by an integer index, from 1 to collection size. Usual accessors are #at: and #at:put:

They are declared as having indexable instances. See:
	#variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	#variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	#variableDoubleByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	#variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	#variableDoubleWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	#weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:

This means that they don't have instance variables. They are what is usually called an Array: a contiguous area of memory, that stores ObjectPointers (i.e. references to any objects), Bytes or 16, 32 or 64 bit Words. Each class is free to use that storarge to encode other kinds of data. See, for example, Float32Array Float64Array or DoubleByteArray. Therefore the size in bytes of each element is not constrained, although it is fixed for each class.

Instance size is fixed at creation. They can not grow or shrink.

For these reasons, there are many classes in the system that have Array like acessors (#at: and #at:put: with integer indexes) but are not in the ArrayedCollection hierarchy. These include OrderedCollection, Interval, Text, etc.!

Smalltalk removeClassNamed: #ShortIntegerArray!

!classRemoval: #ShortIntegerArray stamp: 'Install-6503-ShortIntegerArray-ShortPointArray-remove-JuanVuletich-2024Jul05-15h52m-jmv.001.cs.st 7/8/2024 12:00:20'!
ArrayedCollection variableWordSubclass: #ShortIntegerArray
	instanceVariableNames: ''
	classVariableNames: 'LastSaveOrder'
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

Smalltalk removeClassNamed: #ShortPointArray!

!classRemoval: #ShortPointArray stamp: 'Install-6503-ShortIntegerArray-ShortPointArray-remove-JuanVuletich-2024Jul05-15h52m-jmv.001.cs.st 7/8/2024 12:00:20'!
AnObsoleteShortIntegerArray variableWordSubclass: #ShortPointArray
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Arrayed'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6503-ShortIntegerArray-ShortPointArray-remove-JuanVuletich-2024Jul05-15h52m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6503] on 5 July 2024 at 5:26:42 pm'!
!String commentStamp: 'jmv 7/5/2024 17:07:37' prior: 16959339!
         A String is an indexed collection of Characters. In Cuis, Characters are represented in the Latin-1 (ISO 8859-1) encoding. Each character takes 1 byte.

String support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.

Here are a few useful methods to look at...
	String match:
	String contractTo:

String also inherits many useful methods from its hierarchy, such as
	SequenceableCollection ,
	SequenceableCollection copyReplaceAll:with:

See UnicodeString.!
!UniFileStream commentStamp: '<historical>' prior: 16991428!
             A new FileStream for Cuis.

Writes bytes. Binary content is stored verbatim. String is stored in UTF-8, but invalid UTF-8 sequences are interpreted as Latin-1 Characters (i.e. ISO-8859-1).!
!Character commentStamp: 'jmv 7/5/2024 17:11:09' prior: 16810598!
I represent a character by storing its associated Latin-1 code (ISO 8859-1). My instances are immediate, so that all occurrences of a character ($R, for example) are identical.!
!String methodsFor: 'converting' stamp: 'jmv 7/5/2024 17:09:33' prior: 16959814!
                             asCodePoints
	"Convert the given string to UTF-32 from the internal encoding: ISO Latin-1 (ISO 8859-1).
	Answer a WordArray."

	| inStream codePoint |
	^WordArray streamContents: [ :outStream |
		inStream := self readStream.
		[ inStream atEnd ] whileFalse: [
			codePoint := inStream next codePoint.
			outStream nextPut: codePoint ]]! !
!String methodsFor: 'converting' stamp: 'jmv 7/5/2024 17:09:13' prior: 16959848 overrides: 16813499!
        asUtf8Bytes
	"Convert the given string to UTF-8 from the internal encoding: ISO Latin-1 (ISO 8859-1)
	Answer a ByteArray with a valid UTF-8 sequence."

	| inStream codePoint |
	"Fast lane."
	self isAscii ifTrue: [ ^self asByteArray ].

	"Need to do UTF-8 encoding."
	^ByteArray streamContents: [ :outStream |
		inStream := self readStream.
		[ inStream atEnd ] whileFalse: [
			codePoint := inStream next codePoint.
			Character
				evaluate: [ :byte | outStream nextPut: byte ]
				withUtf8BytesOf: codePoint ]]! !
!String class methodsFor: 'instance creation' stamp: 'jmv 7/5/2024 17:09:53' prior: 16960143 overrides: 16814919!
          fromUtf8Bytes: aByteArray
	"Convert the given bytes from UTF-8 to the internal encoding: ISO Latin-1 (ISO 8859-1).
	Discard any code points that can not be represented.
	Use with caution. If in doubt, send this message to CharacterSequence instead."

	"Fast lane."
	(String isAscii: aByteArray) ifTrue: [
		^aByteArray asString ].

	"Need to do UTF-8 decoding."
	^self fromUtf8Bytes: aByteArray trimLastNull: false! !
!String class methodsFor: 'instance creation' stamp: 'jmv 7/5/2024 17:10:13' prior: 16960159!
fromUtf8Bytes: aByteArray trimLastNull: doTrimLastNullChar
	"Convert the given string from UTF-8 to the internal encoding: ISO Latin-1 (ISO 8859-1).
	Discard any code points that can not be represented."

	^String streamContents: [ :strm | | s byteIndex n |
		s := aByteArray size.
		byteIndex := 1.
		[  byteIndex <= s ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: aByteArray
				into: nil
				into: [ :codePoint |
					codePoint < 256 ifTrue: [
						strm nextPut: (Character codePoint: codePoint) ]].
			byteIndex := byteIndex + n
		].
		(doTrimLastNullChar and: [ aByteArray last = 0 ]) ifTrue: [
			strm position: strm position - 1 ]].! !
!UnicodeString methodsFor: 'comparing' stamp: 'jmv 7/5/2024 17:20:45' prior: 16993126!
           basicHash
	"Same hash value as a pure ASCII String.
	Some other reasonable hash value otherwise, but not the same as the one of the equivalent String if ISO-8859-1 non ASCII characters are present.
	Note: will answer different values for UnicodeString's  that are equal if #canonicalDecomposition is taken."
	bytes size >  ByteArray minSizeForHashQuick ifTrue: [
		^ bytes hashQuick: String hash ].
	^ByteArray
		hashBytes: bytes
		startingWith: String hash! !
!UnicodeString class methodsFor: 'instance creation' stamp: 'jmv 7/5/2024 17:12:28' prior: 16994106!
              fromBytesStream: aByteStream
	"Handle UTF-8 bytes, but convert invalid UTF-8 assuming it means ISO-8859-1.
	Argument can be, for example, a InflateStream."

	| utf8 codePointCount buffer readBytes leftover byteIndex n |
	buffer := ByteArray new: 10000.
	leftover := nil.
	codePointCount := 0.
	utf8 := ByteArray streamContents: [ :utf8Stream |
		[aByteStream atEnd] whileFalse: [ 
			readBytes := aByteStream nextInto: buffer.
			leftover ifNotNil: [
				readBytes := leftover, readBytes.
				leftover := nil ].
			byteIndex := 1.
			[ byteIndex <= (aByteStream atEnd
						ifFalse: [readBytes size-3] "To be sure we don't break a possible partially read multibyte code point."
						ifTrue: [readBytes size])   						"But do taks _all_ the bytes if they are the last ones."
			] whileTrue: [
				n := Character utf8BytesAndCodePointAt: byteIndex in: readBytes
					into: [ :byte1 :byte2 :byte3 :byte4 |
						utf8Stream nextPut: byte1.
						byte2 ifNotNil: [
							utf8Stream nextPut: byte2.
							byte3 ifNotNil: [
								utf8Stream nextPut: byte3.
								byte4 ifNotNil: [
									utf8Stream nextPut: byte4 ]]].
						codePointCount := codePointCount + 1]
					into: nil.
				byteIndex := byteIndex + n ].
			leftover := byteIndex > readBytes size ifFalse: [
				readBytes copyFrom: byteIndex to: readBytes size ].
		].
	].
	^UnicodeString fromUtf8Bytes: utf8 codePointCount: codePointCount.! !
!UniFileStream methodsFor: 'read, write, position' stamp: 'jmv 7/5/2024 17:13:55' prior: 16991866!
 nextUtf8BytesAndCodePointInto: bytesBlock into: codePointBlock
	"Find the next UTF-8 CodePoint from this file, assuming next byte is ISO 8859-1 if invalid UTF-8,
	or nil if at the end of the file."

	| bytesConsumed previousPosition |
	previousPosition := self position.
	bytesConsumed := 0.
	self nextByte ifNotNil: [ :byte1 |
		bytesConsumed := Character
			utf8BytesAndCodePointFor: byte1
			byte2: self nextByte
			byte3: self nextByte
			byte4: self nextByte
			into: bytesBlock
			into: codePointBlock ].
	self position: previousPosition + bytesConsumed.! !
!UniFileStream methodsFor: 'read, write, position' stamp: 'jmv 7/5/2024 17:16:29' prior: 16992008 overrides: 16927119!
                     skipBack
	| savePos try |
	savePos := self position.

	"Try going back one byte. If ASCII, then OK, we are done.
	If not, don't assume ISO-8859-1 so lightly!!"
	try := savePos-1.
	self position: try.
	self nextByte < 128 ifTrue: [
		^self position: try ].

	"Try going back two bytes. If doing #next leaves us at savePosition, we found a two byte CodePoint."
	try := try-1.
	self position: try.
	(self next notNil and: [ self position = savePos ]) ifTrue: [
		^self position: try ].

	"Try going back three bytes. If doing #next leaves us at savePosition, we found a three byte CodePoint."
	try := try-1.
	self position: try.
	(self next notNil and: [ self position = savePos ]) ifTrue: [
		^self position: try ].

	"Try going back four bytes. If doing #next leaves us at savePosition, we found a four byte CodePoint."
	try := try-1.
	self position: try.
	(self next notNil and: [ self position = savePos ]) ifTrue: [
		^self position: try ].

	"Havent found a valid UTF-8 sequence that ends just before savePos.
	It means back byte is an ISO-8859-1 Character"
	self position: savePos-1.
	! !
!UniFileStream methodsFor: 'accessing' stamp: 'jmv 7/5/2024 17:13:40' prior: 16992316 overrides: 16934973!
                contents
	"Return the full contents of the receiver. Do not close or otherwise touch the receiver.
	Return data in whatever mode the receiver is in (i.e. answer an instance of the appropriate class).
	Stream bytes as CodePoints (prefer UTF-8, but ISO-8859-1 if invalid UTF-8)."

	| savePos answer |
	savePos := self position.
	self position: 0.
	answer := self upToEnd.
	self position: savePos.
	^answer! !
!Character methodsFor: 'accessing' stamp: 'jmv 7/5/2024 17:16:46' prior: 16810606!
                      asciiValue
	"Answer the value of the receiver that represents its ANSI encoding.
	This is the same as ISO 8859-1 for the first 128 characters.
	Answer nil if out of range."

	| n |
	n := self codePoint.
	^ n < 128 ifTrue: [ n ].! !
!Character methodsFor: 'converting' stamp: 'jmv 7/5/2024 17:17:06' prior: 16810956!
    withDiacriticalMark: codePointOrCharacter
	"Answer the character resulting from adding a diacritical mark (accent) to a letter.
	If the result is unsupported in ISO 8859-1, answer the receiver.
	Supported diacritical marks are:
		U+0300 	COMBINING GRAVE ACCENT
		U+0301 	COMBINING ACUTE ACCENT
		U+0302 	COMBINING CIRCUMFLEX ACCENT
		U+0303 	COMBINING TILDE
		U+0308 	COMBINING DIAERESIS
		U+030A 	COMBINING RING ABOVE
		U+030C 	COMBINING CARON
		$a withDiacriticalMark: 16r301
		$N withDiacriticalMark: $~
		$Z withDiacriticalMark: $v
		
		invalid:
		$9 withDiacriticalMark:$v
		$A withDiacriticalMark: $v
		$√Å withDiacriticalMark: $v
		$A withDiacriticalMark: 1244
		"
	| answer i |
	i := ((codePointOrCharacter isNumber
			ifTrue: [#(16r300 16r301 16r302 16r303 16r308 16r30A 16r30C)]
			ifFalse: [#($` $' $^ $~ $" $¬∞ $v)]) indexOf: codePointOrCharacter
				) + 1.
	answer := (Character accentedLetters detect: [ :group | group first = self ] ifNone: [ ^self ]) at: i.
	^answer = $- ifFalse: [answer] ifTrue: [self]! !
!Character class methodsFor: 'class initialization' stamp: 'jmv 7/5/2024 17:16:39' prior: 16811012!
                            accentedLetters
	"Answer all letters with all possible accents (combining diacritical marks).
	Order of this array is:
		unaccented
		U+0300 	COMBINING GRAVE ACCENT
		U+0301 	COMBINING ACUTE ACCENT
		U+0302 	COMBINING CIRCUMFLEX ACCENT
		U+0303 	COMBINING TILDE
		U+0308 	COMBINING DIAERESIS
		U+030A 	COMBINING RING ABOVE
		U+030C 	COMBINING CARON
	Do not include letters that can't have any accent in ISO 8859-1
	Denote unsupported combinations (for example A with caron, or N with accute accent) by a $-"
self flag: #unicodeNeedsImprovement.
	^#(
		'A√Ä√Å√Ç√É√Ñ√Ö-'
		'a√†√°√¢√£√§√•-'
		'E√à√â√ä-√ã--'
		'e√®√©√™-√´--'
		'I√å√ç√é-√è--'
		'i√¨√≠√Æ-√Ø--'
		'O√í√ì√î√ï√ñ--'
		'o√≤√≥√¥√µ√∂--'
		'U√ô√ö√õ-√ú--'
		'u√π√∫√ª-√º--'
		'N---√ë---'
		'n---√±---'
		'S------≈†'
		's------≈°'
		'Y-√ù--≈∏--'
		'y-√Ω--√ø--'
		'Z------≈Ω'
		'z------≈æ'
	).! !
!Character class methodsFor: 'class initialization' stamp: 'jmv 7/5/2024 17:16:51' prior: 16811267!
             uppercaseLowercaseAndUnaccentedLetters
	"Answer all uppercase and lowercase letters in standard collation order.
	For accented characters, include the non-accented ones.
	Note that $√ü is 'LATIN SMALL LETTER SHARP S' and ISO 8859-1 doesn't have an uppercase version.
	Note: for $√ø, 'Latin Small Letter Y with diaeresis' the uppercase version is not Latin 1"
self flag: #unicodeNeedsImprovement.
	^#(
		'Aa' '√Ä√†Aa' '√Å√°Aa' '√Ç√¢Aa' '√É√£Aa' '√Ñ√§Aa' '√Ö√•Aa'
		'Bb' 'Cc' '√á√ß' 'Dd'
			'Ee' '√à√®Ee' '√â√©Ee' '√ä√™Ee' '√ã√´Ee'
		'Ff' 'Gg' 'Hh'
			'Ii' '√å√¨Ii' '√ç√≠Ii' '√é√ÆIi' '√è√ØIi'
		'Jj' 'Kk' 'Ll' 'Mm' 'Nn' '√ë√±'
			'Oo' '√í√≤Oo' '√ì√≥Oo' '√î√¥Oo' '√ï√µOo' '√ñ√∂Oo'
		'Pp' 'Qq' 'Rr'
			'Ss'
		'Tt'
			'Uu' '√ô√πUu' '√ö√∫Uu' '√õ√ªUu' '√ú√ºUu'
		'Vv' 'Ww' 'Xx'
			'Yy' '√ù√ΩYy' '√ø'
			'Zz'
		'√Ü√¶' '√ê√∞' '√ò√∏' '√û√æ' '√ü'
	).! !
!Character class methodsFor: 'converting' stamp: 'jmv 7/5/2024 17:21:06' prior: 16811609!
                           utf8BytesAndCodePointAt: byteIndex in: aByteArray into: bytesBlock into: codePointBlock
	"Find next UTF-8 encoded code point in utf8ByteArray starting at byte byteIndex.
	Evaluate bytesBlock (if not nil). Arguments are utf8 bytes for the codePoint found.
	Evaluate codePointBlock (if not nil) with codePoint found as argument.
	Answer the number of bytes that comprised this codePoint.
	If there is an invalid UTF-8 sequence, consider the first byte an ISO-8859-1 Character (i.e. Latin-1), and answer 1.
	Skip codePoint U+FEFF (BOM, unneededly added by Win clipboard). Still, answer the number of bytes of the BOM sequence, to allow senders to update an index in an iteration.
	See senders."

	| i s byte1 byte2 byte3 byte4 |
	
	s := aByteArray size.
	i := byteIndex.
	byte1 := aByteArray at: i.
	i := byteIndex+1.
	byte2 := i <= s ifTrue: [aByteArray at: i].
	i := byteIndex+2.
	byte3 := i <= s ifTrue: [aByteArray at: i].
	i := byteIndex+3.
	byte4 := i <= s ifTrue: [aByteArray at: i].

	^self
		utf8BytesAndCodePointFor: byte1
		byte2: byte2
		byte3: byte3
		byte4: byte4
		into: bytesBlock
		into: codePointBlock! !
!ByteStringReadAdaptor methodsFor: 'reading' stamp: 'jmv 7/5/2024 17:17:48' prior: 16801620 overrides: 16992565!
               next
	"Stream bytes as Latin-1 / ISO 8859-1 Characters.
	Disregard the fact that stream contents are most likely UTF-8.
	This is valid only if contents are ASCII, or Latin-1 / ISO-8859-1 byte Characters."

	stream nextByte ifNotNil: [ :byte |
		^Character codePoint: byte ].
	^nil! !
!ByteStringReadAdaptor methodsFor: 'reading' stamp: 'jmv 7/5/2024 17:18:08' prior: 16801632 overrides: 16992569!
                   next: n
	"Read n bytes, or until the end of the file.
	Answer them as seen from our perspective:
	Stream bytes as Latin-1 / ISO 8859-1 Characters.
	Disregard the fact that stream contents are most likely UTF-8.
	This is valid only if contents are ASCII, or Latin-1 / ISO-8859-1 byte Characters.
	Answer is a String (i.e. a byte oriented ISO 8859-1 String)"

	^(stream nextBytes: n) asString! !
!ByteStringReadAdaptor methodsFor: 'reading' stamp: 'jmv 7/5/2024 17:18:20' prior: 16801647 overrides: 16992575!
     streamUpToEnd
	"Answer the contents of our stream, from current postion to end, seen from our perspective:
	Stream bytes as Latin-1 / ISO 8859-1 Characters.
	Disregard the fact that stream contents are most likely UTF-8.
	This is valid only if contents are ASCII, or Latin-1 / ISO-8859-1 byte Characters.
	Leave stream at the end position."

	^stream bytesUpToEnd asString! !
!UnicodeReadAdaptor methodsFor: 'reading' stamp: 'jmv 7/5/2024 17:15:36' prior: 16992598 overrides: 16992569!
                          next: n
	"Read n Characters (i.e. n Unicode CodePoints), or until the end of the file.
	Answer them, from current postion to end, seen from our perspective:
	Stream bytes as CodePoints (prefer UTF-8, but answer ISO-8859-1 if invalid UTF-8).
	Answer is an instance of UnicodeString."

	| utf8 codePointCount |
	codePointCount := 0.
	utf8 := ByteArray streamContents: [ :utf8Stream |
		[ codePointCount = n or: [stream atEnd] ] whileFalse: [
			stream
				nextUtf8BytesAndCodePointInto: [ :byte1 :byte2 :byte3 :byte4 |
					utf8Stream nextPut: byte1.
					byte2 ifNotNil: [
						utf8Stream nextPut: byte2.
						byte3 ifNotNil: [
							utf8Stream nextPut: byte3.
							byte4 ifNotNil: [
								utf8Stream nextPut: byte4 ]]].
					codePointCount := codePointCount + 1]
				into: nil ]].
	^UnicodeString fromUtf8Bytes: utf8 codePointCount: codePointCount.! !
!UnicodeReadAdaptor methodsFor: 'reading' stamp: 'jmv 7/5/2024 17:15:43' prior: 16992628 overrides: 16992575!
                       streamUpToEnd
	"Answer the contents of our stream, from current postion to end, seen from our perspective:
	Stream bytes as CodePoints (prefer UTF-8, but answer ISO-8859-1 if invalid UTF-8).
	Leave stream at the end position."

	| utf8 codePointCount |
	codePointCount := 0.
	utf8 := ByteArray streamContents: [ :utf8Stream |
		[ stream atEnd ] whileFalse: [
			stream
				nextUtf8BytesAndCodePointInto: [ :byte1 :byte2 :byte3 :byte4 |
					utf8Stream nextPut: byte1.
					byte2 ifNotNil: [
						utf8Stream nextPut: byte2.
						byte3 ifNotNil: [
							utf8Stream nextPut: byte3.
							byte4 ifNotNil: [
								utf8Stream nextPut: byte4]]].
					codePointCount := codePointCount + 1]
				into: nil ]].
	^UnicodeString fromUtf8Bytes: utf8 codePointCount: codePointCount.! !
!Utilities class methodsFor: 'support windows' stamp: 'jmv 7/5/2024 17:18:56' prior: 16996095!
                        codeManagementInCuisContents
	^ self class firstCommentAt: #codeManagementInCuisContents

"
Managing your code in Cuis
==================

(https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CodeManagementInCuis.md)

Cuis includes tools and procedures for managing Smalltalk code. Code that is not part of the Cuis Core image itself, like applications, frameworks and libraries, should be stored in Packages. New code that are meant as patches, fixes or additions; that could eventually become part of Cuis itself, is not part of any Package, and is therefore automatically stored in ChangeSets.


Packages
-----------

Let's start with Packages. The Package implementation in Cuis is based on PackageInfo, the standard way to specify packages in Squeak and its derivatives, and used, for example, by Monticello. It uses Package names to specify prefixes for Class and Method categories. Classes and Methods whose categories match a Package's prefixes belong in that Package. More details about how PackageInfo decides what code belongs in a package are available at http://wiki.squeak.org/squeak/3329 .

To install packages (.pck.st files) in Cuis, use the FileList, navigate to the appropriate directory (on disk, or in a GitHub repository, etc), select the package file and click on [Install Package].

Cuis includes a tool to manage installed Packages. It is at World / Open / Installed Packages. To create a new package (instead of installing an existing one from a file), click on [Create Package] This creates a new package, and associates with it all the existing code in the image that matches the package name.

The operations available on installed or newly created packages are:

[Save] Saves a package on the file system. Overwrites any existing version. It is good to save the package from time to time, to reduce the risk of losing code.

[Delete] Removes the Package instance from the image. Does not remove any code. This means, effectively, to merge back the code into Cuis.

[Browse unsaved Changes] This opens a ChangeSorter on the ChangeSet that captures all the changes done to the Package since it was last saved. Therefore it shows the work done on the package that would be lost if the package is not saved.

[Browse package code] This opens a Class Browser that only shows the code that belongs in the package. This is useful for working on a package, or studying it.

[Add requirement] This opens a select list of loaded packages.  Each package provides a Feature.  You can CANCEL, require the current Cuis base version (at a minimum) or require any of the packages on the list.  Required packages will be loaded before the selected package (Feature require: #'your-package'.).  When a package is selected, the lower browser pane shows its requirents, which may be deleted.  Don't forget to Save your package after adding or deleting  requirements!!

The tool shows, for each Package, the name, whether it is dirty (has unsaved changes) and the file it was installed from / saved to.

Handling Packages like this, Cuis behaves as a sort of document editor (like, for example a regular text editor) whose documents are Package files (.pck.st). Cuis doesn't handle Package versions, ancestries, etc. If versioning of Packages is desired, the best is to use a versioning file repository, such as Git or Mercurial. The recommendation is to use a GitHub repository with a name beginning with 'Cuis-Smalltalk-', so it will be easy for anybody to find it. Cuis Package files are uncompressed, use Lf (ASCII 10) as newLine, and are encoded in UTF-8. This means they are Git friendly, and Git/GitHub can diff and merge them, and browse them with syntax highlighting.

This is not unlike using Git or GitHub with a file-based development environment such as Eclipse or a text editor. Like Cuis, these tools don't do version handling themselves, they just load and save files; and let Git do its magic.


Changes to the Cuis base image
-----------------------------------------

The way ChangeSets are created and managed in Cuis is different from Squeak. This was done to make ChangeSets a good way to manage changes to the base Cuis Core image, while keeping code in Packages out of the way, so they don't get mixed together.

What is not in a Package belongs (at least temporarily) to the Cuis Core image. Such code is automatically captured in a ChangeSet. The ChangeSet for Core changes is created automatically and named like '1243-CuisCore-JuanVuletich-2012Apr03-22h50m'. The number at the beginning is the next number for the Cuis update stream, and is provided only as a suggestion. The 'CuisCore' part is to reveal that the code belongs in the base image and not in some package. Then we have author name and date / time of creation. These ChangeSets are created automatically. There is no longer a way to manually create them, or make them 'current' or 'active'. It is best to rename them, replacing 'CuisCore' with some meaningful name. These ChangeSets will not capture any code that belongs in a Package.

Opening a Change Sorter will show the CuisCore change set. This is useful, for example, to check that no code that was intended for a Package ends here by mistake (because of the wrong class or method category). But it is also useful when doing changes to the base system. Now, we can do changes both to the base system and to a number of packages, all in the same session, without having to be careful about selecting the proper change set before saving a method: The code is automatically added to the proper Package or ChangeSet, simply following the class or method category. Gone are the days of messed up change sets and lost code!!

When the changes to the base system are complete, it is a good time to review the CuisCore change set and, maybe remove from it changes that we don't want to keep (for example, experiments, halts, etc). Then, just do right click / File out and remove. This saves the ChangeSet on disk. It also removes it from the ChangeSorter (but it doesn't remove any code). This is good, because the next changes done will end in a new CuisCore change set, and there's no risk of having undesired changes in the old one. As changes to the base image progress, and several CuisCore ChangeSets are saved to disk, these numbered files are created in sequence. They will be ready to be loaded back in proper order in a fresh Cuis image, or to be sent to Cuis maintainers for integration in the update stream and in next releases of Cuis.

Installing ChangeSet files into Cuis

[Install] loads all the code in the file into a separate, new ChangeSet object (viewable in the ChangeSorter tool). This is appropriate for loading Cuis updates, or other code that we are not authoring, as it doesn't add new items (class or method definitions) to the current ChangeSet used to record the changes we make to Cuis. Usually any ChangeSets should be installed before doing changes to the image. The reason is that an installed ChangeSet could overwrite changes done by you, or packages you have installed. If this is the case, the affected packages would appear as dirty, and your change set would include any installed changes (that don't belong in a package). Be careful when saving packages or change sets if this was the case!!

Cherry picking individual changes from ChangeSet or Package files
-----------------------------------------------------------------------------------

Additionally, you can study a Package (.pck.st) or ChangeSet (.cs) file without installing it. To do this, use the FileList, navigate to the appropriate directory, select the file and click on [Contents]. You will get a ChangeList tool with the contents of the file. You can select each change, to see the code, and compare it with what is currently loaded in the system (if that is the case). You can also various filters on the list. See the right-click menu. Once you have one or more changes selected, you can do right-click / 'fileIn selections'. Changes that belong in a package that is already there will be captured by that package, that will now be dirty. Code that doesn't belong in a loaded package will be included in the current ChangeSet, together with code you save in a Browser. A new Package or ChangeSet will not be created. This is especially useful when reviewing code, or when we are combining code from more than one source into a single ChangeSet or Package.
"

"
Utilities codeManagementInCuisContents edit
"! !
!Utilities class methodsFor: 'support windows' stamp: 'jmv 7/5/2024 17:24:58' prior: 16996364!
                cuisAndGitHubContents
	^ self class firstCommentAt: #cuisAndGitHubContents

"
Using Git and GitHub to host and manage Cuis code
===================================

(https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisAndGitHub.md)

Cuis includes tools and procedures for managing Smalltalk code. Central to this is the management of Packages and Package Files (.pck). But Cuis doesn't do version control. Instead, we suggest using external VCS tools.  In particular, we're using [GitHub](http://www.github.com/), and the first project we're hosting there is [StyledTextEditor](https://github.com/bpieber/Cuis-StyledTextEditor).

The guiding principle is to *not duplicate concepts and behavior*. As we're using an external tool (Git) for version control, then we use it as it meant to be used. Most people use Git for version control and a file based IDE such as Eclipse for development. Such IDEs don't do version control themselves. It is done by Git. Do the same: do not include package version control in Cuis. This is a departure from the Monticello /Git integration (smallsource and MonticelloFileTree) by Otto Behrens, Dale Henrichs, etc.

We use GitHub to host, version, diff and merge external packages (.pck files), i.e. code that is maintained independently and outside Cuis.

Package files need to be simple text files. Cuis code files are encoded in UTF-8, and use the LF (ascii code 10) newline convention. This allows Git/GitHub to diff versions, and merge branches.

Each GitHub repository has one set of users and permissions. Each GitHub repository has one state (Git commits repositories, not individual files). Branch and merges are done on the whole repository and not on individual files. Therefore, we need a separate GitHub repository for each project, i.e., for each package or set of closely related packages that are always loaded and maintained together as a whole.

Development process for External Packages
--------------------------------------------------------

This is the suggested procedure for developing external packages. Usually do this every day.

* Start with a standard (i.e. fresh) Cuis image. Never save the image.

* Set up Git repositories for external packages (if not already done)

* Install packages from Git repositories.

* Develop. Modify and/or create packages.

* Save own packages (to Git repositories).

* Git add / commit / push as appropriate.

* Fileout changes that are not part of any package. These are automatically captured in numbered changesets, separated from changes to packages.

* Exit the image. Usually without saving.
"

"
Utilities cuisAndGitHubContents edit
"! !
!Utilities class methodsFor: 'support windows' stamp: 'jmv 7/5/2024 17:22:58' prior: 16996479!
                 usefulExpressionsContents
	^ self class firstCommentAt: #usefulExpressionsContents

"'Querying the system'.
Smalltalk aboutThisSystem.
SystemVersion current.
SystemDictionary copyright.
SystemOrganization categories.
SystemOrganization categoryOfElement: #Morph.
Editor organization categoryOfElement: #clearSelection.
Smalltalk allUnSentMessages.
Smalltalk browseAllUnSentMessages.
Smalltalk browseAllUnimplementedCalls.


'find selectors
Remember you can also do World / Open / Method Names'.
Symbol selectorsContaining: 'rsCon'.
'Cuis uses ISO 8859-1 for String and UTF8 UnicodeString, Clipboard and Files'.
Symbol selectorsContaining: 'iso8859'.
Symbol selectorsContaining: 'utf8'. 


'Example of loading a package with requirements on other packages'.
Feature require: 'SignalProcessing'.


'To create a *.pck.st file for each category with tests and  then to remove these categories'.
(SystemOrganization categoriesMatching: '*Test*')
	do: [ :cat | (CodePackage named: cat
				createIfAbsent: true
				registerIfNew: false) save.
			SystemOrganization removeSystemCategory: cat.
	].


'List of CodePackages which are not saved and save them in one go'.
'Save dirty packages:' print.
CodePackage installedPackages do: [ :each |
	each hasUnsavedChanges ifTrue: [
		each name print.
		each save ]].


'Globals'.
Cursor wait showWhile: [Sensor waitButton].
Smalltalk  inspectGlobals.


'Source code management'.
ChangeList browseRecentLog.


'Space and object count statistics'.
Smalltalk bytesLeft printStringWithCommas.
Symbol instanceCount.


'Anaylize memory usage by class'.
(String streamContents: [ :strm | SpaceTally new printSpaceAnalysis: 1 on: strm ]) edit.


'Remove a lot of stuff and reduce the image'.
Smalltalk reduceCuis.


'Performance measurement'.
Time millisecondsToRun: [Smalltalk allCallsOn: #asOop].
MessageTally spyOn: [Smalltalk allCallsOn: #asOop].
[Smalltalk allCallsOn: #asOop] bench.


'Opening a Text editor'.
'Something' editLabel: 'Title'.


'Opening a workspace'.
Workspace new
		contents: '';
		openLabel: 'Workspace'.

'Morphic stuff'.
LayoutMorph example1.				'Resize it'.
LayoutMorph example11.			'Resize it. Play with separators.'.
LayoutMorph example2.				'Resize it'.
LayoutMorph example3.				'Resize it'.
LayoutMorph example13.			'Resize it. Play with separators.'.
LayoutMorph example6.				'Resize it'.
LayoutMorph launcherExample.		'Have a Transcript open to use this'.

'Code authors - Potentially slow!!'.
Smalltalk knownInitialsAndNames do: [ :each | each print ].
Smalltalk allContributors do: [ :each | each print ].
Smalltalk contributionsOf: 'KenD'"! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6504-CorrectObsoleteReferencesTo-ISO8859-15-JuanVuletich-2024Jul05-17h07m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6504] on 7 July 2024 at 3:41:55 pm'!
!String class methodsFor: 'services' stamp: 'jmv 7/7/2024 15:41:39' prior: 16960471!
             is: aStringOrByteArray equalTo: another
	"Take advantage of String primitive for comparing, for example, ByteArrays"

	^ (self compare: aStringOrByteArray with: another collated: self caseSensitiveOrder) = 2! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6505-Typo-JuanVuletich-2024Jul07-15h41m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6452] on 5 July 2024 at 9:36:39 am'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6506-Fraction-categorization-AndresValloud-2024Jul05-09h34m-sqr.001.cs.st----!

'From Cuis7.1 [latest update: #6506] on 7 July 2024 at 4:29:24 pm'!
!SystemDictionary methodsFor: 'miscellaneous' stamp: 'jmv 7/7/2024 16:29:05' prior: 16964052!
                               getCurrentWorkingDirectory
	"Do our best effort to answer the path from wich Cuis was started.

	Smalltalk getCurrentWorkingDirectory


On Linux, starting as
	juan@juandebian:/media/sf_SharedWithLinux/testPayload03/payload$      coglinux/bin/squeak        Cuis-Smalltalk-Dev-master/Cuis4.2-2367.image
we get:
	Smalltalk vmPath                       					'/media/sf_SharedWithLinux/testPayload03/payload/coglinux/lib/squeak/4.5-3370/'
	Smalltalk imagePath   							'/media/sf_SharedWithLinux/testPayload03/payload/Cuis-Smalltalk-Dev-master'
	Smalltalk primGetCurrentWorkingDirectoryUnix    '/media/sf_SharedWithLinux/testPayload03/payload'
	Smalltalk getCurrentWorkingDirectory 			'/media/sf_SharedWithLinux/testPayload03/payload'


On Windows 7, starting as
	C:\Users\Juan-Tuerca\SharedWithLinux\testPayload03\payload>        cogwin\squeak.exe            Cuis-Smalltalk-Dev-master/Cuis4.2-2367.image
we get:
	Smalltalk vmPath    										'C:\Users\Juan-Tuerca\SharedWithLinux\testPayload03\payload\cogwin\'
	Smalltalk imagePath   									'C:\Users\Juan-Tuerca\SharedWithLinux\testPayload03\payload\Cuis-Smalltalk-Dev-master'
	Smalltalk primGetCurrentWorkingDirectoryWindows       	'C:\Users\Juan-Tuerca\SharedWithLinux\testPayload03\payload\Cuis-Smalltalk-Dev-master'
	Smalltalk getCurrentWorkingDirectory  					'C:\Users\Juan-Tuerca\SharedWithLinux\testPayload03\payload'

	Easy on Unix. Harder on Windows, because #primGetCurrentWorkingDirectoryWindows insists on lying and answers the directory containing the image.
	"
	
	| fullImagePathName imageSpecCmdLineArgument  |

	"Easy on Unix"
	 self primGetCurrentWorkingDirectoryUnix ifNotNil: [ :utf8BytesInAStringInstance | | answer |
		"It seems on Mac, when dropping image on VM, we get '/', that is not really meaningful"
		(utf8BytesInAStringInstance = '/' and: [ self platformName = 'Mac OS' ]) ifFalse: [
			"Primitive answers an instance of String containing the UTF-8 bytes. If not pure ASCII,
			contents are invalid!! Convert it ASAP into a reasonable ByteArray + UnicodeString."
			answer := utf8BytesInAStringInstance.
			(String isAscii: answer) ifFalse: [
				ByteArray adoptInstance: answer.
				answer := UnicodeString fromUtf8Bytes: answer ].
			^ answer ]].

	"On Windows, extract shell path if image is in subtree"
	fullImagePathName := self imageName.

	"Primitive answers an instance of String containing the UTF-8 bytes. If not pure ASCII,
	contents are invalid!! Convert it ASAP into a reasonable ByteArray + UnicodeString."
	imageSpecCmdLineArgument := self getSystemAttribute: 1.
	"May be nil, for instance, when running in SqueakJS."
	imageSpecCmdLineArgument notNil ifTrue: [
		(String isAscii: imageSpecCmdLineArgument) ifFalse: [
			ByteArray adoptInstance: imageSpecCmdLineArgument.
			imageSpecCmdLineArgument := UnicodeString fromUtf8Bytes: imageSpecCmdLineArgument ].

		(imageSpecCmdLineArgument size < fullImagePathName size and: [			
			"Not if they are equal, as if they are both fully qualified (absolute) paths"
			fullImagePathName asPathTokens endsWith: imageSpecCmdLineArgument asPathTokens]) ifTrue: [
				^ fullImagePathName copyFrom: 1 to: fullImagePathName size - imageSpecCmdLineArgument size - 1 ]].

	"If we don't know better, answer nil. If appropriate, senders do:
		Smalltalk getCurrentWorkingDirectory ifNil: [ Smalltalk imagePath ]
	to have, at least, some valid directory
	"
	^ nil! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
PreferenceSet setDefaultFont: 'DejaVu Sans'.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6507-SysAttr1-mayBeNilOnSqueakJS-JuanVuletich-2024Jul07-16h29m-jmv.001.cs.st----!

		Preferences at: #saveReleaseOptionsInWorldMenu put: true.!

----QUIT----(8 July 2024 12:00:51) Cuis7.1-6507-32.image priorSource: 522889!

----STARTUP---- (18 July 2024 14:51:44) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6507-32.image!


'From Cuis6.3 [latest update: #6350] on 8 July 2024 at 12:42:26 pm'!
!LiteralVariableNode methodsFor: 'testing' stamp: 'HAW 7/8/2024 10:59:20'!
         isReferencingClassVariable
	
	"If it is not a global, I assume it is a class var"
	^self isReferencingGlobal not and: [ self isUndeclared not ]! !
!LiteralVariableNode methodsFor: 'testing' stamp: 'HAW 7/8/2024 11:04:22' overrides: 16997091!
              isUndeclared
	
	^Undeclared includesKey: name ! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 11:57:38'!
                       assertHasExtractableBraceElements: aBraceNode asPartOf: methodNode at: trimmedIntervalToReplace   
	
	aBraceNode elementsDo: [ :anElementNode | self assertIsValidToExtract: anElementNode asPartOf: methodNode at: trimmedIntervalToReplace ]! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:18:11'!
                       assertIsNotLeftAssigment: aNode asPartOf: methodNode at: intervalToReplace  
	
	methodNode nodesDo: [ :traversedNode | 
		(self isAssignment: traversedNode and: aNode leftPartIn: methodNode at: intervalToReplace)
			ifTrue: [ self signalInvalidExpressionToExtractAsParameter ]]! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:00:51'!
                assertIsValidAssigmentToExtract: anAssignmentNode asPartOf: methodNode at: intervalToReplace   
	
	self assertIsValidToExtract: anAssignmentNode variable asPartOf: methodNode at: intervalToReplace.
	self assertIsValidToExtract: anAssignmentNode value asPartOf: methodNode at: intervalToReplace ! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:00:39'!
                               assertIsValidBlockNodeToExtract: aBlockNode asPartOf: methodNode at: intervalToReplace   
	
	aBlockNode block statementsDo: [ :aStatement | self assertIsValidToExtract: aStatement asPartOf: methodNode at: intervalToReplace ]! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:00:18'!
     assertIsValidLiteralNodeToExtract: aNode asPartOf: methodNode at: intervalToReplace  

	aNode isBraceNode ifTrue: [ ^self assertHasExtractableBraceElements: aNode asPartOf: methodNode at: intervalToReplace].

	^ (aNode isLiteralNode 
		or: [ aNode isTruePseudoVariable
		or: [ aNode isFalsePseudoVariable 
		or: [ aNode isNilPseudoVariable 
		or: [ (aNode isLiteralVariableNode and: [ 
				aNode isReferencingBehavior 
					or: [ aNode isReferencingGlobal
					or: [ aNode isReferencingClassVariable ]]])]]]]) ifFalse: [ self signalInvalidExpressionToExtractAsParameter ]! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:00:27'!
          assertIsValidMessageNodeToExtract: aNode asPartOf: methodNode at: intervalToReplace  

	self assertIsValidToExtract: aNode receiver asPartOf: methodNode at: intervalToReplace.
	aNode arguments do: [ :anArgument | self assertIsValidToExtract: anArgument asPartOf: methodNode at: intervalToReplace ]! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:14:47'!
                            assertIsValidToExtract: aNode asPartOf: methodNode at: intervalToReplace  

	aNode isMessageNode ifTrue: [ ^self assertIsValidMessageNodeToExtract: aNode asPartOf: methodNode at: intervalToReplace].
	aNode isBlockNode ifTrue: [ ^self assertIsValidBlockNodeToExtract: aNode asPartOf: methodNode at: intervalToReplace ].
	aNode isTempOrArg ifTrue: [  ^self assertIsValidTempOrArgNodeToExtract: aNode ].
	aNode isAssignmentToTemporary ifTrue: [ ^self assertIsValidAssigmentToExtract: aNode asPartOf: methodNode at: intervalToReplace ].
	aNode isInstanceVariableNode ifTrue: [ ^self assertIsNotLeftAssigment: aNode asPartOf: methodNode at: intervalToReplace ].
	self assertIsValidLiteralNodeToExtract: aNode asPartOf: methodNode at: intervalToReplace ! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 12:19:25'!
                          isAssignment: aPotentialAssigmentNode and: aPotentialLeftAssigment leftPartIn: methodNode at: interval

	^ aPotentialAssigmentNode isAssignmentNode 
		and: [ aPotentialLeftAssigment = aPotentialAssigmentNode variable 
		and: [ | assigmentRange |
			assigmentRange := (methodNode completeSourceRangesOf: aPotentialAssigmentNode ifAbsent: [Set with: (0 to: 0)]) anyOne.
			assigmentRange includesAllOf: interval ]]! !
!AssignmentNode methodsFor: 'testing' stamp: 'HAW 7/8/2024 11:31:47' prior: 16784108 overrides: 16918366!
                      isAssignmentToTemporary

	^ variable isTemp ! !
!ExtractAsParameter class methodsFor: 'pre-conditions' stamp: 'HAW 7/8/2024 11:55:21' prior: 16856893!
         assertCanExtractFrom: anInterval for: sourceCode methodNode: methodNode last: lastIntervalsAndNode

	| trimmedIntervalToReplace node intervalToReplace |

	ExtractMethodNewMethod assertIntervalToExtractIsNotEmpty: anInterval.
	ExtractMethodNewMethod assert: anInterval isWithinBoundsOf: sourceCode.
	
	intervalToReplace := self removeDotsAt: anInterval in: sourceCode.
	trimmedIntervalToReplace := intervalToReplace asSourceCodeInterval trimToMatchExpressionOn: sourceCode.
	node := self nodeToExtractFrom: methodNode at: trimmedIntervalToReplace or: intervalToReplace.
	self assertIsValidToExtract: node asPartOf: methodNode at: trimmedIntervalToReplace.
	lastIntervalsAndNode ifNotNil: [ self assertIsSameExpressionToExtractFrom: node to: lastIntervalsAndNode third ].
	
	^{ intervalToReplace. trimmedIntervalToReplace. node }! !

ExtractAsParameter class removeSelector: #assertIsValidBlockNodeToExtract:!

!methodRemoval: ExtractAsParameter class #assertIsValidBlockNodeToExtract: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertIsValidBlockNodeToExtract: aBlockNode 
	
	aBlockNode block statementsDo: [ :aStatement | self assertIsValidToExtract: aStatement ]!

ExtractAsParameter class removeSelector: #assertIsValidMessageNodeToExtract:!

!methodRemoval: ExtractAsParameter class #assertIsValidMessageNodeToExtract: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertIsValidMessageNodeToExtract: aNode

	self assertIsValidToExtract: aNode receiver.
	aNode arguments do: [ :anArgument | self assertIsValidToExtract: anArgument ]!

ExtractAsParameter class removeSelector: #assertHasExtractableBraceElements:!

!methodRemoval: ExtractAsParameter class #assertHasExtractableBraceElements: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertHasExtractableBraceElements: aBraceNode 
	
	aBraceNode elementsDo: [ :anElementNode | self assertIsValidToExtract: anElementNode ]!

ExtractAsParameter class removeSelector: #assertIsValidLiteralNodeToExtract:!

!methodRemoval: ExtractAsParameter class #assertIsValidLiteralNodeToExtract: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertIsValidLiteralNodeToExtract: aNode

	aNode isBraceNode ifTrue: [ ^self assertHasExtractableBraceElements: aNode].

	^ (aNode isLiteralNode 
		or: [ aNode isTruePseudoVariable
		or: [ aNode isFalsePseudoVariable 
		or: [ aNode isNilPseudoVariable 
		or: [ (aNode isLiteralVariableNode and: [ 
				aNode isReferencingBehavior or: [ aNode isReferencingGlobal ]])]]]]) ifFalse: [ self signalInvalidExpressionToExtractAsParameter ]!

ExtractAsParameter class removeSelector: #assertIsValidAssigmentToExtract:!

!methodRemoval: ExtractAsParameter class #assertIsValidAssigmentToExtract: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertIsValidAssigmentToExtract: anAssignmentNode 
	
	self assertIsValidToExtract: anAssignmentNode variable.
	self assertIsValidToExtract: anAssignmentNode value !

ExtractAsParameter class removeSelector: #assertIsValidToExtract:!

!methodRemoval: ExtractAsParameter class #assertIsValidToExtract: stamp: 'Install-6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st 7/18/2024 14:51:44'!
assertIsValidToExtract: aNode

	aNode isMessageNode ifTrue: [ ^self assertIsValidMessageNodeToExtract: aNode].
	aNode isBlockNode ifTrue: [ ^self assertIsValidBlockNodeToExtract: aNode ].
	aNode isTempOrArg ifTrue: [  ^self assertIsValidTempOrArgNodeToExtract: aNode ].
	aNode isAssignmentToTemporary ifTrue: [ ^self assertIsValidAssigmentToExtract: aNode ].
	self assertIsValidLiteralNodeToExtract: aNode!

ExtractAsParameter class removeSelector: #assertIsValidMessageNodeToExtract:asPartOf:!

ExtractAsParameter class removeSelector: #assertIsValidBlockNodeToExtract:asPartOf:!

ExtractAsParameter class removeSelector: #assertIsNotLeftAssigment:asPartOf:!

ExtractAsParameter class removeSelector: #assertIsValidLiteralNodeToExtract:asPartOf:!

ExtractAsParameter class removeSelector: #assertHasExtractableBraceElements:asPartOf:!

ExtractAsParameter class removeSelector: #assertIsValidAssigmentToExtract:asPartOf:!

ExtractAsParameter class removeSelector: #assertIsValidToExtract:asPartOf:!

ParseNode removeSelector: #isAssignmentToInstanceVariable!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6508-ExtractAsParameterSupportForInstVarAndClassVar-HernanWilkinson-2024Jul08-09h22m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6507] on 8 July 2024 at 4:22:40 pm'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/8/2024 16:19:56'!
                              saveAs: newName
	"Save the image under newName. Don't quit.
	See senders."

	(self fullNameForImageNamed: newName) = self imageName
		ifTrue: [
			"If saving over the our own image file, call #saveImage instead."
			self saveImage ]
		ifFalse: [
			"This method requires saving on a different file."
			self saveAs: newName clearAllClassState: false ].! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/8/2024 16:16:02' prior: 16966027!
                          saveAs
	"Put up the 'saveAs' prompt, obtain a name, and save the image  under that new name."

	self request: 'New file name?' initialAnswer: self imageName asFullFileEntry name do: [ :newName |
		(
			"Either both files are new,"
			((self fullNameForImageNamed: newName) asFullFileEntry exists not
				and: [(self fullNameForChangesNamed: newName) asFullFileEntry exists not])
			"Or user confirms overwriting them."
			or: [self confirm: ('{1} already exists. Overwrite?' format: {newName})]
		)
			ifTrue: [
				self saveAs: newName ]].
! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/8/2024 16:10:17' prior: 16966045!
                             saveAs: newName clearAllClassState: clearAllStateFlag
	"Save the image under a new name. Don't quit.
	Note: newName must be different from current name.
	See senders."

	| newChangesName |
	self currentChangesName ifNotNil: [ :oldChangesName |
		self closeSourceFiles. "so copying the changes file will always work"
		newChangesName := self fullNameForChangesNamed: newName.
		FileIOAccessor default copy: oldChangesName asFullFileEntry to: newChangesName asFullFileEntry.
		ChangesInitialFileSize ifNotNil: [
			oldChangesName asFullFileEntry appendStreamDo: [ :strm | strm truncate: ChangesInitialFileSize ]]].

	ChangeSet zapAllChangeSets.
	self 
		changeImageNameTo: (self fullNameForImageNamed: newName);
		closeSourceFiles; openSourceFiles;  "so SNAPSHOT appears in new changes file"
		snapshot: true andQuit: false embedded: false clearAllClassState: clearAllStateFlag.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6509-FixBrokenChangesOn-SaveAs-overwritingImage-JuanVuletich-2024Jul08-16h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6509] on 9 July 2024 at 6:26:22 pm'!
!UnicodeString methodsFor: 'private' stamp: 'jmv 7/9/2024 18:17:29' prior: 16993650!
       computeCountAndIndex
	self isEmpty ifTrue: [
		count := 0.
		strideIndex := #[].
		^ self ].
	"the number of characters cannot be larger than the byte size"
	bytes size <= self stride
		ifTrue: [ self computeCountNoIndex ]
		ifFalse: [ self computeCountAndIndexFull ]! !
!UnicodeString methodsFor: 'private' stamp: 'jmv 7/9/2024 18:20:35' prior: 16993661!
                            computeCountAndIndexFull
	| strideIndexClass byteIndex |
	count := 0.
	strideIndexClass := bytes size < 256
		ifTrue: [ ByteArray ]
		ifFalse: [ bytes size < 65536
			ifTrue: [ DoubleByteArray ]
			ifFalse: [ bytes size < 4294967296
				ifTrue: [ WordArray ]
				ifFalse: [DoubleWordArray ]]].
	strideIndex := strideIndexClass streamContents: [ :out |
		byteIndex := 1.
		[ byteIndex <= bytes size ] whileTrue: [
			count := count + 1.
			(count > self stride and: [ (count - 1 \\ self stride) = 0 ]) 
				ifTrue: [ out nextPut: byteIndex ].
			byteIndex := byteIndex + (self encodedByteCountAt: byteIndex) ] ]! !
!UnicodeString methodsFor: 'private' stamp: 'jmv 7/9/2024 18:20:44' prior: 16993675!
     computeCountNoIndex
	| byteIndex |
	count := 0.
	strideIndex := #[].
	byteIndex := 1.
	[ byteIndex <= bytes size ] whileTrue: [
		count := count + 1.
		byteIndex := byteIndex + (self encodedByteCountAt: byteIndex) ]! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Smalltalk garbageCollect.
UnicodeString allInstancesDo: [ :s |
	(s instVarNamed: 'strideIndex') class == Array
		ifTrue: [ s computeCountAndIndex ]].
Smalltalk garbageCollect.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6510-Unicode-UseEfficientNumericArraysForStrideIndex-JuanVuletich-2024Jul09-18h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6510] on 9 July 2024 at 6:47:45 pm'!
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 7/9/2024 18:43:12' prior: 16954186!
       explain
	"Try to shed some light on what kind of entity the current selection is. 
	The selection must be a single token or construct. Insert the answer after 
	the selection. Send private messages whose names begin with 'explain' 
	that return a string if they recognize the selection, else nil."

	| string tiVars cgVars selectors delimitors numbers sorry reply symbol provider |
	sorry := 'Sorry, I can''t explain that.  Please select a single
token, construct, or special character.'.
	(string := self selectedString) isEmpty
		ifTrue: [reply := '']
		ifFalse: [
			string := string withBlanksTrimmed.
			"Remove space, tab, cr"
			"Temps and Instance vars need only test strings that are all letters"
			(string detect: [:char | char isValidInIdentifiers not]
				ifNone: nil) ifNil: [
					tiVars := (self explainTemp: string)
						ifNil: [self explainInst: string]].
					
			provider := self codeProvider.
			(tiVars == nil and: [provider respondsTo: #explainSpecial:])
				ifTrue: [tiVars := provider explainSpecial: string].
			tiVars := tiVars
				ifNil: [ '']
				ifNotNil: [ tiVars , '\' withNewLines].
			"Context, Class, Pool, and Global vars, and Selectors need 
			only test symbols"
			(Symbol hasInterned: string ifTrue: [:s | symbol := s])
				ifTrue: [
					cgVars := (self explainCtxt: symbol) 
						ifNil: [ (self explainClass: symbol)
							ifNil: [ self explainGlobal: symbol]].
					"See if it is a Selector (sent here or not)"
					selectors := (self explainMySel: symbol)
						ifNil: [(self explainPartSel: string)
							ifNil: [ self explainAnySel: symbol]]]
				ifFalse: [selectors := self explainPartSel: string].
			cgVars := cgVars
				ifNil: [ '']
				ifNotNil: [cgVars , '\' withNewLines].
			selectors := selectors
				ifNil: [ '']
				ifNotNil: [ selectors , '\' withNewLines].
			delimitors := string size = 1
				ifTrue: ["single special characters"
					self explainChar: string]
				ifFalse: ["matched delimitors"
					self explainDelimitor: string].
			numbers := self explainNumber: string.
			numbers ifNil: [numbers := ''].
			delimitors ifNil: [delimitors := ''].
			reply := tiVars , cgVars , selectors , delimitors , numbers].
	reply isEmpty ifTrue: [reply := sorry].

	"morph showBalloon: reply.
	self runningWorld ifNotNil: [ :w | w findATranscript ].
	reply print."
	"This could be a preference."
	self afterSelectionInsertAndSelect: reply! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6511-Explain-showInTraditionalST80Way-JuanVuletich-2024Jul09-18h41m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6511] on 10 July 2024 at 3:19:27 pm'!
!Symbol methodsFor: 'testing' stamp: 'jmv 7/10/2024 15:13:50'!
                       isValidGlobalName

	^self notEmpty and: [
		self first canBeGlobalVarInitial and: [
			self allSatisfy: [ :character | character isValidInIdentifiers ]]].
! !
!UnicodeSymbol methodsFor: 'testing' stamp: 'jmv 7/10/2024 15:13:58'!
                           isValidGlobalName

	^self notEmpty and: [
		self first canBeGlobalVarInitial and: [
			self allSatisfy: [ :character | character isValidInIdentifiers ]]].
! !
!ClassBuilder methodsFor: 'validation' stamp: 'jmv 7/10/2024 15:15:20' prior: 16816526!
         validateClassName: aSymbol
	"Validate the new class name"

	aSymbol isValidGlobalName ifFalse: [
		self error: 'Invalid class name'.
		^false].
	Smalltalk at: aSymbol ifPresent:[:old|
		(old isKindOf: Behavior) ifFalse:[
			self notify: aSymbol asText allBold, 
						' already exists!!\Proceed will store over it.' withNewLines]].
	^true! !

ClassBuilder removeSelector: #doesClassNameStartWithUppercase:!

!methodRemoval: ClassBuilder #doesClassNameStartWithUppercase: stamp: 'Install-6512-BetterValidationOfClassNames-JuanVuletich-2024Jul10-15h17m-jmv.001.cs.st 7/18/2024 14:51:45'!
doesClassNameStartWithUppercase: aClassName
	
	^ aClassName first isUppercase!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6512-BetterValidationOfClassNames-JuanVuletich-2024Jul10-15h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6512] on 10 July 2024 at 3:25:51 pm'!

Object subclass: #IniFile
	instanceVariableNames: 'globalSection namedSections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Support'!

!classDefinition: #IniFile category: #'System-Support' stamp: 'Install-6513-IniFile-JuanVuletich-2024Jul10-15h24m-jmv.001.cs.st 7/18/2024 14:51:45'!
Object subclass: #IniFile
	instanceVariableNames: 'globalSection namedSections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Support'!
!IniFile commentStamp: 'jmv 7/10/2024 09:10:24' prior: 0!
                         An IniFile is a collection of options grouped in IniFileSections meant to be saved as an .ini file.
IniFiles are used for configuration of software.!

Object subclass: #IniFileSection
	instanceVariableNames: 'name entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Support'!

!classDefinition: #IniFileSection category: #'System-Support' stamp: 'Install-6513-IniFile-JuanVuletich-2024Jul10-15h24m-jmv.001.cs.st 7/18/2024 14:51:45'!
Object subclass: #IniFileSection
	instanceVariableNames: 'name entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Support'!
!IniFileSection commentStamp: '<historical>' prior: 0!
               Part of an IniFile.!
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:20:04'!
                    atSection: sectionName entry: entryName
	"Answer the value, or nil if it hasn't been set."

	^self atSection: sectionName entry: entryName orDefault: nil.
! !
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:18:59'!
          atSection: sectionName entry: entryName orDefault: aBlock
	"If section or entry is missing, answer the result of evaluating aBlock,
	but don't add the section or entry."

	^(namedSections at: sectionName ifAbsent: [ ^aBlock value ])
		at: entryName orDefault: aBlock.! !
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:18:39'!
                          atSection: sectionName entry: entryName orPutDefault: aBlock
	"If section or entry is missing, answer the result of evaluating aBlock,
	AND add it as the value of the section/entry."

	^(self ensureSectionNamed: sectionName)
		at: entryName orPutDefault: aBlock.! !
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:31:52'!
                               atSection: sectionName entry: entryName put: aValue
	"Just store the value."

	^(self ensureSectionNamed: sectionName)
		at: entryName put: aValue.! !
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:29:40'!
                  ensureSectionNamed: sectionName
	"Make it an empty section if not there."

	^namedSections at: sectionName ifAbsentPut: [ IniFileSection newNamed: sectionName ].
! !
!IniFile methodsFor: 'accessing sections and entries' stamp: 'jmv 7/10/2024 10:20:42'!
   sectionNamed: sectionName
	"Answer nil if not there."

	^namedSections at: sectionName ifAbsent: nil.
! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:34:29'!
     atGlobalEntry: entryName
	^self atGlobalEntry: entryName orDefault: nil.! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:28:22'!
   atGlobalEntry: entryName orDefault: aBlock
	"If section or entry is missing, answer the result of evaluating aBlock,
	but don't add the section or entry."

	globalSection isNil ifTrue: [ ^aBlock value ].
	^globalSection at: entryName orDefault: aBlock.! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:30:34'!
               atGlobalEntry: entryName orPutDefault: aBlock
	"If section or entry is missing, answer the result of evaluating aBlock,
	AND add it as the value of the section/entry."

	^self ensureGlobalSection
		at: entryName orPutDefault: aBlock.
! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:29:34'!
 ensureGlobalSection
	"Make it an empty section if not there."

	^globalSection ifNil: [ globalSection := IniFileSection newGlobal ].
! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:32:24'!
      globalEntry: entryName put: aValue
	"Just store the value."

	^self ensureGlobalSection
		at: entryName put: aValue.! !
!IniFile methodsFor: 'accessing global entries' stamp: 'jmv 7/10/2024 10:37:02'!
                       globalSection
	"Answer nil if not there."

	^globalSection! !
!IniFile methodsFor: 'initialization' stamp: 'jmv 7/10/2024 09:25:44' overrides: 16932029!
       initialize
	globalSection := nil.
	namedSections := OrderedDictionary new.! !
!IniFile methodsFor: 'writing' stamp: 'jmv 7/10/2024 11:23:33'!
                  writeOn: aStream

	globalSection ifNotNil: [
		globalSection writeOn: aStream.
		aStream newLine ].
	namedSections
		do: [:ea | ea writeOn: aStream]
		separatedBy: [ aStream newLine ].
! !
!IniFile class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 10:50:33'!
                   addSettingFrom: lineString to: section
	| stream key value |
	stream := lineString readStream.
	key := (stream upTo: $=) withBlanksTrimmed.
	value := (stream upToEnd) withBlanksTrimmed.
	section at: key put: (value isEmpty ifTrue: [nil] ifFalse: [value]).! !
!IniFile class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 11:01:46'!
             newSectionIn: anIniFile from: aString
	| stream |
	stream := aString readStream.
	stream upTo: $[.
	^ anIniFile ensureSectionNamed: (stream upTo: $])! !
!IniFile class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 11:06:28' overrides: 16916022!
   readFrom: aStream
	| section line ini |
	section := nil.
	ini := self new.
	
	[aStream atEnd] whileFalse:
		[line := aStream nextLine withBlanksTrimmed.
		line isEmpty ifFalse: [
			line first
				caseOf: {
					[ $[ ] -> [section := self newSectionIn: ini from: line].
					[ $; ] -> ["ignore comment line"].
					}
				otherwise: [
					self addSettingFrom: line to: (section ifNil: [ini ensureGlobalSection]) 					]]].
	
	^ ini! !
!IniFileSection methodsFor: 'accessing' stamp: 'jmv 7/10/2024 10:21:05' overrides: 16913512!
                 at: entryName
	"Answer the value, or nil if it hasn't been set."

	^entries at: entryName ifAbsent: nil.
! !
!IniFileSection methodsFor: 'accessing' stamp: 'jmv 7/10/2024 10:21:20'!
          at: entryName orDefault: aBlock 
	"If entry is missing, answer the result of evaluating aBlock,
	but don't add the section or entry."

	^entries at: entryName ifAbsent: aBlock.
! !
!IniFileSection methodsFor: 'accessing' stamp: 'jmv 7/10/2024 10:21:48'!
  at: entryName orPutDefault: aBlock 
	"If entry is missing, answer the result of evaluating aBlock,
	AND add it as the value of the entry."

	^entries at: entryName ifAbsentPut: aBlock.
! !
!IniFileSection methodsFor: 'accessing' stamp: 'jmv 7/10/2024 10:21:57' overrides: 16913530!
      at: entryName put: aValue
	"Just store the value."

	entries at: entryName put: aValue.
	^aValue.! !
!IniFileSection methodsFor: 'initialization' stamp: 'jmv 7/10/2024 09:17:45'!
             initializeGlobal
	"Initialize a Global section. There should be, at most, one of these in an IniFile."

	name := nil.
	entries := OrderedDictionary new.! !
!IniFileSection methodsFor: 'initialization' stamp: 'jmv 7/10/2024 09:17:56'!
                      initializeNamed: aString
	"Initialize a Global section. There should be, at most, one of these in an IniFile."

	name := aString.
	entries := OrderedDictionary new.! !
!IniFileSection methodsFor: 'writing' stamp: 'jmv 7/10/2024 11:22:29'!
                 writeOn: aStream
	name ifNotNil: [ 
		aStream
			nextPut: $[; nextPutAll: name; nextPut: $]; newLine ].
	entries associationsDo: [ :assoc |
		aStream nextPutAll: assoc key; nextPut: $=; nextPutAll: (assoc value ifNil: ['']); newLine ].
! !
!IniFileSection class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 09:18:33' overrides: 16787725!
     new
	^ self shouldNotImplement! !
!IniFileSection class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 09:18:49'!
       newGlobal
	^ self basicNew initializeGlobal! !
!IniFileSection class methodsFor: 'instance creation' stamp: 'jmv 7/10/2024 09:19:00'!
                          newNamed: aString
	^ self basicNew initializeNamed: aString! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6513-IniFile-JuanVuletich-2024Jul10-15h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6513] on 12 July 2024 at 9:56:39 am'!
!TTGlyph commentStamp: 'jmv 7/12/2024 08:30:22' prior: 16973709!
              This class represents a glyph of a TrueType font.

Instance variables:
	boundsLeft 					xMin in TrueType parlance
	boundsRight 			 		xMax in TrueType parlance
	boundsBottom 					yMin in TrueType parlance (usually close to baseline, i.e. 0)
	boundsTop 					yMax in TrueType parlance (usually positive and large, in TrueType, y axis points up)
	contours					<Array of: TTContourConstruction>
	advanceWidth					<Integer>	advance width of the glyph
	leftSideBearing  					<Integer>	left side bearing
	rightSideBearing  					<Integer>	right side bearing!
!TTFontDescription methodsFor: 'conversion' stamp: 'jmv 7/12/2024 09:15:44' prior: 16972331!
                             formGlyphForUtf8Byte1: aByte1 byte2: aByte2OrNil byte3: aByte3OrNil byte4: aByte4OrNil pixelSize: pixelSize
	"Needed only for BitBltCanvasEngine"
	| byte1 byte2OrNil byte3OrNil byte4OrNil utf8ByteArray toPixelsScale formWidth formHeight leftPixelOffset topPixelOffset xtraSpaceForAntiAliasingAndRounding horizontalStrokesAtPixelCenter form canvas advanceWidth boundsLeft boundsRight boundsBottom boundsTop i deltaToXCenter |

	byte1 := aByte1.
	byte2OrNil := aByte2OrNil.
	byte3OrNil := aByte3OrNil.
	byte4OrNil := aByte4OrNil.
	i := contourDataIndexesByUtf8 at: byte1 + 1.
	utf8ByteArray := ByteArray with: byte1.
	byte2OrNil notNil ifTrue: [
		i := contourDataIndexesByUtf8 at: i negated + byte2OrNil + 1.
		utf8ByteArray := ByteArray with: byte1 with: byte2OrNil.
		byte3OrNil notNil ifTrue: [
			i := contourDataIndexesByUtf8 at: i negated + byte3OrNil + 1.
			utf8ByteArray := ByteArray with: byte1 with: byte2OrNil with: byte3OrNil.
			byte4OrNil notNil ifTrue: [
				i := contourDataIndexesByUtf8 at: i negated + byte4OrNil + 1.
				utf8ByteArray := ByteArray with: byte1 with: byte2OrNil with: byte3OrNil with: byte4OrNil ]]].

	"If glyph not found, take first glyph 'theUnknownGlyph'"
	i = 0 ifTrue: [ i := 1 ].

	advanceWidth := contourDataForUtf8 at: i. i := i + 1.
	boundsLeft := contourDataForUtf8 at: i. i := i + 1.
	boundsRight := contourDataForUtf8 at: i. i := i + 1.
	boundsBottom := contourDataForUtf8 at: i. i := i + 1.
	boundsTop := contourDataForUtf8 at: i. i := i + 1.

	horizontalStrokesAtPixelCenter := 0.5.
	xtraSpaceForAntiAliasingAndRounding := 3.
	toPixelsScale := 0.0 + pixelSize / self letterMTopSideBearing.

	"If positive, pixels we save at the left. if negative, xtra pix needed"
	leftPixelOffset := (boundsLeft * toPixelsScale - xtraSpaceForAntiAliasingAndRounding) floor.
	formWidth := (boundsRight - boundsLeft) * toPixelsScale + (xtraSpaceForAntiAliasingAndRounding*2).

	"Usually positive. Needed pixels above the baseline"
	topPixelOffset := (boundsTop * toPixelsScale + xtraSpaceForAntiAliasingAndRounding) ceiling.
	formHeight := (boundsTop - boundsBottom) * toPixelsScale + (xtraSpaceForAntiAliasingAndRounding*2).
	
	form := Form extent: formWidth@formHeight depth: 32.
	form fillColor: Color white.
	canvas := VectorCanvas onFormWithSubPixelAntiAliasing: form.
	canvas 
		engine
			displayUtf8: utf8ByteArray
			fromByte: 1
			toByte: utf8ByteArray size
			at: leftPixelOffset negated@(topPixelOffset - horizontalStrokesAtPixelCenter)
			trueTypeFont: self
			color: Color black
			scale: 1.0 * pixelSize
			preventMirroring: true.
	deltaToXCenter := (advanceWidth - (boundsRight+boundsLeft * 0.5)) * toPixelsScale.
	"DoubleWidth code points that combine above previous and following characters.
	Codepoints between 16r035C and 16r0363.
	Example: oÕ¢o
	Don't center them"
	(byte1 = 205 and: [ byte2OrNil between: 156 and: 163 ]) ifTrue: [
		deltaToXCenter := 0 ].
	
	^(FormGlyph
		form: form
		leftOffset: leftPixelOffset
		topOffset: topPixelOffset
		advanceWidth: (advanceWidth * toPixelsScale))
			deltaXToCenter: deltaToXCenter! !
!TTFontReader methodsFor: 'processing' stamp: 'jmv 7/12/2024 08:36:07' prior: 16972769!
 processCompositeGlyphFrom: entry
	"Read a composite glyph from the font data."
	| glyph flags glyphIndex hasInstructions ofsX ofsY iLen geometryTransformation xMin yMin xMax yMax |
	glyph := TTCompositeGlyph new.
	"See, for instance, https://learn.microsoft.com/en-us/typography/opentype/otspec190/glyf"
	xMin := entry nextInt16.
	yMin := entry nextInt16.
	xMax := entry nextInt16.
	yMax := entry nextInt16.
	glyph boundsLeft: xMin boundsRight: xMax boundsTop: yMax boundsBottom: yMin.
	hasInstructions := false.
	[
		flags := entry nextUint16.
		glyphIndex := entry nextUint16 + 1.

		(flags allMask: 1 "ARG_1_AND_2_ARE_WORDS") ifTrue: [
			"'Hay Offset short x@y' print."
			ofsX := entry nextInt16.
			ofsY := entry nextInt16.
		] ifFalse: [
			"'Hay Offset byte x@y' print."
			(ofsX := entry nextByte) > 127 ifTrue: [ofsX := ofsX - 256].
			(ofsY := entry nextByte) > 127 ifTrue: [ofsY := ofsY - 256]].

		(flags allMask: 2 "ARGS_ARE_XY_VALUES") ifFalse: [self error: 'Unsupported TrueType format']. "Unsupported"
		"ROUND_XY_TO_GRID = 4. Ignored"
		(flags anyMask: 8+64+128) ifFalse: [
			geometryTransformation := MorphicTranslation withTranslation: ofsX@ofsY ].
		(flags allMask: 8 "WE_HAVE_A_SCALE") ifTrue: [
			geometryTransformation := AffineTransformation withScale: entry nextInt16 asFloat / 16r4000 ].
		(flags allMask: 64 "WE_HAVE_AN_X_AND_Y_SCALE") ifTrue: [
			geometryTransformation := AffineTransformation
				withPointScale: (entry nextInt16 asFloat / 16r4000)@(entry nextInt16 asFloat / 16r4000)
				position: ofsX@ofsY ].
		(flags allMask: 128 "WE_HAVE_A_TWO_BY_TWO") ifTrue: [
			"2x2 transformation"
			geometryTransformation := AffineTransformation new
				a11: entry nextInt16 asFloat / 16r4000;
				a21: entry nextInt16 asFloat / 16r4000;
				a12: entry nextInt16 asFloat / 16r4000;
				a22: entry nextInt16 asFloat / 16r4000;
				a13: ofsX;
				a23: ofsY ].

		glyph addGlyph: glyphIndex transformation: geometryTransformation.
		hasInstructions := hasInstructions or: [ flags allMask: 256 "WE_HAVE_INSTRUCTIONS"].
		"Continue as long as the MORE_COMPONENTS bit is set"
		flags allMask: 32 "MORE_COMPONENTS"
	] whileTrue.
	hasInstructions ifTrue: [
		"Ignore them"
		iLen := entry nextUint16.
		entry skip: iLen].
	^glyph! !
!TTFontReader methodsFor: 'processing' stamp: 'jmv 7/12/2024 08:37:25' prior: 16973141!
                          processSimpleGlyphContours: nContours from: entry

	| glyph endPts nPts iLength flags xMin yMin xMax yMax |
	glyph := TTGlyph new.
	"See, for instance, https://learn.microsoft.com/en-us/typography/opentype/otspec190/glyf"
	xMin := entry nextInt16.
	yMin := entry nextInt16.
	xMax := entry nextInt16.
	yMax := entry nextInt16.
	glyph boundsLeft: xMin boundsRight: xMax boundsTop: yMax boundsBottom: yMin.
	endPts := Array new: nContours.
	1 to: nContours do: [ :i | endPts at: i put: entry nextUint16 ].
	glyph initializeContours: nContours with: endPts.
	nContours = 0 ifTrue: [^ self].
	nPts := endPts last + 1.
	iLength := entry nextUint16. "instruction length"
	entry skip: iLength.
	flags := self getGlyphFlagsFrom: entry size: nPts.
	self readGlyphXCoords: entry glyph: glyph nContours: nContours flags: flags endPoints: endPts.
	self readGlyphYCoords: entry glyph: glyph nContours: nContours flags: flags endPoints: endPts.
	glyph makePointsAbsolute.
	^glyph! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 08:31:51' prior: 16973734!
      boundsBottom
	"yMin in TrueType parlance (usually close to baseline, i.e. 0)"
	^boundsBottom! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 08:30:58' prior: 16973739!
              boundsLeft
	"xMin in TrueType parlance"
	^boundsLeft! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 08:36:50' prior: 16973744!
                      boundsLeft: xMin boundsRight: xMax boundsTop: yMax boundsBottom: yMin
	boundsLeft := xMin.
	boundsRight := xMax.
	boundsTop := yMax.
	boundsBottom := yMin.! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 08:31:18' prior: 16973751!
               boundsRight
	"xMax in TrueType parlance"
	^boundsRight! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 08:31:36' prior: 16973756!
                    boundsTop
	"yMax in TrueType parlance (usually positive and large, in TrueType, y axis points up)"
	^boundsTop! !
!TTGlyph methodsFor: 'accessing' stamp: 'jmv 7/12/2024 09:49:04' prior: 16973780!
                            topSideBearing
	"
	https://www.freetype.org/freetype2/docs/glyphs/glyphs-3.html
	"
	^boundsTop! !
!TTGlyph methodsFor: 'primitive format' stamp: 'jmv 7/12/2024 08:45:22' prior: 16973864!
     addGlyphDataTo: stream tx: aGeometryTransformationOrNil
	| aw lb rt |
	aw := self advanceWidth.
	lb := self boundsLeft @ self boundsBottom.
	rt := self boundsRight @ self boundsTop.
	aGeometryTransformationOrNil ifNotNil: [
		aw := aGeometryTransformationOrNil externalizeScalar: aw.
		lb := aGeometryTransformationOrNil externalizePosition: lb.
		rt := aGeometryTransformationOrNil externalizePosition: rt ].
	stream nextPut: aw.
	stream nextPut: lb x. "left = xMin"
	stream nextPut: rt x. "right = xMax"
	stream nextPut: lb y. "bottom = yMin"
	stream nextPut: rt y. "top = yMax"
	stream nextPut: self contourCount.
	self addContourDataTo: stream tx: aGeometryTransformationOrNil! !
!VectorEngine methodsFor: 'text and multi paths' stamp: 'jmv 7/12/2024 08:46:36' prior: 16998804!
                  displayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTTFontDescription color: aColor scale: scale preventMirroring: doPreventMirroring
	"TrueType assumes a Math like coordinate system (Y increasing upwards).
	But Display and Form Y coordinates in Cuis increase downwards, as it is done in most computer hardware and software.
	If doPreventMirroring is true, ensure that glyphs don't look mirrored, by having a negative y scale."
	| nextGlyphX nextGlyphY sx sy contourData contourDataIndexes trueTypeScale ttMoveToX ttMoveToY ttEndX ttEndY ttControlX ttControlY advanceWidth boundsLeft boundsRight boundsBottom boundsTop numContours numBeziers baseIndex x y cx cy contourStart deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark |
	deltaXForBaseGlyph := 0.0.
	trueTypeScale := 1.0 / aTTFontDescription letterMTopSideBearing.	"Perhaps measures in TTFontDescription should be normalized"
	sx := scale * trueTypeScale.
	sy := scale * trueTypeScale.
	(doPreventMirroring and: [ geometryTransformation doesMirror not ]) ifTrue: [ sy := sy negated ].
	contourData := aTTFontDescription contourDataForUtf8.
	contourDataIndexes := aTTFontDescription contourDataIndexesByUtf8.
	self fillColor: aColor do: [
		nextGlyphX := aPoint x.
		nextGlyphY := aPoint y.
		baseIndex := 0.
		byteStartIndex to: byteStopIndex do: [ :byteIndex | | byte i |
			byte := aByteArray at: byteIndex.
			i := contourDataIndexes at: baseIndex + byte + 1.
			i < 0
				ifTrue: [ baseIndex := i negated ]
				ifFalse: [
					advanceWidth := contourData at: i. i := i + 1.
					boundsLeft := contourData at: i. i := i + 1.
					boundsRight := contourData at: i. i := i + 1.
					boundsBottom := contourData at: i. i := i + 1.
					boundsTop := contourData at: i. i := i + 1.
					numContours := (contourData at: i) asInteger. i := i + 1.
					deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.5).
					"TrueType doesn't speciy how to position diacritics wrt base character glyph.
					Horizontally center diacriticals wrt base glyph.
					Apparently OpenType can do better than TrueType, as it includes the GPOS table."
					advanceWidth = 0.0
						ifFalse: [
							deltaXForBaseGlyph := deltaXToCenter.
							deltaXForDiacriticalMark := 0.0 ]
						ifTrue: [
							(deltaXForBaseGlyph = 0.0  						"For instance, if the first code point to display is a diacritic, like when building a FormGlyph for it"
									or: [boundsLeft < 0 and: [boundsRight > 0]])   "Some fonts have diacritics already 'centered'"
								ifTrue: [
									deltaXForDiacriticalMark := 0.0 ]
								ifFalse: [ 	deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph * sx ]].
					nextGlyphX := nextGlyphX + deltaXForDiacriticalMark.
					numContours timesRepeat: [
						numBeziers := (contourData at: i) asInteger. i := i + 1.
						ttMoveToX := contourData at: i. i := i + 1.
						ttMoveToY := contourData at: i. i := i + 1.
						x := ttMoveToX * sx + nextGlyphX.
						y := ttMoveToY * sy + nextGlyphY.
						contourStart := x@y.
						self moveTo: contourStart.
						numBeziers timesRepeat: [
							ttEndX := contourData at: i. i := i + 1.
							ttEndY := contourData at: i. i := i + 1.
							ttControlX := contourData at: i. i := i + 1.
							ttControlY := contourData at: i. i := i + 1.
							cx := ttControlX * sx + x.
							cy := ttControlY * sy + y.
							x := ttEndX * sx + x.
							y := ttEndY * sy + y.
							self quadraticBezierTo: x@y control: cx@cy
							].
						self lineTo: contourStart.
						].
					nextGlyphX := nextGlyphX + (advanceWidth * sx) - deltaXForDiacriticalMark.
					baseIndex := 0.
				]
			]
	].
	^ nextGlyphX@nextGlyphY! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
TrueTypeFontFamily readAllTrueTypeFontsIn: DirectoryEntry trueTypeFontsDirectory / 'DejaVu' / 'DejaVuSans'.
FontFamily releaseClassCachedState.
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6514-TrueTypeFonts-fixTopBottomBounds-JuanVuletich-2024Jul12-09h55m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6514] on 12 July 2024 at 10:23:01 am'!
!BitBltCanvasEngine methodsFor: 'private' stamp: 'jmv 7/11/2024 17:14:13' prior: 16792282!
       basicDisplayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTrueTypeFont
	"Answer position to place next glyph"

	| fdestX glyph maxHeight byteIndex n ascent lineGap deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark baseGlyphTopOffset deltaYForDiacriticalMark |
	deltaXForBaseGlyph := 0.
	baseGlyphTopOffset := 0.
	ascent := aTrueTypeFont ascent.		  "expensive"
	lineGap := aTrueTypeFont lineGap."expensive"
	destY := aPoint y.
	fdestX := aPoint x.
	maxHeight := 0.
	byteIndex := byteStartIndex.
	[  byteIndex <= byteStopIndex ] whileTrue: [
		n := Character utf8BytesAndCodePointAt: byteIndex in: aByteArray
			into: [ :byte1 :byte2 :byte3 :byte4 |
				glyph := aTrueTypeFont glyphAtUtf8Byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4 ] 
			into: nil.
		"Center diacriticals marks.
		See building of FormGlyph at
		formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:
		Implement equivalent behavior at 
			displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:
		(Done in Smalltalk VectorEngine, still to be done for VectorEngineWithPlugin)."
		"Tested at various sizes of DejaVu Sans, DejaVu Serif, JetBrains Mono NL, Kiwi Maru Light (except ~ and `), Kurinto Sans, Neo Euler, Source Sans 3
		Test text (at sizes 10, 13, 144):
		(UnicodeString fromUtf8Bytes: #[97 	195 169 97 195 168 	97 	195 177 97 	195 145 195 188 64 97 	101 204 129 97 101 204 128 97 	110 204 131 97 	78 204 131 117 204 136 97	]) edit
		"
		deltaXToCenter := glyph deltaXToCenter.
		deltaXForDiacriticalMark := 0.
		deltaYForDiacriticalMark := 0.
		glyph advanceWidth = 0.0
			ifFalse: [ "Regular glyph"
				deltaXForBaseGlyph := deltaXToCenter.
				baseGlyphTopOffset := glyph topOffset ]
			ifTrue: [ "Diacritical mark"
				deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph.
				"Only if placed over a glyph with a top offset"
				baseGlyphTopOffset = 0 					ifFalse: [
					deltaYForDiacriticalMark :=  baseGlyphTopOffset - (glyph topOffset * 0.76).
					deltaYForDiacriticalMark := deltaYForDiacriticalMark max: 0 ]].
		destX := (fdestX + glyph leftOffset + deltaXForDiacriticalMark) roundedHAFZ.
		destY := (aPoint y + ascent + lineGap-1 - glyph topOffset - deltaYForDiacriticalMark) roundedHAFZ.
		"Please keep consistent with #displayOnVectorEngine:from:to:at:font:color:"
		aTrueTypeFont isSuperscript
			ifTrue: [destY := destY - (ascent*0.55)]
			ifFalse: [
				aTrueTypeFont isSubscript
					ifTrue: [destY := destY + (ascent*0.3)]].
		destY := destY roundedHAFZ.
		sourceForm := glyph form.
		height := sourceForm height.
		width := sourceForm width.
		self copyBits.
		fdestX := fdestX + "width + aTrueTypeFont baseKern"glyph advanceWidth.
		maxHeight := maxHeight max: height.
		byteIndex := byteIndex + n
	].
	^ fdestX ceiling@(destY+maxHeight)! !
!TTFontDescription methodsFor: 'conversion' stamp: 'jmv 7/12/2024 10:09:09' prior: 50354293!
                             formGlyphForUtf8Byte1: aByte1 byte2: aByte2OrNil byte3: aByte3OrNil byte4: aByte4OrNil pixelSize: pixelSize
	"Needed only for BitBltCanvasEngine"
	| byte1 byte2OrNil byte3OrNil byte4OrNil utf8ByteArray toPixelsScale formWidth formHeight leftPixelOffset topPixelOffset xtraSpaceForAntiAliasingAndRounding horizontalStrokesAtPixelCenter form canvas advanceWidth boundsLeft boundsRight boundsBottom boundsTop i deltaXToCenter |

	byte1 := aByte1.
	byte2OrNil := aByte2OrNil.
	byte3OrNil := aByte3OrNil.
	byte4OrNil := aByte4OrNil.
	i := contourDataIndexesByUtf8 at: byte1 + 1.
	utf8ByteArray := ByteArray with: byte1.
	byte2OrNil notNil ifTrue: [
		i := contourDataIndexesByUtf8 at: i negated + byte2OrNil + 1.
		utf8ByteArray := ByteArray with: byte1 with: byte2OrNil.
		byte3OrNil notNil ifTrue: [
			i := contourDataIndexesByUtf8 at: i negated + byte3OrNil + 1.
			utf8ByteArray := ByteArray with: byte1 with: byte2OrNil with: byte3OrNil.
			byte4OrNil notNil ifTrue: [
				i := contourDataIndexesByUtf8 at: i negated + byte4OrNil + 1.
				utf8ByteArray := ByteArray with: byte1 with: byte2OrNil with: byte3OrNil with: byte4OrNil ]]].

	"If glyph not found, take first glyph 'theUnknownGlyph'"
	i = 0 ifTrue: [ i := 1 ].

	advanceWidth := contourDataForUtf8 at: i. i := i + 1.
	boundsLeft := contourDataForUtf8 at: i. i := i + 1.
	boundsRight := contourDataForUtf8 at: i. i := i + 1.
	boundsBottom := contourDataForUtf8 at: i. i := i + 1.
	boundsTop := contourDataForUtf8 at: i. i := i + 1.

	horizontalStrokesAtPixelCenter := 0.5.
	xtraSpaceForAntiAliasingAndRounding := 3.
	toPixelsScale := 0.0 + pixelSize / self letterMTopSideBearing.

	"If positive, pixels we save at the left. if negative, xtra pix needed"
	leftPixelOffset := (boundsLeft * toPixelsScale - xtraSpaceForAntiAliasingAndRounding) floor.
	formWidth := (boundsRight - boundsLeft) * toPixelsScale + (xtraSpaceForAntiAliasingAndRounding*2).

	"Usually positive. Needed pixels above the baseline"
	topPixelOffset := (boundsTop * toPixelsScale + xtraSpaceForAntiAliasingAndRounding) ceiling.
	formHeight := (boundsTop - boundsBottom) * toPixelsScale + (xtraSpaceForAntiAliasingAndRounding*2).
	
	form := Form extent: formWidth@formHeight depth: 32.
	form fillColor: Color white.
	canvas := VectorCanvas onFormWithSubPixelAntiAliasing: form.
	canvas 
		engine
			displayUtf8: utf8ByteArray
			fromByte: 1
			toByte: utf8ByteArray size
			at: leftPixelOffset negated@(topPixelOffset - horizontalStrokesAtPixelCenter)
			trueTypeFont: self
			color: Color black
			scale: 1.0 * pixelSize
			preventMirroring: true.

	"TrueType doesn't speciy how to position diacritics wrt base character glyph.
	Horizontally center diacriticals wrt base glyph.
	See
	basicDisplayUtf8:fromByte:toByte:at:trueTypeFont:
	Apparently OpenType can do better than TrueType, as it includes the GPOS table."
	deltaXToCenter := (advanceWidth - (boundsRight+boundsLeft * 0.51)) * toPixelsScale.
	byte1 = 204 ifTrue: [
		byte2OrNil = 128 ifTrue: [ "Combining Grave Accent"
			deltaXToCenter := (advanceWidth - (boundsRight+boundsLeft * 0.43)) * toPixelsScale ].
		byte2OrNil = 129 ifTrue: [ "Combining Acute Accent"
			deltaXToCenter := (advanceWidth - (boundsRight+boundsLeft * 0.65)) * toPixelsScale 			]		].

	"DoubleWidth code points that combine above previous and following characters.
	Codepoints between 16r035C and 16r0363.
	Example: oÕ¢o
	Don't center them"
	(byte1 = 205 and: [ byte2OrNil between: 156 and: 163 ]) ifTrue: [
		deltaXToCenter := 0 ].
	
	^(FormGlyph
		form: form
		leftOffset: leftPixelOffset
		topOffset: topPixelOffset
		advanceWidth: (advanceWidth * toPixelsScale))
			deltaXToCenter: deltaXToCenter.
! !
!VectorEngine methodsFor: 'text and multi paths' stamp: 'jmv 7/12/2024 10:19:18' prior: 50354561!
            displayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTTFontDescription color: aColor scale: scale preventMirroring: doPreventMirroring
	"TrueType assumes a Math like coordinate system (Y increasing upwards).
	But Display and Form Y coordinates in Cuis increase downwards, as it is done in most computer hardware and software.
	If doPreventMirroring is true, ensure that glyphs don't look mirrored, by having a negative y scale."
	| nextGlyphX nextGlyphY sx sy contourData contourDataIndexes trueTypeScale ttMoveToX ttMoveToY ttEndX ttEndY ttControlX ttControlY advanceWidth boundsLeft boundsRight boundsBottom boundsTop numContours numBeziers baseIndex x y cx cy contourStart deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark baseBoundsTop deltaYForDiacriticalMark byte1 byte2OrNil |
	deltaXForBaseGlyph := 0.0.
	baseBoundsTop := 0.
	trueTypeScale := 1.0 / aTTFontDescription letterMTopSideBearing.	"Perhaps measures in TTFontDescription should be normalized"
	sx := scale * trueTypeScale.
	sy := scale * trueTypeScale.
	(doPreventMirroring and: [ geometryTransformation doesMirror not ]) ifTrue: [ sy := sy negated ].
	contourData := aTTFontDescription contourDataForUtf8.
	contourDataIndexes := aTTFontDescription contourDataIndexesByUtf8.
	byte1 := aByteArray at: byteStartIndex.
	byte2OrNil := byteStopIndex > byteStartIndex ifTrue: [ aByteArray at: byteStartIndex +1 ].
	self fillColor: aColor do: [
		nextGlyphX := aPoint x.
		nextGlyphY := aPoint y.
		baseIndex := 0.
		byteStartIndex to: byteStopIndex do: [ :byteIndex | | byte i |
			byte := aByteArray at: byteIndex.
			i := contourDataIndexes at: baseIndex + byte + 1.
			i < 0
				ifTrue: [ baseIndex := i negated ]
				ifFalse: [
					advanceWidth := contourData at: i. i := i + 1.
					boundsLeft := contourData at: i. i := i + 1.
					boundsRight := contourData at: i. i := i + 1.
					boundsBottom := contourData at: i. i := i + 1.
					boundsTop := contourData at: i. i := i + 1.
					numContours := (contourData at: i) asInteger. i := i + 1.
					"TrueType doesn't speciy how to position diacritics wrt base character glyph.
					Horizontally center diacriticals wrt base glyph.
					See
						basicDisplayUtf8:fromByte:toByte:at:trueTypeFont:
						formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:
					Apparently OpenType can do better than TrueType, as it includes the GPOS table."
					deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.51).
					byte1 = 204 ifTrue: [
						byte2OrNil = 128 ifTrue: [ "Combining Grave Accent"
							deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.43) ].
						byte2OrNil = 129 ifTrue: [ "Combining Acute Accent"
							deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.65) 			]		].

					"DoubleWidth code points that combine above previous and following characters.
					Codepoints between 16r035C and 16r0363.
					Example: oÕ¢o
					Don't center them"
					(byte1 = 205 and: [ byte2OrNil between: 156 and: 163 ]) ifTrue: [
						deltaXToCenter := 0.0 ].

					deltaXForDiacriticalMark := 0.0.
					deltaYForDiacriticalMark := 0.
					advanceWidth = 0.0
						ifFalse: [ "Regular glyph"
							deltaXForBaseGlyph := deltaXToCenter.
							baseBoundsTop := boundsTop ]
						ifTrue: [ "Diacritical mark"
							deltaXForBaseGlyph = 0.0  						"For instance, if the first code point to display is a diacritic, like when building a FormGlyph for it"
								ifFalse: [
									deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph * sx.
									baseBoundsTop > boundsBottom ifTrue: [
										deltaYForDiacriticalMark :=  baseBoundsTop - boundsBottom + 100 * sy ]]].
					nextGlyphX := nextGlyphX + deltaXForDiacriticalMark.
					numContours timesRepeat: [
						numBeziers := (contourData at: i) asInteger. i := i + 1.
						ttMoveToX := contourData at: i. i := i + 1.
						ttMoveToY := contourData at: i. i := i + 1.
						x := ttMoveToX * sx + nextGlyphX.
						y := ttMoveToY * sy + nextGlyphY + deltaYForDiacriticalMark.
						contourStart := x@y.
						self moveTo: contourStart.
						numBeziers timesRepeat: [
							ttEndX := contourData at: i. i := i + 1.
							ttEndY := contourData at: i. i := i + 1.
							ttControlX := contourData at: i. i := i + 1.
							ttControlY := contourData at: i. i := i + 1.
							cx := ttControlX * sx + x.
							cy := ttControlY * sy + y.
							x := ttEndX * sx + x.
							y := ttEndY * sy + y.
							self quadraticBezierTo: x@y control: cx@cy
							].
						self lineTo: contourStart.
						].
					nextGlyphX := nextGlyphX + (advanceWidth * sx) - deltaXForDiacriticalMark.
					baseIndex := 0.
				]
			]
	].
	^ nextGlyphX@nextGlyphY! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
FontFamily releaseClassCachedState!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6515-FixAccentPositionForBitBltAndSmalltalkVGEngines-JuanVuletich-2024Jul12-10h05m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6515] on 12 July 2024 at 11:51:50 am'!
!BitBltCanvasEngine methodsFor: 'private' stamp: 'jmv 7/12/2024 11:51:28' prior: 50354701!
                    basicDisplayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTrueTypeFont
	"Answer position to place next glyph"

	| fdestX glyph maxHeight byteIndex n ascent lineGap deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark baseGlyphTopOffset deltaYForDiacriticalMark |
	deltaXForBaseGlyph := 0.
	baseGlyphTopOffset := 0.
	ascent := aTrueTypeFont ascent.		  "expensive"
	lineGap := aTrueTypeFont lineGap."expensive"
	destY := aPoint y.
	fdestX := aPoint x.
	maxHeight := 0.
	byteIndex := byteStartIndex.
	[  byteIndex <= byteStopIndex ] whileTrue: [
		n := Character utf8BytesAndCodePointAt: byteIndex in: aByteArray
			into: [ :byte1 :byte2 :byte3 :byte4 |
				glyph := aTrueTypeFont glyphAtUtf8Byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4 ] 
			into: nil.
		"Center diacriticals marks.
		See building of FormGlyph at
		formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:
		Implement equivalent behavior at 
			displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:
		(Done in Smalltalk VectorEngine, still to be done for VectorEngineWithPlugin)."
		"Tested at various sizes of DejaVu Sans, DejaVu Serif, JetBrains Mono NL, Kiwi Maru Light (except ~ and `), Kurinto Sans, Neo Euler, Source Sans 3
		Test text (at sizes 10, 13, 144):
		(UnicodeString fromUtf8Bytes: #[97 	195 169 97 195 168 	97 	195 177 97 	195 145 195 188 64 97 	101 204 129 97 101 204 128 97 	110 204 131 97 	78 204 131 117 204 136 97	]) edit
		"
		deltaXToCenter := glyph deltaXToCenter.
		deltaXForDiacriticalMark := 0.
		deltaYForDiacriticalMark := 0.
		glyph advanceWidth = 0.0
			ifFalse: [ "Regular glyph"
				deltaXForBaseGlyph := deltaXToCenter.
				baseGlyphTopOffset := glyph topOffset ]
			ifTrue: [ "Diacritical mark"
				deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph.
				"Alternative implementation, perhaps closer to what  is done at VectorEngine >> #displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:"
				"
				xtraSpaceForAntiAliasingAndRounding := 3. 'see #formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:'.
				baseBoundsTop := baseGlyphTopOffset-xtraSpaceForAntiAliasingAndRounding.
				boundsBottom := glyph topOffset-xtraSpaceForAntiAliasingAndRounding - (glyph form height-xtraSpaceForAntiAliasingAndRounding).
				boundsBottom := glyph topOffset - glyph form height.
				baseBoundsTop * 0.9 > boundsBottom ifTrue: [
					deltaYForDiacriticalMark :=  baseBoundsTop - boundsBottom ].
				"
				"Only if placed over a glyph with a top offset"
				baseGlyphTopOffset = 0 					ifFalse: [
					deltaYForDiacriticalMark :=  baseGlyphTopOffset - (glyph topOffset * 0.76).
					deltaYForDiacriticalMark := deltaYForDiacriticalMark max: 0 ]].
		destX := (fdestX + glyph leftOffset + deltaXForDiacriticalMark) roundedHAFZ.
		destY := (aPoint y + ascent + lineGap-1 - glyph topOffset - deltaYForDiacriticalMark) roundedHAFZ.
		"Please keep consistent with #displayOnVectorEngine:from:to:at:font:color:"
		aTrueTypeFont isSuperscript
			ifTrue: [destY := destY - (ascent*0.55)]
			ifFalse: [
				aTrueTypeFont isSubscript
					ifTrue: [destY := destY + (ascent*0.3)]].
		destY := destY roundedHAFZ.
		sourceForm := glyph form.
		height := sourceForm height.
		width := sourceForm width.
		self copyBits.
		fdestX := fdestX + "width + aTrueTypeFont baseKern"glyph advanceWidth.
		maxHeight := maxHeight max: height.
		byteIndex := byteIndex + n
	].
	^ fdestX ceiling@(destY+maxHeight).! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6516-tweak-JuanVuletich-2024Jul12-11h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6516] on 12 July 2024 at 4:05:33 pm'!
!BitBltCanvasEngine methodsFor: 'private' stamp: 'jmv 7/12/2024 15:51:06' prior: 50355080!
                             basicDisplayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTrueTypeFont
	"Answer position to place next glyph"

	| fdestX glyph firstByte maxHeight byteIndex n ascent lineGap deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark baseGlyphTopOffset deltaYForDiacriticalMark |
	deltaXForBaseGlyph := 0.
	baseGlyphTopOffset := 0.
	ascent := aTrueTypeFont ascent.		  "expensive"
	lineGap := aTrueTypeFont lineGap."expensive"
	destY := aPoint y.
	fdestX := aPoint x.
	maxHeight := 0.
	byteIndex := byteStartIndex.
	[  byteIndex <= byteStopIndex ] whileTrue: [
		n := Character utf8BytesAndCodePointAt: byteIndex in: aByteArray
			into: [ :byte1 :byte2 :byte3 :byte4 |
				glyph := aTrueTypeFont glyphAtUtf8Byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4.
				firstByte := byte1 ] 
			into: nil.

		"$i followed by a Combining Diacritical Mark is replaced by CodePoint 305 Dotless i, UTF-8 #[196 177]
		(UnicodeString fromUtf8Bytes: #[105 105 204 129 32 105 204 128 32 105 204 130 32 105 204 131 32 105 204 132 32 105 204 133 32 105 204 134 32 105 204 135 32 105 204 136 32 105 204 137	]) edit
		This should also be done for VectorEngineWithPlugin at
			displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:
		"
		(firstByte = 105 and: [ byteIndex < (byteStopIndex-1) ] and: [
			(aByteArray at: byteIndex+1) = 204 or: [ (aByteArray at: byteIndex+1) = 205 and: [ (aByteArray at: byteIndex+2) < 176 ]]])
				ifTrue: [ glyph := aTrueTypeFont glyphAtUtf8Byte1: 196 byte2: 177 byte3: nil byte4: nil ].

		"Center diacriticals marks.
		See building of FormGlyph at
		formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:
		Implement equivalent behavior at 
			displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:
		(Done in Smalltalk VectorEngine, still to be done for VectorEngineWithPlugin)."
		"Tested at various sizes of DejaVu Sans, DejaVu Serif, JetBrains Mono NL, Kiwi Maru Light (except ~ and `), Kurinto Sans, Neo Euler, Source Sans 3
		Test text (at sizes 10, 13, 144):
		(UnicodeString fromUtf8Bytes: #[97 	195 169 97 195 168 	97 	195 177 97 	195 145 195 188 64 97 	101 204 129 97 101 204 128 97 	110 204 131 97 	78 204 131 117 204 136 97	]) edit
		"
		deltaXToCenter := glyph deltaXToCenter.
		deltaXForDiacriticalMark := 0.
		deltaYForDiacriticalMark := 0.
		glyph advanceWidth = 0.0
			ifFalse: [ "Regular glyph"
				deltaXForBaseGlyph := deltaXToCenter.
				baseGlyphTopOffset := glyph topOffset ]
			ifTrue: [ "Diacritical mark"
				deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph.
				"Alternative implementation, perhaps closer to what  is done at VectorEngine >> #displayUtf8:fromByte:toByte:at:trueTypeFont:color:scale:preventMirroring:"
				"
				xtraSpaceForAntiAliasingAndRounding := 3. 'see #formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:'.
				baseBoundsTop := baseGlyphTopOffset-xtraSpaceForAntiAliasingAndRounding.
				boundsBottom := glyph topOffset-xtraSpaceForAntiAliasingAndRounding - (glyph form height-xtraSpaceForAntiAliasingAndRounding).
				boundsBottom := glyph topOffset - glyph form height.
				baseBoundsTop * 0.9 > boundsBottom ifTrue: [
					deltaYForDiacriticalMark :=  baseBoundsTop - boundsBottom ].
				"
				"Only if placed over a glyph with a top offset"
				baseGlyphTopOffset = 0 					ifFalse: [
					deltaYForDiacriticalMark :=  baseGlyphTopOffset - (glyph topOffset * 0.76).
					deltaYForDiacriticalMark := deltaYForDiacriticalMark max: 0 ]].
		destX := (fdestX + glyph leftOffset + deltaXForDiacriticalMark) roundedHAFZ.
		destY := (aPoint y + ascent + lineGap-1 - glyph topOffset - deltaYForDiacriticalMark) roundedHAFZ.
		"Please keep consistent with #displayOnVectorEngine:from:to:at:font:color:"
		aTrueTypeFont isSuperscript
			ifTrue: [destY := destY - (ascent*0.55)]
			ifFalse: [
				aTrueTypeFont isSubscript
					ifTrue: [destY := destY + (ascent*0.3)]].
		destY := destY roundedHAFZ.
		sourceForm := glyph form.
		height := sourceForm height.
		width := sourceForm width.
		self copyBits.
		fdestX := fdestX + "width + aTrueTypeFont baseKern"glyph advanceWidth.
		maxHeight := maxHeight max: height.
		byteIndex := byteIndex + n
	].
	^ fdestX ceiling@(destY+maxHeight).! !
!VectorEngine methodsFor: 'text and multi paths' stamp: 'jmv 7/12/2024 15:51:39' prior: 50354911!
                 displayUtf8: aByteArray fromByte: byteStartIndex toByte: byteStopIndex at: aPoint trueTypeFont: aTTFontDescription color: aColor scale: scale preventMirroring: doPreventMirroring
	"TrueType assumes a Math like coordinate system (Y increasing upwards).
	But Display and Form Y coordinates in Cuis increase downwards, as it is done in most computer hardware and software.
	If doPreventMirroring is true, ensure that glyphs don't look mirrored, by having a negative y scale."
	| nextGlyphX nextGlyphY sx sy contourData contourDataIndexes trueTypeScale ttMoveToX ttMoveToY ttEndX ttEndY ttControlX ttControlY advanceWidth boundsLeft boundsRight boundsBottom boundsTop numContours numBeziers baseIndex x y cx cy contourStart deltaXToCenter deltaXForBaseGlyph deltaXForDiacriticalMark baseBoundsTop deltaYForDiacriticalMark byte1 byte2OrNil |
	deltaXForBaseGlyph := 0.0.
	baseBoundsTop := 0.
	trueTypeScale := 1.0 / aTTFontDescription letterMTopSideBearing.	"Perhaps measures in TTFontDescription should be normalized"
	sx := scale * trueTypeScale.
	sy := scale * trueTypeScale.
	(doPreventMirroring and: [ geometryTransformation doesMirror not ]) ifTrue: [ sy := sy negated ].
	contourData := aTTFontDescription contourDataForUtf8.
	contourDataIndexes := aTTFontDescription contourDataIndexesByUtf8.
	byte1 := nil.
	byte2OrNil := nil.
	self fillColor: aColor do: [
		nextGlyphX := aPoint x.
		nextGlyphY := aPoint y.
		baseIndex := 0.
		byteStartIndex to: byteStopIndex do: [ :byteIndex | | byte i |
			byte := aByteArray at: byteIndex.
			byte1 isNil ifTrue: [byte1 := byte ] ifFalse: [ byte2OrNil isNil ifTrue: [ byte2OrNil := byte ]].
			i := contourDataIndexes at: baseIndex + byte + 1.

			"$i followed by a Combining Diacritical Mark is replaced by CodePoint 305 Dotless i, UTF-8 #[196 177]
			(UnicodeString fromUtf8Bytes: #[105 105 204 129 32 105 204 128 32 105 204 130 32 105 204 131 32 105 204 132 32 105 204 133 32 105 204 134 32 105 204 135 32 105 204 136 32 105 204 137	]) edit
			This should also be done for VectorEngineWithPlugin
			"
			(byte1 = 105 and: [ byteIndex < (byteStopIndex-1) ] and: [
				(aByteArray at: byteIndex+1) = 204 or: [ (aByteArray at: byteIndex+1) = 205 and: [ (aByteArray at: byteIndex+2) < 176 ]]])
					ifTrue: [
						i := contourDataIndexes at: 196 + 1.
						i := contourDataIndexes at: i negated + 177 + 1 						].

			i < 0
				ifTrue: [ baseIndex := i negated ]
				ifFalse: [
					advanceWidth := contourData at: i. i := i + 1.
					boundsLeft := contourData at: i. i := i + 1.
					boundsRight := contourData at: i. i := i + 1.
					boundsBottom := contourData at: i. i := i + 1.
					boundsTop := contourData at: i. i := i + 1.
					numContours := (contourData at: i) asInteger. i := i + 1.
					"TrueType doesn't speciy how to position diacritics wrt base character glyph.
					Horizontally center diacriticals wrt base glyph.
					See
						basicDisplayUtf8:fromByte:toByte:at:trueTypeFont:
						formGlyphForUtf8Byte1:byte2:byte3:byte4:pixelSize:
					This should also be done for VectorEngineWithPlugin
					Apparently OpenType can do better than TrueType, as it includes the GPOS table."
					deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.51).
					byte1 = 204 ifTrue: [
						byte2OrNil = 128 ifTrue: [ "Combining Grave Accent"
							deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.43) ].
						byte2OrNil = 129 ifTrue: [ "Combining Acute Accent"
							deltaXToCenter := advanceWidth - (boundsRight+boundsLeft * 0.65) 			]].

					"DoubleWidth code points that combine above previous and following characters.
					Codepoints between 16r035C and 16r0363.
					Example: oÕ¢o
					Don't center them"
					(byte1 = 205 and: [ byte2OrNil between: 156 and: 163 ]) ifTrue: [
						deltaXToCenter := 0.0 ].

					deltaXForDiacriticalMark := 0.0.
					deltaYForDiacriticalMark := 0.
					advanceWidth = 0.0
						ifFalse: [ "Regular glyph"
							deltaXForBaseGlyph := deltaXToCenter.
							baseBoundsTop := boundsTop ]
						ifTrue: [ "Diacritical mark"
							deltaXForBaseGlyph = 0.0  						"For instance, if the first code point to display is a diacritic, like when building a FormGlyph for it"
								ifFalse: [
									deltaXForDiacriticalMark := deltaXToCenter - deltaXForBaseGlyph * sx.
									baseBoundsTop > boundsBottom ifTrue: [
										deltaYForDiacriticalMark :=  baseBoundsTop - boundsBottom + 100 * sy ]]].
					nextGlyphX := nextGlyphX + deltaXForDiacriticalMark.
					numContours timesRepeat: [
						numBeziers := (contourData at: i) asInteger. i := i + 1.
						ttMoveToX := contourData at: i. i := i + 1.
						ttMoveToY := contourData at: i. i := i + 1.
						x := ttMoveToX * sx + nextGlyphX.
						y := ttMoveToY * sy + nextGlyphY + deltaYForDiacriticalMark.
						contourStart := x@y.
						self moveTo: contourStart.
						numBeziers timesRepeat: [
							ttEndX := contourData at: i. i := i + 1.
							ttEndY := contourData at: i. i := i + 1.
							ttControlX := contourData at: i. i := i + 1.
							ttControlY := contourData at: i. i := i + 1.
							cx := ttControlX * sx + x.
							cy := ttControlY * sy + y.
							x := ttEndX * sx + x.
							y := ttEndY * sy + y.
							self quadraticBezierTo: x@y control: cx@cy
							].
						self lineTo: contourStart.
						].
					nextGlyphX := nextGlyphX + (advanceWidth * sx) - deltaXForDiacriticalMark.
					baseIndex := 0.
					byte1 := nil.
					byte2OrNil := nil.
				]
			]
	].
	^ nextGlyphX@nextGlyphY! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6517-UseDotless-i-ifFollowedByCombiningDiacritics-JuanVuletich-2024Jul12-16h01m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6517] on 15 July 2024 at 11:41:07 am'!
!LayoutMorph methodsFor: 'initialization' stamp: 'jmv 7/15/2024 11:27:34'!
                              doClipSubmorphs
	self setProperty: #doClipSubmorphs toValue: true.! !
!LayoutMorph methodsFor: 'geometry testing' stamp: 'jmv 7/15/2024 11:34:26' prior: 50341559 overrides: 16905625!
         clipsSubmorphs
	"LayoutMorphs usually not do not clip submorphs.
	A special case is Transcript. It doesn't include a ScrollPane (that usually does clipping).
	Note: for this to work, we can't be transparent, as transparent morphs can't clip submorphs.
		Senders may also call #doAdoptWidgetsColor.
	There may be other similar cases in the future."

	^self hasProperty: #doClipSubmorphs.! !
!Transcript class methodsFor: 'ui' stamp: 'jmv 7/15/2024 11:33:02' prior: 50341574!
      open
	"
	Transcript open
	"
	| win m |
	win := TranscriptWindow new.
	win
		setLabel: 'Transcript';
		model: Transcript.
	m := TranscriptMorph new.
	win layoutMorph
		"This is needed so the Layout correctly clips the TranscriptMorph"
		doAdoptWidgetsColor;
		doClipSubmorphs;
		addMorph: m proportionalHeight: 1.
	win model when: #redrawTranscriptArea send: #invalidateBounds to: win.
	^ win openInWorld! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
| found |
found := false.
self runningWorld submorphsDo: [ :m | m class == TranscriptWindow ifTrue: [ m delete. found := true ]].
found ifTrue: [ Transcript open ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6518-LayoutMorph-submorphClipping-fix-JuanVuletich-2024Jul15-11h37m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6518] on 15 July 2024 at 12:52:26 pm'!
!Editor methodsFor: 'accessing-selection' stamp: 'jmv 7/15/2024 12:51:29'!
                     selection

	self subclassResponsibility ! !
!Editor methodsFor: 'accessing-selection' stamp: 'jmv 7/15/2024 12:51:35' prior: 16851730!
                         selectionIsEmptyOrSeparators
	"Answer true if no selection or selection is just separators (whitespace)"

	self hasSelection ifFalse: [ ^true ].
	^self selection isSeparators.
! !

TextEditor removeSelector: #selectionIsEmptyOrSeparators!

!methodRemoval: TextEditor #selectionIsEmptyOrSeparators stamp: 'Install-6519-Editor-selectionIsEmptyOrSeparators-JuanVuletich-2024Jul15-12h51m-jmv.001.cs.st 7/18/2024 14:51:46'!
selectionIsEmptyOrSeparators
	"Answer true if no selection or selection is just separators (whitespace)"

	self hasSelection ifFalse: [ ^true ].
	^self selection isSeparators!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6519-Editor-selectionIsEmptyOrSeparators-JuanVuletich-2024Jul15-12h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6519] on 17 July 2024 at 10:30:09 am'!
!Morph methodsFor: 'layout' stamp: 'jmv 7/17/2024 10:08:48' prior: 16906184!
                 someSubmorphPositionOrExtentChanged
	"Some submorph changed at any nested level.
	Must layout submorphs again."

	owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
	self layoutNeeded: true.! !
!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 7/17/2024 10:08:16' prior: 16880926!
                         model: aTextModel wrappedTo: width
	"Accept new text contents.  Lay it out, wrapping to width.
	Then fit my height to the result."
	| newExtent oldExtent |
	wrapFlag := true.
	model := aTextModel.
	newExtent := width truncated@extent y.
	extent = newExtent ifFalse: [
		oldExtent := extent.
		extent := newExtent.
		self extentChanged: oldExtent.
		self someSubmorphPositionOrExtentChanged.
		self redrawNeeded ].
	self model: aTextModel! !
!InnerTextMorph methodsFor: 'notifications' stamp: 'jmv 7/17/2024 10:09:01' prior: 16881573 overrides: 50355613!
                      someSubmorphPositionOrExtentChanged
	"Some submorph changed at any nested level.
	Must layout submorphs again."

	super someSubmorphPositionOrExtentChanged.
	textComposition ifNotNil: [ 
		textComposition composeAll.
		self fit.
		self selectionChanged ]! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 7/17/2024 10:09:04' prior: 16924880 overrides: 50355613!
             someSubmorphPositionOrExtentChanged
	"Some submorph changed at any nested level.
	Must layout submorphs again."

	super someSubmorphPositionOrExtentChanged.
	scroller ifNotNil: [ | scrollerLocation doIt |
		doIt := false.
		scroller hasVariableExtent ifTrue: [
			theScrollerExtent = scroller morphExtentInOwner ifFalse: [
				theScrollerExtent := scroller morphExtentInOwner.
				doIt := true ]].
		scrollerLocation := scroller location.
		scrollerScale = scrollerLocation scale ifFalse: [
			scrollerScale := scrollerLocation scale.
			doIt := true ].
		scrollerRadians = scrollerLocation radians ifFalse: [
			scrollerRadians := scrollerLocation radians.
			doIt := true ].
		doIt ifTrue: [ self setScrollDeltas ]].! !
!HierarchicalListMorph methodsFor: 'geometry' stamp: 'jmv 7/17/2024 10:29:58' prior: 16874328 overrides: 50355653!
                           someSubmorphPositionOrExtentChanged
	"Our extent, or some submorph changed. Must layout submorphs again."

	owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
	self layoutNeeded: true.
	self updateScrollBarsBounds! !
!PluggableListMorph methodsFor: 'geometry' stamp: 'jmv 7/17/2024 10:30:01' prior: 16923590 overrides: 50355653!
           someSubmorphPositionOrExtentChanged
	"Our extent, or some submorph changed. Must layout submorphs again."

	owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
	self layoutNeeded: true.
	self updateScrollBarsBounds! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6520-someSubmorphPositionOrExtentChanged-throughOwnerChain-JuanVuletich-2024Jul17-10h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6520] on 17 July 2024 at 10:39:47 am'!
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 7/17/2024 10:39:12' prior: 16890155 overrides: 16906128!
                   layoutSubmorphs
	"Compute a new layout based on the given layout bounds."

	submorphs isEmpty ifTrue: [
		self layoutNeeded: false.
		^self].

	"Invariant: morphExtent >=  minimumLayoutExtent"
	self refreshExtent.
	
	direction == #horizontal ifTrue: [
		self layoutSubmorphsHorizontallyIn: self layoutBounds ].

	direction == #vertical ifTrue: [
		self layoutSubmorphsVerticallyIn: self layoutBounds ].

	self invalidateBounds.
	self layoutNeeded: false.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6521-layoutTriggersRefresh-JuanVuletich-2024Jul17-10h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6521] on 17 July 2024 at 11:36:51 am'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/17/2024 11:33:33' prior: 16966253!
                  snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDo: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDo: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	save
		ifTrue: [
			"The snapshot primitive answers false if it was just called to do the snapshot.
			But image startup is resumed by returning (again) from the primitive, but this time answering true."
			isARealStartup := embeddedFlag
				ifTrue: [ self snapshotEmbeddedPrimitive ]
				ifFalse: [ self snapshotPrimitive ]]
		ifFalse: [ isARealStartup := false ].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #restoreLostChangesIfNecessary'.
			self restoreLostChangesIfNecessary ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6522-DontAutoRestoreChangesIfSaveNoQuit-JuanVuletich-2024Jul17-11h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6522] on 17 July 2024 at 12:46:28 pm'!
!TextModel methodsFor: 'accessing' stamp: 'jmv 7/17/2024 12:28:38'!
    contentsForFileSaving
	^self actualContents asPlainString! !
!Workspace methodsFor: 'accessing' stamp: 'jmv 7/17/2024 12:34:18' overrides: 50355909!
           contentsForFileSaving
	"See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:
	See also CodeProvider class >> #normalizeCodeForSaving:in:	"
	| normalized |
	normalized := self actualContents asPlainString.
	normalized := normalized copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	normalized := normalized copyReplaceAll: Character smalltalkLeftArrow asString with: ':='.
	normalized := normalized copyReplaceAll: Character smalltalkUpArrow asString with: '^'.
	^normalized! !
!CodeProvider class methodsFor: 'services' stamp: 'jmv 7/17/2024 12:33:18' prior: 50351035!
  normalizeCodeForSaving: aTextOrString in: aClassOrMetaclass
	"Adapt edited code to be suitable for saving to sources or changes files.
	Answer is a plain text.
	Additionally, if code was modified for better look and edition experience, normalize it.
	This may include reverting to ':=' for assignment, '^' for return, and any replacements of
	ASCII by Unicode symbols done by Shout.
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:
	See also Workspace >> #contentsForFileSaving"

	| answer |
	answer := aTextOrString asPlainString.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkUpArrow asString` with: '^'.
	"Apply code any normalization services. For example, try:
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment1' asSmalltalkComment ].
	CodeProvider addCodeNormalizer: [ :code :cls | cls compilerClass new format: code in: cls notifying: nil. ].
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment2' asSmalltalkComment ].
	""
	CodeProvider clearCodeNormalizers.
	"
	CodeNormalizers ifNotNil: [
		CodeNormalizers do: [ :each |
			answer := each value: answer value: aClassOrMetaclass ]].
	^answer.! !
!SystemWindow methodsFor: 'user interface' stamp: 'jmv 7/17/2024 12:29:13' prior: 16971620!
 forceSaveContentsTo: aFileEntry
	"Saves the contents to the given filename.
	
	Force overwrting the file if it exists."

	self hasSaveAs ifFalse: [^self ].
	aFileEntry forceWriteStreamDo: [ :stream |
		stream nextPutAll: model contentsForFileSaving ].
	self 
		setProperty: #lastFilenameUsedToSave toValue: aFileEntry pathName.! !
!SystemWindow methodsFor: 'user interface' stamp: 'jmv 7/17/2024 12:29:08' prior: 16971677!
                         saveContentsTo: aFileEntry
	"Saves the contents to the given filename"

	self hasSaveAs ifFalse: [^self].
	aFileEntry writeStreamDo: [ :stream |
		stream nextPutAll: model contentsForFileSaving ].
	self 
		setProperty: #lastFilenameUsedToSave toValue: aFileEntry pathName;
		notifyUserWith: 'Contents saved to', String newLineString, aFileEntry pathName.! !
!Clipboard methodsFor: 'accessing' stamp: 'jmv 7/17/2024 12:36:42' prior: 50350876!
      storeObject: anObject
	"Set new contents on the clipboard. Also export to OS.
	anObject can be a:
		String
		Text
		Form
		Morph
		Object.
	OS clipboard supports String. Other formats might be supported if ExtendedClipboardInterface is present and operative."

	| primitiveFormat id |

	"Store a copy of the object. This is appropriate in case the original object is modified after being copied to the clipboard.
	Another copy must be made again when pasting, as the same object could be pasted many times.
	Besides, store the original object, but weakly (so we don't prevent it GCed). The original object might be used in workspaces."
	(anObject isString or: [ anObject is: #Text])
		ifTrue: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: nil ]
		ifFalse: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: anObject ].
	
	self noteRecentClipping: contents.

	"Store on OS clipboard using ExtendedClipboardInterface if present.
	Warning: This has not yet been adapted to UTF-8 Unicode"
	self extendedClipboardInterface ifNotNil: [ :interface |
		interface canStore ifTrue: [
			id := self idFor: contents.
			contents isString
				ifTrue: [ ^interface storeString: contents id: id ].
			(contents is: #Text)
				ifTrue: [ ^interface storeText: contents id: id ].
			(contents is: #Form)
				ifTrue: [ ^interface storeForm: contents id: id ].
			(contents is: #Morph)
				ifTrue: [ ^interface storeForm: (contents imageForm: 32) id: id ].
			^interface storeString: contents asString id: id ]].

	"Otherwise use the clipboard primitives in the VM"
	"The VM uses UTF-8 for clipboard"
	primitiveFormat := self stringOrIdFor: contents.
	"See also CodeProvider class >> #normalizeCodeForSaving:in:	
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Workspace >> #contentsForFileSaving"
	primitiveFormat := primitiveFormat copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkLeftArrow asString with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkUpArrow asString with: '^'.
	primitiveFormat := primitiveFormat asUtf8Bytes.
	self primitiveClipboardString: primitiveFormat! !
!SmalltalkEditor methodsFor: 'clipboard' stamp: 'jmv 7/17/2024 12:38:55' prior: 16952744 overrides: 16851745!
 clipboardStringOrText
	"When pasting possibly external text into Smalltalk code,
	assume any Unicode left and up arrows are meant to be Assignment and Return.
	This is just a help to users. Not really necessary for the system itself."
	| clipContents |
	clipContents := super clipboardStringOrText.
	self replaceUnicodeArrowsWithSmalltalkArrows ifTrue: [
		clipContents := clipContents copyReplaceAll: `(Character codePoint: 16r2190) asString` with: `(Character smalltalkLeftArrow ) asString`.
		clipContents := clipContents copyReplaceAll: `(Character codePoint: 16r2191) asString` with: `(Character smalltalkUpArrow ) asString`.
		].
	^clipContents.! !
!SHTextStylerST80 methodsFor: 'private' stamp: 'jmv 7/17/2024 12:36:15' prior: 16943431 overrides: 16943209!
    privateConvertAssignmentsOffset: delta
	"See also CodeProvider class >> #normalizeCodeForSaving:in:	
	See also Clipboard >> #storeObject:
	See also Workspace >> #contentsForFileSaving"
	"Turn $_ into a left arrow"

	self
		replaceStringForRangesWithType: #assignment
		with: `Character smalltalkLeftArrow asString`
		offset: delta.
	(Preferences at: #showAssignmentAsLeftArrow)
		ifTrue: [
			"Turn := into a left arrow. Include a #zeroWidthSpace so as not to modify ranges, etc."
			self
				replaceStringForRangesWithType: #ansiAssignment
				with: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString`
				offset: delta.
			"Turn $^into up arrow"
			self
				replaceStringForRangesWithType: #return
				with: `Character smalltalkUpArrow asString`
				offset: delta ].! !

TextModel removeSelector: #saveOn:!

!methodRemoval: TextModel #saveOn: stamp: 'Install-6523-Workspace-ConvertAssigmentArrowOnSaveToFile-JuanVuletich-2024Jul17-12h40m-jmv.001.cs.st 7/18/2024 14:51:46'!
saveOn: stream
	"Saves the model to the given stream"
	stream binary.
	stream nextPutAll: self actualContents asPlainString.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6523-Workspace-ConvertAssigmentArrowOnSaveToFile-JuanVuletich-2024Jul17-12h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6523] on 18 July 2024 at 11:28:17 am'!
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 7/18/2024 11:08:44' prior: 16969059!
            displayCommandLineUsageOn: aStream
	"Display command line usage on standard out."

	[ aStream
		nextPutAll: 'Command line options:'; newLine;
		nextPutAll: '  -h Display this help message and quit'; newLine;
		nextPutAll: '  -v Display the system information, containing the version and quit'; newLine;
		nextPutAll: '  -q Just quit'; newLine;
		nextPutAll: '  -e Do not ignore exceptions, but open a Debugger'; newLine;
		nextPutAll: '  -u Install updates from CoreUpdates directory'; newLine;
		nextPutAll: '  -r <feature> Require <feature>'; newLine;
		nextPutAll: '  -d <code> Evaluate <code>'; newLine;
		nextPutAll: '  -l <codeFile> Load e.g. file in <codeFile>'; newLine;
		nextPutAll: '  -s <scriptFile> Evaluate code in <scriptFile>'; newLine;
		nextPutAll: '  -ud <directory> Set User Directory to be <directory>'; newLine;
		nextPutAll: '  -udIsBase Set User Directory to be Cuis Base directory'; newLine;
		nextPutAll: '  -- end of options; stop processing options'; newLine;
		newLine;
		nextPutAll: 'Arguments for scripts, code files, packages (and <code>):'; newLine;
		nextPutAll: '  are available in ''Smalltalk startUpScriptArguments'''; newLine;
		newLine;
		nextPutAll: 'Multiple options:'; newLine;
		nextPutAll: '  any option can be passed multiple times'; newLine;
		flush ]
	on: UnhandledError
	do: [ :exception | exception return ].! !
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 7/18/2024 11:08:57' prior: 16969104!
                      displaySystemInformationStringOn: aStream
	"Display the system information string on standard output."

	[ aStream
		nextPutAll: 'System information:';		newLine;
		nextPutAll: self systemInformationString;		newLine;
		flush ]
	on: UnhandledError
	do: [ :exception | exception return ].! !
!Transcript class methodsFor: 'preferred protocol' stamp: 'jmv 7/18/2024 11:10:01' prior: 16988099!
                           clearStdout

	logToStdout ifTrue: [
		15 timesRepeat: [ self stdout newLine ].
		self stdout flush
	]! !
!Transcript class methodsFor: 'private' stamp: 'jmv 7/18/2024 11:10:35' prior: 16988337!
                              writeToStdout: anEntry

	logToStdout ifTrue: [ self stdout nextPutAll: anEntry; flush ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6524-Flush-stdout-JuanVuletich-2024Jul18-11h15m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6524] on 18 July 2024 at 11:39:41 am'!
!Feature class methodsFor: 'convenience' stamp: 'jmv 7/18/2024 10:59:15'!
   requireInformFaiure: featureNameOrFilename
	"
	Answer whether the request is fulfilled.
	Feature require: 'StyledTextInstaller'
	Feature require: 'Sound'
	Feature require: 'Tests'
	"
	^ [ self require: featureNameOrFilename ]
		on: FeatureRequirementUnsatisfied
		do: [ :ex | PopUpMenu inform: ex messageText. false ]! !
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 7/18/2024 11:11:36' prior: 16969249!
      processCommandLineOption: optionString optionArgument: optionArgument raiseExceptions: aBoolean
	"
	A possible example (duplicated single quotes: '' should be double quotes, but not allowed in a Smalltalk comment):
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -h
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -v
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -q
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -e -d''0 zope''
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -r YAXO -rJSON -d ''Smalltalk startUpScriptArguments print'' xx YY 3492 -d'' 'here comes another' print'' -d ''{'The answer is: '. Smalltalk startUpScriptArguments first asNumber + Smalltalk startUpScriptArguments second asNumber} print'' 3 4 -- -d'' 'not this' print' ''

Squeak.exe Cuis4.2-2211x.image -r RequiredFeature1 -r RequiredFeature2 -d ''Transcript show: 'popo1'; newLine'' -d ''Transcript show: 'popo2'; newLine'' -s smalltalkScript.st param1ToScript param2ToSCript ''parametro 3 to script ->>>--// 3''
	"
	"You can use 'Smalltalk startUpScriptArguments' inside the startUp script:"


	| exceptionToIgnoreOrNil file directory |
	exceptionToIgnoreOrNil := aBoolean ifFalse: [UnhandledError] ifTrue: [nil].
	optionString caseOf: {
		[ '-h' ] -> [
			self displayCommandLineUsageOn: StdIOWriteStream stdout.
			self quit ].

		[ '-v' ] -> [ 
			self displaySystemInformationStringOn: StdIOWriteStream stdout.
			self quit ].

		[ '-q' ] -> [ self quit ].

		[ '-u' ] -> [ ChangeSet installNewUpdates ].

		[ '-r' ] -> [		"as in 		-rRequiredFeature2        or         -r RequiredFeature2"
			{ 'Feature require: '. optionArgument } print.
			[ Feature require: optionArgument ] on: FeatureRequirementUnsatisfied do: [ :ex |
				StdIOWriteStream stdout nextPutAll: ex messageText; newLine; flush.
				ex messageText print.
				self quit ] ].

		[ '-d' ] -> [		"as in 		-d ''Transcript show: 'popo1'; newLine'' -d''Transcript show: 'popo2'; newLine''        (duplicated singleQuotes should read doubleQuote)"
			{ 'Compiler evaluate: '. optionArgument } print.
			[ Compiler evaluate: optionArgument ] on: exceptionToIgnoreOrNil do: [ :ex | ex return] ].

		['-l' ] -> ["file in the file"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'File in: '. optionArgument. ' -> '. file} print.
			[file readStreamDo: [ :stream | stream fileIn ]] on: exceptionToIgnoreOrNil do: [ :ex | ex return]].

		[ '-s' ] -> [		"as in 		-s smalltalkScript.st paramAlScript1 paramAlSCript2 ''parameter to script script ->>>--// 3'' 			(duplicated singleQuotes should read doubleQuote)"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'Compiler evaluate contents of file named: '. optionArgument. ' -> '. file. ' arguments: '. self startUpScriptArguments } print.
			file exists ifTrue: [
				file readStreamDo: [ :stream |
					[ Compiler evaluate: stream contentsOfEntireFile ] on: exceptionToIgnoreOrNil do: [ :ex | ex return]]]].

		[ '-ud' ] -> [
			directory := optionArgument asDirectoryEntry.
			DirectoryEntry setUserBaseDirectory: directory ].

		[ '-udIsBase' ] -> [ DirectoryEntry setUserBaseDirectoryAsCuisBase ].
	}
	otherwise: [].! !
!NegativePowerError methodsFor: 'exceptionDescription' stamp: 'jmv 7/18/2024 11:04:13' prior: 16910886 overrides: 16782494!
                             defaultAction

	"Disable this preference to have Float nan answer (if Float receiver or argument) or Error message"
	| answer |
	(Preferences at: #askToInstallComplexPackage) ifTrue: [
		answer := PopUpMenu
			withCaption:
'Square (or even) Root of a negative Number:
Complex number support is not loaded
Would you like me to load it for you now?'
			chooseFrom: #(
				'Load Complex package'
				'Do not load Complex package'
				'Do not load Complex package and don''t ask again').
		answer = 1 ifTrue: [
			Feature requireInformFaiure: #'Complex'.
			Smalltalk at: #Complex ifPresent: [ :cplx |
				^ (cplx basicReal: receiver imaginary: 0) perform: selector withArguments: arguments ]].
		answer = 3 ifTrue: [
			(Preferences at: #askToInstallComplexPackage put: false)]].
	^ super defaultAction! !
!Theme class methodsFor: 'user interface' stamp: 'jmv 7/18/2024 11:04:17' prior: 16986444!
  loadAdditionalThemes
	"Load additional themes and reopen menu."
	Feature requireInformFaiure: #'Theme-Themes'.
	self changeTheme! !
!TheWorldMenu methodsFor: 'menu' stamp: 'jmv 7/18/2024 11:04:21' prior: 16984077!
          openCommentGuide
	"In ClassCommentBrowser.pck"
	Smalltalk at: #CommentGuideWindow ifAbsent: [ 
		(PopUpMenu 
		confirm: 'The Class Comment Guide is not loaded', String newLineString, 'Would you like me to load it for you now?')
		ifTrue: [Feature requireInformFaiure: #'ClassCommentBrowser'] 
	].
	Smalltalk at: #CommentGuide ifPresent: [ :cls | ^cls open ].
	self inform: 'Please install optional package ClassCommentBrowser.pck.st', String newLineString, 'Feature require: #''ClassCommentBrowser'' '! !
!TheWorldMenu methodsFor: 'menu' stamp: 'jmv 7/18/2024 11:04:24' prior: 16984095!
                     openPackageDownloader
	"In PackageDownloader.pck"
	Smalltalk at: #PackageDownloaderWindow ifAbsent: [ 
		(PopUpMenu 
		confirm: 'The Package Downloader is not loaded', String newLineString, 'Would you like me to load it for you now?')
		ifTrue: [Feature requireInformFaiure: #'PackageDownloader'] 
	].
	Smalltalk at: #PackageDownloaderWindow ifPresent: [ :cls | ^cls open ].
	self inform: 'Please install optional package PackageDownloader.pck.st', String newLineString, 'Feature require: #''PackageDownloader'' '! !
!TheWorldMenu methodsFor: 'menu' stamp: 'jmv 7/18/2024 11:04:28' prior: 16984113!
         openPackageInstaller
	"In PackageInstaller.pck"
	Smalltalk at: #PackageInstallerWindow ifAbsent: [ 
		(PopUpMenu 
		confirm: 'The Package Installer is not loaded', String newLineString, 'Would you like me to load it for you now?')
		ifTrue: [Feature requireInformFaiure: #PackageInstaller ] 
	].
	Smalltalk at: #PackageInstallerWindow ifPresent: [ :cls | ^cls open ].
	self inform: 'Please install optional package PackageInstaller.pck.st', String newLineString, 'Feature require: #''PackageInstaller'' '! !
!TheWorldMenu methodsFor: 'menu' stamp: 'jmv 7/18/2024 11:04:33' prior: 16984131!
                  openTerseGuide
	"In TerseGuide.pck"
	Smalltalk at: #TerseGuideWindow ifAbsent: [ 
		(PopUpMenu 
		confirm: 'The Terse Guide is not loaded', String newLineString, 'Would you like me to load it for you now?')
		ifTrue: [Feature requireInformFaiure: #'TerseGuide'] 
	].
	Smalltalk at: #TerseGuideWindow ifPresent: [ :cls | ^cls openTerseGuide ].
	self inform: 'Please install optional package TerseGuide.pck.st', String newLineString, 'Feature require: #''TerseGuide'' '! !
!FeatureRequirement methodsFor: 'requires' stamp: 'jmv 7/18/2024 11:01:37' prior: 16859992!
             require
	"See if all the transitive closure of requirements can be met and answer the load order if so"

	| packagesToLoad |
	
	"Preflight before load 
	  [1] Build transitive closure as load order where Feature comes 
	       before its required features."
	packagesToLoad := self
			requireUnlessIn: OrderedCollection new
			main: nil
			requiringFeature: nil
			allRequiringFeatures: #().
	
	"Transcript show: 'packagesToLoad: '; newLine.
	packagesToLoad do: [ :x |Transcript show: x; newLine ].
	Transcript newLine."
	
	"[2] Check to see that each requirement is actually satisfied"
	packagesToLoad do: [ :fReq | fReq checkRequirement ].

	"[3] Load required packages before packages that require them"
	packagesToLoad reverseDo: [ :requirement |
		requirement isAlreadySatisfied ifFalse: [
			requirement install ]].
	self isAlreadySatisfied ifFalse: [
		self install ]! !
!FeatureRequirement methodsFor: 'requires' stamp: 'jmv 7/18/2024 11:02:19' prior: 16860089!
                      satisfyRequirementsAndInstall
	"Like #require, but install me even if already satisified (i.e. installed)"

	| packagesToLoad |
		
	"Preflight before load"
	packagesToLoad := self
			requireUnlessIn: OrderedCollection new
			main: self
			requiringFeature: self
			allRequiringFeatures: #().
	
	"Check to see that each requirement is actually satisfied"
	packagesToLoad do: [ :fReq | fReq checkRequirement ].
	
	"All requirements are satisfied; do the deed"
	packagesToLoad reverseDo: [ :requirement |
		requirement isAlreadySatisfied ifFalse: [
			requirement install ]].
	self install! !
!CodePackageFile class methodsFor: 'services' stamp: 'jmv 7/18/2024 11:03:26' prior: 16824766!
                   installPackage: aFileEntry

	| fullName pkName req |
	fullName := aFileEntry pathName.
	pkName := CodePackageFile packageNameFrom: fullName.
	req := (FeatureRequirement name: pkName)
		pathName: fullName.
	"Install with all requirements"
	[ req satisfyRequirementsAndInstall ]
		on: FeatureRequirementUnsatisfied
		do: [ :ex | PopUpMenu inform: ex messageText ]! !

FeatureRequirementUnsatisfied removeSelector: #defaultAction!

!methodRemoval: FeatureRequirementUnsatisfied #defaultAction stamp: 'Install-6525-Startup-PackageLoadingFailure-JuanVuletich-2024Jul18-11h33m-jmv.001.cs.st 7/18/2024 14:51:47'!
defaultAction
	"The default action taken if the exception is signaled."

	self messageText print.
	PopUpMenu inform: self messageText.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6525-Startup-PackageLoadingFailure-JuanVuletich-2024Jul18-11h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6517] on 15 July 2024 at 11:41:07 am'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
PreferenceSet setDefaultFont: FontFamily defaultFamilyName.
Smalltalk garbageCollect.
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6526-GarbageCollect-Cleanup-JuanVuletich-2024Jul15-11h37m-jmv.001.cs.st----!

----QUIT----(18 July 2024 14:51:51) Cuis7.1-6526-32.image priorSource: 696675!

----STARTUP---- (26 July 2024 17:29:06) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6526-32.image!


'From Cuis7.1 [latest update: #6526] on 25 July 2024 at 10:39:59 am'!
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:38:29'!
                 < another
	"Answer whether the receiver sorts before another.
	The collation order is case sensitive.
	Note: Behavior the same for String, Symbol, UnicodeString, UnicodeSymbol and Text,
	both as receiver and as argument, if they hold same Characters."

	self subclassResponsibility.! !
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:29:56'!
                      <= another
	"Answer whether the receiver sorts after aString.
	The collation order is case sensitive."
	"Reduce all cases to #< and #= to simplify code."

	"Comparing for equality may is faster in most casts. Try it first."
	self = another ifTrue: [ ^true ].

	^self < another.! !
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:38:14' overrides: 16947162!
       = another
	"Note: Behavior the same for String, Symbol, UnicodeString, UnicodeSymbol and Text,
	both as receiver and as argument, if they hold same Characters."

	self subclassResponsibility! !
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:29:53'!
                  > another
	"Answer whether the receiver sorts after aString.
	The collation order is case sensitive."
	"Reduce all cases to #< and #= to simplify code."

	"Comparing for equality may is faster in most casts. Try it first."
	self = another ifTrue: [ ^false ].

	^(self < another) not.! !
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:23:43'!
                     >= another
	"Answer whether the receiver sorts after or equal to aString.
	The collation order is case sensitive."
	"Reduce all cases to #< and #= to simplify code."

	^(self < another) not.! !
!CharacterSequence methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:36:22' overrides: 16947199!
                              hash
	"#hash is implemented, because #= is implemented.
	Note: #hash must be the same for String, Symbol, UnicodeString, UnicodeSymbol and Text
	if they hold same Characters."

	self subclassResponsibility! !
!String methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:29:37' prior: 16959514 overrides: 50356590!
          < aString
	"Answer whether the receiver sorts before aString.
	The collation order is case sensitive."

	"Comparing for equality may is faster in most casts. Try it first."
	self = aString ifTrue: [ ^false ].

	"Let them handle us (already knowing we are not equal)"
	aString isByteString ifFalse: [ ^(aString < self) not ].

	^ (String compare: self with: aString) = 1.! !
!UnicodeString methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:29:46' prior: 16992974 overrides: 50356590!
                              < aString
	"Answer whether the receiver sorts before aString.
	The collation order is case sensitive."

	"Comparing for equality may is faster in most casts. Try it first."
	self = aString ifTrue: [ ^false ].

	"If we are ascii, we have same bytes as equivalent String."
	self isAscii ifTrue: [
		aString isByteString ifTrue: [
			"Do comparison like String does it."
			^ (String compare: bytes with: aString) = 1].
		(aString isUnicodeString and: [aString isAscii]) ifTrue: [
			"aString is also an ascii UnicodeString. Their bytes are also same as equiv String."
			^ (String compare: bytes with: aString bytes) = 1]].

"This needs a reasonable implementation for Unicode (this behavior is INCORRECT).
It is also slow.
At least, it is consistent with #< in Character"
self flag: #unicodeNeedsImprovement.
self flag: #slowUnicode.
	^ (UnicodeString compare: self with: aString) = 1.! !

UnicodeString removeSelector: #>=!

!methodRemoval: UnicodeString #>= stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
>= aString
	"Answer whether the receiver sorts after or equal to aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ true ].

	"If we are ascii, we have same bytes as equivalent String."
	self isAscii ifTrue: [
		aString isByteString ifTrue: [
			"Do comparison like String does it."
			^ (String compare: bytes with: aString) >= 2].
		(aString isUnicodeString and: [aString isAscii]) ifTrue: [
			"aString is also an ascii UnicodeString. Their bytes are also same as equiv String."
			^ (String compare: bytes with: aString bytes) >= 2]].

"This needs a reasonable implementation for Unicode (this behavior is INCORRECT).
It is also slow.
At least, it is consistent with #< in Character"
self flag: #unicodeNeedsImprovement.
self flag: #slowUnicode.
	^ (UnicodeString compare: self with: aString) >= 2!

UnicodeString removeSelector: #>!

!methodRemoval: UnicodeString #> stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
> aString
	"Answer whether the receiver sorts after aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ false ].

	"If we are ascii, we have same bytes as equivalent String."
	self isAscii ifTrue: [
		aString isByteString ifTrue: [
			"Do comparison like String does it."
			^ (String compare: bytes with: aString) = 3].
		(aString isUnicodeString and: [aString isAscii]) ifTrue: [
			"aString is also an ascii UnicodeString. Their bytes are also same as equiv String."
			^ (String compare: bytes with: aString bytes) = 3]].

"This needs a reasonable implementation for Unicode (this behavior is INCORRECT).
It is also slow.
At least, it is consistent with #< in Character"
self flag: #unicodeNeedsImprovement.
self flag: #slowUnicode.
	^ (UnicodeString compare: self with: aString) = 3!

UnicodeString removeSelector: #<=!

!methodRemoval: UnicodeString #<= stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
<= aString
	"Answer whether the receiver sorts before or equal to aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ true ].

	"If we are ascii, we have same bytes as equivalent String."
	self isAscii ifTrue: [
		aString isByteString ifTrue: [
			"Do comparison like String does it."
			^ (String compare: bytes with: aString) <= 2].
		(aString isUnicodeString and: [aString isAscii]) ifTrue: [
			"aString is also an ascii UnicodeString. Their bytes are also same as equiv String."
			^ (String compare: bytes with: aString bytes) <= 2]].

"This needs a reasonable implementation for Unicode (this behavior is INCORRECT).
It is also slow.
At least, it is consistent with #< in Character"
self flag: #unicodeNeedsImprovement.
self flag: #slowUnicode.
	^ (UnicodeString compare: self with: aString) <= 2!

String removeSelector: #>=!

!methodRemoval: String #>= stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
>= aString
	"Answer whether the receiver sorts after or equal to aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ true ].

	"Let them handle us"
	aString isByteString ifFalse: [ ^aString <= self ].

	^ (String compare: self with: aString) >= 2!

String removeSelector: #>!

!methodRemoval: String #> stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
> aString
	"Answer whether the receiver sorts after aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ false ].

	"Let them handle us"
	aString isByteString ifFalse: [ ^aString < self ].

	^ (String compare: self with: aString) = 3!

String removeSelector: #<=!

!methodRemoval: String #<= stamp: 'Install-6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st 7/26/2024 17:29:06'!
<= aString
	"Answer whether the receiver sorts before or equal to aString.
	The collation order is case sensitive."

	"Any object is equal to itself"
	self == aString ifTrue: [ ^ true ].

	"Let them handle us"
	aString isByteString ifFalse: [ ^aString >= self ].

	^ (String compare: self with: aString) <= 2!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6527-StringSortingSimplification-JuanVuletich-2024Jul25-09h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6526] on 25 July 2024 at 10:49:49 am'!
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:49:21' prior: 16810652!
                              <= aCharacter
	"Answer whether the receiver is less than or equal to the argument."
	"Reduce all cases to #< and #= to simplify code."

	self == aCharacter ifTrue: [ ^true ].
	^self < aCharacter.! !
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:49:27' prior: 16810658!
     > aCharacter
	"Answer whether the receiver is greater than the argument."
	"Reduce all cases to #< and #= to simplify code."

	self == aCharacter ifTrue: [ ^false ].
	^(self < aCharacter) not.! !
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 10:49:32' prior: 16810671!
        >= aCharacter
	"Answer whether the receiver is greater than or equal to the argument."
	"Reduce all cases to #< and #= to simplify code."

	^(self < aCharacter) not.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6528-CharacterSortingSimplification-JuanVuletich-2024Jul25-10h39m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6528] on 25 July 2024 at 2:39:16 pm'!
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:36:28' prior: 16960684!
                    basicCaseInsensitiveOrder
	"Case insensitive compare sorts null, space, digits, letters, all the rest..."
	| newOrder order |
	newOrder := Array new: 256.
	order := -1.
	newOrder at: 0+1 put:  (order := order+1).
	32 to: 64 do: [ :c |
		newOrder at: c + 1 put: (order := order+1)].
	#(92 94 124 126 183 215 247) do: [ :c | "\^|~¬∑√∑√ó"
		newOrder at: c + 1 put: (order := order+1)].
	16r90 to: 16r9F do: [:c| "special math operators"
		newOrder at: c + 1 put: (order := order+1)].
	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |
		order := order+1.
		newOrder at: upperAndLowercase first codePoint + 1 put: order.
		(upperAndLowercase first = $√ø or: [upperAndLowercase first = $√ü]) ifFalse: [
			newOrder at: upperAndLowercase second codePoint + 1 put: order ]].
	1 to: newOrder size do: [ :i |
		(newOrder at: i) ifNil: [
			newOrder at: i put: (order := order+1)]].
	^newOrder asByteArray.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:36:42' prior: 16960714!
        basicCaseSensitiveOrder
	"Case sensitive compare sorts null, space, digits, letters, all the rest..."
	| newOrder order lowercase |
	newOrder := Array new: 256.
	order := -1.
	newOrder at: 0+1 put:  (order := order+1).
	32 to: 64 do: [ :c |
		newOrder at: c + 1 put: (order := order+1)].
	#(92 94 124 126 183 215 247) do: [ :c | "\^|~¬∑√∑√ó"
		newOrder at: c + 1 put: (order := order+1)].
	16r90 to: 16r9F do: [:c| "special math operators"
		newOrder at: c + 1 put: (order := order+1)].
	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |
		(upperAndLowercase first = $√ø or: [upperAndLowercase first = $√ü]) ifFalse: [
			newOrder at: upperAndLowercase first codePoint + 1 put: (order := order+1) ]].
	Character uppercaseLowercaseAndUnaccentedLetters do: [ :upperAndLowercase |
		lowercase := (upperAndLowercase first = $√ø or: [upperAndLowercase first = $√ü])
			ifTrue: [ upperAndLowercase first ]
			ifFalse: [ upperAndLowercase second ].
		newOrder at: lowercase codePoint + 1 put: (order := order+1) ].
	1 to: newOrder size do: [ :i |
		(newOrder at: i) ifNil: [
			newOrder at: i put: (order := order+1)]].
	order = 255 ifFalse: [self error: 'order problem'].
	^newOrder asByteArray.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:37:08' prior: 16960752!
   caseInsensitiveOrder
	^`String basicCaseInsensitiveOrder`.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:37:12' prior: 16960757!
        caseSensitiveOrder
	^`String basicCaseSensitiveOrder`.! !
!Character class methodsFor: 'class initialization' stamp: 'jmv 7/25/2024 14:36:05' prior: 50352647!
 uppercaseLowercaseAndUnaccentedLetters
	"Answer all uppercase and lowercase letters in standard collation order.
	For accented characters, include the non-accented ones.
	Note that $√ü is 'LATIN SMALL LETTER SHARP S' and ISO 8859-1 doesn't have an uppercase version.
	Note: for $√ø, 'Latin Small Letter Y with diaeresis' the uppercase version is not Latin 1"
self flag: #unicodeNeedsImprovement.
	^#(
		'Aa' '√Ä√†Aa' '√Å√°Aa' '√Ç√¢Aa' '√É√£Aa' '√Ñ√§Aa' '√Ö√•Aa'
		'Bb'
		'Cc' '√á√ßCc'
		'Dd'
		'Ee' '√à√®Ee' '√â√©Ee' '√ä√™Ee' '√ã√´Ee'
		'Ff' 'Gg' 'Hh'
		'Ii' '√å√¨Ii' '√ç√≠Ii' '√é√ÆIi' '√è√ØIi'
		'Jj' 'Kk' 'Ll' 'Mm'
		'Nn' '√ë√±Nn'
		'Oo' '√í√≤Oo' '√ì√≥Oo' '√î√¥Oo' '√ï√µOo' '√ñ√∂Oo'
		'Pp' 'Qq' 'Rr' 'Ss' 'Tt'
		'Uu' '√ô√πUu' '√ö√∫Uu' '√õ√ªUu' '√ú√ºUu'
		'Vv' 'Ww' 'Xx'
		'Yy' '√ù√ΩYy' '√øy'
		'Zz'
		'√Ü√¶' '√ê√∞' '√ò√∏' '√û√æ' '√ü'
	).! !
!Character class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:36:48' prior: 16811758!
                        basicLookupTables
	| lowercaseMappingTable uppercaseMappingTable unaccentedTable |
	lowercaseMappingTable := Array new: 256.
	uppercaseMappingTable := Array new: 256.
	unaccentedTable := ByteArray new: 256.
	0
		to: 255
		do: [ :idx | | char |
			"Default to an identity mapping with a false truth mapping"
			char := self codePoint: idx.
			lowercaseMappingTable
				at: idx + 1 put: char.
			uppercaseMappingTable
				at: idx + 1 put: char.
			unaccentedTable at: idx + 1 put: idx].
	"Now override as needed"
	Character uppercaseLowercaseAndUnaccentedLetters do: [ :group | | uppercase lowercase |
		(group first = $√ø or: [group first = $√ü])
			ifFalse: [ | lowercaseChar uppercaseChar |
				uppercase := group first codePoint.
				lowercase := group second codePoint.
				lowercaseChar := self codePoint: lowercase.
				uppercaseChar := self codePoint: uppercase.
				lowercaseMappingTable
					at: lowercase + 1 put: lowercaseChar;
					at: uppercase + 1 put: lowercaseChar.
				uppercaseMappingTable
					at: lowercase + 1 put: uppercaseChar;
					at: uppercase + 1 put: uppercaseChar.
				group size > 2
					ifTrue: [|unaccentedUppercase unaccentedLowercase|
						unaccentedUppercase := group third codePoint.
						unaccentedLowercase := group fourth codePoint.
						unaccentedTable
							at: uppercase+1 put: unaccentedUppercase;
							at: lowercase+1 put: unaccentedLowercase]]
			ifTrue: [ | lowercaseChar |
				lowercase := group first codePoint.
				lowercaseChar := self codePoint: lowercase.
				lowercaseMappingTable
					at: lowercase + 1 put: lowercaseChar.
				uppercaseMappingTable
					at: lowercase + 1 put: lowercaseChar.
				group size > 1
					ifTrue: [|unaccentedLowercase|
						unaccentedLowercase := group second codePoint.
						unaccentedTable
							at: lowercase+1 put: unaccentedLowercase]]].
	^{ lowercaseMappingTable. uppercaseMappingTable. unaccentedTable}.! !
!Character class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:37:20' prior: 16811814!
                   lowercaseMappingTable
	^`Character basicLookupTables at: 1`.! !
!Character class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:37:25' prior: 16811819!
   unaccentedTable
	^`Character basicLookupTables at: 3`.! !
!Character class methodsFor: 'static state' stamp: 'jmv 7/25/2024 14:37:29' prior: 16811824!
         uppercaseMappingTable
	^`Character basicLookupTables at: 2`.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6529-UnaccentedTweaks-JuanVuletich-2024Jul25-14h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6529] on 25 July 2024 at 2:45:35 pm'!
!Character class methodsFor: 'class initialization' stamp: 'jmv 7/25/2024 14:42:12' prior: 16811042 overrides: 16916245!
            initialize
	"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
	http://www.unicode.org/L2/L1999/UnicodeData.html
	Character initialize
	"

	| fields codePoint codePointName generalCategory canonicalCombiningClass characterDecompositionMapping decomposition composition |
	UppercaseLettersTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	LowercaseLettersTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	SymbolsLikeTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	DiacriticalMarksTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	CanonicalCombiningClasses := Dictionary new.
	DecompositionMapping := Dictionary new.
	CompositionMapping := Dictionary new.
	(DirectoryEntry smalltalkImageDirectory // 'UnicodeData.txt') readStreamDo: [ :strm |
		[strm atEnd] whileFalse: [
			fields := strm nextLine substringsSeparatedBy: $;.
			(#(4 5 6) includes: fields first size) ifFalse: [ fields first print. self error: 'Bad UnicodeData.txt file' ].
			codePoint := ('16r', fields first) asNumber.
			codePointName := fields at: 2.
			generalCategory := fields at: 3.
			codePoint <= 16r1FFFF ifTrue: [
				({ 'Lu'. 'Lt' } includes: generalCategory) ifTrue: [ UppercaseLettersTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Ll'. 'Lo' } includes: generalCategory) ifTrue: [ LowercaseLettersTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Pc'. 'Pd'. 'Po'. 'Sm'. 'Sc'. 'Sk'. 'So' } includes: generalCategory) ifTrue: [ SymbolsLikeTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Mn'. 'Mc'. 'Me' } includes: generalCategory) ifTrue: [ DiacriticalMarksTable bitBooleanAt: codePoint+1 put: true ]].
			canonicalCombiningClass := (fields at: 4) asNumber.
			canonicalCombiningClass = 0 ifFalse: [
				CanonicalCombiningClasses at: codePoint put: canonicalCombiningClass ].
			characterDecompositionMapping := fields at: 6.
			(characterDecompositionMapping size > 0 and: [ characterDecompositionMapping first ~= $< ]) ifTrue: [
				decomposition := characterDecompositionMapping substrings collect: [ :s | ('16r', s) asNumber].
				DecompositionMapping at: codePoint put: decomposition.
				decomposition size > 1 ifTrue: [
					composition := CompositionMapping at: decomposition first ifAbsentPut: [Dictionary new].
					composition at: decomposition second put: codePoint.
					decomposition size > 2 ifTrue: [self error: decomposition printString print].
					]].
			"
			uppercaseMapping := fields at: 13. lowercaseMapping := fields at: 14. titlecaseMapping := fields at: 15.
			Random next > 10.999 | (generalCategory = 'So') ifTrue: [
				{codePoint hex. codePointName. generalCategory} print ].
			decimalDigitValue := fields at: 7. digitValue := fields at: 8. numericValue := fields at: 9.
			decimalDigitValue isEmpty & digitValue isEmpty & numericValue isEmpty ifFalse: [
				{'numeric'. codePoint. codePointName. generalCategory. decimalDigitValue. digitValue. numericValue} print].
			"
			]].
	self initializeNamedCharactersMap.! !

Character initialize!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Character initialize.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6530-MinusSign-isSymbolLike-JuanVuletich-2024Jul25-14h42m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6530] on 25 July 2024 at 3:09:16 pm'!
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 14:57:44'!
                          collatesBefore: aCharacter
	"Compare with the standard case sensitive collation order.
	Sort by #collatingCategory, and if same category,
	sort by unaccented version of the character."

	| myCat theirCat |
	self == aCharacter ifTrue: [ ^false ].

	myCat := self collatingCategory.
	theirCat := aCharacter collatingCategory.
	myCat = theirCat ifFalse: [
		"Lower collating category goes first"
		^myCat < theirCat ].

	self isLetter ifTrue: [ "Then both are"
		| meWithoutDiacritics theyWithoutDiacritics |
		meWithoutDiacritics := self  asUnaccented.
		theyWithoutDiacritics := aCharacter asUnaccented.
		"If not the same base character, compare base character"
		meWithoutDiacritics = theyWithoutDiacritics ifFalse: [
			^meWithoutDiacritics codePoint < theyWithoutDiacritics codePoint ].
		"Same base character... just compare code points"
		^self codePoint < aCharacter codePoint ].
	
	"Non-letters in same collating category? -> Lower codePoint goes first."
	^self codePoint < aCharacter codePoint.! !
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 15:07:16'!
              collatingCategory
	"Needs to be consistent with #basicCaseSensitiveOrder"
	"
	0: Character null
	1: Separators
	2: #isSymbolLine
	3: Decimal digits
	4: Uppercase Letters
	5: Lowercase Letters
	6: other
	"
	self codePoint = 0 ifTrue: [ ^0 ].
	self isSeparator ifTrue: [ ^1 ].
	self isSymbolLike ifTrue: [ ^2 ].
	self isDigit ifTrue: [ ^3 ].
	self isUppercase ifTrue: [ ^4 ].
	self isLowercase ifTrue: [ ^5 ].
	^6! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6531-Character-collatesBefore-JuanVuletich-2024Jul25-14h48m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6531] on 25 July 2024 at 3:56:48 pm'!
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 15:53:31' prior: 50356888!
    basicCaseInsensitiveOrder
	"Only for the first 256 Unicode code points.
	Case insensitive
	Follow #collatesBefore:"

	| sorted answer order |
	sorted := (0 to: 255) asArray collect: [ :i | Character codePoint: i ] ::
		sort: [ :a :b |
			a asLowercase = b asLowercase
				ifTrue: [ a collatesBefore: b ]
				ifFalse: [	 	a asLowercase collatesBefore: b asLowercase ]].
	answer := Array new: 256.
	order := -1.
	sorted do: [ :c |
		c isUppercase ifFalse: [
			answer at: c codePoint + 1 put: (order := order+1)]].
	sorted do: [ :c |
		c isUppercase ifTrue: [
			answer at: c codePoint + 1 put: (answer at: c asLowercase codePoint + 1)]].
	^answer asByteArray.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 15:53:34' prior: 50356920!
                basicCaseSensitiveOrder
	"Only for the first 256 Unicode code points.
	Case sensitive
	Follow #collatesBefore:"

	| sorted answer order |
	sorted := (0 to: 255) asArray collect: [ :i | Character codePoint: i ] :: sort: [ :a :b | a collatesBefore: b ].
	answer := Array new: 256.
	order := -1.
	sorted do: [ :c | answer at: c codePoint + 1 put: (order := order+1)].
	order = 255 ifFalse: [self error: 'order problem'].
	^answer asByteArray.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 15:53:54' prior: 50356961!
           caseInsensitiveOrder
	^`String basicCaseInsensitiveOrder`.! !
!String class methodsFor: 'static state' stamp: 'jmv 7/25/2024 15:53:47' prior: 50356966!
        caseSensitiveOrder
	^`String basicCaseSensitiveOrder`.! !
!Character methodsFor: 'comparing' stamp: 'jmv 7/25/2024 15:54:18' prior: 16810639!
                  < aCharacter
	"Compare with the standard case sensitive collation order."

	self == aCharacter ifTrue: [ ^false ].

	(self codePoint < 256 and: [ aCharacter codePoint < 256 ]) ifTrue: [
		^String does: self collateBefore: aCharacter ].

	^self collatesBefore: aCharacter.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6532-BetterCharacterCollation-JuanVuletich-2024Jul25-15h12m-jmv.005.cs.st----!

'From Cuis7.1 [latest update: #6526] on 25 July 2024 at 11:45:45 am'!

SmalltalkCompleter initialize.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6533-CharacterCollationJustChanged-JuanVuletich-2024Jul25-10h49m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6533] on 25 July 2024 at 4:15:13 pm'!
!Browser methodsFor: 'message list' stamp: 'jmv 7/25/2024 16:14:48' prior: 16798415 overrides: 50347680!
                       messageList
	"Answer an Array of the message selectors of the currently selected message category, provided that the messageCategoryListIndex is in proper range.  Otherwise, answer an empty Array  If messageCategoryListIndex is found to be larger than the number of categories (it happens!!), it is reset to zero."
	| classOrMetaClassOrganizer answer |
	classOrMetaClassOrganizer := self classOrMetaClassOrganizer.
	classOrMetaClassOrganizer isNil ifTrue: [ ^#() ].
	answer := (selectedMessageCategory isNil or: [ selectedMessageCategory == ClassOrganizer allCategory ])
		ifTrue: [classOrMetaClassOrganizer allMethodSelectors]
		ifFalse: [classOrMetaClassOrganizer listAtCategoryNamed: selectedMessageCategory].	
	answer isNil ifTrue: [
		selectedMessageCategory := nil.
		answer := #() ].
	^answer! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6534-SelectorSortingMovedToCharacterCollation-JuanVuletich-2024Jul25-16h14m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6534] on 25 July 2024 at 6:38:36 pm'!
!HaloMorph methodsFor: 'event handling' stamp: 'jmv 7/25/2024 18:33:53' prior: 16871441!
                 popUpFor: aMorph handPosition: handPosition hand: hand

	hand halo: self.
	hand world addMorphFront: self.
	self target: aMorph.
	positionOffset := handPosition - aMorph morphPositionInWorld.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6535-addHalo-fix-JuanVuletich-2024Jul25-18h38m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6535] on 26 July 2024 at 11:19:51 am'!
!WorldMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:10:39' overrides: 16907530!
                         includeInNewMorphMenu
	"Not to be instantiated from the menu"
	^ false! !
!ClassNameRequestMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:13:48' overrides: 16907530!
                              includeInNewMorphMenu
	"Not to be instantiated from the menu"
	^ false! !
!DraggableButtonMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:13:31' overrides: 16923117!
                               includeInNewMorphMenu
	"Not to be instantiated from the menu"
	^ false! !
!HoverableButtonMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:13:18' overrides: 16923117!
                               includeInNewMorphMenu
	"Not to be instantiated from the menu"
	^ false! !
!TileResizeMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:14:51' overrides: 16796809!
    categoryInNewMorphMenu

	^ 'User Interface'! !
!SmalltalkCompleterMorph class methodsFor: 'new-morph participation' stamp: 'jmv 7/26/2024 11:11:00' overrides: 16907530!
                       includeInNewMorphMenu
	"Not to be instantiated from the menu"
	^ false! !
!AutoCompleterMorph class methodsFor: 'instance creation' stamp: 'jmv 7/26/2024 11:18:23' prior: 16785230 overrides: 16907514!
                       initializedInstance
	| completer m |
	completer := SmalltalkCompleter withModel: (TextModel withText: 'Small').
	completer
		instVarNamed: 'position'
		put: 5.
	completer computeEntries.
	m := completer morphClass
		completer: completer
		position: `10@10`.
	completer instVarNamed: 'menuMorph' put: m.
	^m! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6536-NewMorph-menu-tweaks-JuanVuletich-2024Jul26-11h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6536] on 26 July 2024 at 11:50:13 am'!
!IniFileSection methodsFor: 'enumerating' stamp: 'mir 7/18/2024 17:11:55'!
                               entriesDo: aBlock
	entries keysAndValuesDo: [:key :value | aBlock value: key value: value]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6537-IniFileSection-entriesDo-MichaelRueger-2024Jul26-11h48m-mir.001.cs.st----!

'From Cuis7.1 [latest update: #6536] on 26 July 2024 at 11:50:29 am'!
!SystemDictionary methodsFor: 'image, changes name' stamp: 'mir 7/23/2024 14:35:49' prior: 16963182!
                        alternativeSourcesName
	"Answer the alternative full path to the sources file.
	If Sources not found at #defaultSourcesName (this image folder), 
	seek for them here (standard image folder)."
	"
	Smalltalk alternativeSourcesName
	"
	"Answer the default full path to the version-stable source code"
	^ self vmPath , 'CuisImage' , '/' , SourceFileVersionString , '.sources'! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6538-alternativeSourcesName-MichaelRueger-2024Jul26-11h50m-mir.001.cs.st----!

----QUIT----(26 July 2024 17:29:20) Cuis7.1-6538-32.image priorSource: 797752!

----STARTUP---- (27 July 2024 22:13:04) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6538-32.image!


'From Cuis7.1 [latest update: #6538] on 27 July 2024 at 3:17:32 pm'!
!WorldMorph methodsFor: 'change reporting' stamp: 'KenD 7/27/2024 07:32:54'!
                       addedMorphx: aMorph
	"Notify the receiver that the given morph was just added."
	super addedMorph: aMorph.
	self firstHand newMouseFocus: nil. "Hand need to reset mouseFocus"
	self taskbar ifNotNil: [ :tb |
		tb wasOpened: aMorph ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6539-ReleaseMouseFocus-whenMorphAddedToWorld-KenDickey-2024Jul27-15h16m-KenD.001.cs.st----!

----QUIT----(27 July 2024 22:13:18) Cuis7.1-6539-32.image priorSource: 827122!

----STARTUP---- (28 July 2024 15:54:10) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6539-32.image!


'From Cuis7.1 [latest update: #6539] on 28 July 2024 at 3:50:15 pm'!
!Behavior methodsFor: 'enumerating' stamp: 'jmv 7/28/2024 15:44:50'!
                             allInstancesDoAlt: aBlock
	"Evaluate aBlock with each of the current instances of the receiver."
	"Alternative implementation of #allInstancesDo:
	iterating using #someInstance / #nextInstance.
	Use with care."

	| inst next |
	"Because aBlock might change the class of inst (for example,
	 using become:), it is essential to compute next before aBlock value: inst."
	inst := self someInstance.
	[inst == nil] whileFalse:
		[next := inst nextInstance.
		 aBlock value: inst.
		 inst := next].! !
!Behavior methodsFor: 'enumerating' stamp: 'jmv 7/28/2024 15:45:08'!
           allSubInstancesDoAlt: aBlock 
	"Evaluate the argument, aBlock, for each of the current instances of the 
	receiver and all its subclasses."
	"Alternative implementation for #allSubInstancesDo:
	iterating using #someInstance / #nextInstance.
	Use with care."

	self allInstancesDoAlt: aBlock.
	self allSubclassesDo: [:sub | sub allInstancesDoAlt: aBlock].! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/28/2024 15:45:56' prior: 50355737!
                       snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	save
		ifTrue: [
			"The snapshot primitive answers false if it was just called to do the snapshot.
			But image startup is resumed by returning (again) from the primitive, but this time answering true."
			isARealStartup := embeddedFlag
				ifTrue: [ self snapshotEmbeddedPrimitive ]
				ifFalse: [ self snapshotPrimitive ]]
		ifFalse: [ isARealStartup := false ].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #restoreLostChangesIfNecessary'.
			self restoreLostChangesIfNecessary ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6540-avoid-allInstancesPrim-inImageSnapshot-JuanVuletich-2024Jul28-15h49m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6539] on 28 July 2024 at 3:50:38 pm'!
!VectorCanvas methodsFor: 'private' stamp: 'jmv 7/28/2024 13:48:42' prior: 16998186 overrides: 16908374!
                      releaseEngine
	super releaseEngine.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas releaseEngine ].
	auxBitBltEngine := nil.! !
!BitBltCanvas methodsFor: 'private' stamp: 'jmv 7/28/2024 13:48:49' prior: 16791687 overrides: 16908374!
            releaseEngine
	super releaseEngine.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas releaseEngine ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6541-Robust-releaseEngine-JuanVuletich-2024Jul28-15h50m-jmv.001.cs.st----!

----QUIT----(28 July 2024 15:54:13) Cuis7.1-6541-32.image priorSource: 827956!

----STARTUP---- (13 August 2024 18:37:05) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6541-32.image!


'From Cuis7.1 [latest update: #6538] on 27 July 2024 at 3:17:32 pm'!
!WorldMorph methodsFor: 'change reporting' stamp: 'KenD 7/27/2024 07:32:54' prior: 17007135 overrides: 16903695!
                         addedMorph: aMorph
	"Notify the receiver that the given morph was just added."
	super addedMorph: aMorph.
	self firstHand newMouseFocus: nil. "Hand need to reset mouseFocus"
	self taskbar ifNotNil: [ :tb |
		tb wasOpened: aMorph ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6542-ReleaseMouseFocus-whenMorphAddedToWorld-KenDickey-2024Jul27-15h16m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6542] on 28 July 2024 at 3:59:13 pm'!

WorldMorph removeSelector: #addedMorphx:!

!methodRemoval: WorldMorph #addedMorphx: stamp: 'Install-6543-cleanup-JuanVuletich-2024Jul28-15h58m-jmv.001.cs.st 8/13/2024 18:37:05'!
addedMorphx: aMorph
	"Notify the receiver that the given morph was just added."
	super addedMorph: aMorph.
	self firstHand newMouseFocus: nil. "Hand need to reset mouseFocus"
	self taskbar ifNotNil: [ :tb |
		tb wasOpened: aMorph ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6543-cleanup-JuanVuletich-2024Jul28-15h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6543] on 28 July 2024 at 7:18:11 pm'!
!WorldMorph methodsFor: 'change reporting' stamp: 'jmv 12/30/2021 13:11:33' prior: 50357772 overrides: 16903695!
       addedMorph: aMorph
	"Notify the receiver that the given morph was just added."
	super addedMorph: aMorph.
	self taskbar ifNotNil: [ :tb |
		tb wasOpened: aMorph ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6544-TakeBack-6539-6542-JuanVuletich-2024Jul28-19h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6544] on 31 July 2024 at 12:23:13 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 7/29/2024 16:09:34' prior: 50348229!
      allMenuNshortcutsSpecs
	"menuSpec is the Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number. It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window or #model. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	"First, take menu and shortcut specs declared by us (i.e. the widget)"
	self menuNshortcutsSpecsDo: [ :menuItemSpec |
		menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ].
	"Then allow all owners to override or remove them.
	This is done outwards, each morph can override choices made by submorphs.
	This helps building reusable composites, that can be tweaked by user morphs / windows."
	self allOwnersDo: [ :o |
		o menuNshortcutsSpecsFor: self do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6545-CommentTweak-JuanVuletich-2024Jul31-12h22m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6554] on 30 July 2024 at 12:12:33 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/30/2024 11:54:03' prior: 50344816!
         classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(90		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									listAddIcon)
		#(260		nil 							$r 	model 			recent) "Shortcut only. No menu entry."

		" 'refactorings' SubMenu"
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1090 		'-----')
		#(1100		'rename global...' 							nil 	model 			renameGlobal 									saveAsIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6546-classListMenuSpec-BugFix-JuanVuletich-2024Jul30-10h49m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6550] on 30 July 2024 at 9:33:16 am'!
!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 7/30/2024 09:28:36'!
                     textProviderOrModel

	^ (model is: #hasTextProvider) ifTrue: [ model textProvider ] ifFalse: [ model ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6547-textProviderOrModel-JuanVuletich-2024Jul30-09h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6544] on 31 July 2024 at 12:22:11 pm'!
!DebuggerWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/31/2024 12:18:55' prior: 50342522!
                  contextStackMenuSpec
	"Spec for the menu and shortcut keys for call stack list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(10		'fullStack (f)' 						$f 	window 			fullStack 						nil 	'show the complete call stack')
		#(20		'proceed (p)' 						$p 	window 			proceed 						nil 	'close the debugger and proceed')
		#(30		'restart (r)' 						$r 	window 			restart 						nil 	'reset this context to its start')
		#(40		'step into send (e)' 						$e 	window 			send 						nil 	'step into message sends')
		#(50		'step over send (t)' 						$t 	window 			doStep 						nil 	'step over message sends')
		#(60		'step into block (T)' 						$T 	window 			stepIntoBlock 						nil 	'step into a code block')
		#(70		'run to cursor' 						nil 	window 			runToCursor 						nil 	'run to cursor')
		#(80		'where (w)' 						$w 	window 			where 						nil 	'select current pc range')
		#(90		'peel to first like this' 						nil 	window 			peelToFirst 						nil 	'peel stack back to the second occurance of selected message')
		#(100 		'-----')
		#(110		'return entered value' 						nil 	window 			returnValue 						nil 	'lets you enter an expression and return method answering result')
		#(120		'toggle break on entry' 						nil 	model 			toggleBreakOnEntry 						nil 	'install or uninstall a breakpoint on method entry')
		
		#(991		nil 						$m 	window 			browseImplementors)
		#(992		nil 						$n 	window 			browseSenders)
		#(993		nil 						$i 	window 			methodInheritance)
		#(994		nil 						$v 	window 			browseVersions)
		#(995		nil 						$N 	window 			browseClassRefs)
	)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6548-DebuggerStack-shortcuts-JuanVuletich-2024Jul31-12h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6548] on 31 July 2024 at 12:35:21 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/31/2024 12:27:53' prior: 50357909!
                             classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(90		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$r 	model 			recent)

		" 'refactorings' SubMenu"
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1090 		'-----')
		#(1100		'rename global...' 							nil 	model 			renameGlobal 									saveAsIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/31/2024 12:28:47' prior: 50347522!
                           messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'select method category (C)' 								$C 	model 			showHomeCategory 									editFindReplaceIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/31/2024 12:29:46' prior: 50346411!
                               messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								scriptIcon)
			#(70 		'browse protocol (p)' 									$p 	window 			browseFullProtocol 								spreadsheetIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								fileOutIcon)
			#(100 		'-----')		
			#(110		'senders of... (n)' 									nil 	window 			browseSendersOfMessages 								mailForwardIcon)
			#(120		'implementors of... (m)' 									nil 	window 			browseMessages 								developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								clockIcon)

			"Shortcut only. No menu entry."
			#(991		nil 									$m 	window 			browseImplementors)
			#(992		nil 									$n 	window 			browseSenders)
	).
! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/31/2024 12:31:48' prior: 50346773!
                           messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 									listRemoveIcon)
		#(2110 		'filter message list...' 								nil 	window 			filterMessageList 									findIcon)
		#(2120		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2130		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2140		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
		#(2150 		'-----')
		#(2160 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 									classIcon)
		#(2170 		'sort by class name' 								nil 	model 			sortByClassName 									classIcon)
		#(2180 		'sort by selector' 								nil 	model 			sortBySelector 									scriptIcon)
		#(2190 		'sort by date' 								nil 	model 			sortByDate 									dateIcon)
		#(2200 		'reverse sort' 								nil 	model 			sortReverse 									redoIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6549-menuItemNumberTweaks-JuanVuletich-2024Jul31-12h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6549] on 31 July 2024 at 3:12:16 pm'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 7/31/2024 15:09:31' prior: 50357567!
                             snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #restoreLostChangesIfNecessary'.
			self restoreLostChangesIfNecessary ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6550-DontForget-userBaseDirectory-onImageSave-JuanVuletich-2024Jul31-14h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6557] on 31 July 2024 at 3:42:39 pm'!
!PluggableListMorph methodsFor: 'scrolling' stamp: 'jmv 7/31/2024 15:40:07' prior: 16924018 overrides: 16925175!
             scrollSelectionIntoView
	"make sure that the current selection is visible"
	| row r |
	row := self getCurrentSelectionIndex.
	row = 0 
		ifTrue: [
			"Value is 0, but we need to propagate it to model"
			scrollBar internalScrollValue: scrollBar scrollValue ]
		ifFalse: [
			r := scroller externalizeBoundingRectOf: (scroller drawBoundsForRow: row).
			r := r left: 0.
			self scrollToShow: r ].
	self updateSiblingsScroller! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6551-horizontalScrollBar-fix-JuanVuletich-2024Jul31-15h41m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6551] on 31 July 2024 at 4:36:27 pm'!

PluggableScrollPane subclass: #HierarchicalListMorph
	instanceVariableNames: 'selectedMorph getListSelector keystrokeActionSelector autoDeselect autoExpand sortingSelector getSelectionSelector setSelectionSelector menuGetter mainView highlightedMorph doubleClickSelector '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #HierarchicalListMorph category: #'Morphic-Widgets' stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
PluggableScrollPane subclass: #HierarchicalListMorph
	instanceVariableNames: 'selectedMorph getListSelector keystrokeActionSelector autoDeselect autoExpand sortingSelector getSelectionSelector setSelectionSelector menuGetter mainView highlightedMorph doubleClickSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

PluggableScrollPane subclass: #PluggableListMorph
	instanceVariableNames: 'list getListSelector getIndexSelector setIndexSelector keystrokeActionSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector menuGetter mainView limitLayoutHeight '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #PluggableListMorph category: #'Morphic-Widgets' stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
PluggableScrollPane subclass: #PluggableListMorph
	instanceVariableNames: 'list getListSelector getIndexSelector setIndexSelector keystrokeActionSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector menuGetter mainView limitLayoutHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!HierarchicalListMorph methodsFor: 'events' stamp: 'jmv 7/31/2024 16:13:53' prior: 50335252 overrides: 50335243!
        keyStroke: aKeyboardEvent 
	"Process potential command keys"

	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	(self arrowKey: aKeyboardEvent) ifNotNil: [
		^ aKeyboardEvent wasHandled: true ].

	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 7/31/2024 16:12:06' prior: 50335280 overrides: 50335243!
                              keyStroke: aKeyboardEvent 
	"Process keys"

	| aCharacter |
	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].
	
	(self arrowKey: aKeyboardEvent) ifNotNil: [
		^ aKeyboardEvent wasHandled: true ].

	"All the cases below consume the event."
	aKeyboardEvent wasHandled: true.

	aKeyboardEvent isEsc ifTrue: [ " escape key" ^ self mouseButton2Activity ].
	aKeyboardEvent isDelete ifTrue: [ "delete key" ^ self deleteAction ].
	aKeyboardEvent isBackspace ifTrue: [ "backspace key" ^ self deleteAction ].
	
	aCharacter := aKeyboardEvent keyCharacter.
	^ self keyboardSearch: aCharacter! !

PluggableListMorph removeSelector: #mainView:menuGetter:keystrokeAction:!

!methodRemoval: PluggableListMorph #mainView:menuGetter:keystrokeAction: stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.!

PluggableListMorph removeSelector: #doKeystrokeAction:!

!methodRemoval: PluggableListMorph #doKeystrokeAction: stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
doKeystrokeAction: aChar
	| args |
	keystrokeActionSelector ifNil: [^false].
	args := keystrokeActionSelector numArgs.
	args = 1 ifTrue: [
		mainView perform: keystrokeActionSelector with: aChar.
		^true ].
	args = 2
		ifTrue: [
			mainView
				perform: keystrokeActionSelector
				with: aChar
				with: self.
			^true ].
	^self error: 'keystrokeActionSelector must be a 1- or 2-keyword symbol'.
!

PluggableListMorph removeSelector: #getMenu!

!methodRemoval: PluggableListMorph #getMenu stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
getMenu
	"Answer the menu for this view"

	"Use the new mechanism if provided. See #menuNshortcutsKey"
	super getMenu ifNotNil: [ :menu | 
		^menu ].

	"Fallback to the old way. See #mainView:menuGetter:keystrokeAction:	"
	menuGetter ifNil: [^ nil].
	(menuGetter is: #MessageSend) ifTrue: [
		^menuGetter value ].
	menuGetter numArgs = 0 ifTrue: [
		^ mainView perform: menuGetter ].
	^ self error: 'The menuGetter has an unsupported number of arguments'!

HierarchicalListMorph removeSelector: #mainView:menuGetter:keystrokeAction:!

!methodRemoval: HierarchicalListMorph #mainView:menuGetter:keystrokeAction: stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
mainView: aMainView menuGetter: getMenuSel keystrokeAction: keyActionSel

	mainView := aMainView.
	menuGetter := getMenuSel.
	keystrokeActionSelector := keyActionSel.!

HierarchicalListMorph removeSelector: #getMenu!

!methodRemoval: HierarchicalListMorph #getMenu stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
getMenu
	"Answer the menu for this view"

	"Use the new mechanism if provided. See #menuNshortcutsKey"
	super getMenu ifNotNil: [ :menu | 
		^menu ].

	"Fallback to the old way. See #mainView:menuGetter:keystrokeAction:	"
	menuGetter ifNil: [^ nil].
	(menuGetter is: #MessageSend) ifTrue: [
		^menuGetter value ].
	menuGetter numArgs = 0 ifTrue: [
		^ mainView perform: menuGetter ].
	^ self error: 'The menuGetter has an unsupported number of arguments'!

PluggableScrollPane subclass: #HierarchicalListMorph
	instanceVariableNames: 'selectedMorph getListSelector autoDeselect autoExpand sortingSelector getSelectionSelector setSelectionSelector highlightedMorph doubleClickSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #HierarchicalListMorph category: #'Morphic-Widgets' stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
PluggableScrollPane subclass: #HierarchicalListMorph
	instanceVariableNames: 'selectedMorph getListSelector autoDeselect autoExpand sortingSelector getSelectionSelector setSelectionSelector highlightedMorph doubleClickSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

PluggableScrollPane subclass: #PluggableListMorph
	instanceVariableNames: 'list getListSelector getIndexSelector setIndexSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector limitLayoutHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #PluggableListMorph category: #'Morphic-Widgets' stamp: 'Install-6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st 8/13/2024 18:37:05'!
PluggableScrollPane subclass: #PluggableListMorph
	instanceVariableNames: 'list getListSelector getIndexSelector setIndexSelector autoDeselect lastKeystrokeTime lastKeystrokes doubleClickSelector limitLayoutHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6552-ListsMorphs-cleanup-JuanVuletich-2024Jul31-16h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6459] on 10 June 2024 at 3:23:07 pm'!
!TextEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 15:18:35'!
         defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((110				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon)) ]
		ifFalse: [ #((110 				'Accept (s)' 					nil 	editor 			nil 						acceptIcon)) ].
	^#(
		#(0 		'Text Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon)
		#(20 		'-----')
		#(30		'Find...(f)' 							$f 	editor 			find 						findIcon)
		#(40		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon)
		#(50		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon)
		#(60 		'-----')
		#(70		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon)
		#(80		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon)
		#(90		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(100 		'-----')
	),
	acceptEntry,
	#(
		#(120		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon)
		#(130		'Cut (x)' 							$x 	editor 			cut 						cutIcon)
		#(140		'Paste (v)' 							$v 	editor 			paste 						pasteIcon)
		#(150		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(160		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(180 		'-----')
		#(190		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(200		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(210		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon)
		#(220		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
		#(230		'Set Style' 							nil 	editor 			offerFontStyleMenu 						preferencesDesktopFontIcon)
		#(240		'Set Text Color' 							nil 	editor 			offerColorMenu 						graphicsIcon)
		#(250		'Set Alignment...' 							nil 	editor 			chooseAlignment 						formatJustifyLeftIcon)
	).
	
	"como es que h trae el help? ver shortcuts..."! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 15:19:03' overrides: 50359048!
defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((240				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon)) ]
		ifFalse: [ #((240 				'Accept (s)' 					nil 	editor 			nil 						acceptIcon)) ].
	^#(
		#(0 		'Smalltalk Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon)
		#(20 		'-----')
		#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon)
		#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon)
		#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon)
		#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon)
		#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon)
		#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
		#(90 		'-----')
		#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
		#(110 		'-----')
		#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
		#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon)
		#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon)
		#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon)
		#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon)
		#(170 		'-----')
		#(180		'Refactorings' 							nil 	nil 			2000 						listAddIcon)
		#(190 		'-----')
		#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon)
		#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon)
		#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
		#(230 		'-----')
	),
	acceptEntry,
	#(
		#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon)
		#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon)
		#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon)


		" 'Edit' SubMenu"
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon)
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon)
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon)
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon)
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon)
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon)
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon)
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon)
		#(1130		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon)
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)

		" 'Refactorings' SubMenu"
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon)
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon)
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon)
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon)
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon)
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon)
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon)
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon)
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon)
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).
! !
!InnerTextMorph methodsFor: 'menu' stamp: 'jmv 6/10/2024 10:07:58' overrides: 50348293!
    menuNshortcutsSpecsDo: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."

	self editor defaultMenuSpec do: aBlock! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 6/10/2024 15:18:27' prior: 50348354!
   getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'help text (optional)')
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window, #model or #editor. If nil, receiver is the widget itself.
		- selector is #aSymbol. No arguments.
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| menuNshortcutsSpecs itemSpec menu submenus |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !
!TextModelMorph methodsFor: 'event handling' stamp: 'jmv 6/10/2024 10:27:01' prior: 16983100 overrides: 50333469!
                            mouseButton2Activity
	"Button 2 presses inside us, but not inside our InnerTextMorph (i.e. scroller) are caught here.
	Forward them to the InnerTextMorph, so they behave the same as if the button press actually occured there."

	scroller mouseButton2Activity! !

TextModelMorph removeSelector: #menuNshortcutsSpecsDo:!

InnerTextMorph removeSelector: #getMenu!

!methodRemoval: InnerTextMorph #getMenu stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
getMenu

	^self editor getMenu!

SmalltalkEditor class removeSelector: #smalltalkEditorMenuOptions!

!methodRemoval: SmalltalkEditor class #smalltalkEditorMenuOptions stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
smalltalkEditorMenuOptions
	
	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'Help...'.
				#selector 			-> 		#openHelp.
				#icon 			-> 		#helpIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'Do it (d)'.
				#selector 			-> 		#doIt.
				#icon 			-> 		#doItIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'Print it (p)'.
				#selector 			-> 		#printIt.
				#icon 			-> 		#printIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'Inspect it (i)'.
				#selector 			-> 		#inspectIt.
				#icon 			-> 		#inspectIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		40.
				#label 			-> 		'Explore it (I)'.
				#selector 			-> 		#exploreIt.
				#icon 			-> 		#exploreIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		50.
				#label 			-> 		'Debug it (D)'.
				#selector 			-> 		#debugIt.
				#icon 			-> 		#debugIcon
			} asDictionary.
			{
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		60.
				#label 			-> 		'Profile it'.
				#selector 			-> 		#profileIt.
				#icon 			-> 		#clockIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		5.
				#label 			-> 		SmalltalkEditor editMenuLabel.
				#selector 			-> 		#yourself.
				#icon 			-> 		#textEditorIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'Explain'.
				#selector 			-> 		#explain.
				#icon 			-> 		#helpIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'Browse it (b)'.
				#selector 			-> 		#browseIt.
				#icon 			-> 		#editFindReplaceIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		30.
				#label 			-> 		'Senders of it (n)'.
				#selector 			-> 		#sendersOfIt.
				#icon 			-> 		#mailForwardIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		40.
				#label 			-> 		'Implementors of it (m)'.
				#selector 			-> 		#implementorsOfIt.
				#icon 			-> 		#developmentIcon
			} asDictionary.
			{
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		50.
				#label 			-> 		'References to it (N)'.
				#selector 			-> 		#referencesToIt.
				#icon 			-> 		#addressBookIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'Method Strings with it (E)'.
				#selector 			-> 		#methodStringsContainingIt.
				#icon 			-> 		#genericTextIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'Method Source with it (e)'.
				#selector 			-> 		#methodSourceContainingIt.
				#icon 			-> 		#scriptIcon
			} asDictionary.
			{
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'Class Comments with it'.
				#selector 			-> 		#classCommentsContainingIt.
				#icon 			-> 		#chatIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		10.
				#label 			-> 		'Accept (s)'.
				#selector 			-> 		#acceptContents.
				#icon 			-> 		#acceptIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		30.
				#label 			-> 		'Accept & Run Test in Class (t)'.
				#selector 			-> 		#acceptAndTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		40.
				#label 			-> 		'Accept & Run Test in Category (y)'.
				#selector 			-> 		#acceptAndTestAll.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
			{
				#itemGroup 			-> 		50.
				#itemOrder 			-> 		50.
				#label 			-> 		'Accept & Debug Test (r)'.
				#selector 			-> 		#acceptAndDebugTest.
				#icon 			-> 		#weatherFewCloudsIcon
			} asDictionary.
		}, SmalltalkEditor smalltalkEditorEditingMenuOptions `. !

SmalltalkEditor class removeSelector: #smalltalkEditorEditingMenuOptions!

!methodRemoval: SmalltalkEditor class #smalltalkEditorEditingMenuOptions stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
smalltalkEditorEditingMenuOptions

	self flag: #assumesKeyboardShortcuts.
	^`{
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		10.
				#label 			-> 		'Find...(f)'.
				#selector 			-> 		#find.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		20.
				#label 			-> 		'Find Again (g)'.
				#selector 			-> 		#findAgain.
				#icon 			-> 		#systemIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		10.
				#itemOrder 			-> 		30.
				#label 			-> 		'Use Selection for Find (j)'.
				#selector 			-> 		#setSearchString.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		10.
				#label 			-> 		'Undo - multiple (z)'.
				#selector 			-> 		#undo.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		20.
				#label 			-> 		'Redo - multiple (Z)'.
				#selector 			-> 		#redo.
				#icon 			-> 		#redoIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		20.
				#itemOrder 			-> 		30.
				#label 			-> 		'Undo / Redo history'.
				#selector 			-> 		#offerUndoHistory.
				#icon 			-> 		#changesIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		10.
				#label 			-> 		'Copy (c)'.
				#selector 			-> 		#copySelection.
				#icon 			-> 		#copyIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		20.
				#label 			-> 		'Cut (x)'.
				#selector 			-> 		#cut.
				#icon 			-> 		#cutIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		30.
				#label 			-> 		'Paste (v)'.
				#selector 			-> 		#paste.
				#icon 			-> 		#pasteIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		40.
				#label 			-> 		'Paste without Format'.
				#selector 			-> 		#pasteString.
				#icon 			-> 		#pasteIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		30.
				#itemOrder 			-> 		50.
				#label 			-> 		'Paste...'.
				#selector 			-> 		#pasteRecent.
				#icon 			-> 		#worldIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		10.
				#label 			-> 		'Toggle WordWrap'.
				#selector 			-> 		#wrapOnOff.
				#icon 			-> 		#genericTextIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		30.
				#label 			-> 		'Clear Font'.
				#selector 			-> 		#clearFont.
				#icon 			-> 		#newIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'Set Font... (k)'.
				#selector 			-> 		#offerFontMenu.
				#icon 			-> 		#preferencesDesktopFontIcon
			} asDictionary.
			{
				#submenuOf -> SmalltalkEditor editMenuLabel.
				#itemGroup 			-> 		40.
				#itemOrder 			-> 		20.
				#label 			-> 		'Set Font Size'.
				#selector 			-> 		#offerFontSizeMenu.
				#icon 			-> 		#preferencesDesktopFontIcon
			} asDictionary.
		}`.!

SmalltalkEditor class removeSelector: #editMenuLabel!

!methodRemoval: SmalltalkEditor class #editMenuLabel stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
editMenuLabel

	^'Edit'!

SmalltalkEditor removeSelector: #getMenu!

!methodRemoval: SmalltalkEditor #getMenu stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
getMenu
	
	^self createMenuCollectingOptionsWith: #smalltalkEditorMenuOptions!

TextEditor removeSelector: #addCutAndPasteMenuSectionTo:!

!methodRemoval: TextEditor #addCutAndPasteMenuSectionTo: stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
addCutAndPasteMenuSectionTo: aMenu
	"Adds  typical cut and paste operations section to a menu"

	self flag: #assumesKeyboardShortcuts.
	self hasUnacceptedEdits ifTrue: [
		aMenu
			add: 'Accept (s)'
			action: #acceptContents
			icon: #acceptIcon
	].
	
	aMenu
		add: 'Copy (c)'
		action: #copySelection
		icon: #copyIcon.
	
	aMenu
		add: 'Cut (x)'
		action: #cut
		icon: #cutIcon.

	aMenu
		add: 'Paste (v)'
		action: #paste
		icon: #pasteIcon.
		
	aMenu
		add: 'Paste without Format'
		action: #pasteString
		icon: #pasteIcon.
	
	aMenu
		add: 'Paste...'
		action: #pasteRecent
		icon: #worldIcon.
	
	^aMenu!

TextEditor removeSelector: #getMenu!

!methodRemoval: TextEditor #getMenu stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
getMenu
	| aMenu | 
	aMenu := MenuMorph new defaultTarget: self.
	aMenu
		addTitle: self class name;
		addStayUpIcons.
		
	aMenu
		add: 'Help...'
		action: #openHelp
		icon: #helpIcon.
	aMenu addLine.
	
	self addFinderMenuSectionTo: aMenu.
	self addUndoMenuSectionTo: aMenu.
	aMenu addLine.
	
	self addCutAndPasteMenuSectionTo: aMenu.
	aMenu addLine.
	
	self addStyleMenuSectionTo: aMenu.
	
	^aMenu !

TextEditor removeSelector: #addUndoMenuSectionTo:!

!methodRemoval: TextEditor #addUndoMenuSectionTo: stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
addUndoMenuSectionTo: aMenu
	"Adds undo operations to the given menu"

	self flag: #assumesKeyboardShortcuts.
	aMenu
		addItemsFromDictionaries: 
		`{	
			nil.
			{
				#label 			-> 		'Undo - multiple (z)'.
				#selector 			-> 		#undo.
				#icon 			-> 		#undoIcon
			} asDictionary.
			{
				#label 			-> 		'Redo - multiple (Z)'.
				#selector 			-> 		#redo.
				#icon 			-> 		#redoIcon
			} asDictionary.
			{
				#label 			-> 		'Undo / Redo history'.
				#selector 			-> 		#offerUndoHistory.
				#icon 			-> 		#changesIcon
			} asDictionary.
		}`.
		
	^aMenu.!

TextEditor removeSelector: #addStyleMenuSectionTo:!

!methodRemoval: TextEditor #addStyleMenuSectionTo: stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
addStyleMenuSectionTo: aMenu
	"Adds to the given menu text styiling related operations"

	self flag: #assumesKeyboardShortcuts.
	aMenu
		addItemsFromDictionaries: 
	`{
		{
				#label 			-> 		'Toggle WordWrap'.
				#selector 			-> 		#wrapOnOff.
				#icon 			-> 		#genericTextIcon
			} asDictionary.
			{
				#label 			-> 		'Clear Font'.
				#selector 			-> 		#clearFont.
				#icon 			-> 		#newIcon
			} asDictionary.
			{
				#label 			-> 		'Set Font... (k)'.
				#selector 			-> 		#offerFontMenu.
				#icon 			-> 		#preferencesDesktopFontIcon
			} asDictionary.
			{
				#label 			-> 		'Set Font Size'.
				#selector 			-> 		#offerFontSizeMenu.
				#icon 			-> 		#preferencesDesktopFontIcon
			} asDictionary.
			{
				#label 			-> 		'Set Style'.
				#selector 			-> 		#offerFontStyleMenu.
				#icon 			-> 		#preferencesDesktopFontIcon
			} asDictionary.
			{
				#label 			-> 		'Set Text Color'.
				#selector 			-> 		#offerColorMenu.
				#icon 			-> 		#graphicsIcon
			} asDictionary.
			{
				#label 			-> 		'Set Alignment...'.
				#selector 			-> 		#chooseAlignment.
				#icon 			-> 		#formatJustifyLeftIcon
			} asDictionary.
		}`.
		^aMenu!

TextEditor removeSelector: #addFinderMenuSectionTo:!

!methodRemoval: TextEditor #addFinderMenuSectionTo: stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
addFinderMenuSectionTo: aMenu
	"Build a submenu with finding related operations"

	self flag: #assumesKeyboardShortcuts.
	aMenu addItemsFromDictionaries:
	 `{
			{
				#label 			-> 		'Find...(f)'.
				#selector 			-> 		#find.
				#icon 			-> 		#findIcon
			} asDictionary.
			{
				#label 			-> 		'Find Again (g)'.
				#selector 			-> 		#findAgain.
				#icon 			-> 		#systemIcon
			} asDictionary.
			{
				#label 			-> 		'Use Selection for Find (j)'.
				#selector 			-> 		#setSearchString.
				#icon 			-> 		#saveAsIcon
			} asDictionary.
		}`.
		^aMenu!

Smalltalk removeClassNamed: #RefactoringMenues!

!classRemoval: #RefactoringMenues stamp: 'Install-6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st 8/13/2024 18:37:05'!
Object subclass: #RefactoringMenues
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Refactoring'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6553-TextEditor-Menus-JuanVuletich-2024Jun10-15h03m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6483] on 18 June 2024 at 12:01:35 pm'!
!TextEditor methodsFor: 'menu messages' stamp: 'jmv 6/18/2024 12:00:50' prior: 16980945!
     find
	"Prompt the user for a string to search for, and search the receiver from the current selection onward for it.  1/26/96 sw"

	self
		request: 'Find what?'
		initialAnswer: self class findText
		do: [:aString|
			aString isEmpty ifFalse: [
				"Set focus on our text morph, so that cmd-g does the search again"
				morph world activeHand newKeyboardFocus: morph.
				self setSearch: aString.
				ChangeText := self class findText.  "Implies no replacement to againOnce: method"
				morph handleInteraction: [
					(self findAndReplaceMany: false)
						ifFalse: [ self flash ]].
				morph scrollSelectionIntoView ]].
! !
!TextEditor methodsFor: 'menu messages' stamp: 'jmv 6/18/2024 12:00:47' prior: 16980967!
                     findAgain
	"Find the text-to-find again.  1/24/96 sw"

	morph handleInteraction: [
		(self findAndReplaceMany: false)
			ifFalse: [ self flash ]].
	morph scrollSelectionIntoView.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6554-Fix-JuanVuletich-2024Jun18-11h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6461] on 11 June 2024 at 9:20:33 am'!
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:16:39'!
                   changeEmphasisBold
	^self changeEmphasisTo: 1! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:16:58'!
       changeEmphasisItalic
	^self changeEmphasisTo: 2! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:56:05'!
     changeEmphasisNormal
	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis."
	"This is a user command, and generates undo"

	| attributesToRemove |

	"Remove all TextEmphasis"
	attributesToRemove := emphasisHere.
	attributesToRemove ifNotNil: [ self unapplyAttributes: attributesToRemove ].
	^ true! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:17:21'!
                     changeEmphasisStruckThrough
	^self changeEmphasisTo: 4! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:17:40'!
                              changeEmphasisSubscript
	^self changeEmphasisTo: 6! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:17:29'!
  changeEmphasisSuperscript
	^self changeEmphasisTo: 5! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:57:01'!
changeEmphasisTo: emphasisCode
	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis."
	"This is a user command, and generates undo"

	| attributeToAdd attributesToRemove oldAttributes |
	oldAttributes := emphasisHere.

	"Toggle the indicated TextEmphasis"
	(emphasisCode between: 1 and: 6) ifTrue: [
		attributeToAdd := TextEmphasis perform: (
			#(#bold #italic #underlined #struckThrough #superscript #subscript)
				at: emphasisCode).
		oldAttributes do: [ :oldAtt |
			oldAtt = attributeToAdd ifTrue: [
				attributeToAdd := nil.
				attributesToRemove := {oldAtt} ]]].

	attributeToAdd ifNotNil: [ self applyAttribute: attributeToAdd ].
	attributesToRemove ifNotNil: [ self unapplyAttributes: attributesToRemove ].
	^ true! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:17:11'!
       changeEmphasisUnderlined
	^self changeEmphasisTo: 3! !
!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 16:44:41'!
                            cancel
	"Cancel all edits done. Revert to saved version."
	model refetch.! !
!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 6/10/2024 16:45:46'!
                             argNext
	"Invoked by cmd-A.
	 Search forward from the end of the selection for a colon followed by
		a space.  Place the text cursor after the space.  If none are found, place the
		text cursor at the end of the text.."

	| start t |
	t := model actualContents.
	start := t findString: ': ' startingAt: self startIndex.
	start = 0 ifTrue: [ start := t size + 1].
	self deselectAndPlaceCursorAt: start + 2.
	^true! !
!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 6/10/2024 16:45:42'!
          argPrev
	"Invoked by cmd-Q.
	 Search backwards from the start of the selection for a colon followed by
		a space.  Place the text cursor after the space.  If none are found, place the
		text cursor at the start of the text.."

	| t i |
	t := model actualContents.
	i := self stopIndex.
	i > 1 ifTrue: [
		i := i -2.
		[i > 0 and: [ (t at: i) ~= $  or: [(t at: i-1) ~= $: ]]] whileTrue: [
			i := i -1 ].
		self deselectAndPlaceCursorAt: i + 1.
	].
	^true! !
!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 6/10/2024 16:50:31'!
displayIfFalse
	"Replace the current text selection with the text 'ifFalse:'--initiated by 
	cmd-F."

	self addString: 'ifFalse:'.! !
!SmalltalkEditor methodsFor: 'typing/selecting keys' stamp: 'jmv 6/10/2024 16:50:23'!
    displayIfTrue
	"Replace the current text selection with the text 'ifTrue:'--initiated by 
	cmd-T."

	self addString: 'ifTrue:'.! !
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 6/10/2024 15:56:50' overrides: 50348327!
   keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	"ctrl and option (if on Mac) are used to enter #normalCharacter:"
	aKeyboardEvent commandAltKeyPressed ifFalse: [ ^false ].
	(aKeyboardEvent keyValue between: 32 and: 126) ifFalse: [ ^false ].
	^super keyboardShortcut: aKeyboardEvent! !
!TextEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 16:48:55' prior: 50359048!
               defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((110				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon)) ]
		ifFalse: [ #((110 				'Accept (s)' 					nil 	editor 			nil 						acceptIcon)) ].
	^#(
		#(0 		'Text Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon)
		#(20 		'-----')
		#(30		'Find...(f)' 							$f 	editor 			find 						findIcon)
		#(40		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon)
		#(50		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon)
		#(60 		'-----')
		#(70		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon)
		#(80		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon)
		#(90		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(100 		'-----')
	),
	acceptEntry,
	#(
		#(120		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon)
		#(130		'Cut (x)' 							$x 	editor 			cut 						cutIcon)
		#(140		'Paste (v)' 							$v 	editor 			paste 						pasteIcon)
		#(150		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(160		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(180 		'-----')
		#(190		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(200		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(210		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon)
		#(220		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
		#(230		'Set Style' 							nil 	editor 			offerFontStyleMenu 						preferencesDesktopFontIcon)
		#(240		'Set Text Color (8)' 							$8 	editor 			offerColorMenu 						graphicsIcon)
		#(250		'Set Alignment... (u)' 							$u 	editor 			chooseAlignment 						formatJustifyLeftIcon)

		"Keyboard shortcuts only"
		#(500		nil 							$0 	editor 			changeEmphasisNormal)
		#(501		nil 							$1 	editor 			changeEmphasisBold)
		#(502		nil 							$2 	editor 			changeEmphasisItalic)
		#(503		nil 							$3 	editor 			changeEmphasisUnderlined)
		#(504		nil 							$4 	editor 			changeEmphasisStruckThrough)
		#(505		nil 							$5 	editor 			changeEmphasisSuperscript)
		#(506		nil 							$6 	editor 			changeEmphasisSubscript)
	).! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 16:52:56' prior: 50359115 overrides: 50359952!
      defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((240				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon)) ]
		ifFalse: [ #((240 				'Accept (s)' 					nil 	editor 			nil 						acceptIcon)) ].
	^#(
		#(0 		'Smalltalk Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon)
		#(20 		'-----')
		#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon
					'Do it (selection is a valid expression)')
		#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon
					'Print it (selection is a valid expression)')
		#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon
					'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
		#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon
					'Inspect via Object Explorer')
		#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon
					'Debug it')
		#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
		#(90 		'-----')
		#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
		#(110 		'-----')
		#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
		#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon
					'Browse it (selection is a class name or cursor is over a class-list or message-list)')
		#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon
					'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon
					'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon
					'References to it (selection is a class name, or cursor is over a class-list or message-list)')
		#(170 		'-----')
		#(180		'Refactorings' 							nil 	nil 			2000 						listAddIcon)
		#(190 		'-----')
		#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon
					'Method strings containing it')
		#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon
					'Method source containing it')
		#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
		#(230 		'-----')
	),
	acceptEntry,
	#(
		#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon
					'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
		#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon
					'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
		#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon
					'Saves method and debugs it')

		"Keyboard shortcuts only"
		#(500		nil 							$0 	editor 			changeEmphasisNormal)
		#(501		nil 							$1 	editor 			changeEmphasisBold)
		#(502		nil 							$2 	editor 			changeEmphasisItalic)
		#(503		nil 							$3 	editor 			changeEmphasisUnderlined)
		#(504		nil 							$4 	editor 			changeEmphasisStruckThrough)
		#(505		nil 							$5 	editor 			changeEmphasisSuperscript)
		#(506		nil 							$6 	editor 			changeEmphasisSubscript)
		#(507		nil 							$l 	editor 			cancel)
		#(508		nil 							$Q 	editor 			argPrev)
		#(509		nil 							$W 	editor 			argNext)
		#(510		nil 							$T 	editor 			displayIfTrue)
		#(511		nil 							$F 	editor 			displayIfFalse)


		" 'Edit' SubMenu"
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon)
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon)
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon)
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon)
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon)
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon)
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon)
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon)
		#(1130		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon)
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)

		" 'Refactorings' SubMenu"
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon)
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon)
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon)
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon)
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon)
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon)
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon)
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon)
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon)
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).
! !
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 6/10/2024 16:31:01' prior: 50335228 overrides: 50335628!
                  keyStroke: aKeyboardEvent

	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ 
		self selectionChanged.  "Note new selection"
		self updateFromTextComposition.
		^self ].

	autoCompleter 
		ifNil: [ self processKeystrokeEvent: aKeyboardEvent ]
		ifNotNil: [
			autoCompleter
				autoCompletionAround: [ self processKeystrokeEvent: aKeyboardEvent ]
				keyStroke: aKeyboardEvent ].

	aKeyboardEvent wasHandled: true.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6555-TextEditor-Shortcuts-JuanVuletich-2024Jun11-09h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6461] on 11 June 2024 at 9:35:37 am'!
!Editor methodsFor: 'typing/selecting keys' stamp: 'jmv 6/10/2024 19:07:06'!
                            cursorTopHome
	"Put cursor at beginning of text -- invoked from cmd-H shortcut, useful for keyboards that have no home key."

	self deselectAndPlaceCursorAt: 1.! !
!Editor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 18:14:19'!
                defaultMenuSpec
	#()! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 19:03:41'!
changeLineEndsToLf
	"Replace all CRs and CrLfs by LFs.
	Triggered by Cmd-U -- useful when getting code from FTP sites"
	"This is a user command, and generates undo"
	
	self replaceSelectionWith: self selectedString withCuisLineEndings.! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:25:05'!
         encloseWith: aCharacter
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	| left right startIndex stopIndex oldSelection which |
	startIndex := self startIndex.
	stopIndex := self stopIndex.
	oldSelection := self selection.
	which := '([<{"''`' indexOf: aCharacter ifAbsent: [ ^true ].
	left := '([<{"''`' at: which.
	right := ')]>}"''`' at: which.
	((startIndex > 1 and: [stopIndex <= model textSize])
			and: [ (model actualContents at: startIndex-1) = left
				and: [(model actualContents at: stopIndex) = right]])
		ifTrue: [
			"already enclosed; strip off brackets"
			self selectFrom: startIndex-1 to: stopIndex.
			self replaceSelectionWith: oldSelection]
		ifFalse: [
			"not enclosed; enclose by matching brackets"
			self replaceSelectionWith:
				(Text string: (UnicodeString with: left) attributes: emphasisHere),
				oldSelection,
				(Text string: (UnicodeString with: right) attributes: emphasisHere).
			self selectFrom: startIndex+1 to: stopIndex].
	^ true.! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:27:22'!
  encloseWithAngleBrackets
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $<! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:27:52'!
                 encloseWithBackTicks
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $`! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:27:12'!
                     encloseWithCurlyBrackets
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: ${! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:27:44'!
                 encloseWithDoubleQuotes
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $"! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:26:18'!
                  encloseWithParenthesis
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $(! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:27:38'!
                   encloseWithSingleQuotes
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $'! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:26:59'!
                  encloseWithSquareBrackets
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	^self encloseWith: $[! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 19:18:11'!
                makeCapitalized
	"Force the current selection to uppercase.  Triggered by Cmd-X."
	"This is a user command, and generates undo"

	| prev |
	prev := $-.  "not a letter"
	self replaceSelectionWith: 
		(self selectedString collect:
			[:c | prev := prev isLetter ifTrue: [c asLowercase] ifFalse: [c asUppercase]]).! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 19:18:06'!
                             makeLowercase
	"Force the current selection to lowercase.  Triggered by Cmd-X."
	"This is a user command, and generates undo"

	self replaceSelectionWith: self selectedString asLowercase.! !
!TextEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 19:18:03'!
                         makeUppercase
	"Force the current selection to uppercase.  Triggered by Cmd-Y."
	"This is a user command, and generates undo"

	self replaceSelectionWith: self selectedString asUppercase.! !
!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 17:24:53' overrides: 50360281!
encloseWith: aCharacter
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	| startIndex stopIndex oldSelection new enlargedBy |
	"This implementation is only for commenting and uncommenting code.
	Other cases are handled by the super implementation.
	This implementation only handles String and discards Text attributes."
	aCharacter = $" ifFalse: [
		^super encloseWith: aCharacter ].

	startIndex := self startIndex.
	stopIndex := self stopIndex.
	oldSelection := self selection string.
	((startIndex > 1 and: [stopIndex <= model textSize])
			and: [ (model actualContents at: startIndex-1) = $"
				and: [(model actualContents at: stopIndex) = $"]])
		ifTrue: [
			"already enclosed in double colons; make selection no longer a comment"
			self selectFrom: startIndex-1 to: stopIndex.
			self replaceSelectionWith: oldSelection withDoubleColonsUndoubled ]
		ifFalse: [
			"not enclosed in double colons; make selection a comment"
			new := oldSelection withDoubleColonsDoubled.
			enlargedBy := new size - oldSelection size.
			self replaceSelectionWith: $" asString, new, $" asString.
			self selectFrom: startIndex+1 to: stopIndex + enlargedBy ].
	^ true.! !
!SmalltalkEditor methodsFor: 'editing keys' stamp: 'jmv 6/10/2024 19:26:54'!
     pasteInitials
	"Replace the current text selection by an authorship name/date stamp; invoked by cmd-shift-v, easy way to put an authorship stamp in the comments of an editor."
	"This is a user command, and generates undo"

	| i |
	i := self stopIndex.
	self replaceSelectionWith: (Text fromString: Utilities changeStamp).
	self deselectAndPlaceCursorAt: i.! !
!Editor methodsFor: 'accessing' stamp: 'jmv 6/10/2024 18:34:25' prior: 16851694!
       help
	"
	TextEditor new help edit
	SmalltalkEditor new help edit
	"
	| tabs |
	^ String streamContents: [ :strm |
		tabs := String tab, String tab, String tab, String tab.
		self class allShiftShortcutsSpec do: [ :triplet | | c |
			c := triplet first = Character space
				ifFalse: [ triplet first asString, '   	' ]
				ifTrue: [ 'Space'].
			strm nextPutAll: ('Shift', '-', c, tabs, triplet third).
			strm newLine ].
		tabs := String tab, String tab, String tab, String tab, String tab.
		self defaultMenuSpec do: [ :menuItemNshortcutSpec |
			menuItemNshortcutSpec size > 6 ifTrue: [
				menuItemNshortcutSpec third ifNotNil: [ :shortcutCharacter |
					strm nextPutAll: ('Command', '-', shortcutCharacter asString, tabs, menuItemNshortcutSpec seventh).
				strm newLine ].
			].
		].
	]! !
!TextEditor methodsFor: 'typing support' stamp: 'jmv 6/11/2024 09:30:04' prior: 16981228!
          dispatchOn: aKeyboardEvent
	"Carry out the action associated with this character, if any."

	| codePoint asciiValue c |
	self clearParens.
  	codePoint := aKeyboardEvent keyValue.
	
	codePoint > 255 ifTrue: [
		^self normalCharacter: aKeyboardEvent ].

	c := aKeyboardEvent keyCharacter.
	(')]}' includes: c)
		ifTrue: [ self blinkPrevParen: c ].

	asciiValue := codePoint.
	^ self perform: (self shortcuts at: asciiValue + 1) with: aKeyboardEvent.! !
!TextEditor methodsFor: 'testing' stamp: 'jmv 6/10/2024 18:26:16' prior: 16981940!
         hasUnacceptedEdits

	^morph notNil and: [ morph hasUnacceptedEdits ].! !
!TextEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/10/2024 19:11:17' prior: 50359952 overrides: 50360268!
   defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((110				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon 								'Save')) ]
		ifFalse: [ #((110 				'Accept' 					nil 	editor 			nil 						acceptIcon 								'Save')) ].
	^#(
		#(0 		'Text Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 								'Open Help')
		#(20 		'-----')
		#(30		'Find...(f)' 							$f 	editor 			find 						findIcon 								'Find')
		#(40		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 								'Find again')
		#(50		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 								'Set selection as search string for find again')
		#(60 		'-----')
		#(70		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 								'Undo (multiple levels)')
		#(80		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 								'Redo (multiple levels)')
		#(90		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(100 		'-----')
	),
	acceptEntry,
	#(
		#(120		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 								'Copy selection to the Clipboard')
		#(130		'Cut (x)' 							$x 	editor 			cut 						cutIcon 								'Cut selection and store it in the Clipboard')
		#(140		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 								'Paste Clipboard contents')
		#(150		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(160		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(180 		'-----')
		#(190		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(200		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(210		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 								'Set font')
		#(220		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
		#(230		'Set Style' 							nil 	editor 			offerFontStyleMenu 						preferencesDesktopFontIcon)
		#(240		'Set Text Color (8)' 							$8 	editor 			offerColorMenu 						graphicsIcon)
		#(250		'Set Alignment... (u)' 							$u 	editor 			chooseAlignment 						formatJustifyLeftIcon 								'Toggle alignment')

		"Keyboard shortcuts only"
		#(500		nil 							$0 	editor 			changeEmphasisNormal 									nil 			'Normal')
		#(501		nil 							$1 	editor 			changeEmphasisBold 									nil 			'Bold')
		#(502		nil 							$2 	editor 			changeEmphasisItalic 									nil 			'Italic')
		#(503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 			'Underlined')
		#(504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 			'Struck Through')
		#(505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 			'Superscript')
		#(506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 			'Subscript')
		#(601 		nil 							$a 	editor 			selectAll 									nil 			'Select all')
		#(602 		nil 							$C 	editor 			compareToClipboard 									nil 			'Compare argument to clipboard')
		#(603 		nil 							$U 	editor 			changeLineEndsToLf 									nil 			'Convert line endings to LF characters (Cuis convention) in selection')
		#(604 		nil 							$( 	editor 			encloseWithParenthesis 									nil 			'Enclose within ( and ), or remove enclosing ( and )')
		#(605 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 			'Enclose within [ and ], or remove enclosing [ and ]')
		#(606 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 			'Enclose within { and }, or remove enclosing { and }')
		#(607 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 			'Enclose within single quotes, or remove enclosing single quotes')
		#(608 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 			'Enclose within double quotes, or remove enclosing double quotes')
		#(609 		nil 							$` 	editor 			encloseWithBackTicks 									nil 			'Enclose within backticks, or remove enclosing backticks')
		"#(610 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 			'Enclose within < and >, or remove enclosing ( and )')"
		#(611 		nil 							$H 	editor 			cursorTopHome 									nil 			'Move cursor to start of text')
	).
! !
!SmalltalkEditor methodsFor: 'tdd' stamp: 'jmv 6/10/2024 19:22:14' prior: 16954520!
                               acceptAndTest
	
	self acceptThenTestMethodAndSuite: [ :aMethod | self testSuiteOf: aMethod methodClass ].! !
!SmalltalkEditor methodsFor: 'tdd' stamp: 'jmv 6/10/2024 19:22:36' prior: 16954526!
                               acceptAndTestAll
	
	self acceptThenTestMethodAndSuite: [ :aMethod | self testSuiteForCategoryOf: aMethod methodClass ].! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/11/2024 09:31:44' prior: 50360032 overrides: 50360509!
            defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((240				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon 							'Save')) ]
		ifFalse: [ #((240 				'Accept' 					nil 	editor 			nil 						acceptIcon 							'Save')) ].
	^#(
		#(0 		'Smalltalk Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
		#(20 		'-----')
		#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
		#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
		#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
		#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon
					'Inspect via Object Explorer')
		#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon
					'Debug it')
		#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
		#(90 		'-----')
		#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
		#(110 		'-----')
		#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
		#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
		#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
		#(170 		'-----')
		#(180		'Refactorings' 							nil 	nil 			2000 						listAddIcon)
		#(190 		'-----')
		#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
		#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
		#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
		#(230 		'-----')
	),
	acceptEntry,
	#(
		#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
		#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
		#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')

		" 'Edit' SubMenu"
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon 									'Find')
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 									'Find again')
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 									'Set selection as search string for find again')
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 									'Undo (multiple levels)')
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 									'Redo (multiple levels)')
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 									'Copy selection to the Clipboard')
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon 									'Cut selection and store it in the Clipboard')
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 									'Paste Clipboard contents')
		#(1130		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 									'Set font')
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)

		"Keyboard shortcuts only"
		#(1500		nil 							$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 							$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 							$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 							$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 							$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 							$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 							$T 	editor 			displayIfTrue)
		#(1511		nil 							$F 	editor 			displayIfFalse)
		#(1601 		nil 							$a 	editor 			selectAll 									nil 		'Select all')
		#(1602 		nil 							$C 	editor 			compareToClipboard 									nil 		'Compare argument to clipboard')
		#(1603 		nil 							$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 							$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 							$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 							$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')

		" 'Refactorings' SubMenu"
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon 				'Renames what is under cursor')
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon 				'Extracts the selected code as parameter')
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon 				'Adds parameter to message that is under cursor')
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon 'Removes parameter to message that is under cursor')
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon 				'Extracts the selected code into a temporary variable')
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon 				'Extracts the selected code into a separate method')
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon 				'Inlines the selected temporary variable into each usage')
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon  				'Inlines the selected message send into desired colaborations')
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon 				'Extracts temporary variable to instance variable')
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).
! !

TextEditor removeSelector: #shouldHandleUsingCmdShortcuts:!

!methodRemoval: TextEditor #shouldHandleUsingCmdShortcuts: stamp: 'Install-6556-TextEditor-AdditionalShortcuts-Help-JuanVuletich-2024Jun11-09h20m-jmv.001.cs.st 8/13/2024 18:37:05'!
shouldHandleUsingCmdShortcuts: aKeyboardEvent 
	^ (aKeyboardEvent keyValue between: 32 and: 126) and: [ aKeyboardEvent commandAltKeyPressed ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6556-TextEditor-AdditionalShortcuts-Help-JuanVuletich-2024Jun11-09h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6461] on 11 June 2024 at 10:20:39 am'!
!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 6/11/2024 09:47:30' prior: 16965426!
                        presumedSentMessages
	| sent |
	"
	In addition to those here, if it is desired to preserve some methods from deletion, see #nominallyUnsent:
	Smalltalk presumedSentMessages
	"

	"The following should be preserved for doIts, etc"
	sent := IdentitySet new.
	#( rehashWithoutBecome
		browseAllSelect:  lastRemoval
		vScrollBarValue: hScrollBarValue: 
		to: removeClassNamed:
		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib
		newDepth: restoreAfter: zapAllMethods obsoleteClasses
		removeAllUnSentMessages abandonSources removeUnreferencedKeys
		zapOrganization condenseSources condenseChanges browseObsoleteReferences
		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:
		startTimerEventLoop unusedClasses allClasses
		unimplemented
		reduceCuis
		variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		printSpaceAnalysis:on:) do: [ :sel |
			sent add: sel].
	"The following may be sent by perform: in dispatchOnChar..."
	Editor withAllSubclassesDo: [ :c |
		c shortcuts asSet do: [ :sel | sent add: sel ].
		c new defaultMenuSpec do: [ :spec |
			spec size >= 5 ifTrue: [
				spec fifth isSymbol ifTrue: [ sent add: spec fifth ]]]].
	#(beReadOnlyBinding beReadWriteBinding) do: [ :sel |
		sent add: sel].
	AppLauncher appSelector ifNotNil: [ :sel |
		sent add: sel ].
	^ sent! !
!Editor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 6/11/2024 09:44:29' prior: 50360268!
       defaultMenuSpec
	^#()! !
!Editor class methodsFor: 'class initialization' stamp: 'jmv 6/11/2024 10:19:40' prior: 16852494 overrides: 16916245!
                 initialize
	"
	Editor initialize
	"
	self withAllSubclassesDo: [ :c | c initializeShortcuts ].! !
!Editor class methodsFor: 'cached state access' stamp: 'jmv 6/11/2024 09:57:01' prior: 16852644 overrides: 16789255!
         releaseClassCachedState

	shortcuts := nil.! !
!TextEditor class methodsFor: 'cached state access' stamp: 'jmv 6/11/2024 09:57:09' prior: 16982044 overrides: 50361034!
                        releaseClassCachedState

	FindText := nil.
	ChangeText := nil.
	"We are not calling super to avoid cleansing class vars many times.
	So, repeat inherited class instVars!!"
	shortcuts := nil.! !
!SmalltalkEditor class methodsFor: 'cached state access' stamp: 'jmv 6/11/2024 09:57:05' prior: 16955253 overrides: 50361040!
releaseClassCachedState

	"We are not calling super to avoid cleansing class vars many times.
	So, repeat inherited class instVars!!"
	shortcuts := nil.! !

SmalltalkEditor class removeSelector: #cmdShortcutsSpec!

!methodRemoval: SmalltalkEditor class #cmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
cmdShortcutsSpec
	"
	Editor initialize
	"
	"arranged in QWERTY keyboard order"
	self flag: #definesKeyboardShortcuts.
	^#(
		#(		$0 	changeEmphasis:							'Normal')
		#(		$1 	changeEmphasis:							'Bold')
		#(		$2 	changeEmphasis:							'Italic')
		#(		$3 	changeEmphasis:							'Underline')
		#(		$4 	changeEmphasis:							'Strikeout')
		#(		$5 	changeEmphasis:							'Superscript')
		#(		$6 	changeEmphasis:							'Subscript')
		#(		$8	#offerColorMenu:							'Change color')
	
		#(		$e	#methodSourceContainingIt:							'Method source containing it')
		#(		$r	#acceptAndDebugTest:							'Saves method and debugs it')
		#(		$t	#acceptAndTest:							'Saves method, runs it as test and then all tests in class. Opens debugger if error')
		#(		$y	#acceptAndTestAll:							'Saves method, runs it as test and then all tests in class category. Opens debugger if error')
		#(		$u	#align:							'Toggle alignment')
		#(		$i	#inspectIt:							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
		#(		$p	#printIt:							'Print it (selection is a valid expression)')

		#(		$d	#doIt:							'Do it (selection is a valid expression)')
		#(		$k	#offerFontMenu:							'Set font')
		#(		$l	#cancel:							'Cancel all edits')

		#(		$b	#browseIt:							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
		#(		$n	#sendersOfIt:							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(		$m	#implementorsOfIt:							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')

		#(		$Q	#argPrev:							'Previous argument')
		#(		$W	#argNext:							'Next argument')
		#(		$E	#methodStringsContainingIt:							'Method strings containing it')
		#(		$I	#exploreIt:							'Inspect via Object Explorer')

		#(		$D	#debugIt:							'Debug it')

		#(		$N	#referencesToIt:							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
	)!

SmalltalkEditor removeSelector: #exploreIt:!

!methodRemoval: SmalltalkEditor #exploreIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
exploreIt: aKeyboardEvent
	"Explore the selection -- invoked via cmd-shift-I.  If there is no current selection, use the current line."

	self exploreIt.
	^ true!

SmalltalkEditor removeSelector: #printIt:!

!methodRemoval: SmalltalkEditor #printIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
printIt: aKeyboardEvent
	"Print the results of evaluting the selection -- invoked via cmd-p.  If there is no current selection, use the current line.  1/17/96 sw
	 2/29/96 sw: don't call selectLine now, since it's called by doIt"

	self printIt.
	^ true!

SmalltalkEditor removeSelector: #extractToTemporary:!

!methodRemoval: SmalltalkEditor #extractToTemporary: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
extractToTemporary: aKeyboardEvent

	self extractToTemporary.
	^true!

SmalltalkEditor removeSelector: #browseIt:!

!methodRemoval: SmalltalkEditor #browseIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
browseIt: aKeyboardEvent
	"Triggered by Cmd-B; browse the thing represented by the current selection, if plausible.  1/18/96 sw"

	self browseIt.
	^ true!

SmalltalkEditor removeSelector: #methodStringsContainingIt:!

!methodRemoval: SmalltalkEditor #methodStringsContainingIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
methodStringsContainingIt: aKeyboardEvent
	"Triggered by Cmd-E"

	self methodStringsContainingIt.
	^ true!

SmalltalkEditor removeSelector: #temporaryToInstanceVariable:!

!methodRemoval: SmalltalkEditor #temporaryToInstanceVariable: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
temporaryToInstanceVariable: aKeyboardEvent

	self temporaryToInstanceVariable.

	^true.!

SmalltalkEditor removeSelector: #contextualInlineMethod:!

!methodRemoval: SmalltalkEditor #contextualInlineMethod: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
contextualInlineMethod: aKeyboardEvent

	self contextualInlineMethod.
	^true.

	!

SmalltalkEditor removeSelector: #enclose:!

!methodRemoval: SmalltalkEditor #enclose: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
enclose: aKeyboardEvent
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	| startIndex stopIndex oldSelection new enlargedBy |
	"This implementation is only for commenting and uncommenting code.
	Other cases are handled by the super implementation.
	This implementation only handles String and discards Text attributes."
	aKeyboardEvent keyCharacter = $" ifFalse: [
		^super enclose: aKeyboardEvent ].

	startIndex := self startIndex.
	stopIndex := self stopIndex.
	oldSelection := self selection string.
	((startIndex > 1 and: [stopIndex <= model textSize])
			and: [ (model actualContents at: startIndex-1) = $"
				and: [(model actualContents at: stopIndex) = $"]])
		ifTrue: [
			"already enclosed in double colons; make selection no longer a comment"
			self selectFrom: startIndex-1 to: stopIndex.
			self replaceSelectionWith: oldSelection withDoubleColonsUndoubled ]
		ifFalse: [
			"not enclosed in double colons; make selection a comment"
			new := oldSelection withDoubleColonsDoubled.
			enlargedBy := new size - oldSelection size.
			self replaceSelectionWith: $" asString, new, $" asString.
			self selectFrom: startIndex+1 to: stopIndex + enlargedBy ].
	^ true.!

SmalltalkEditor removeSelector: #displayIfFalse:!

!methodRemoval: SmalltalkEditor #displayIfFalse: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
displayIfFalse: aKeyboardEvent
	"Replace the current text selection with the text 'ifFalse:'--initiated by 
	cmd-F."

	self addString: 'ifFalse:'.
	^false!

SmalltalkEditor removeSelector: #contextualRemoveParameter:!

!methodRemoval: SmalltalkEditor #contextualRemoveParameter: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
contextualRemoveParameter: aKeyboardEvent 
	
	self contextualRemoveParameter.
	^true!

SmalltalkEditor removeSelector: #debugIt:!

!methodRemoval: SmalltalkEditor #debugIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
debugIt: aKeyboardEvent

	self debugIt.
	^true!

SmalltalkEditor removeSelector: #implementorsOfIt:!

!methodRemoval: SmalltalkEditor #implementorsOfIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
implementorsOfIt: aKeyboardEvent
	"Triggered by Cmd-m; browse implementors of the selector represented by the current selection, if plausible. 2/1/96 sw"

	self implementorsOfIt.
	^ true!

SmalltalkEditor removeSelector: #inspectIt:!

!methodRemoval: SmalltalkEditor #inspectIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
inspectIt: aKeyboardEvent
	"Inspect the selection -- invoked via cmd-i.  If there is no current selection, use the current line.  1/17/96 sw
	 2/29/96 sw: don't call selectLine; it's done by inspectIt now"

	self inspectIt.
	^ true!

SmalltalkEditor removeSelector: #methodSourceContainingIt:!

!methodRemoval: SmalltalkEditor #methodSourceContainingIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
methodSourceContainingIt: aKeyboardEvent
	"Triggered by Cmd-e"

	self methodSourceContainingIt.
	^ true!

SmalltalkEditor removeSelector: #pasteInitials:!

!methodRemoval: SmalltalkEditor #pasteInitials: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
pasteInitials: aKeyboardEvent 
	"Replace the current text selection by an authorship name/date stamp; invoked by cmd-shift-v, easy way to put an authorship stamp in the comments of an editor."
	"This is a user command, and generates undo"

	| i |
	i := self stopIndex.
	self replaceSelectionWith: (Text fromString: Utilities changeStamp).
	self deselectAndPlaceCursorAt: i.
	^ true!

SmalltalkEditor removeSelector: #referencesToIt:!

!methodRemoval: SmalltalkEditor #referencesToIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
referencesToIt: aKeyboardEvent
	"Triggered by Cmd-N; browse references to the current selection"

	self referencesToIt.
	^ true!

SmalltalkEditor removeSelector: #contextualExtractAsParameter:!

!methodRemoval: SmalltalkEditor #contextualExtractAsParameter: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
contextualExtractAsParameter: aKeyboardEvent 
	
	self contextualExtractAsParameter.
	^true!

SmalltalkEditor removeSelector: #argNext:!

!methodRemoval: SmalltalkEditor #argNext: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
argNext: aKeyboardEvent
	"Invoked by cmd-A.
	 Search forward from the end of the selection for a colon followed by
		a space.  Place the text cursor after the space.  If none are found, place the
		text cursor at the end of the text.."

	| start t |
	t := model actualContents.
	start := t findString: ': ' startingAt: self startIndex.
	start = 0 ifTrue: [ start := t size + 1].
	self deselectAndPlaceCursorAt: start + 2.
	^true!

SmalltalkEditor removeSelector: #fileItIn:!

!methodRemoval: SmalltalkEditor #fileItIn: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
fileItIn: aKeyboardEvent
	"File in the selection; invoked via a keyboard shortcut, -- for now, cmd-shift-G."

	self fileItIn.
	^ true!

SmalltalkEditor removeSelector: #argPrev:!

!methodRemoval: SmalltalkEditor #argPrev: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
argPrev: aKeyboardEvent
	"Invoked by cmd-Q.
	 Search backwards from the start of the selection for a colon followed by
		a space.  Place the text cursor after the space.  If none are found, place the
		text cursor at the start of the text.."

	| t i |
	t := model actualContents.
	i := self stopIndex.
	i > 1 ifTrue: [
		i := i -2.
		[i > 0 and: [ (t at: i) ~= $  or: [(t at: i-1) ~= $: ]]] whileTrue: [
			i := i -1 ].
		self deselectAndPlaceCursorAt: i + 1.
	].
	^true!

SmalltalkEditor removeSelector: #contextualAddParameter:!

!methodRemoval: SmalltalkEditor #contextualAddParameter: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
contextualAddParameter: aKeyboardEvent 
	
	self contextualAddParameter.
	^true!

SmalltalkEditor removeSelector: #extractMethod:!

!methodRemoval: SmalltalkEditor #extractMethod: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
extractMethod: aKeyboardEvent

	self extractMethod.
	^true!

SmalltalkEditor removeSelector: #inlineTemporaryVariable:!

!methodRemoval: SmalltalkEditor #inlineTemporaryVariable: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
inlineTemporaryVariable: aKeyboardEvent

	self inlineTemporaryVariable.
	^true!

SmalltalkEditor removeSelector: #displayIfTrue:!

!methodRemoval: SmalltalkEditor #displayIfTrue: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
displayIfTrue: aKeyboardEvent
	"Replace the current text selection with the text 'ifTrue:'--initiated by 
	cmd-T."

	self addString: 'ifTrue:'.
	^false!

SmalltalkEditor removeSelector: #acceptAndDebugTest:!

!methodRemoval: SmalltalkEditor #acceptAndDebugTest: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
acceptAndDebugTest: aKeyboardEvent 
	
	^self acceptAndDebugTest !

SmalltalkEditor removeSelector: #openMenu:!

!methodRemoval: SmalltalkEditor #openMenu: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
openMenu: aMenu
	
	aMenu popUpInWorld: morph world!

SmalltalkEditor removeSelector: #sendersOfIt:!

!methodRemoval: SmalltalkEditor #sendersOfIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
sendersOfIt: aKeyboardEvent
	"Triggered by Cmd-n; browse implementors of the selector represented by the current selection, if plausible. 2/1/96 sw"

	self sendersOfIt.
	^ true!

SmalltalkEditor removeSelector: #doIt:!

!methodRemoval: SmalltalkEditor #doIt: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
doIt: aKeyboardEvent
	"Called when user hits cmd-d.  Select the current line, if relevant, then evaluate and execute.  2/1/96 sw.
	2/29/96 sw: don't call selectLine; it's done by doIt now"

	self doIt.
	^ true!

SmalltalkEditor removeSelector: #acceptAndTestAll:!

!methodRemoval: SmalltalkEditor #acceptAndTestAll: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
acceptAndTestAll: aKeyboardEvent

	^self acceptAndTestAll!

SmalltalkEditor removeSelector: #cancel:!

!methodRemoval: SmalltalkEditor #cancel: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
cancel: aKeyboardEvent
	"Cancel all edits done. Revert to saved version."

	model refetch.
	^ true!

SmalltalkEditor removeSelector: #contextualRename:!

!methodRemoval: SmalltalkEditor #contextualRename: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
contextualRename: aKeyboardEvent

	self contextualRename.
	^true!

SmalltalkEditor removeSelector: #acceptAndTest:!

!methodRemoval: SmalltalkEditor #acceptAndTest: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
acceptAndTest: aKeyboardEvent

	^self acceptAndTest!

TextEditor class removeSelector: #cmdShortcutsSpec!

!methodRemoval: TextEditor class #cmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
cmdShortcutsSpec
	"
	Editor initialize
	"
	"arranged in QWERTY keyboard order"
	self flag: #definesKeyboardShortcuts.
	^#(
		#(		$0 	changeEmphasis:			'Normal')
		#(		$1 	changeEmphasis:			'Bold')
		#(		$2 	changeEmphasis:			'Italic')
		#(		$3 	changeEmphasis:			'Underline')
		#(		$4 	changeEmphasis:			'Strikeout')
		#(		$5 	changeEmphasis:			'Superscript')
		#(		$6 	changeEmphasis:			'Subscript')
		#(		$8	#offerColorMenu:		'Change color')

		#(		$u	#align:				'Toggle alignment')

		#(		$k	#offerFontMenu:			'Set font')
	)!

TextEditor class removeSelector: #basicCmdShortcutsSpec!

!methodRemoval: TextEditor class #basicCmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
basicCmdShortcutsSpec
	"
	Editor initialize
	"

	"arranged in QWERTY keyboard order"
	self flag: #definesKeyboardShortcuts.
	^#(
		#(		$( 	#enclose:					'Enclose within ( and ), or remove enclosing ( and )')
		#(		$[ 	#enclose:					'Enclose within [ and ], or remove enclosing [ and ]')
		#(		${ 	#enclose:					'Enclose within { and }, or remove enclosing { and }')
		#(		$' 	#enclose:					'Enclose within single quotes, or remove enclosing single quotes')
		#(		$" 	#enclose:					'Enclose within double quotes, or remove enclosing double quotes')
		#(		$` 	#enclose:					'Enclose within backticks, or remove enclosing backticks')
		#(		$< 	#enclose:					'Enclose within < and >, or remove enclosing < and >')

		#(		$a 	#selectAll:					'Select all')
		#(		$s 	#save:					'Save')
		#(		$f 	#find:					'Find')
		#(		$g 	#findAgain:					'Find again')
		#(		$h 	#help:					'Open this help')
		#(		$j 	#setSearchString:					'Set selection as search string for find again')

		#(		$z 	#undo:					'Undo (multiple levels)')
		#(		$x 	#cut:					'Cut selection and store it in the Clipboard')
		#(		$c 	#copySelection:					'Copy selection to the Clipboard')
		#(		$v 	#paste:					'Paste Clipboard contents')

		#(		$U	#changeLineEndsToLf:		'Convert line endings to LF characters (Cuis convention) in selection')

		#(		$H	#cursorTopHome:					'Move cursor to start of text')

		#(		$Z	#redo:					'Redo (multiple levels)')
		#(		$C	#compareToClipboard:		'Compare argument to clipboard')
	)!

TextEditor removeSelector: #makeUppercase:!

!methodRemoval: TextEditor #makeUppercase: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
makeUppercase: aKeyboardEvent
	"Force the current selection to uppercase.  Triggered by Cmd-Y."
	"This is a user command, and generates undo"

	self replaceSelectionWith: self selectedString asUppercase.
	^ true!

TextEditor removeSelector: #undo:!

!methodRemoval: TextEditor #undo: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
undo: aKeyboardEvent 
	"Undo the last edit."

	self undo.
	^true!

TextEditor removeSelector: #makeCapitalized:!

!methodRemoval: TextEditor #makeCapitalized: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
makeCapitalized: aKeyboardEvent
	"Force the current selection to uppercase.  Triggered by Cmd-X."
	"This is a user command, and generates undo"

	| prev |
	prev := $-.  "not a letter"
	self replaceSelectionWith: 
		(self selectedString collect:
			[:c | prev := prev isLetter ifTrue: [c asLowercase] ifFalse: [c asUppercase]]).
	^ true!

TextEditor removeSelector: #save:!

!methodRemoval: TextEditor #save: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
save: aKeyboardEvent
	"Submit the current text.  Equivalent to 'accept' 1/18/96 sw"

	self acceptContents.
	^ true!

TextEditor removeSelector: #offerFontMenu:!

!methodRemoval: TextEditor #offerFontMenu: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
offerFontMenu: aKeyboardEvent 
	"The user typed the command key that requests a font change; Offer the font menu.  5/27/96 sw"

	self offerFontMenu.
	^ true!

TextEditor removeSelector: #makeLowercase:!

!methodRemoval: TextEditor #makeLowercase: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
makeLowercase: aKeyboardEvent
	"Force the current selection to lowercase.  Triggered by Cmd-X."
	"This is a user command, and generates undo"

	self replaceSelectionWith: self selectedString asLowercase.
	^ true!

TextEditor removeSelector: #help:!

!methodRemoval: TextEditor #help: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
help: aKeyboardEvent
	"Show a help screen"

	self openHelp.
	^ true!

TextEditor removeSelector: #enclose:!

!methodRemoval: TextEditor #enclose: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
enclose: aKeyboardEvent
	"Insert or remove bracket characters around the current selection."
	"This is a user command, and generates undo"

	| left right startIndex stopIndex oldSelection which |
	startIndex := self startIndex.
	stopIndex := self stopIndex.
	oldSelection := self selection.
	which := '([<{"''`' indexOf: aKeyboardEvent keyCharacter ifAbsent: [ ^true ].
	left := '([<{"''`' at: which.
	right := ')]>}"''`' at: which.
	((startIndex > 1 and: [stopIndex <= model textSize])
			and: [ (model actualContents at: startIndex-1) = left
				and: [(model actualContents at: stopIndex) = right]])
		ifTrue: [
			"already enclosed; strip off brackets"
			self selectFrom: startIndex-1 to: stopIndex.
			self replaceSelectionWith: oldSelection]
		ifFalse: [
			"not enclosed; enclose by matching brackets"
			self replaceSelectionWith:
				(Text string: (UnicodeString with: left) attributes: emphasisHere),
				oldSelection,
				(Text string: (UnicodeString with: right) attributes: emphasisHere).
			self selectFrom: startIndex+1 to: stopIndex].
	^ true.!

TextEditor removeSelector: #compareToClipboard:!

!methodRemoval: TextEditor #compareToClipboard: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
compareToClipboard: aKeyboardEvent
	"Compare the receiver to the text on the clipboard."

	self compareToClipboard.
	^ true!

TextEditor removeSelector: #findAgain:!

!methodRemoval: TextEditor #findAgain: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
findAgain: aKeyboardEvent 
	"Find the desired text again.  1/24/96 sw"

	self findAgain.
	^ true!

TextEditor removeSelector: #offerColorMenu:!

!methodRemoval: TextEditor #offerColorMenu: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
offerColorMenu: aKeyboardEvent 
	"The user typed the command key that requests a font change; Offer the color menu."

	self offerColorMenu.
	^ true!

TextEditor removeSelector: #changeLineEndsToLf:!

!methodRemoval: TextEditor #changeLineEndsToLf: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
changeLineEndsToLf: aKeyboardEvent
	"Replace all CRs and CrLfs by LFs.
	Triggered by Cmd-U -- useful when getting code from FTP sites"
	"This is a user command, and generates undo"
	
	self replaceSelectionWith: self selectedString withCuisLineEndings.
	^ true!

TextEditor removeSelector: #redo:!

!methodRemoval: TextEditor #redo: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
redo: aKeyboardEvent 
	"Redo the last edit."

	self redo.
	^true!

TextEditor removeSelector: #align!

!methodRemoval: TextEditor #align stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
align
	"Align text according to the next greater alignment value,
	cycling among leftFlush, rightFlush, center, and justified."
	self chooseAlignment!

TextEditor removeSelector: #setSearchString:!

!methodRemoval: TextEditor #setSearchString: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
setSearchString: aKeyboardEvent
	"Establish the current selection as the current search string."

	| aString |
	self lineSelectAndEmptyCheck: [^ true].
	aString :=  self selectedString.
	aString isEmpty
		ifTrue: [ self flash ]
		ifFalse: [ self setSearch: aString ].
	^ true!

TextEditor removeSelector: #find:!

!methodRemoval: TextEditor #find: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
find: aKeyboardEvent
	"Prompt the user for what to find, then find it, searching from the current selection onward.  1/24/96 sw"

	self find.
	^ true!

TextEditor removeSelector: #align:!

!methodRemoval: TextEditor #align: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
align: aKeyboardEvent
	"Triggered by Cmd-u;  cycle through alignment alternatives.  8/11/96 sw"

	self align.
	^ true!

TextEditor removeSelector: #changeEmphasis:!

!methodRemoval: TextEditor #changeEmphasis: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
changeEmphasis: aKeyboardEvent
	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis."
	"control 0..9 -> 0..9"
	"This is a user command, and generates undo"

	| keyCode attributeToAdd attributesToRemove oldAttributes |
	keyCode := ('0123456'
		indexOf: aKeyboardEvent keyCharacter
		ifAbsent: [ 1 ]) - 1.
	oldAttributes := emphasisHere.

	keyCode = 0
		ifTrue: [
			"Remove all TextEmphasis"
			attributeToAdd := nil.
			attributesToRemove := oldAttributes ]
		ifFalse: [
			"Toggle the indicated TextEmphasis"
			(keyCode between: 1 and: 6) ifTrue: [
				attributeToAdd := TextEmphasis perform: (
					#(#bold #italic #underlined #struckThrough #superscript #subscript)
						at: keyCode).
				oldAttributes do: [ :oldAtt |
					oldAtt = attributeToAdd ifTrue: [
						attributeToAdd := nil.
						attributesToRemove := {oldAtt} ]]]].

	attributeToAdd ifNotNil: [ self applyAttribute: attributeToAdd ].
	attributesToRemove ifNotNil: [ self unapplyAttributes: attributesToRemove ].
	^ true!

Editor class removeSelector: #formatShortcutsUsingModifierKey:andSpecs:!

!methodRemoval: Editor class #formatShortcutsUsingModifierKey:andSpecs: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
formatShortcutsUsingModifierKey: aModifierKey andSpecs: aSpecs
	"Format shortcuts specs with a modifier key"
	^ String streamContents: [ :strm |
		aSpecs do: [ :triplet | | c |
			c := triplet first = Character space
				ifFalse: [ triplet first asString, '   	' ]
				ifTrue: [ 'Space'].
			strm nextPutAll: (aModifierKey, '-', c, String tab, String tab, triplet third).
			strm newLine ]]!

Editor class removeSelector: #allCmdShortcutsSpec!

!methodRemoval: Editor class #allCmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
allCmdShortcutsSpec

	^ (self collectCmdShortcutsSpecUsing: #basicCmdShortcutsSpec), (self collectCmdShortcutsSpecUsing: #cmdShortcutsSpec)!

Editor class removeSelector: #basicInitialize!

!methodRemoval: Editor class #basicInitialize stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
basicInitialize
	"
	Editor initialize
	"
	self withAllSubclassesDo: [ :c | c initializeShortcuts; initializeCmdShortcuts ]!

Editor class removeSelector: #cmdShortcutsSpec!

!methodRemoval: Editor class #cmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
cmdShortcutsSpec

	^#()!

Editor class removeSelector: #cmdShortcuts!

!methodRemoval: Editor class #cmdShortcuts stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
cmdShortcuts
	"Same for all instances.
	A subclass could handle specific keyboard shortcuts for each instance, though."
	
	cmdShortcuts ifNil: [self initializeCmdShortcuts ].
	
	^cmdShortcuts!

Editor class removeSelector: #help!

!methodRemoval: Editor class #help stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
help
	"
	TextEditor help edit
	SmalltalkEditor help edit
	"
	^ (self formatShortcutsUsingModifierKey: 'Shift' andSpecs: self allShiftShortcutsSpec) ,
		(self formatShortcutsUsingModifierKey: 'Cmd' andSpecs: self allCmdShortcutsSpec).
!

Editor class removeSelector: #collectCmdShortcutsSpecUsing:!

!methodRemoval: Editor class #collectCmdShortcutsSpecUsing: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
collectCmdShortcutsSpecUsing: anInitializationMessage

	| shortcutsSpec dynamicInitializationMessage |
	
	shortcutsSpec := self perform: anInitializationMessage.

	dynamicInitializationMessage := (self name asPlainString uncapitalized, anInitializationMessage asPlainString capitalized) asSymbol.
	(Smalltalk allClassesImplementing: dynamicInitializationMessage) do: [ :aClass | 
		shortcutsSpec := shortcutsSpec, (aClass soleInstance perform: dynamicInitializationMessage) ].

	^shortcutsSpec

!

Editor class removeSelector: #putIntoCmdShortcuts:!

!methodRemoval: Editor class #putIntoCmdShortcuts: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
putIntoCmdShortcuts: shortcutsSpec

	shortcutsSpec do: [ :ary | | i previous |
		i := ary first codePoint + 1.
		previous := cmdShortcuts at: i.
		previous = #noop:
			ifTrue: [
				cmdShortcuts at: i put: ary second ]
			ifFalse: [ 
				('Editor shortcut: ', ary first printString, ' already taken for: ', previous, 
				'. Override request for: ', ary second, '  ignored') print ]].!

Editor class removeSelector: #basicCmdShortcutsSpec!

!methodRemoval: Editor class #basicCmdShortcutsSpec stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
basicCmdShortcutsSpec

	^#()!

Editor class removeSelector: #initializeCmdShortcuts!

!methodRemoval: Editor class #initializeCmdShortcuts stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
initializeCmdShortcuts
	"Initialize the (unshifted) command-key (or alt-key if not on Mac) shortcut table.
	If you want to add a new shortcut for an specific editor, for example SmalltalkEditor, you should
	define the message #smalltalkEditorCmdShortcutsSpec in a class of your category and it will
	be dynamically send"

	"NOTE: if you don't know what your keyboard generates, use Sensor test"

	"
	Editor initialize
	"

	cmdShortcuts := Array new: 256 withAll: #noop:.

	self putIntoCmdShortcuts: self allCmdShortcutsSpec
!

Editor removeSelector: #selectAll:!

!methodRemoval: Editor #selectAll: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:05'!
selectAll: aKeyboardEvent 
	"select everything, invoked by cmd-a.  1/17/96 sw"

	self selectAll.
	^ true!

Editor removeSelector: #selectWord:!

!methodRemoval: Editor #selectWord: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
selectWord: aKeyboardEvent

	self selectWord.
	^ true!

Editor removeSelector: #cmdShortcuts!

!methodRemoval: Editor #cmdShortcuts stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
cmdShortcuts
	"Same for all instances.
	A subclass could handle specific keyboard shortcuts for each instance, though."
	^self class cmdShortcuts!

Editor removeSelector: #paste:!

!methodRemoval: Editor #paste: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
paste: aKeyboardEvent 
	"Replace the current text selection by the text in the shared buffer."

	self paste.
	^true!

Editor removeSelector: #cut:!

!methodRemoval: Editor #cut: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
cut: aKeyboardEvent 
	"Cut out the current text selection."

	self cut.
	^true!

Editor removeSelector: #cursorTopHome:!

!methodRemoval: Editor #cursorTopHome: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
cursorTopHome: aKeyboardEvent
	"Put cursor at beginning of text -- invoked from cmd-H shortcut, useful for keyboards that have no home key."

	self deselectAndPlaceCursorAt: 1.
	^ true!

Editor removeSelector: #copySelection:!

!methodRemoval: Editor #copySelection: stamp: 'Install-6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st 8/13/2024 18:37:06'!
copySelection: aKeyboardEvent
	"Copy the current text selection."

	self copySelection.
	^true!

Editor initialize!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6557-TextEditor-cleanup-JuanVuletich-2024Jun11-09h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6461] on 11 June 2024 at 10:31:04 am'!

Editor class
	instanceVariableNames: 'shortcuts cmdShortcuts keyboardActions '!

!classDefinition: 'Editor class' category: #'System-Text' stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
Editor class
	instanceVariableNames: 'shortcuts cmdShortcuts keyboardActions'!
!Editor methodsFor: 'typing support' stamp: 'jmv 6/10/2024 19:40:43'!
               keyboardActions
	"Same for all instances.
	A subclass could handle specific keyboard actions for each instance, though."
	^self class keyboardActions! !
!Editor class methodsFor: 'class initialization' stamp: 'jmv 6/10/2024 19:39:12'!
                     initializeKeyboardActions
	"Initialize the table for regular (i.e. non-command) keystroke dispatch"
	"
	self initializeKeyboardActions
	"
	| actions |
	actions := Array new: 256 withAll: #normalCharacter:.
	0 to: 31 do: [ :i | actions at: i+1 put: #noop: ].
	actions at: 1 + 1 put: #cursorHome:.				"home key"
	actions at: 3 + 1 put: #enter:.						"enter / return key"
	actions at: 4 + 1 put: #cursorEnd:.				"end key"
	actions at: 5 + 1 put: #noop:.						"insert key"
	actions at: 8 + 1 put: #backspace:.				"macDelete winBackspace key"
	actions at: 9 + 1 put: #normalCharacter:.		"tab"
	actions at: 11 + 1 put: #cursorPageUp:.			"page up key"
	actions at: 12 + 1 put: #cursorPageDown:.		"page down key"
	actions
		at:  InputSensor returnKey + 1
		put: #returnKey:.									"return (sometimes labelled enter) key"
	actions at: 27 + 1 put: #offerMenuFromEsc:.	"escape key"
	actions at: 28 + 1 put: #cursorLeft:.				"left arrow key"
	actions at: 29 + 1 put: #cursorRight:.				"right arrow key"
	actions at: 30 + 1 put: #cursorUp:.				"up arrow key"
	actions at: 31 + 1 put: #cursorDown:.			"down arrow key"
	actions at: 127 + 1 put: #forwardDelete:.		"winDelete key"
	keyboardActions := actions! !
!Editor class methodsFor: 'keyboard shortcut tables' stamp: 'jmv 6/11/2024 10:28:08'!
                             keyboardActions
	"Same for all instances.
	A subclass could handle specific keyboard actions for each instance, though."
	
	keyboardActions ifNil: [ self initializeKeyboardActions ].
	^keyboardActions! !
!TextEditor class methodsFor: 'class initialization' stamp: 'jmv 6/10/2024 19:39:06' overrides: 50362079!
          initializeKeyboardActions
	
	super initializeKeyboardActions.
	keyboardActions at: 9 + 1 put: #tabKey:.! !
!SystemDictionary methodsFor: 'shrinking' stamp: 'jmv 6/11/2024 10:24:41' prior: 50360966!
                          presumedSentMessages
	| sent |
	"
	In addition to those here, if it is desired to preserve some methods from deletion, see #nominallyUnsent:
	Smalltalk presumedSentMessages
	"

	"The following should be preserved for doIts, etc"
	sent := IdentitySet new.
	#( rehashWithoutBecome
		browseAllSelect:  lastRemoval
		vScrollBarValue: hScrollBarValue: 
		to: removeClassNamed:
		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib
		newDepth: restoreAfter: zapAllMethods obsoleteClasses
		removeAllUnSentMessages abandonSources removeUnreferencedKeys
		zapOrganization condenseSources condenseChanges browseObsoleteReferences
		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:
		startTimerEventLoop unusedClasses allClasses
		unimplemented
		reduceCuis
		variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
		printSpaceAnalysis:on:) do: [ :sel |
			sent add: sel].
	"The following may be sent by perform: in dispatchOnChar..."
	Editor withAllSubclassesDo: [ :c |
		c keyboardActions asSet do: [ :sel | sent add: sel ].
		c new defaultMenuSpec do: [ :spec |
			spec size >= 5 ifTrue: [
				spec fifth isSymbol ifTrue: [ sent add: spec fifth ]]]].
	#(beReadOnlyBinding beReadWriteBinding) do: [ :sel |
		sent add: sel].
	AppLauncher appSelector ifNotNil: [ :sel |
		sent add: sel ].
	^ sent! !
!Editor class methodsFor: 'class initialization' stamp: 'jmv 6/11/2024 10:26:28' prior: 50361027 overrides: 16916245!
       initialize
	"
	Editor initialize
	"
	self withAllSubclassesDo: [ :c | c initializeKeyboardActions ].! !
!Editor class methodsFor: 'cached state access' stamp: 'jmv 6/10/2024 19:41:53' prior: 50361034 overrides: 16789255!
   releaseClassCachedState

	keyboardActions := nil.! !
!TextEditor methodsFor: 'typing support' stamp: 'jmv 6/10/2024 19:41:16' prior: 50360486!
                 dispatchOn: aKeyboardEvent
	"Carry out the action associated with this character, if any."

	| codePoint asciiValue c |
	self clearParens.
  	codePoint := aKeyboardEvent keyValue.
	
	codePoint > 255 ifTrue: [
		^self normalCharacter: aKeyboardEvent ].

	c := aKeyboardEvent keyCharacter.
	(')]}' includes: c)
		ifTrue: [ self blinkPrevParen: c ].

	asciiValue := codePoint.
	^ self perform: (self keyboardActions at: asciiValue + 1) with: aKeyboardEvent.! !
!TextEditor class methodsFor: 'cached state access' stamp: 'jmv 6/10/2024 19:42:01' prior: 50361040 overrides: 50362201!
                             releaseClassCachedState

	FindText := nil.
	ChangeText := nil.
	"We are not calling super to avoid cleansing class vars many times.
	So, repeat inherited class instVars!!"
	keyboardActions := nil.! !
!SmalltalkEditor class methodsFor: 'cached state access' stamp: 'jmv 6/10/2024 19:41:57' prior: 50361050 overrides: 50362225!
                          releaseClassCachedState

	"We are not calling super to avoid cleansing class vars many times.
	So, repeat inherited class instVars!!"
	keyboardActions := nil.! !

SmalltalkEditor removeSelector: #createMenuCollectingOptionsWith:!

!methodRemoval: SmalltalkEditor #createMenuCollectingOptionsWith: stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
createMenuCollectingOptionsWith: aMenuOptionsSelector
	
	^(DynamicMenuBuilder buildTitled: self class name targeting: self collectingMenuOptionsWith: aMenuOptionsSelector)
		addStayUpIcons;
		yourself
		
!

TextEditor class removeSelector: #initializeShortcuts!

!methodRemoval: TextEditor class #initializeShortcuts stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
initializeShortcuts
	
	super initializeShortcuts.
	shortcuts at: 9 + 1 put: #tabKey:.!

Editor class removeSelector: #shortcuts!

!methodRemoval: Editor class #shortcuts stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
shortcuts
	"Same for all instances.
	A subclass could handle specific keyboard shortcuts for each instance, though."
	
	shortcuts ifNil: [ self initializeShortcuts ].
	
	^shortcuts!

Editor class removeSelector: #initializeShortcuts!

!methodRemoval: Editor class #initializeShortcuts stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
initializeShortcuts
	"Initialize the table for regular (i.e. non-command) keystroke dispatch"
	"
	self initializeShortcuts
	"
	| actions |
	actions := Array new: 256 withAll: #normalCharacter:.
	0 to: 31 do: [ :i | actions at: i+1 put: #noop: ].
	actions at: 1 + 1 put: #cursorHome:.				"home key"
	actions at: 3 + 1 put: #enter:.						"enter / return key"
	actions at: 4 + 1 put: #cursorEnd:.				"end key"
	actions at: 5 + 1 put: #noop:.						"insert key"
	actions at: 8 + 1 put: #backspace:.				"macDelete winBackspace key"
	actions at: 9 + 1 put: #normalCharacter:.		"tab"
	actions at: 11 + 1 put: #cursorPageUp:.			"page up key"
	actions at: 12 + 1 put: #cursorPageDown:.		"page down key"
	actions
		at:  InputSensor returnKey + 1
		put: #returnKey:.									"return (sometimes labelled enter) key"
	actions at: 27 + 1 put: #offerMenuFromEsc:.	"escape key"
	actions at: 28 + 1 put: #cursorLeft:.				"left arrow key"
	actions at: 29 + 1 put: #cursorRight:.				"right arrow key"
	actions at: 30 + 1 put: #cursorUp:.				"up arrow key"
	actions at: 31 + 1 put: #cursorDown:.			"down arrow key"
	actions at: 127 + 1 put: #forwardDelete:.		"winDelete key"
	shortcuts := actions!

Editor removeSelector: #shortcuts!

!methodRemoval: Editor #shortcuts stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
shortcuts
	"Same for all instances.
	A subclass could handle specific keyboard shortcuts for each instance, though."
	^self class shortcuts!

Editor initialize!

Editor class
	instanceVariableNames: 'keyboardActions'!

!classDefinition: 'Editor class' category: #'System-Text' stamp: 'Install-6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st 8/13/2024 18:37:06'!
Editor class
	instanceVariableNames: 'keyboardActions'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6558-TextEditor-shortcuts-renameAs-keyboardActions-JuanVuletich-2024Jun11-10h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6552] on 31 July 2024 at 11:30:46 am'!
!Editor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 7/29/2024 16:00:01'!
         editorClassesInHierarchyOrderDo: aBlock
	"maybe name differently"
	(self class withAllSuperclassesUpTo: Editor) reverseDo: aBlock! !
!InnerTextMorph methodsFor: 'menu' stamp: 'jmv 7/31/2024 11:30:11' prior: 50359267 overrides: 50348293!
                   menuNshortcutsSpecsDo: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."

	"First take default editor menu and shortcut specs"
	self editor defaultMenuSpec do: aBlock.

	self window ifNotNil: [ :window |
		"Then include additions, overrides and deletions registered for #Editor, #TextEditor, #SmalltalkEditor, etc.
		Hierarchy order allows more specific classes to override choices made by superclasses."
		self editor editorClassesInHierarchyOrderDo: [ :editorClass |
			(window class registeredMenuAndShortcutsSpecProviders: editorClass name) ifNotNil: [ :providers |
				providers do: [ :eachMessageSend |
					(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		].
		"Also allow registering menu+shortcut entries for specific TextModels or TextProviders"
		(window class registeredMenuAndShortcutsSpecProviders: self textProviderOrModel class name) ifNotNil: [ :providers |
			providers do: [ :eachMessageSend |
				(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		.]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6559-EditorClassAndCodeProvider-specificMenuEntryRegistries-JuanVuletich-2024Jul31-11h27m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6559] on 5 August 2024 at 11:23:54 am'!
!Morph methodsFor: 'events' stamp: 'jmv 8/5/2024 09:47:54' prior: 50348327!
                   keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	menuNshortcutsSpecs valuesDo: [ :itemSpec |
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetOrGetter |
						targetOrGetter isSymbol
							ifTrue: [ 	self perform: targetOrGetter ]
							ifFalse: [ targetOrGetter ]]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						itemSpec size >= 8
							ifTrue: [ target perform: selector with: itemSpec eighth ]
							ifFalse: [ target perform: selector ].
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/5/2024 09:46:41' prior: 50347184!
                             addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector arguments iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetOrGetter |
			targetOrGetter isSymbol
				ifTrue: [ 	self perform: targetOrGetter ]
				ifFalse: [ targetOrGetter ]]
		ifNil: [ self ].
	selector := itemSpec fifth.
	arguments := itemSpec size >= 8 ifTrue: [ {itemSpec eighth} ] ifFalse: [ #() ].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: arguments ]
		ifFalse: [ menu add: label target: target action: selector argumentList: arguments ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/5/2024 11:22:39' prior: 50357828!
              allMenuNshortcutsSpecs
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'helpText(optional)'    selectorArgument(optional))
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window, #model or #editor. If nil, receiver is the widget itself.
		- selector is #aSymbol. Usually no arguments, or one single argument in 8th entry. 
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
		- selectorArgument is optional, but required if selector takes an argument.
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"
	"Several nested morphs may provide their own menu items and keyboard shortcuts for submorphs.
	A morph could also provide its own."

	| menuNshortcutsSpecs |

	menuNshortcutsSpecs := Dictionary new.
	"First, take menu and shortcut specs declared by us (i.e. the widget)"
	self menuNshortcutsSpecsDo: [ :menuItemSpec |
		menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ].
	"Then allow all owners to override or remove them.
	This is done outwards, each morph can override choices made by submorphs.
	This helps building reusable composites, that can be tweaked by user morphs / windows."
	self allOwnersDo: [ :o |
		o menuNshortcutsSpecsFor: self do: [ :menuItemSpec |
			(menuItemSpec size = 2 and: [ 		menuItemSpec second first = $X ])
				"#(12 		'XXX') means 'remove menu item numbered 12'"
				ifTrue: [ menuNshortcutsSpecs removeKey: menuItemSpec first ifAbsent: nil ]
				ifFalse: [ menuNshortcutsSpecs at: menuItemSpec first put: menuItemSpec ]]].
	^ menuNshortcutsSpecs! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/5/2024 11:22:48' prior: 50359276!
           getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'helpText(optional)'    selectorArgument(optional))
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window, #model or #editor. If nil, receiver is the widget itself.
		- selector is #aSymbol. Usually no arguments, or one single argument in 8th entry. 
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
		- selectorArgument is optional, but required if selector takes an argument.
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| menuNshortcutsSpecs itemSpec menu submenus |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6560-MenuNShortcutSpecs-allowOneArgument-JuanVuletich-2024Aug05-11h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6559] on 5 August 2024 at 11:30:59 am'!
!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 8/5/2024 11:27:04' prior: 16799906!
      findClassFrom: potentialClassNames ifFound: aBlock

	self classNameRequester 
		request: 'Class name or fragment?'
		initialAnswer: '' 
		do: [ :pattern | self findClassFrom: potentialClassNames ifFound: aBlock with: pattern ]! !
!Editor methodsFor: 'accessing' stamp: 'jmv 8/5/2024 11:30:11' prior: 50360458!
          help
	"
	TextEditor new help edit
	SmalltalkEditor new help edit
	"
	| tabs |
	tabs := String tab, String tab, String tab, String tab, String tab.
	^ String streamContents: [ :strm |
		self defaultMenuSpec do: [ :menuItemNshortcutSpec |
			menuItemNshortcutSpec size > 6 ifTrue: [
				menuItemNshortcutSpec third ifNotNil: [ :shortcutCharacter |
					strm nextPutAll: ('Command', '-', shortcutCharacter asString, tabs, menuItemNshortcutSpec seventh).
				strm newLine ]]]].! !

Editor class removeSelector: #allShiftShortcutsSpec!

!methodRemoval: Editor class #allShiftShortcutsSpec stamp: 'Install-6561-Cleanup-JuanVuletich-2024Aug05-11h23m-jmv.001.cs.st 8/13/2024 18:37:06'!
allShiftShortcutsSpec

	^ self shiftShortcutsSpec!

Editor class removeSelector: #shiftShortcutsSpec!

!methodRemoval: Editor class #shiftShortcutsSpec stamp: 'Install-6561-Cleanup-JuanVuletich-2024Aug05-11h23m-jmv.001.cs.st 8/13/2024 18:37:06'!
shiftShortcutsSpec
	"Only for help. See senders."

	^#(
		#(		'Enter' 	#globalFindClass: 'Global Find class name or fragment')
	)!

BrowserWindow class removeSelector: #findClassDialogTitle!

!methodRemoval: BrowserWindow class #findClassDialogTitle stamp: 'Install-6561-Cleanup-JuanVuletich-2024Aug05-11h23m-jmv.001.cs.st 8/13/2024 18:37:06'!
findClassDialogTitle

	^ 'Class name or fragment?'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6561-Cleanup-JuanVuletich-2024Aug05-11h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6561] on 5 August 2024 at 2:46:28 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 8/5/2024 14:45:49' prior: 50349112!
        knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('dkh'						'Dale Henrichs')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSG'						'David Graham')
	#('DSM' 						'Duane Maxwell')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jfr' 						'Jon Raiford')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('kdpm' 						'Kevin P√©rez Machado')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('PHK' 						'Peter Keeler')
	#('pmon'						'Paolo Montrasi')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6562-Add-Jon-AsKnownAuthor-JuanVuletich-2024Aug05-14h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6561] on 5 August 2024 at 2:49:33 pm'!
!CodePackage methodsFor: 'testing' stamp: 'jfr 8/3/2024 10:43:36' prior: 16823993!
                    isForeignClassExtension: categoryName
	"Answer true if <categoryName> is a foreign class extension reference"
	
	categoryName ifNil: [ ^false ].
	(categoryName size = 0) ifTrue:[^false].
	^ categoryName first = $* and: [(self isYourClassExtension: categoryName) not]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6563-FixWalkbackWhenFileInWithoutCategory-JonRaiford-2024Aug05-14h46m-jfr.001.cs.st----!

'From Cuis7.1 [latest update: #6563] on 5 August 2024 at 3:31:10 pm'!
!CompiledMethod methodsFor: 'source code management' stamp: 'jmv 8/5/2024 15:27:23' prior: 16834268!
                               putSource: sourceStr fromParseNode: methodNode inFile: fileIndex withPreamble: preambleBlock
	"Store the source code for the receiver on an external file.
	If no sources are available, i.e., SourceFile is nil, do nothing.
	If the fileIndex is 1, print on *.sources;  if it is 2, print on *.changes,
	in each case, storing a 4-byte source code pointer at the method end."

	| file remoteString  |
	(SourceFiles notNil and: [(file := SourceFiles at: fileIndex) notNil]) ifTrue: [
		file setToEnd.
		preambleBlock value: file.  "Write the preamble"
		remoteString := RemoteString newString: sourceStr onFileNumber: fileIndex toFile: file.
		file nextChunkPut: ' '.
		InMidstOfFileinNotification signal ifFalse: [file flush].
		self checkOKToAdd: sourceStr size at: remoteString position in: fileIndex.
		self setSourcePosition: remoteString position inFile: fileIndex ].

	Utilities logsUserChanges ifTrue: [
		DirectoryEntry userChangesDirectory // Smalltalk userChangesFileName appendStreamDo: [ :stream |
			preambleBlock value: stream.  "Write the preamble"
			stream nextChunkPut: sourceStr.
			stream nextChunkPut: ' ' ]]! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/5/2024 15:27:32' prior: 16965833!
                      logSnapshot: save andQuit: quit
	"Log quitting to changes file"
	| msg |
	msg := self snapshotMessageFor: save andQuit: quit.
	(SourceFiles at: 2) ifNotNil: [
		save ifTrue: [
			LastQuitLogPosition := (SourceFiles at: 2)
				 setToEnd;
				 position ]].
	self logChange: msg.
	Transcript
		 newLine;
		 show: msg;
		 newLine! !
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 8/5/2024 15:28:13' prior: 16966507!
                   assureStartupStampLogged
	"If there is a startup stamp not yet actually logged to disk, do it now."
	| changesFile directory oldUserChanges oldUserChangesName |
	(SourceFiles notNil and: [(changesFile := SourceFiles at: 2) notNil]) ifTrue: [
		changesFile isReadOnly ifFalse: [
			changesFile setToEnd; newLine; newLine.
			changesFile nextChunkPut: StartupStamp; newLine.
			self forceChangesToDisk ]].
	(Preferences at: #autoNumberUserChanges) ifTrue: [
		oldUserChanges := DirectoryEntry userChangesDirectory // self userChangesFileName.
		oldUserChanges exists ifTrue: [
			directory := oldUserChanges parent.
			oldUserChangesName := directory nextNameFor: oldUserChanges nameWithoutExtension extension: 'changes'.
			oldUserChanges rename: oldUserChangesName ]].
	DirectoryEntry userChangesDirectory // self userChangesFileName appendStreamDo: [ :stream |
		stream newLine; newLine.
		stream nextChunkPut: StartupStamp; newLine.
		stream flush ].! !
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 8/5/2024 15:27:28' prior: 16966737!
logChange: aStringOrText preamble: preambleOrNil
	"Write the argument, aString, onto the changes file."
	| aString changesFile |
	aString := aStringOrText asPlainString.
	aString firstNonSeparator = 0 ifTrue: [^ self].  "null doits confuse replay"
	
	(SourceFiles notNil and: [(changesFile := SourceFiles at: 2) notNil]) ifTrue: [
		changesFile isReadOnly ifFalse: [
			changesFile setToEnd; newLine; newLine.
			preambleOrNil ifNotNil: [
				changesFile nextPut: $!!; nextChunkPut: preambleOrNil; newLine ].
			changesFile nextChunkPut: aString.
			self forceChangesToDisk ]].
	self logToUserChanges: aString preamble: preambleOrNil! !
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 8/5/2024 15:25:17' prior: 16969370!
           setStartupStamp

	| dateAndTime |
	dateAndTime := DateAndTime now.
	StartupStamp := String streamContents: [ :stream |
		stream nextPutAll: '----STARTUP---- ('.
		dateAndTime date printOn: stream.
		stream space.
		dateAndTime time print24: true showSeconds: true on: stream.
		stream
			nextPutAll: ') as ';
			nextPutAll: self imageName ].
	self assureStartupStampLogged.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6564-dontDelayUserChangesCreation-JuanVuletich-2024Aug05-15h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6564] on 5 August 2024 at 5:53:11 pm'!
!FileList methodsFor: 'stepping' stamp: 'jmv 8/5/2024 16:47:58' overrides: 16915328!
         stepAt: millisecondSinceLast
	self updateFileList.! !
!FileList methodsFor: 'stepping' stamp: 'jmv 8/5/2024 15:43:45' overrides: 16915332!
                     wantsSteps
	^ true! !
!FileListWindow methodsFor: 'stepping' stamp: 'jmv 8/5/2024 17:25:53' overrides: 16971496!
               stepTime
	^ 1000 "milliseconds"! !
!FileList methodsFor: 'initialization' stamp: 'jmv 8/5/2024 16:24:33' prior: 16861902 overrides: 16932029!
                  initialize
	listIndex := 0.
	showDirsInFileList := false.
	showHidden := false.! !
!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 8/5/2024 17:53:01' prior: 16862209!
             listForSelectingPatterns: patternsThatSelect rejectingPatterns: patternsThatReject
	"Make the list be those file names which match the patterns."

	| sizePad selected newList namePad sizeWithCommasPad font |
	directory ifNil: [^#()].
	directory invalidateChildren.
	selected := Set new.
	patternsThatSelect do: [ :pat |
		directory childrenDo: [ :entry |
			(entry isDirectory
				ifTrue: [ showDirsInFileList ]
				ifFalse: [ self doesPattern: pat allow: entry])
					ifTrue: [ selected add: entry ]]].
	newList := selected copy.
	patternsThatReject do: [ :pat |
		selected do: [ :entry |
			(entry isDirectory not and: [ pat match: entry name]) ifTrue: [
				newList remove: entry ]]].
		
	newList := newList asArray sort: self sortBlock.
	font := Preferences at: #standardListFont.
	namePad := newList inject: 0 into: [ :mx :entry | mx max: (font widthOfString: entry name)].
	sizePad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printString size.
	sizeWithCommasPad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printStringWithCommas size.
	newList := newList collect: [ :e |
		self fileNameFormattedFrom: e namePad: namePad sizePad: sizePad sizeWithCommasPad: sizeWithCommasPad ].
	^ newList! !
!FileList methodsFor: 'private' stamp: 'jmv 8/5/2024 17:48:03' prior: 16862360!
               put: aText
	"Private - put the supplied text onto the file"

	| type |
	brevityState == #fullFile ifTrue: [
		acceptedContentsCache := aText.
		directory // fileName writeStreamDo: [ :stream |
			stream nextPutAll: acceptedContentsCache asPlainString ].
		directory invalidateChildren.
		self updateFileList.
		^ true  "accepted"].
	listIndex = 0 ifTrue: [
		self inform: 'No fileName is selected'.
		^ false  "failed"].
	type := 'These'.
	brevityState = #briefFile ifTrue: [type := 'Abbreviated'].
	brevityState = #briefHex ifTrue: [type := 'Abbreviated'].
	brevityState = #fullHex ifTrue: [type := 'Hexadecimal'].
	brevityState = #FileList ifTrue: [type := 'Directory'].
	self inform: ('{1} contents cannot
meaningfully be saved at present.' format:{type}).
	^ false  "failed"
! !
!FileList methodsFor: 'private' stamp: 'jmv 8/5/2024 16:44:13' prior: 16862541!
 updateFileList
	"Update my files list with file names in the current directory  
	that match the pattern.
	The pattern string may have embedded newlines or semicolons; these separate different patterns."
	| patterns patternsThatReject patternsThatSelect newList |
	patterns := OrderedCollection new.
	(pattern findTokens: (String with: Character cr with: Character lf with: $;))
		do: [ :each |
			(each includes: $*) | (each includes: $?)
				ifTrue: [ patterns add: (each copyReplaceAll: '?' with: '#')]
				ifFalse: [
					each isEmpty
						ifTrue: [ patterns add: '*']
						ifFalse: [ patterns add: '*' , each , '*']]].
	"A pattern that starts with $/ is used to reject entries
	Rejecting patterns are applied after selecting patterns."
	patternsThatSelect := patterns reject: [ :any | any first = $/ ].
	patternsThatSelect isEmpty ifTrue: [ patternsThatSelect add: '*' ]. 
	patternsThatReject := patterns select: [ :any | any first = $/ ] thenCollect: [ :each | each copyFrom: 2 to: each size ].
	newList := self listForSelectingPatterns: patternsThatSelect rejectingPatterns: patternsThatReject.

	newList = list ifFalse: [
		"If we had a selection, ensure it is valid, or discard it."
		listIndex = 0 ifFalse: [
			(listIndex > newList size or: [(list at: listIndex) ~= (newList at: listIndex)]) ifTrue: [
				listIndex := newList indexOf: (list at: listIndex) ]].
		list := newList.
		listIndex > 0 ifFalse: [ "Had no selection or it was discarded"
			fileName := nil.
			acceptedContentsCache := ''.
			self acceptedContentsChanged.
			self changed: #fileListIndex ].
		self changed: #fileList.
		self triggerEvent: #updateButtonRow ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6565-FileList-AutoUpdate-JuanVuletich-2024Aug05-17h50m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6565] on 6 August 2024 at 4:29:05 pm'!
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 8/6/2024 16:27:19' prior: 16845082!
                    buildMorphicWindow
	"Open a full morphic debugger with the given label"

	| bottomMorph |
	bottomMorph := LayoutMorph newRow.
	bottomMorph
		addMorph: self receiverInspector proportionalWidth: 0.2;
		addAdjusterAndMorph: self receiverInspectorText proportionalWidth: 0.3;
		addAdjusterAndMorph: self contextVariableInspector proportionalWidth: 0.2;
		addAdjusterAndMorph: self contextVariableInspectorText proportionalWidth: 0.3.

	self layoutMorph
		addMorph: self stackList proportionalHeight: 0.25;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55;
		addAdjusterAndMorph: bottomMorph proportionalHeight: 0.2.! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 8/6/2024 16:27:58' prior: 50337925!
          contextVariableInspector

	^ contextVariableInspector ifNil: [
		contextVariableInspector := (PluggableListMorph
			withModel: model contextVariablesInspector 
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				doubleClickSelector: #inspectContextSelection;
				menuNshortcutsKey: #contextVariablesListMenuSpec ].		! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 8/6/2024 16:28:05' prior: 50337938!
                           receiverInspector

	^ receiverInspector ifNil: [
		receiverInspector := (PluggableListMorph
			withModel: model receiverInspector
			listGetter: #fieldList
			indexGetter: #selectionIndex 
			indexSetter: #toggleIndex:)
				doubleClickSelector: #inspectReceiverSelection;
				menuNshortcutsKey: #receiverVariablesListMenuSpec ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6566-Debugger-InspectOnDoubleClickOnVariables-JuanVuletich-2024Aug06-16h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6566] on 6 August 2024 at 5:25:57 pm'!
!UniFileStream class methodsFor: 'error handling' stamp: 'jmv 8/6/2024 17:07:23' prior: 16992462!
                              fileExistsUserHandling: fullFileName
	| dir localName choice newName entry |
	entry := fullFileName asFullFileEntry.
	dir := entry parent.
	localName := entry name.
	choice := (PopUpMenu
		labels:
'overwrite that file\choose another name\cancel' withNewLines)
		startUpWithCaption: localName, '
already exists.'.

	"overwrite that file"
	choice = 1 ifTrue: [
		dir removeKey: localName
			ifAbsent: [self error: 'Could not delete the old version of that file'].
		^ self new open: fullFileName forWrite: true].

	"choose another name"
	choice = 2 ifTrue: [
		newName := self request: 'Enter a new file name' initialAnswer: fullFileName.
		^ FileIOAccessor default privateNewFile: newName asFileEntry ].

	"choice = 3: cancel"
	"Answer nil. Let callers decide whether to continue or not"
	^nil.! !
!FileEntry methodsFor: 'accessing-stream' stamp: 'jmv 8/6/2024 17:08:46' prior: 50335410!
         writeStreamDo: blockWithArg 
	"If the file already exists raise FileExistsException.
	Creates the directory if it doesn't exist.
	Note: If file already exists and user selects 'cancel', the block is passed nil as argument!!"
	| stream |
	stream := self writeStream.
	[ blockWithArg value: stream ]
		ensure: [
			stream
				ifNotNil: [ :s | s close ].
			self invalidate ].
! !
!FileEntry methodsFor: 'accessing' stamp: 'jmv 8/6/2024 16:55:45' prior: 16860712!
                   writeStream
	"If the file already exists raise FileExistsException.
	Note: You need to eventually close the stream.
	Usually prefer #writeStreamDo: that closes the file for you.
	Creates the directory if it doesn't exist.
	Note: Answer nil if for whatever reason the file can not be created.
	"

	self invalidate.
	self parent exists ifFalse: [self parent assureExistence].
	^self fileAccessor privateNewFile: self! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6567-AnswerNilIfUSerCancelsFileCreation-JuanVuletich-2024Aug06-17h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6566] on 6 August 2024 at 5:28:00 pm'!
!ClassDescription methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:10:18' prior: 16819335!
                     fileOutCategory: catName
	"FileOut the named category"

	DirectoryEntry fileOutsDirectory // (self name , '-' , catName , '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream timeStamp.
			self fileOutCategory: catName on: fileStream moveSource: false toFile: 0 ]].! !
!ClassDescription methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:10:34' prior: 16819416!
fileOutMethod: selector
	"Write source code of a single method on a file.  Make up a name for the file."

	| nameBody |
	(selector == #Comment) ifTrue: [^ self inform: 'Sorry, cannot file out class comment in isolation.'].
	(self includesSelector: selector) ifFalse: [^ self error: 'Selector ', selector asPlainString, ' not found'].
	nameBody := self name , '-' , (selector copyReplaceAll: ':' with: '').
	DirectoryEntry fileOutsDirectory // (nameBody asFileName, '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream timeStamp.
			self printMethodChunk: selector withPreamble: true
				on: fileStream moveSource: false toFile: 0 ]].! !
!Class methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:11:01' prior: 16815581!
                           fileOut
	"File a description of the receiver onto a new file whose base name is the name of the receiver."

	DirectoryEntry fileOutsDirectory // (self name, '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream timeStamp.
			self sharedPools size > 0 ifTrue: [
				self shouldFileOutPools
					ifTrue: [ self fileOutSharedPoolsOn: fileStream ]].
			self fileOutOn: fileStream moveSource: false toFile: 0 ]].! !
!Class methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:11:42' prior: 16815596!
                              fileOutHierarchy
	"File a description of the receiver onto a new file whose base name is the name of the receiver.
	Morph fileOutHierarchy
	"

	DirectoryEntry fileOutsDirectory // (self name, '-hierarcy.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream timeStamp.
			self sharedPools size > 0 ifTrue: [
				self shouldFileOutPools
					ifTrue: [ self fileOutSharedPoolsOn: fileStream ]].
			self withAllSubclassesDo: [ :each |
				each fileOutOn: fileStream moveSource: false toFile: 0 ]]].! !
!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:13:30' prior: 16970125!
                               fileOutAllCategories
	"
	Cursor write showWhile: [
		SystemOrganization fileOutAllCategories ]
	"
	DirectoryEntry fileOutsDirectory // 'Cuis-AllCode.st' writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			self categories do: [ :category |
				self fileOutCategoryNoPoolsNoInit: category on: fileStream ]]].! !
!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:13:54' prior: 16970137!
         fileOutCategory: aCategoryRoot
	"FileOut all the classes in the named system category."

	DirectoryEntry fileOutsDirectory // (aCategoryRoot asFileName , '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			(self withSubCategoriesOf: aCategoryRoot) do: [ :category | 
				self fileOutCategory: category on: fileStream initializing: true ]]].! !
!InstructionPrinter class methodsFor: 'printing' stamp: 'jmv 8/6/2024 17:21:17' prior: 16883928!
                         printClass: class 
	"Create a file whose name is the argument followed by '.bytes'. Store on 
	the file the symbolic form of the compiled methods of the class."

	DirectoryEntry fileOutsDirectory // (class name , '.bytes') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			class selectorsDo: [ :sel | 
				fileStream newLine; nextPutAll: sel; newLine.
				(self on: (class compiledMethodAt: sel)) printInstructionsOn: fileStream ]]].

	"
	InstructionPrinter printClass: Parser.
	"! !
!CodeProvider methodsFor: 'message list menu' stamp: 'jmv 8/6/2024 17:20:43' prior: 50347689!
                     fileOutMessage
	"Put a description of the selected message on a file"

	self selectedMessageName ifNotNil:
		[^self selectedClassOrMetaClass fileOutMethod: self selectedMessageName].
	self messageList ifNotNil:
		[:theMethods|
		self request: 'Enter file name'
			initialAnswer: 'methods.st'
			do: [ :filename |
				DirectoryEntry fileOutsDirectory // filename writeStreamDo:
					[ :fileStream |
					fileStream ifNotNil: [
						fileStream timeStamp.
						theMethods do:
							[ :methodRef |
							methodRef actualClass
								printMethodChunk: methodRef methodSymbol
								withPreamble: true
								on: fileStream
								moveSource: false
								toFile: 0 ]]]]].! !
!ChangeList methodsFor: 'menu actions' stamp: 'jmv 8/6/2024 17:20:23' prior: 16804357!
  fileOutCurrentVersionsOfSelections

	self request: 'Enter file name' initialAnswer: 'CurrentVersions.st' do: [ :filename |
		DirectoryEntry fileOutsDirectory // filename writeStreamDo: [ :fileStream |
			fileStream ifNotNil: [
				fileStream timeStamp.
				self currentVersionsOfSelections do: [ :methodRef |
					methodRef actualClass
						printMethodChunk: methodRef methodSymbol
						withPreamble: true
						on: fileStream
						moveSource: false
						toFile: 0 ]]]].! !
!ChangeList methodsFor: 'menu actions' stamp: 'jmv 8/6/2024 17:20:02' prior: 16804373!
           fileOutSelections

	self request: 'Enter file name' initialAnswer: 'SelectedChanges.st' do: [ :filename |
		DirectoryEntry fileOutsDirectory // filename writeStreamDo: [ :fileStream |
			fileStream ifNotNil: [
				fileStream timeStamp.
				listSelections with: changeList do: [ :selected :item |
					selected ifTrue: [ item fileOutOn: fileStream ]]]]].! !
!FileList methodsFor: 'private' stamp: 'jmv 8/6/2024 17:15:20' prior: 50363169!
           put: aText
	"Private - put the supplied text onto the file"

	| type |
	brevityState == #fullFile ifTrue: [
		acceptedContentsCache := aText.
		directory // fileName writeStreamDo: [ :fileStream |
			fileStream ifNotNil: [
				fileStream nextPutAll: acceptedContentsCache asPlainString ]].
		directory invalidateChildren.
		self updateFileList.
		^ true  "accepted"].
	listIndex = 0 ifTrue: [
		self inform: 'No fileName is selected'.
		^ false  "failed"].
	type := 'These'.
	brevityState = #briefFile ifTrue: [type := 'Abbreviated'].
	brevityState = #briefHex ifTrue: [type := 'Abbreviated'].
	brevityState = #fullHex ifTrue: [type := 'Hexadecimal'].
	brevityState = #FileList ifTrue: [type := 'Directory'].
	self inform: ('{1} contents cannot
meaningfully be saved at present.' format:{type}).
	^ false  "failed"! !
!SystemWindow methodsFor: 'user interface' stamp: 'jmv 8/6/2024 17:16:06' prior: 50355997!
                   saveContentsTo: aFileEntry
	"Saves the contents to the given filename"

	self hasSaveAs ifFalse: [^self].
	aFileEntry writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream nextPutAll: model contentsForFileSaving.
			self 
				setProperty: #lastFilenameUsedToSave toValue: aFileEntry pathName;
				notifyUserWith: 'Contents saved to', String newLineString, aFileEntry pathName ]].! !
!TheWorldMenu methodsFor: 'commands' stamp: 'jmv 8/6/2024 17:16:22' prior: 16983912!
                            saveWorldInFile
	"Save the world's submorphs, model, and stepList in a file.  "

	self request: 'File name for this morph?' do: [ :fileName |
		fileName isEmpty ifTrue: [^ self].  "abort"
		"Save only model, stepList, submorphs in this world"
		myWorld submorphsDo: [ :m | m allMorphsDo: [ :subM | subM prepareToBeSaved ]].	"Amen"
		(fileName, '.morph') asFileEntry writeStreamDo: [ :fileStream |
			fileStream ifNotNil: [
				fileStream fileOutObject: myWorld ]]].! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 8/6/2024 17:16:46' prior: 16808409!
                       fileOut
	"File out the receiver, to a file whose name is a function of the  
	change-set name and either of the date & time or chosen to have a  
	unique numeric tag, depending on the preference  
	'changeSetVersionNumbers'"
	| folder slips nameToUse |
	folder := DirectoryEntry savedChangeSetsDirectory.
	nameToUse := self name.
	nameToUse := nameToUse copyReplaceAll: 'AuthorName' with: Utilities authorName asUnaccented asCamelCase.
	nameToUse := (Preferences at: #changeSetVersionNumbers)
				ifTrue: [
					folder
						nextNameFor: nameToUse coda: '-', Utilities authorInitials
						extension: 'cs.st' ]
				ifFalse: [ (nameToUse , '.' , Utilities dateTimeSuffix , '.cs.st') asFileName ].

	folder // nameToUse writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			fileStream timeStamp.
			self fileOutPreambleOn: fileStream.
			self fileOutOn: fileStream.
			self fileOutPostscriptOn: fileStream ]].

	self hasUnsavedChanges: false.
	(Preferences at: #checkForSlips) 		ifFalse: [^ self].
	slips := self checkForSlips.
	(slips notEmpty
			and: [(PopUpMenu withCaption: 'Methods in this fileOut have halts
or references to the Transcript
or other ''slips'' in them.
Would you like to browse them?' chooseFrom: 'Ignore\Browse slips')
					= 2])
		ifTrue: [ Smalltalk browseMessageList: slips name: 'Possible slips in ' , name ]! !
!CodeFile methodsFor: 'fileIn/fileOut' stamp: 'jmv 8/6/2024 17:17:43' prior: 16822427!
            fileOut
	self request: 'Enter the file name' initialAnswer: '' do: [ :aString |
		DirectoryEntry fileOutsDirectory // aString writeStreamDo: [ :fileStream |
			fileStream ifNotNil: [
				sourceSystem isEmpty
					ifFalse: [ fileStream nextChunkPut: sourceSystem printString; newLine ].
				self fileOutOn: fileStream.
				fileStream newLine; newLine.
				classes do: [ :cls |
					cls needsInitialize
						ifTrue: [ fileStream newLine; nextChunkPut: cls name,' initialize']].
				fileStream newLine ]]].! !
!PseudoClass methodsFor: 'fileIn/fileOut' stamp: 'jmv 8/6/2024 17:18:24' prior: 16932837!
          fileOut

	DirectoryEntry fileOutsDirectory // (self name, '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			self fileOutOn: fileStream.
			self needsInitialize ifTrue: [
				fileStream newLine; nextChunkPut: self name,' initialize' ]]].! !
!PseudoClass methodsFor: 'fileIn/fileOut' stamp: 'jmv 8/6/2024 17:18:43' prior: 16932847!
      fileOutCategory: categoryName

	DirectoryEntry fileOutsDirectory // (self name,'-',categoryName,'.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			self fileOutMethods: (self organization listAtCategoryNamed: categoryName) on: fileStream ]].! !
!PseudoClass methodsFor: 'fileIn/fileOut' stamp: 'jmv 8/6/2024 17:19:02' prior: 16932866!
   fileOutMethod: selector

	DirectoryEntry fileOutsDirectory // (name,'-', selector asFileName, '.st') writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			self fileOutMethods: (Array with: selector) on: fileStream ]].! !
!SpaceTally methodsFor: 'fileOut' stamp: 'jmv 8/6/2024 17:19:21' prior: 16957855!
            printSpaceAnalysis	
	"
	SpaceTally new printSpaceAnalysis
	"

	DirectoryEntry logsDirectory // 'STspace.text' writeStreamDo: [ :fileStream |
		fileStream ifNotNil: [
			self printSpaceAnalysis: 1 on: fileStream ]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6568-Fileout-DoNothingIfUserCancelsFileCreation-JuanVuletich-2024Aug06-17h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6568] on 7 August 2024 at 1:09:05 pm'!
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:45:39'!
                  bitsSizeForWidth: aWidth height: aHeight depth: aDepth

	^ (self wordsPerLine: aWidth depth: aDepth) * aHeight! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:38:53'!
                pixelsPerWord: aDepth
	^32 // aDepth! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:42:37'!
                          wordsPerLine: aWidth depth: aDepth
	| pixPerWord |
	pixPerWord := self pixelsPerWord: aDepth.
	^ aWidth + pixPerWord - 1 // pixPerWord! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:46:07' prior: 16867155!
        bitsSize

	^self bitsSizeForWidth: width height: height depth: self depth! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:46:56' prior: 16867194!
     pixelsPerWord
	^self pixelsPerWord: self depth! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/7/2024 10:43:58' prior: 16867207!
wordsPerLine

	^self wordsPerLine: width depth: self depth.
! !
!Form methodsFor: 'private' stamp: 'jmv 8/7/2024 13:08:37' prior: 16869587!
                    setExtent: extent depth: bitsPerPixel
	"Create a virtual bit map with the given extent and bitsPerPixel."

	| newBits newDepth newHeight newWidth |

	"Find parameters and allocate new bits before modifying this instance.
	If, for whatever reason, allocation fails, an exception will be raised
	and this instance (if already initialized) will still be in a consistent state."
	newWidth := extent x asInteger max: 0.
	newHeight := extent y asInteger max: 0.
	newDepth := bitsPerPixel.
	newBits := Bitmap new: (self bitsSizeForWidth: newWidth height: newHeight depth: newDepth abs).

	"If we get to this point, allocation succeeded. If we are already initialized (bits notNil), then set
	width, height and depth before setting bits, only if bits will later shrink. This is to avoid an unlikely
	invalid access in some other process if this instance is used elsewhere. This could be a serious problem
	for instance for Display."
	(bits notNil and: [ 		newBits size < bits size ]) ifTrue: [
		width := newWidth.
		height := newHeight.
		depth := newDepth ].

	"All good. Assign the new state."
	bits := newBits.
	width := newWidth.
	height := newHeight.
	depth := newDepth.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6569-MoreRobustFormAllocation-JuanVuletich-2024Aug07-12h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6517] on 7 August 2024 at 10:49:00 am'!
!WorldMorph methodsFor: 'update cycle' stamp: 'jfr 8/7/2024 10:48:53' prior: 17007813!
                checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p |
	DisplayScreen isDisplayExtentOk ifFalse: [
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		[
			"This allocates new memory for Display and is critical."
			DisplayScreen setupDisplay.
			UISupervisor newUIProcess.
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ]
		] on: OutOfMemory do: [
			"In case of allocation failure, don't allocate Display right now,
			but start a new UI process. This will retry the Display resize real soon."
			'Display allocation failed'  print.
			UISupervisor newUIProcess 		]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6570-MainWindowResize-protectAgainstAllocationFailure-JonRaiford-2024Aug07-10h48m-jfr.001.cs.st----!

'From Cuis7.1 [latest update: #6570] on 7 August 2024 at 4:53:01 pm'!
!LayoutMorph class methodsFor: 'instance creation' stamp: 'jmv 8/7/2024 16:49:47' prior: 16890529 overrides: 16787725!
                 new
	"Answer a row by default so the 'new morph' menu doesn't fail..."
	^self newRow! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6571-LayoutMorph-new-cleanup-JuanVuletich-2024Aug07-16h48m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6571] on 8 August 2024 at 12:34:10 pm'!
!SUnitNameResolver class methodsFor: 'Camp Smalltalk' stamp: 'jmv 8/8/2024 12:19:22' prior: 16943625!
                              errorObject
	^Error! !
!TestResult methodsFor: 'running' stamp: 'jmv 8/8/2024 12:09:39' prior: 16976114!
                       runCase: aTestCase

	| testCasePassed |

	testCasePassed :=
		[
			[
				self reportAboutToRun: aTestCase.
				aTestCase runCase.
				self reportPassed: aTestCase.
				true]
					on: self class failure
					do: [ :signal |
						self reportFailed: aTestCase because: signal.
						(self failures isEmpty or: [ failures last ~~ aTestCase ])
							ifTrue: [ failures add: aTestCase ].
						signal sunitExitWith: false ]]
							on: UnhandledError
							do: [ :signal |
								self reportError: aTestCase because: signal.
								aTestCase errored: signal.
								self errors add: aTestCase.
								signal sunitExitWith: false ].

	testCasePassed
		ifTrue: [ self passed add: aTestCase ]! !
!TestResult class methodsFor: 'exceptions' stamp: 'jmv 8/8/2024 12:12:24' prior: 16976183!
               signalErrorWith: aString 
	TestResult exError sunitSignalWith: aString.! !

TestResult class removeSelector: #error!

!methodRemoval: TestResult class #error stamp: 'Install-6572-SUnit-dontRaiseUnhandledError-JuanVuletich-2024Aug08-12h31m-jmv.001.cs.st 8/13/2024 18:37:06'!
error
	^self exError
			!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6572-SUnit-dontRaiseUnhandledError-JuanVuletich-2024Aug08-12h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6427] on 7 August 2024 at 8:46:42 pm'!
!TestResult methodsFor: 'accessing' stamp: 'HAW 8/7/2024 20:39:53'!
       addAll: tests asFailureBecause: aReason

	tests do: [ :aFailedTest |
		self reportFailed: aFailedTest because: aReason.
		self failures add: aFailedTest ]! !
!TestResource class methodsFor: 'creation' stamp: 'HAW 8/7/2024 20:40:19' prior: 16975943!
       signalInitializationError
	^TestResult signalFailureWith: 'Resource ' , self name , ' could not be initialized'
			! !
!TestSuite methodsFor: 'running' stamp: 'HAW 8/7/2024 20:39:09' prior: 16977160!
                        run

	| result |
 
	result := TestResult new.
	
	[ self setUpResources ] 
		on: result class failure 
		do: [ :aFailure |
			result addAll: tests asFailureBecause: aFailure messageText.
			self tearDownResources.
			^result ].
		
	[self run: result] ensure: [self tearDownResources].
	
	^result
			! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6573-FailWhenResourceNotAvailable-HernanWilkinson-2024Aug07-20h39m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6573] on 8 August 2024 at 3:16:03 pm'!
!LayoutMorph class methodsFor: 'instance creation' stamp: 'KenD 8/8/2024 06:52:13' overrides: 16907514!
                               initializedInstance

	^self newRow! !
!LayoutMorph class methodsFor: 'instance creation' stamp: 'KenD 8/8/2024 06:53:03' prior: 50363868 overrides: 16787725!
  new
	"Answer a row by default so the 'new morph' menu doesn't fail..."
	^self error: 'Use LayoutMorph newRow or LayoutMorph newColumn'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6574-LayoutMorph-tweaks-KenDickey-2024Aug08-15h15m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6574] on 8 August 2024 at 5:24:53 pm'!
!CharacterSequence methodsFor: 'accessing' stamp: 'jmv 8/8/2024 16:48:51'!
              utf8BytesSize
	"Optimized where appropriate."
	^self asUtf8Bytes size! !
!String methodsFor: 'accessing' stamp: 'jmv 8/8/2024 16:54:52' overrides: 50363989!
   utf8BytesSize
	"Avoid creating the actual byte array."

	| byteCount |
	"Fast lane."
	self isAscii ifTrue: [ ^self size ].

	"Need to do UTF-8 encoding."
	byteCount := 0.
	self do: [ :c |
		Character
			evaluate: [ :byte | byteCount := byteCount + 1 ]
			withUtf8BytesOf: c codePoint ].
	^byteCount! !
!UnicodeString methodsFor: 'accessing' stamp: 'jmv 8/8/2024 16:56:37' overrides: 50363989!
                       utf8BytesSize
	"We are already UTF-8 encoded."

	^bytes size! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6575-Strings-utf8BytesSize-JuanVuletich-2024Aug08-17h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6575] on 9 August 2024 at 10:47:21 am'!
!MessageNode methodsFor: 'macro transformations' stamp: 'jmv 8/9/2024 10:39:09' prior: 16897053!
                             transformToDo: encoder
	" var := rcvr. L1: [var <= arg1] Bfp(L2) [block body. var := var + inc] Jmp(L1) L2: "
	| limit increment block initStmt test incStmt limitInit blockVar myRange blockRange limitIsAssignedTo |
	block := arguments last.
	"First check for valid arguments"
	(block notNil
	 and: [block isBlockNode
	 and: [block numberOfArguments = 1
	 and: [block firstArgument isVariableReference "As with debugger remote vars"]]]) ifFalse:
		[^false].
	arguments size = 3
		ifTrue: [increment := arguments at: 2.
				(increment isConstantNumber
				 and: [increment literalValue ~= 0]) ifFalse: [^false]]
		ifFalse: [increment := encoder encodeLiteral: 1].
	(limit := arguments at: 1) isVariableReference ifTrue:
		[limitIsAssignedTo := false.
		 block nodesDo:
			[:node|
			(node isAssignmentNode and: [node variable = limit]) ifTrue:
				[limitIsAssignedTo := true]].
		 limitIsAssignedTo ifTrue:
			[^false]].
	arguments size < 3 ifTrue:   "transform to full form"
		[selector := SelectorNode new key: #to:by:do: code: #macro].

	"Now generate auxiliary structures"
	myRange := encoder rawSourceRanges at: self ifAbsent: [1 to: 0].
	blockRange := encoder rawSourceRanges at: block ifAbsent: [1 to: 0].
	blockVar := block firstArgument.
	initStmt := AssignmentNode new variable: blockVar value: receiver.
	limit isVariableReference | limit isConstantNumber
		ifTrue: [limitInit := nil]
		ifFalse:  "Need to store limit in a var"
			[limit := encoder bindBlockArg: blockVar key, 'LimiT' within: block.
			 limit scope: -2.  "Already done parsing block; flag so it won't print"
			 block addArgument: limit.
			 limitInit := AssignmentNode new
							variable: limit
							value: arguments first].
	test := MessageNode new
				receiver: blockVar
				selector: (increment key > 0 ifTrue: [#<=] ifFalse: [#>=])
				arguments: {limit}
				precedence: precedence
				from: encoder
				sourceRange: (myRange first to: blockRange last+1).
	incStmt := AssignmentNode new
				variable: blockVar
				value: (MessageNode new
							receiver: blockVar selector: #+
							arguments: {increment}
							precedence: precedence
							from: encoder
							sourceRange: (myRange last to: (myRange last max: blockRange last)))
				from: encoder
				sourceRange: (myRange last to: (myRange last max: blockRange last)).
	arguments := {limit. increment. block. initStmt. test. incStmt. limitInit}.
	block noteOptimizedIn: self.
	^true! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6576-fixDebuggerHighlightOf-to-do-JuanVuletich-2024Aug09-10h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6575] on 9 August 2024 at 10:53:08 am'!
!CharacterSequence methodsFor: 'accessing' stamp: 'jmv 8/8/2024 17:07:24' prior: 16812917!
  subStrings: separators 
	"Answer an array containing the substrings in the receiver separated 
	by any of the elements of separators.
	Answer will not include empty strings
	'Hello World' subStrings: ' '
	'1Hello12World1This1211Are31Words1' subStrings: '123'
	'1Hello12World1This1211Are31Words1' subStrings: #($1 $2 $3)
	"

	| delimiterCharacters out |
	delimiterCharacters := separators asArray.
	^Array streamContents: [ :answer |
		out := self species writeStream.
		self do: [ :char |
			(delimiterCharacters identityIncludes:			char)
				ifFalse: [ out nextPut: char ]
				ifTrue: [
					out isEmpty ifFalse: [
						answer nextPut: out contents.
						out := self species writeStream ]]].
		out isEmpty ifFalse: [
			answer nextPut: out contents ]].! !
!CharacterSequence methodsFor: 'accessing' stamp: 'jmv 8/8/2024 17:07:57' prior: 16812946!
              substringsSeparatedBy: delimiterCharacter
	"Find substrings delimited by aCharacter.
	Answer may include empty strings
	'0063;LATIN SMALL LETTER C;Ll;0;L;;;;;N;;;0043;;0043' substringsSeparatedBy: $;
	"

	| out |
	^Array streamContents: [ :answer |
		out := self species writeStream.
		self do: [ :char |
			char = delimiterCharacter
				ifFalse: [ out nextPut: char ]
				ifTrue: [
					answer nextPut: out contents.
					out := self species writeStream ]].
		answer nextPut: out contents.
		out := nil ].! !
!CharacterSequence methodsFor: 'converting' stamp: 'jmv 8/8/2024 17:05:51' prior: 16813300!
      asCamelCase
	"Answer a new String, without any whitespace, and with words capitalized (Except for the first one)
	' how do you do? ' asCamelCase
	"
	^ self species streamContents: [ :outStream | | capitalize wroteSome |
		wroteSome := false.
		capitalize := false.
		self do: [ :each | | c |
			c := each.
			c isSeparator
				ifTrue: [ capitalize := true ]
				ifFalse: [
					capitalize & wroteSome ifTrue: [ c := c asUppercase ].
					outStream nextPut: c.
					wroteSome := true.
					capitalize := false ]]].! !
!String methodsFor: 'converting' stamp: 'jmv 8/8/2024 17:10:33' prior: 50352356!
          asCodePoints
	"Convert the given string to UTF-32 from the internal encoding: ISO Latin-1 (ISO 8859-1).
	Answer a WordArray."
	
	^WordArray streamContents: [ :outStream |
		self do: [ :c |
			outStream nextPut: c codePoint ]].! !
!String methodsFor: 'converting' stamp: 'jmv 8/8/2024 17:11:12' prior: 50352370 overrides: 16813499!
                     asUtf8Bytes
	"Convert the given string to UTF-8 from the internal encoding: ISO Latin-1 (ISO 8859-1)
	Answer a ByteArray with a valid UTF-8 sequence."

	"Fast lane."
	self isAscii ifTrue: [ ^self asByteArray ].

	"Need to do UTF-8 encoding."
	^ByteArray streamContents: [ :outStream |
		self do: [ :c |
			Character
				evaluate: [ :byte | outStream nextPut: byte ]
				withUtf8BytesOf: c codePoint ]].! !
!String methodsFor: 'converting' stamp: 'jmv 8/8/2024 17:11:54' prior: 16959868 overrides: 16813503!
     asUtf8BytesOrByteString
	"Similar to #asUtf8Bytes.
	May answer an instance of String as an optimization.
	See senders"

	"Fast lane."
	self isAscii ifTrue: [ ^self ].

	"Need to do UTF-8 encoding."
	^ByteArray streamContents: [ :outStream |
		self do: [ :c |
			Character
				evaluate: [ :byte | outStream nextPut: byte ]
				withUtf8BytesOf: c codePoint ]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6577-String-cleanup-JuanVuletich-2024Aug09-10h47m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6427] on 8 August 2024 at 8:10:36 pm'!
!TestCase class methodsFor: 'instance creation' stamp: 'HAW 8/8/2024 20:04:14'!
            debugAsFailure: aSymbol 

	^(self selector: aSymbol) debugAsFailure! !
!Browser methodsFor: 'tdd' stamp: 'HAW 8/8/2024 20:04:36' prior: 16799059!
              debugMethodTest
	
	currentCompiledMethod isTestMethod ifTrue: [
		currentCompiledMethod methodClass debugAsFailure: currentCompiledMethod selector ]
! !
!MethodSet methodsFor: 'run tests' stamp: 'HAW 8/8/2024 20:04:43' prior: 16901927!
                    debugMethodTest
	
	currentCompiledMethod isTestMethod ifTrue: [
		currentCompiledMethod methodClass debugAsFailure: currentCompiledMethod selector ]
! !
!SmalltalkEditor methodsFor: 'tdd' stamp: 'HAW 8/8/2024 20:04:51' prior: 16954508!
                    acceptAndDebugTest
	
	^self acceptAndWithMethodDo: [ :aPotencialTestMethod | 
		aPotencialTestMethod isTestMethod ifTrue: [ 
			aPotencialTestMethod methodClass debugAsFailure: aPotencialTestMethod selector ]]! !
!TestCase methodsFor: 'debugging' stamp: 'HAW 8/8/2024 20:03:50' prior: 16975514!
                         debugAsFailure
	
	^self debugInstance runCaseAsFailure! !

TestCase class removeSelector: #debugAsFailure:ifCanNot:!

!methodRemoval: TestCase class #debugAsFailure:ifCanNot: stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
debugAsFailure: aSymbol ifCanNot: handler

	^(self selector: aSymbol) debugAsFailureIfCanNot: handler
	!

TestCase class removeSelector: #canNotDebugMethodErrorDescription!

!methodRemoval: TestCase class #canNotDebugMethodErrorDescription stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
canNotDebugMethodErrorDescription

	^'Quick methods can not be debugged'!

TestCase removeSelector: #debugAsFailureIfCanNot:!

!methodRemoval: TestCase #debugAsFailureIfCanNot: stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
debugAsFailureIfCanNot: handler
	self ifCanNotDebugDo: [^ handler value].
	self debugInstance runCaseAsFailure!

TestCase removeSelector: #signalCanNotDebugMethod!

!methodRemoval: TestCase #signalCanNotDebugMethod stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
signalCanNotDebugMethod 

	self error: self canNotDebugMethodErrorDescription!

TestCase removeSelector: #canNotDebugMethodErrorDescription!

!methodRemoval: TestCase #canNotDebugMethodErrorDescription stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
canNotDebugMethodErrorDescription

	^self class canNotDebugMethodErrorDescription!

TestCase removeSelector: #ifCanNotDebugDo:!

!methodRemoval: TestCase #ifCanNotDebugDo: stamp: 'Install-6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st 8/13/2024 18:37:06'!
ifCanNotDebugDo: handler

	^self methodForTest isQuick ifTrue: handler!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6578-RemoveCannotDebugTest-HernanWilkinson-2024Aug08-20h03m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6578] on 10 August 2024 at 10:24:09 pm'!
!Class methodsFor: 'accessing class hierarchy' stamp: 'HAW 8/10/2024 22:21:41' prior: 50348957 overrides: 16787874!
       superclass: aClassOrNil
	"Change the receiver's superclass to be aClass.
	Keep the subclass / superclass invariant.
	Not to be used lightly!!
	Usually used only to create subclasses of nil."

	| oldSuperclass |
	oldSuperclass := superclass.
	super superclass: aClassOrNil.
	oldSuperclass == superclass ifFalse: [
		oldSuperclass removeSubclass: self.
		aClassOrNil addSubclass: self ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6579-ChangeSuperclassFix-HernanWilkinson-2024Aug10-22h19m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6579] on 11 August 2024 at 8:03:33 pm'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/11/2024 20:01:11' prior: 50358607!
                     snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #restoreLostChangesIfNecessary'.
			self restoreLostChangesIfNecessary ].
	self assureStartupStampLogged.
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !
!SystemDictionary methodsFor: 'startup' stamp: 'HAW 1/17/2024 20:50:59' prior: 50363084!
                        setStartupStamp

	| dateAndTime |
	dateAndTime := DateAndTime now.
	StartupStamp := String streamContents: [ :stream |
		stream nextPutAll: '----STARTUP---- ('.
		dateAndTime date printOn: stream.
		stream space.
		dateAndTime time print24: true showSeconds: true on: stream.
		stream
			nextPutAll: ') as ';
			nextPutAll: self imageName ] 
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6580-LogStartupAfterRecoveringChangesNotBefore-JuanVuletich-2024Aug11-20h03m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6580] on 11 August 2024 at 9:05:10 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'HAW 8/11/2024 21:01:04' prior: 50358130!
             classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(90		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(100		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(110		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(120 		'-----')
		#(130		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(140		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(150		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(160		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(170 		'-----')
		#(180		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(190		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(200 		'-----')
		#(210		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(220		'class vars' 							nil 	window 			browseClassVariables 									classIcon)
		#(230		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(240 		'-----')
		#(250		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$r 	model 			recent)

		" 'refactorings' SubMenu"
		#(1005		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(1010		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1020 		'-----')
		#(1030		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1040		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1050		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1060		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1070		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1080		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1090 		'-----')
		#(1100		'rename global...' 							nil 	model 			renameGlobal 									saveAsIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6581-RenameClassToRefactoringMenu-HernanWilkinson-2024Aug11-21h01m-HAW.001.cs.st----!

'From Cuis7.1 [latest update: #6581] on 12 August 2024 at 9:30:08 am'!

LayoutMorph removeSelector: #addMorph:!

!methodRemoval: LayoutMorph #addMorph: stamp: 'Install-6582-LayoutMorph-Cleanup-HilaireFernandes-2024Aug12-09h28m-hlsf.001.cs.st 8/13/2024 18:37:06'!
addMorph: aMorph
	"Add a submorph, at the bottom or right, with a default LayoutSpec if none was provided."

	aMorph isPlacedMorph ifFalse: [ self error: 'Only PlacedMorphs can be used in Layouts' ].
	aMorph layoutSpec.
	super addMorphFront: aMorph!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6582-LayoutMorph-Cleanup-HilaireFernandes-2024Aug12-09h28m-hlsf.001.cs.st----!

'From Cuis7.1 [latest update: #6582] on 12 August 2024 at 9:49:09 am'!
!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'KenD 8/11/2024 07:22:55' overrides: 16906908!
           addMorphBack: aMorph
	"Add a submorph, at the top or left, with a default LayoutSpec if none was provided."

	aMorph isPlacedMorph ifFalse: [ self error: 'Only PlacedMorphs can be used in Layouts' ].
	aMorph layoutSpec.
	super addMorphBack: aMorph.! !
!LayoutMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/12/2024 09:46:40' prior: 16890452!
   addMorph: aMorph layoutSpec: aLayoutSpec
	"Add a submorph, at the bottom or right, with aLayoutSpec"

	aMorph isPlacedMorph ifFalse: [ self error: 'Only PlacedMorphs can be used in Layouts' ].
	aMorph layoutSpec: aLayoutSpec.
	self addMorphFront: aMorph.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6583-LayourMorph-addMorphBack-KenDickey-2024Aug12-09h48m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6583] on 13 August 2024 at 2:29:26 pm'!
!Browser methodsFor: 'class list' stamp: 'jmv 8/13/2024 14:28:33' prior: 50333853!
        classListIndex: anInteger 
	"Set anInteger to be the index of the current class selection."

	| className recent canSelectClass classList prevSelectedClassName prevSelectedMessage |
	classList := self classList.
	canSelectClass := classList isInBounds: anInteger.
	prevSelectedClassName := selectedClassName.
	selectedClassName := canSelectClass ifTrue: [
		| newClassName |
		newClassName := classList at: anInteger ifAbsent: [ nil ].
		newClassName := newClassName ifNotNil: [newClassName withoutLeadingBlanks asSymbol].
		newClassName ].
	self setClassOrganizer.
	prevSelectedMessage := selectedMessage.
	selectedMessage := nil.
	
	self classCommentIndicated ifFalse: [
		self editSelection: (canSelectClass
			ifTrue: [#editClass]
			ifFalse: [ metaClassIndicated | selectedSystemCategory isNil
				ifTrue: [#none]
				ifFalse: [#newClass]])].

	self selectedClass ifNotNil: [
		recent := self class recentClasses.
		className := self selectedClass name.
		(recent includes: className) ifTrue: [recent remove: className].
		recent addFirst: className.
		recent size > 16 ifTrue: [recent removeLast]].

	"Clear selectedMessageCategory if there is no match in the new list of categories"
	(self messageCategoryList indexOf: selectedMessageCategory) = 0 ifTrue: [
		selectedMessageCategory := nil].
		
	"We have to refresh the class list if somebody wants to select a class that does not exist anymore"
	anInteger > classList size ifTrue: [ self changed: #classList ].
	self changed: #classSelectionChanged.
	self changed: #classCommentText.
	self changed: #classListIndex.	"update my selection"
	self changed: #messageCategoryList.
	self changed: #messageList.
	self changed: #relabel.
	self acceptedContentsChanged.
	prevSelectedClassName = selectedClassName ifFalse: [
		"If clicked on already selected class, deselect selector, so class definition is shown"
		self setSelector: prevSelectedMessage ].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6584-ClickingOnSelectedClassShowsClassDefinition-JuanVuletich-2024Aug13-14h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6584] on 13 August 2024 at 3:58:11 pm'!
!ChangeList class methodsFor: 'public access' stamp: 'jmv 8/13/2024 15:26:31'!
   browseCondensedChanges: aFileEntry
	"Opens a changeList on a fileStream
	Condense older versions. Remove doits."
	| changeList |
	changeList := self new.
	aFileEntry readStreamDo: [ :stream |
		changeList scanFile: stream from: 0 to: stream size ].
	changeList
		removeOlderMethodVersions;
		removeDoIts.
	ChangeListWindow open: changeList label: 'Condensed changes from: ', aFileEntry name.! !
!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 8/13/2024 15:22:12'!
         serviceCondensedChanges
	"Answer a service for opening a changelist browser on a file"

	^ (SimpleServiceEntry 
		provider: self 
		label: 'open condensed changes'
		selector: #browseCondensedChanges:
		description: 'open a changes tool on this file, including only the last version of methods and avoiding doits'
		buttonLabel: 'real changes'
		icon: #changesIcon)
			sortOrder: 20! !
!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 8/13/2024 15:18:54' prior: 16805154!
  fileReaderServicesForFileEntry: filename suffix: suffix
	"FileList buttons that open a ChangeListWindow on contents"

	| coda sampleCoda |
	(#('st' 'cs' 'cs.st') includes: suffix)
		ifTrue: [ ^ {self serviceContents}  ].

	(suffix = 'pck') | (suffix = 'pck.st')
		ifTrue: [ ^ {self servicePackageContents} ].


	suffix = 'changes'
		ifTrue: [
			sampleCoda := '.user.159.changes'.
			filename name size > sampleCoda size ifTrue: [
				coda := filename name last: sampleCoda size.
				((coda beginsWith: '.user.') and: [ coda endsWith: '.changes' ]) ifTrue: [
					^ { self serviceContents. self serviceCondensedChanges} ]].
			^ {self serviceRecentChanges} ].

	^#()! !
!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 8/13/2024 15:21:32' prior: 16805168!
      serviceContents
	"Answer a service for opening a changelist browser on a file"

	^ (SimpleServiceEntry 
		provider: self 
		label: 'open code changes'
		selector: #browseContents:
		description: 'open a code file contents tool on this file'
		buttonLabel: 'all changes'
		icon: #changesIcon)
			sortOrder: 20! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6585-SpecificFileListServicesForUserChanges-JuanVuletich-2024Aug13-15h57m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6584] on 13 August 2024 at 3:59:57 pm'!

IdentityDictionary subclass: #SystemDictionary
	instanceVariableNames: 'cachedClassNames cachedNonClassNames startUpScriptArguments startUpArguments '
	classVariableNames: 'ChangesInitialFileSize EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp PreviousUserChangesName '
	poolDictionaries: ''
	category: 'System-Support'!

!classDefinition: #SystemDictionary category: #'System-Support' stamp: 'Install-6586-RecordPreviousUserChangesFileName-JuanVuletich-2024Aug13-15h58m-jmv.001.cs.st 8/13/2024 18:37:06'!
IdentityDictionary subclass: #SystemDictionary
	instanceVariableNames: 'cachedClassNames cachedNonClassNames startUpScriptArguments startUpArguments'
	classVariableNames: 'ChangesInitialFileSize EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore PreviousUserChangesName ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp'
	poolDictionaries: ''
	category: 'System-Support'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 13:06:11' prior: 16965893!
                          processShutDownList: quitting
	"Send #shutDown to each class that needs to wrap up before a snapshot."

	self send: #shutDown: toClassesNamedIn: ShutDownList with: quitting.
	EndianCache := nil.
	PreviousUserChangesName := nil.! !
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 8/13/2024 13:03:20' prior: 50363028!
                    assureStartupStampLogged
	"If there is a startup stamp not yet actually logged to disk, do it now."
	| changesFile directory oldUserChanges |
	(SourceFiles notNil and: [(changesFile := SourceFiles at: 2) notNil]) ifTrue: [
		changesFile isReadOnly ifFalse: [
			changesFile setToEnd; newLine; newLine.
			changesFile nextChunkPut: StartupStamp; newLine.
			self forceChangesToDisk ]].
	(Preferences at: #autoNumberUserChanges) ifTrue: [
		oldUserChanges := DirectoryEntry userChangesDirectory // self userChangesFileName.
		oldUserChanges exists ifTrue: [
			directory := oldUserChanges parent.
			PreviousUserChangesName := directory nextNameFor: oldUserChanges nameWithoutExtension extension: 'changes'.
			oldUserChanges rename: PreviousUserChangesName ]].
	DirectoryEntry userChangesDirectory // self userChangesFileName appendStreamDo: [ :stream |
		stream newLine; newLine.
		stream nextChunkPut: StartupStamp; newLine.
		stream flush ].! !

IdentityDictionary subclass: #SystemDictionary
	instanceVariableNames: 'cachedClassNames cachedNonClassNames startUpScriptArguments startUpArguments'
	classVariableNames: 'ChangesInitialFileSize EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore PreviousUserChangesName ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp'
	poolDictionaries: ''
	category: 'System-Support'!

!classDefinition: #SystemDictionary category: #'System-Support' stamp: 'Install-6586-RecordPreviousUserChangesFileName-JuanVuletich-2024Aug13-15h58m-jmv.001.cs.st 8/13/2024 18:37:06'!
IdentityDictionary subclass: #SystemDictionary
	instanceVariableNames: 'cachedClassNames cachedNonClassNames startUpScriptArguments startUpArguments'
	classVariableNames: 'ChangesInitialFileSize EndianCache LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore PreviousUserChangesName ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp'
	poolDictionaries: ''
	category: 'System-Support'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6586-RecordPreviousUserChangesFileName-JuanVuletich-2024Aug13-15h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6584] on 13 August 2024 at 4:05:18 pm'!
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 8/13/2024 16:04:10'!
checkIfAlreadyRunningOrStoppedNoExit
	"
	If the Changes file is not clean during startup, it may mean either:
	- last run crashed or was killed (code recovery may be in order)
	- Cuis is already running. Running it again may mean inconsistent updates to .changes file.
	Smalltalk checkIfAlreadyRunningOrStoppedNoExit
	"
	| imageSaveChunk postImageSaveChunk |
	imageSaveChunk := nil.
	postImageSaveChunk := nil.
	self withChangesFileDo: [ :changesFile |
		changesFile position: self lastQuitLogPosition.
		changesFile atEnd ifFalse: [ imageSaveChunk := changesFile nextChunk ].
		changesFile atEnd ifFalse: [ postImageSaveChunk := changesFile nextChunk ]].

	"If we can't find the image save chunk at the image save position, something is wrong."
	(imageSaveChunk isNil or: [ (self isQuitRecord: imageSaveChunk) not])
		ifTrue: [
			UISupervisor whenUIinSafeState: [
				self notify:
					self currentChangesName asFullFileEntry pathName, String newLineString,
					'Image save chunk not found. Possible image / changes file corruption. Proceed with caution.' ].
				^self ].

	"If there is already a post-imageSave chunk, it may mean Cuis is running in another OS process,
	or in a previous run, it was killed or crashed."
	postImageSaveChunk notNil ifTrue: [
		(Preferences at: #checkLostChangesOnStartUp)
			ifTrue: [
				"Let the user chose automatic or manual recovery from .changes file.
				Used mainly by CuisUniversity."
				UISupervisor whenUIinSafeState: [self restoreLostChanges ]]
			ifFalse: [
				"Notify user about the situation, open changes recovery tool on last User Changes file."
				(Preferences at: #warnAndOfferLastUserChanges) ifTrue: [
					UISupervisor whenUIinSafeState: [self warnAndOfferLastUserChanges]]]].! !
!SystemDictionary methodsFor: 'startup - recover user changes' stamp: 'jmv 8/13/2024 15:45:19'!
                    warnAndOfferLastUserChanges
"
Smalltalk warnAndOfferLastUserChanges
"
 	| userChanges |
	PreviousUserChangesName ifNil: [
		self notify: 
			self currentChangesName asFullFileEntry pathName, ' is not clean.', String newLineString, String newLineString,
			'- Cuis may already be running (and running it twice may lead to .changes file corruption).', String newLineString,
			'		Suggestion: Exit this session and resume work on the other, already running, one.', String newLineString, String newLineString,
			'- Cuis may have crashed in a previous run.', String newLineString,
			'		However the appropriate User Changes file could not be automatically determined.', String newLineString, String newLineString,
			'Proceed with caution.' .
		^ self ].
		
	userChanges := DirectoryEntry userChangesDirectory // PreviousUserChangesName.
	self notify: 
		self currentChangesName asFullFileEntry pathName, ' is not clean.', String newLineString, String newLineString,
		'- Cuis may already be running (and running it twice may lead to .changes file corruption).', String newLineString,
		'		Suggestion: Exit this session and resume work on the other, already running, one.', String newLineString, String newLineString,
		'- Cuis may have crashed in a previous run.', String newLineString,
		'		Proceed to review and recover code from last saved User Changes file:', String newLineString,
		'		', userChanges pathName, String newLineString, String newLineString,
		'Proceed with caution.' .
	ChangeList browseCondensedChanges: userChanges.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 09:17:29' prior: 50364349!
                            snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit ].
	self assureStartupStampLogged.
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !
!SystemDictionary methodsFor: 'startup - restore lost changes' stamp: 'jmv 8/13/2024 12:52:07' prior: 16969452!
                   lostChangesDetectedCaption
	
	^
'Last changes may have been lost
(maybe the VM crashed or you had to kill it)
(or maybe Cuis is already running)
What do you want to do?'! !
!PreferenceSet class methodsFor: 'sys data' stamp: 'jmv 8/13/2024 15:46:40' prior: 16928447!
                      prefSystem
	^ #( #(allowNonLocalReturnsInExceptionHandlers true )
		#(askConfirmationOnQuit true )
		#(askToInstallComplexPackage true )
		#(automaticPlatformSettings true )
		#(autoNumberUserChanges true )
		#(caseSensitiveFinds false )
		#(changeSetVersionNumbers true )
		#(checkForSlips true )
		#(checkLostChangesOnStartUp false )
		#(warnAndOfferLastUserChanges true )
		#(cmdDotEnabled true )
		#(cmdDotInterruptTakesStatistics false )
		#(dismissAllOnOptionClose false )
		#(initialFileListDirectories #cuis #(cuis roots) )
		#(machine default #(default slow smalltalk80) machine: )
		#(pointer mouse #(touch mouse) pointer:)
		#(selectionsMayShrink true )
		#(serverMode false )
		#(systemWindowEmbedOK false )
		#(transcriptLogVerbose true )
		#(useUserPrefsFile true )
		#(userChangesFileNameExtension '.user.changes' )
		#(warnAboutNonLocalReturnsInExceptionHandlers false )
		#(warnIfNoChangesFile true )
		#(warnIfNoSourcesFile true )
		#(saveReleaseOptionsInWorldMenu false)
	)! !

SystemDictionary removeSelector: #hasToRestoreChanges!

!methodRemoval: SystemDictionary #hasToRestoreChanges stamp: 'Install-6587-WarnOfPossiblyAlreadyRunningOrCrashedCuis-recoverUserChanges-JuanVuletich-2024Aug13-15h59m-jmv.001.cs.st 8/13/2024 18:37:06'!
hasToRestoreChanges

	^(Preferences at: #checkLostChangesOnStartUp) and: [ 
		self withChangesFileDo: [ :changesFile | self hasToRestoreChangesFrom: changesFile ]].
	!

SystemDictionary removeSelector: #restoreLostChangesIfNecessary!

!methodRemoval: SystemDictionary #restoreLostChangesIfNecessary stamp: 'Install-6587-WarnOfPossiblyAlreadyRunningOrCrashedCuis-recoverUserChanges-JuanVuletich-2024Aug13-15h59m-jmv.001.cs.st 8/13/2024 18:37:06'!
restoreLostChangesIfNecessary

	"
	Smalltalk restoreLostChangesIfNecessary
	"
	
	self hasToRestoreChanges ifTrue: [ UISupervisor whenUIinSafeState: [self restoreLostChanges ]].
!

SystemDictionary removeSelector: #hasToRestoreChangesFrom:!

!methodRemoval: SystemDictionary #hasToRestoreChangesFrom: stamp: 'Install-6587-WarnOfPossiblyAlreadyRunningOrCrashedCuis-recoverUserChanges-JuanVuletich-2024Aug13-15h59m-jmv.001.cs.st 8/13/2024 18:37:06'!
hasToRestoreChangesFrom: changesFile

	| chunk  |
	
	changesFile position: self lastQuitLogPosition.
	[ changesFile atEnd ] whileFalse: [ chunk := changesFile nextChunk ].
	
	^chunk notNil and: [(self isSnapshotQuitOrQuitNoSaveRecord: chunk) not]
!

SystemDictionary removeSelector: #isSnapshotQuitOrQuitNoSaveRecord:!

!methodRemoval: SystemDictionary #isSnapshotQuitOrQuitNoSaveRecord: stamp: 'Install-6587-WarnOfPossiblyAlreadyRunningOrCrashedCuis-recoverUserChanges-JuanVuletich-2024Aug13-15h59m-jmv.001.cs.st 8/13/2024 18:37:06'!
isSnapshotQuitOrQuitNoSaveRecord: chunk

	^(self isSnapshotRecord: chunk) 
		or: [ (self isQuitRecord: chunk) 
		or: [ self isQuitNoSaveRecord: chunk ]]!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Preferences
	name: #warnAndOfferLastUserChanges
	description: 'Warn user of recent crash or possibly already running Cuis. Open code recovery on User Changes.'
	category: #system type: Boolean value: true.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6587-WarnOfPossiblyAlreadyRunningOrCrashedCuis-recoverUserChanges-JuanVuletich-2024Aug13-15h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6587] on 13 August 2024 at 4:37:42 pm'!
!PositionableStream methodsFor: 'fileIn/Out' stamp: 'Install-toton 8/13/2024 16:34:26' prior: 16927235!
                     compileNextChunkWhenStartsWithExclamationMark

	| chunk |
	
	chunk := self nextChunk.
	
	"These are the ones that should do nothing, 
	because next line is a doit that does the stuff
	(or because it is handled elsewhere)"
	
	(chunk isEmpty or: [(chunk beginsWith: 'description:  ') 
		or: [ ChangeList knownFileInPreambles anySatisfy: [ :aPreamble | chunk beginsWith: aPreamble ]]])
			ifFalse: [
				self evaluate: [ (Compiler evaluate: chunk logged: false) scanFrom: self ] printingErrorWith: chunk ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6588-CodeInstall-TolerateEmptyChunks-JuanVuletich-2024Aug13-16h36m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6588] on 13 August 2024 at 5:53:46 pm'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 17:51:38' prior: 50365119!
                      snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit.
			self assureStartupStampLogged ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				self processCommandLineArguments.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Smalltalk setStartupStamp.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6589-assureStartupStampLogged-onlyIfRealStartup-JuanVuletich-2024Aug13-17h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6589] on 13 August 2024 at 6:31:47 pm'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 18:31:06' prior: 16965960!
                    saveAndQuit
	"Save image and quit. No questions asked.
	Smalltalk saveAndQuit.
	"
	ChangeSet zapAllChangeSets.
	self garbageCollect.
	^ self
		snapshot: true
		andQuit: true
		embedded: false
		clearAllClassState: false.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 18:31:11' prior: 16965969!
                             saveAndQuitAs: newName clearAllClassState: clearAllStateFlag
	"Save the image  under a new name. Don't quit.
	See senders."

	| newChangesName |
	self currentChangesName ifNotNil: [ :oldChangesName |
		self closeSourceFiles. "so copying the changes file will always work"
		newChangesName := self fullNameForChangesNamed: newName.
		FileIOAccessor default copy: oldChangesName asFullFileEntry to: newChangesName asFullFileEntry.
		ChangesInitialFileSize ifNotNil: [
			oldChangesName asFullFileEntry appendStreamDo: [ :strm | strm truncate: ChangesInitialFileSize ]]].

	ChangeSet zapAllChangeSets.
	self garbageCollect.
	self 
		changeImageNameTo: (self fullNameForImageNamed: newName);
		closeSourceFiles; openSourceFiles;  "so SNAPSHOT appears in new changes file"
		snapshot: true andQuit: true embedded: false clearAllClassState: clearAllStateFlag.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 18:31:15' prior: 16965998!
    saveAndStayAs: newName clearAllClassState: clearAllStateFlag
	"Save the image  under a new name. Don't quit.
	See senders."

	| newChangesName |
	self currentChangesName ifNotNil: [ :oldChangesName |
		self closeSourceFiles. "so copying the changes file will always work"
		newChangesName := self fullNameForChangesNamed: newName.
		FileIOAccessor default copy: oldChangesName asFullFileEntry to: newChangesName asFullFileEntry.
		ChangesInitialFileSize ifNotNil: [
			oldChangesName asFullFileEntry appendStreamDo: [ :strm | strm truncate: ChangesInitialFileSize ]]].

	ChangeSet zapAllChangeSets.
	self garbageCollect.
	self 
		changeImageNameTo: (self fullNameForImageNamed: newName);
		closeSourceFiles; openSourceFiles;  "so SNAPSHOT appears in new changes file"
		snapshot: true andQuit: false embedded: false clearAllClassState: clearAllStateFlag.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 18:31:18' prior: 50353767!
   saveAs: newName clearAllClassState: clearAllStateFlag
	"Save the image under a new name. Don't quit.
	Note: newName must be different from current name.
	See senders."

	| newChangesName |
	self currentChangesName ifNotNil: [ :oldChangesName |
		self closeSourceFiles. "so copying the changes file will always work"
		newChangesName := self fullNameForChangesNamed: newName.
		FileIOAccessor default copy: oldChangesName asFullFileEntry to: newChangesName asFullFileEntry.
		ChangesInitialFileSize ifNotNil: [
			oldChangesName asFullFileEntry appendStreamDo: [ :strm | strm truncate: ChangesInitialFileSize ]]].

	ChangeSet zapAllChangeSets.
	self garbageCollect.
	self 
		changeImageNameTo: (self fullNameForImageNamed: newName);
		closeSourceFiles; openSourceFiles;  "so SNAPSHOT appears in new changes file"
		snapshot: true andQuit: false embedded: false clearAllClassState: clearAllStateFlag.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/13/2024 18:31:22' prior: 16966074!
                       saveImage
	"Save image. Don't quit. No questions asked.
	Smalltalk saveImage.
	"
	ChangeSet zapAllChangeSets.
	self garbageCollect.
	^ self
		snapshot: true
		andQuit: false
		embedded: false
		clearAllClassState: false.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6590-addAFewGarbageCollects-JuanVuletich-2024Aug13-18h31m-jmv.001.cs.st----!

----QUIT----(13 August 2024 18:37:09) Cuis7.1-6590-32.image priorSource: 835530!

----STARTUP---- (16 August 2024 09:46:40) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6590-32.image!


'From Cuis7.1 [latest update: #6590] on 15 August 2024 at 11:24:04 am'!
!Morph methodsFor: 'events' stamp: 'jmv 8/15/2024 11:23:41' prior: 50362409!
        keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	"Pick the last shortcut definition. If they are repeated, this is the last override."
	menuNshortcutsSpecs keys sorted reverseDo: [ :key | | itemSpec |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetOrGetter |
						targetOrGetter isSymbol
							ifTrue: [ 	self perform: targetOrGetter ]
							ifFalse: [ targetOrGetter ]]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						itemSpec size >= 8
							ifTrue: [ target perform: selector with: itemSpec eighth ]
							ifFalse: [ target perform: selector ].
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6591-useLastKeyboardShortcutOverride-JuanVuletich-2024Aug15-11h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6591] on 15 August 2024 at 4:58:19 pm'!
!Behavior methodsFor: 'accessing class hierarchy' stamp: 'jmv 8/15/2024 16:46:02'!
                            withAllSuperclassesDownFrom: aSuperclass
	
	| superclasses |
	^ self = aSuperclass
		ifTrue: [ OrderedCollection with: self]
		ifFalse: [
			superclasses := superclass withAllSuperclassesDownFrom: aSuperclass.
			superclasses add: self.
			superclasses ].! !
!UndefinedObject methodsFor: 'class hierarchy' stamp: 'jmv 8/15/2024 16:44:50'!
             withAllSuperclassesDownFrom: aSuperclass

	self error: (self superclassNotValidErrorDescriptionFor: aSuperclass)! !
!InnerTextMorph methodsFor: 'menu' stamp: 'jmv 8/15/2024 16:53:42' prior: 50362363 overrides: 50348293!
    menuNshortcutsSpecsDo: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."

	"First take default editor menu and shortcut specs"
	self editor defaultMenuSpec do: aBlock.

	self window ifNotNil: [ :myWindow |

		"Then include additions, overrides and deletions registered for #Editor, #TextEditor, #SmalltalkEditor, etc.
		Hierarchy order allows more specific classes to override choices made by superclasses."
		(self editor class withAllSuperclassesDownFrom: Editor) do: [ :editorClass |
			(myWindow class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
				(windowClass registeredMenuAndShortcutsSpecProviders: editorClass name) ifNotNil: [ :providers |
					providers do: [ :eachMessageSend |
						(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		]].
		
		(myWindow class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
			"Also allow registering menu+shortcut entries for specific TextModels or TextProviders"
			(windowClass registeredMenuAndShortcutsSpecProviders: self textProviderOrModel class name) ifNotNil: [ :providers |
				providers do: [ :eachMessageSend |
					(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		]].! !
!SystemWindow methodsFor: 'submorphs-menus' stamp: 'jmv 8/15/2024 16:54:33' prior: 50348310 overrides: 50348301!
                menuNshortcutsSpecsFor: aWidget do: aBlock
	"Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	aWidget menuNshortcutsKey ifNotNil: [ :widgetKey |
		(self perform: widgetKey) do: aBlock.
		(self class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
			(windowClass registeredMenuAndShortcutsSpecProviders: widgetKey) ifNotNil: [ :providers |
				providers do: [ :eachMessageSend |
					(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]]]].! !

Editor removeSelector: #editorClassesInHierarchyOrderDo:!

!methodRemoval: Editor #editorClassesInHierarchyOrderDo: stamp: 'Install-6592-menusNshortcuts-allowRegistrationAtAnyWindowClass-JuanVuletich-2024Aug15-16h56m-jmv.001.cs.st 8/16/2024 09:46:40'!
editorClassesInHierarchyOrderDo: aBlock
	"maybe name differently"
	(self class withAllSuperclassesUpTo: Editor) reverseDo: aBlock!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6592-menusNshortcuts-allowRegistrationAtAnyWindowClass-JuanVuletich-2024Aug15-16h56m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6591] on 15 August 2024 at 5:53:53 pm'!
!Debugger methodsFor: 'method creation' stamp: 'jmv 8/15/2024 17:10:25' prior: 16844061!
                  overrideMethodOnSubclass

	| chosenClass lastPossibleClass message methodCategory methodClass receiverClass |

	methodCategory := self interruptedContext method category.
	methodClass := self interruptedContext method methodClass.
	receiverClass := self interruptedContext receiver class.
	lastPossibleClass := (receiverClass withAllSuperclassesUpTo: methodClass) penultimate.
	message := self interruptedContext messageForYourself.

	chosenClass := self
		askForSuperclassOf: receiverClass
		upTo: lastPossibleClass
		toImplement: message selector
		withCaption: 'Override #', message selector, ' in which class?'
		ifCancel: [^self].
	
	^ self implement: message inCategory: methodCategory fromClass: chosenClass context: self interruptedContext! !

Behavior removeSelector: #withAllSuperclassesPreviousTo:!

!methodRemoval: Behavior #withAllSuperclassesPreviousTo: stamp: 'Install-6593-Behavior-cleanup-JuanVuletich-2024Aug15-16h58m-jmv.001.cs.st 8/16/2024 09:46:40'!
withAllSuperclassesPreviousTo: aSuperclass

	| classes |
	
	classes := self withAllSuperclassesUpTo: aSuperclass.
	
	^ classes allButLast!

Behavior removeSelector: #allSuperclassesPreviousTo:!

!methodRemoval: Behavior #allSuperclassesPreviousTo: stamp: 'Install-6593-Behavior-cleanup-JuanVuletich-2024Aug15-16h58m-jmv.001.cs.st 8/16/2024 09:46:40'!
allSuperclassesPreviousTo: aSuperclass
	
	| superclasses |
	
	superclasses := self allSuperclassesUpTo: aSuperclass.
	
	^ superclasses allButLast!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6593-Behavior-cleanup-JuanVuletich-2024Aug15-16h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6593] on 16 August 2024 at 9:25:36 am'!
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 8/16/2024 09:21:38'!
                             processCommandLineArguments: initialOptions
	"
	Smalltalk processCommandLineArguments: true
	Smalltalk processCommandLineArguments: false

	Note: By default, any exceptions thrown during the evaluation of arguments are simply ignored.
	To ease debugging, use the -e argument: Do Not Ignore Exceptions. 
	For example:
		squeak Cuis.image -e -s myScript.st
	If ``myScript.st`` contains an error, a Debugger will pop up.
	
	See comment at
		processInitialCommandLineOption:optionArgument:
		processFinalCommandLineOption:optionArgument:raiseExceptions:
	See displayCommandLineUsageOn:
	"
	| optionString optionArgument optionIndex nextOptionIndex optionLastParameterIndex raiseExceptions dashFinder |

	"Any command line argument that starts with $- is an Option.
	NonOption arguments are parameters for the preceding Option."
	raiseExceptions := false.
	startUpScriptArguments := #().
	"Empty Strings are valid command line arguments, generated by two double quotes. Handle them."
	dashFinder := [ :any | any notEmpty and: [ any first = $- ] ].
	optionIndex := startUpArguments findFirst: dashFinder startingAt: 1.
	[ optionIndex > 0 ] whileTrue: [
		"Find parameters for this option"
		nextOptionIndex := startUpArguments findFirst: dashFinder startingAt: optionIndex+1.
		optionLastParameterIndex := nextOptionIndex = 0
			ifTrue: [startUpArguments size]
			ifFalse: [nextOptionIndex-1].
		optionString := startUpArguments at: optionIndex.
		optionString size > 1 ifTrue: [
			optionString = '--' 						"Including    --    as an option means 'ignore everything after here'"
				ifTrue: [^self].
			optionString = '-e'
				ifTrue: [ raiseExceptions := true ]
				ifFalse: [
					optionArgument := optionLastParameterIndex > optionIndex ifTrue: [startUpArguments at: optionIndex+1].
					startUpScriptArguments := startUpArguments copyFrom: optionIndex+2 to: optionLastParameterIndex.
					initialOptions
						ifTrue: [ self processInitialCommandLineOption: optionString optionArgument: optionArgument ]
						ifFalse: [ self processFinalCommandLineOption: optionString optionArgument: optionArgument raiseExceptions: raiseExceptions ].
					startUpScriptArguments := #() ]
			].
		optionIndex := nextOptionIndex ].! !
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 8/15/2024 18:08:29'!
             processFinalCommandLineOption: optionString optionArgument: optionArgument raiseExceptions: aBoolean
	"
	A possible example (duplicated single quotes: '' should be double quotes, but not allowed in a Smalltalk comment):
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -e -d''0 zope''
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -r YAXO -rJSON -d ''Smalltalk startUpScriptArguments print'' xx YY 3492 -d'' 'here comes another' print'' -d ''{'The answer is: '. Smalltalk startUpScriptArguments first asNumber + Smalltalk startUpScriptArguments second asNumber} print'' 3 4 -- -d'' 'not this' print' ''

Squeak.exe Cuis4.2-2211x.image -r RequiredFeature1 -r RequiredFeature2 -d ''Transcript show: 'popo1'; newLine'' -d ''Transcript show: 'popo2'; newLine'' -s smalltalkScript.st param1ToScript param2ToSCript ''parametro 3 to script ->>>--// 3''
	"
	"You can use 'Smalltalk startUpScriptArguments' inside the startUp script:"


	| exceptionToIgnoreOrNil file |
	exceptionToIgnoreOrNil := aBoolean ifFalse: [UnhandledError] ifTrue: [nil].
	optionString caseOf: {

		[ '-u' ] -> [ ChangeSet installNewUpdates ].

		[ '-r' ] -> [		"as in 		-rRequiredFeature2        or         -r RequiredFeature2"
			{ 'Feature require: '. optionArgument } print.
			[ Feature require: optionArgument ] on: FeatureRequirementUnsatisfied do: [ :ex |
				StdIOWriteStream stdout nextPutAll: ex messageText; newLine; flush.
				ex messageText print.
				self quit ] ].

		[ '-d' ] -> [		"as in 		-d ''Transcript show: 'popo1'; newLine'' -d''Transcript show: 'popo2'; newLine''        (duplicated singleQuotes should read doubleQuote)"
			{ 'Compiler evaluate: '. optionArgument } print.
			[ Compiler evaluate: optionArgument ] on: exceptionToIgnoreOrNil do: [ :ex | ex return] ].

		['-l' ] -> ["file in the file"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'File in: '. optionArgument. ' -> '. file} print.
			[file readStreamDo: [ :stream | stream fileIn ]] on: exceptionToIgnoreOrNil do: [ :ex | ex return]].

		[ '-s' ] -> [		"as in 		-s smalltalkScript.st paramAlScript1 paramAlSCript2 ''parameter to script script ->>>--// 3'' 			(duplicated singleQuotes should read doubleQuote)"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'Compiler evaluate contents of file named: '. optionArgument. ' -> '. file. ' arguments: '. self startUpScriptArguments } print.
			file exists ifTrue: [
				file readStreamDo: [ :stream |
					[ Compiler evaluate: stream contentsOfEntireFile ] on: exceptionToIgnoreOrNil do: [ :ex | ex return]]]].
	}
	otherwise: [].! !
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 8/15/2024 18:09:51'!
                   processInitialCommandLineOption: optionString optionArgument: optionArgument
	"
	A possible example:
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -h
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -v
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -q
	"

	optionString caseOf: {
		[ '-h' ] -> [
			self displayCommandLineUsageOn: StdIOWriteStream stdout.
			self quit ].

		[ '-v' ] -> [ 
			self displaySystemInformationStringOn: StdIOWriteStream stdout.
			self quit ].

		[ '-q' ] -> [ self quit ].

		[ '-ud' ] -> [
			DirectoryEntry setUserBaseDirectory: optionArgument asDirectoryEntry ].

		[ '-udIsBase' ] -> [ DirectoryEntry setUserBaseDirectoryAsCuisBase ].
	}
	otherwise: [].! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/16/2024 09:24:25' prior: 50365449!
   snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit.
			"Some command line arguments need to be processed before starting the UI"
			self processCommandLineArguments: true.
			self assureStartupStampLogged ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				"Some command line arguments need to be processed after the UI is up, and in the UI process"
				self processCommandLineArguments: false.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 8/16/2024 09:25:13' prior: 50364936!
                            assureStartupStampLogged
	"If there is a startup stamp not yet actually logged to disk, do it now."
	"Note: This renames the existing user changes file, and creates a new one."
	| changesFile directory oldUserChanges |
	(SourceFiles notNil and: [(changesFile := SourceFiles at: 2) notNil]) ifTrue: [
		changesFile isReadOnly ifFalse: [
			changesFile setToEnd; newLine; newLine.
			changesFile nextChunkPut: StartupStamp; newLine.
			self forceChangesToDisk ]].
	(Preferences at: #autoNumberUserChanges) ifTrue: [
		oldUserChanges := DirectoryEntry userChangesDirectory // self userChangesFileName.
		oldUserChanges exists ifTrue: [
			directory := oldUserChanges parent.
			PreviousUserChangesName := directory nextNameFor: oldUserChanges nameWithoutExtension extension: 'changes'.
			oldUserChanges rename: PreviousUserChangesName ]].
	DirectoryEntry userChangesDirectory // self userChangesFileName appendStreamDo: [ :stream |
		stream newLine; newLine.
		stream nextChunkPut: StartupStamp; newLine.
		stream flush ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6594-FixUserChangesRename-when-udIsBase-JuanVuletich-2024Aug16-09h17m-jmv.001.cs.st----!

----QUIT----(16 August 2024 09:46:44) Cuis7.1-6594-32.image priorSource: 1091546!

----STARTUP---- (20 August 2024 10:12:11) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6594-32.image!


'From Cuis7.1 [latest update: #6594] on 16 August 2024 at 11:20:57 am'!
!ClassDescription methodsFor: 'fileIn/Out' stamp: 'jmv 8/16/2024 11:20:05' prior: 16819648!
            printMethodChunk: selector withPreamble: doPreamble on: outStream moveSource: moveSource toFile: fileIndex
	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."
	| preamble compiledMethod oldPos newPos sourceFile endPos methodCode codeStyler |
	doPreamble 
		ifTrue: [preamble := self name , ' methodsFor: ' ,
					(self organization categoryOfElement: selector) asPlainString printString]
		ifFalse: [preamble := ''].
	compiledMethod := self methodDict at: selector ifAbsent: [
		outStream nextPutAll: selector; newLine.
		outStream tab; nextPutAll: '** ERROR  -  THIS METHOD IS MISSING ** '; newLine; newLine.
		outStream nextPutAll: '  '.
		^ outStream].

	((compiledMethod fileIndex = 0
		or: [(SourceFiles at: compiledMethod fileIndex) == nil])
		or: [(oldPos := compiledMethod filePosition) = 0])
	ifTrue: [
		"The source code is not accessible.  We must decompile..."
		preamble size > 0 ifTrue: [ outStream newLine; nextPut: $!!; nextChunkPut: preamble; newLine].
		outStream nextChunkPut: compiledMethod decompileString]
	ifFalse: [
		sourceFile := SourceFiles at: compiledMethod fileIndex.
		preamble size > 0
			ifTrue: [   "Copy the preamble"
				outStream copyPreamble: preamble oldPreamble: compiledMethod getPreamble ].
		sourceFile position: oldPos.
		"Copy the method chunk"
		fileIndex = 0 ifFalse: [
			outStream padTo: SourceFiles pointerScaleForWriting put: $  ].
		newPos := outStream position.
		"Copy method chunk"
		methodCode := sourceFile nextChunk.
		(methodCode isEmpty or: [ methodCode isSeparators ]) ifTrue: [
			"This is very unlikely, but possible source file is corrupted."
			methodCode := compiledMethod decompileString ].

		"Convert method code to use ANSI assignments"
		(Preferences at: #fileOutANSIassignment) ifTrue: [
			codeStyler := SHTextStylerST80 new.
			codeStyler classOrMetaClass: compiledMethod methodClass.
			codeStyler instVarNamed: 'formattedText' put: methodCode asText.
			codeStyler getReady.
			codeStyler parseText.
			codeStyler replaceStringForRangesWithType: #assignment with: ':=' offset: 0.
			methodCode := codeStyler convertedAndStyledText string ].

		outStream nextChunkPut: methodCode.
		moveSource ifTrue: [    "Set the new method source pointer"
			endPos := outStream position.
			compiledMethod checkOKToAdd: endPos - newPos at: newPos in: compiledMethod fileIndex.
			compiledMethod setSourcePosition: newPos inFile: fileIndex]].
	preamble notEmpty ifTrue: [ outStream nextChunkPut: ' ' ].
	^ outStream newLine! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6595-Robust-FileOutAndPackageSave-JuanVuletich-2024Aug16-11h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6595] on 16 August 2024 at 3:21:26 pm'!
!Morph methodsFor: 'events' stamp: 'jmv 8/16/2024 15:16:03' prior: 50365771!
      keyboardShortcut: aKeyboardEvent
	"Handle a keyboard shortcut.
	See coment at Morph >> #getMenu
	"
	| menuNshortcutsSpecs shortcutCharacter target argument |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^false ].
	"Pick the last shortcut definition. If they are repeated, this is the last override."
	menuNshortcutsSpecs keys sorted reverseDo: [ :key | | itemSpec |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size >= 5 ifTrue: [
			shortcutCharacter := itemSpec third.
			shortcutCharacter = aKeyboardEvent keyCharacter ifTrue: [
				target := itemSpec fourth
					ifNotNil: [ :targetOrGetter |
						targetOrGetter isSymbol
							ifTrue: [ 	self perform: targetOrGetter ]
							ifFalse: [ targetOrGetter ]]
					ifNil: [ self ].
				itemSpec fifth
					ifNotNil: [ :selector |
						selector numArgs = 0
							ifTrue: [target perform: selector]
							ifFalse: [
								argument := itemSpec size >= 8 ifTrue: [ itemSpec eighth ] ifFalse: [ self ].
								target perform: selector with: argument ].
						^true ]
					ifNil: [
						^false ]
				]
			]
		].
	^false! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/16/2024 15:20:27' prior: 50362440!
     addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector arguments iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetOrGetter |
			targetOrGetter isSymbol
				ifTrue: [ 	self perform: targetOrGetter ]
				ifFalse: [ targetOrGetter ]]
		ifNil: [ self ].
	selector := itemSpec fifth.
	arguments := selector numArgs = 0
		ifTrue: [#()]
		ifFalse: [itemSpec size >= 8 ifTrue: [ {itemSpec eighth} ] ifFalse: [ {self} ]].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: arguments ]
		ifFalse: [ menu add: label target: target action: selector argumentList: arguments ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/16/2024 15:18:40' prior: 50362559!
                        getMenu
	"Answer the right-click (contextual) menu."
	"Spec for the menu and shortcut keys.
	Each entry is
		#(itemId 			'menu item label'    shortcut    receiverGetter    selector     iconOrNil(optional)    'helpText(optional)'    selectorArgument(optional))
		- itemId is a number (integer or float). It specifies the position of the item in the menu, and is also an id, allowing for overrides and deletions.
		- label is a string or symbol. Symbol means self updating menu entry. nil means just keyboard shortcut, no menu entry.
		- shortcut is a Character or nil
		- receiverGetter sent to the widget to get the actual receiver for selector.
			Typically #window, #model or #editor. If nil, receiver is the widget itself.
		- selector is #aSymbol. Usually no arguments, or one single argument in 8th entry. 
			If a Number (multiple of 1000), indicates a subMenu. ItemsIds must be in range. See BrowserWindow>>#classListMenuSpec.
			If nil, the menu entry is created but disabled. The keyboard shortcut is disabled too.
		- icon may be nil. It is also optional (but must be there if there is help text)
		- help text is optional
		- selectorArgument is optional. If selector takes an argument, and selectorArgument is not provided, the argument is self.
	Entries of size 2 are separators, unless first character is $X, meaning 'remove menu item'.
	An entry of size 3 (usually with key 0 and at the first position), if present, tells a menu title, whether to #addStayUpIcons.
	"

	| menuNshortcutsSpecs itemSpec menu submenus |
	menuNshortcutsSpecs := self allMenuNshortcutsSpecs.
	menuNshortcutsSpecs ifEmpty: [ ^nil ].
	menu := MenuMorph new.
	submenus := nil.
	menuNshortcutsSpecs keys sorted do: [ :key |
		itemSpec := menuNshortcutsSpecs at: key.
		itemSpec size <= 2 ifTrue: [
				self addLineTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [ itemSpec size = 3 ifTrue: [
				self addTitleTo: menu fromSpec: itemSpec ]
			ifFalse: [ itemSpec fifth isNumber ifTrue: [
				submenus ifNil: [submenus := Dictionary new ].
				self addSubmenuTo: menu fromSpec: itemSpec submenus: submenus ]
			ifFalse: [
				self addItemTo: menu fromSpec: itemSpec submenus: submenus ]]]].
	^ menu! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6596-useWidgetAsArgumentIfNotProvidedButRequiredByCommand-JuanVuletich-2024Aug16-15h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6596] on 17 August 2024 at 5:27:17 pm'!
!DisplayScreen class methodsFor: 'snapshots' stamp: 'jmv 8/16/2024 16:58:35' prior: 16850249!
        setupDisplay
	"
	DisplayScreen setupDisplay.
	Display forceToScreen.
	"

	self terminateScreenUpdater.
	Display ifNil: [
		Smalltalk at: #Display put: DisplayScreen new.
		"See #recreateSpecialObjectsArray"
		Smalltalk specialObjectsArray at: 15 put: Display ].
	Display setExtent: self actualScreenSize depth: Display nativeDepth.! !
!DisplayScreen class methodsFor: 'screen update' stamp: 'jmv 8/16/2024 17:05:06' prior: 16850291!
               screenUpdateRequired: aRectangle

	ScreenUpdaterProcess ifNotNil: [
		Damage := aRectangle
			ifNotNil: [ aRectangle quickMerge: Damage ]
			ifNil: [ Display boundingBox ].
		ScreenUpdaterSemaphore signal ].! !
!DisplayScreen class methodsFor: 'screen update' stamp: 'jmv 8/16/2024 17:06:36' prior: 16850316!
           terminateScreenUpdater

	ScreenUpdaterProcess ifNotNil: [
		ScreenUpdaterProcess terminate ].
	ScreenUpdaterProcess := nil.
	ScreenUpdaterSemaphore := nil.
	Damage := nil.! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/16/2024 17:03:16' prior: 17007462!
                     mainLoop

	| morphicCanvas morphicDamageRecorder delay |
	self morphPosition: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			morphicCanvas := Display getMainCanvas.
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater ]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			morphicCanvas := (Form extent: extent depth: Display depth) getCanvas ].

	morphicCanvas ownerProcess: Processor activeProcess.
	morphicCanvas world: self.
	morphicDamageRecorder := DamageRecorder new.
	"Set this as the main canvas"
	canvas := morphicCanvas.
	damageRecorder := morphicDamageRecorder.
	damageRecorder recordInvalidRect: self morphLocalBounds for: nil.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	delay := Delay forMilliseconds: 50.
	[
		self displayWorldOn: morphicCanvas.
		[
			"Set the main canvas on every iteration.
			This is needed if UI processes are interrupted, resumed, etc."
			canvas := morphicCanvas.
			damageRecorder := morphicDamageRecorder.
			self doOneCycleOn: morphicCanvas delay: delay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6597-NoBackgroundScreenUpdaterForMacOS-JuanVuletich-2024Aug17-17h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6596] on 17 August 2024 at 5:29:33 pm'!
!DisplayScreen methodsFor: 'other' stamp: 'jmv 8/16/2024 16:41:15' prior: 16849828!
                        deferUpdates: aBoolean
	"Set the deferUpdates flag in the virtual machine. When this flag is true, BitBlt operations on the Display are not automatically propagated to the screen.  To actually make them visible, call #forceToScreen: .
	If this underlying platform does not support deferred updates, this primitive will fail. Answer  nil if it fails.
	Most platforms do support this functionality. You can turn it off for playing with Display directly."

	"Enable this to act as if the VM didn't support defer updates, even when it does"
	"true ifTrue: [ ^nil ]."

	"Note: If we disable VM defer updates (with this &false), but answer notNil, the the Morphic workaround is not used,
	and you get a lot of flicking."
	"As of as August 2024, the Mac VM (intel) doesn't support deferred updates and uses this auxiliar Form as target.
	Both Linux and Windows VM do support it, so Morphic Canvas target is Display."
	^self primitiveDeferUpdates: aBoolean "& false"! !
!WorldMorph methodsFor: 'drawing' stamp: 'jmv 8/16/2024 16:47:38' prior: 17007186!
           displayWorldOn: aMorphicCanvas
	"Update this world's display on the argument."

	| allDamage |
	self checkIfUpdateNeeded ifFalse: [ ^ self ].  "display is already up-to-date"

	"Restore world drawing under hands and their carried morphs"
	(Preferences at: #cacheDisplayContentWhenMovingMorphs) ifTrue: [
		hands do: [ :h | h restoreSavedPatchOn: aMorphicCanvas ]].

	"Update #displayBounds for all dirty morphs (marked as such with #redrawNeeded).
	Also add the updated bounds to aDamageRecorder, and update bounds of morphs carried by hand."
	aMorphicCanvas boundsFinderCanvas updateBoundsIn: self addDamageTo: damageRecorder.

	"repair world's damage on canvas"
	allDamage := aMorphicCanvas drawWorld: self repair: damageRecorder.
	"allDamage ifNotNil: [Display border: allDamage width: 3 fillColor: Color random].	 'Debugging Aid'."
	aMorphicCanvas newClipRect: nil.

	"Check which hands need to be drawn.
	(they are not the hardware mouse pointer and carry morphs)"
	self handsToDrawForDamage: allDamage do: [ :h |
		(Preferences at: #cacheDisplayContentWhenMovingMorphs)
			ifTrue: [ allDamage := (h savePatchFrom: aMorphicCanvas) quickMerge: allDamage ]
			ifFalse: [ allDamage := h displayFullBoundsForPatch quickMerge: allDamage ].
		aMorphicCanvas fullDrawHand: h .
		h needsRedraw: false ].

	"Copy altered rects to Display"
	allDamage ifNotNil: [
		aMorphicCanvas drawsOnDisplay
			ifTrue: [
				"For instance for Linux and Windows. Drawing was done to Display, but given that #deferUpdates: is on,
				we need to specifically ask for changes to be visually effective."
				DisplayScreen isDisplayExtentOk ifTrue: [
					Display forceToScreen: allDamage ]]
			ifFalse: [
				"For Mac, drawing was done to off-Display canvas. Copy content to Display.
				#deferUpdates: is off, so no additional indication to show Display contents is needed."
				aMorphicCanvas showAt: self viewBox origin invalidRect: allDamage]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6598-DisplayUpdateTweaks-JuanVuletich-2024Aug17-17h27m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6598] on 17 August 2024 at 5:40:32 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/17/2024 17:35:42' prior: 50366532!
 addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector arguments iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ].
	target := itemSpec fourth
		ifNotNil: [ :targetOrGetter |
			targetOrGetter isSymbol
				ifTrue: [ 	self perform: targetOrGetter ]
				ifFalse: [ targetOrGetter ]]
		ifNil: [ self ].
	selector := itemSpec fifth.
	arguments := (selector isNil or: [ selector numArgs = 0 ])
		ifTrue: [#()]
		ifFalse: [itemSpec size >= 8 ifTrue: [ {itemSpec eighth} ] ifFalse: [ {self} ]].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: arguments ]
		ifFalse: [ menu add: label target: target action: selector argumentList: arguments ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6599-RecentMenuItemBugFix-JuanVuletich-2024Aug17-17h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6598] on 17 August 2024 at 5:42:46 pm'!
!VectorEngine class methodsFor: 'instance creation' stamp: 'jmv 8/17/2024 17:42:28' prior: 16999389!
               onForm: aForm subPixelAntiAliasing: aBoolean
	"nil means use default kind of anti aliasing
	Use the VectorEnginePlugin if available."

	| engineClass doSubPixelAntiAliasing |
	self hasSubclasses
		ifFalse: [
			engineClass := self ]
		ifTrue: [
			doSubPixelAntiAliasing := aBoolean ifNil: [
				"Assume high resolution implies high DPI"
				Display width <= 1920 ].
			engineClass := VectorEngineWithPlugin isPluginAvailable
				ifTrue: [ doSubPixelAntiAliasing
					ifTrue: [VectorEngineWithPluginSubPixel]
					ifFalse: [VectorEngineWithPluginWholePixel]]
				ifFalse: [ doSubPixelAntiAliasing
					ifTrue: [VectorEngineSubPixel]
					ifFalse: [VectorEngineWholePixel]]].
		^engineClass 	new initializeOnForm: aForm.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6600-BugletFix-JuanVuletich-2024Aug17-17h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6598] on 17 August 2024 at 5:52:22 pm'!
!Form methodsFor: 'accessing' stamp: 'jmv 8/17/2024 17:50:31'!
                        getMainCanvas
	"Return a Canvas that can be used to draw onto the receiver.
	In case of lack of memory, use a much cheaper (but limited) BitBltCanvas.
	Being the sole 'main' canvas means a priviledge: Can use VectorEnginePlugin if available.
		(Nope. If plugin is present, it is used also for caching TrueType and other uses.)"

	| answer |
	answer := [ MorphicCanvas onForm: self ]
				on: OutOfMemory
				do: [
					'Not enough memory to run VectorEngine. Using BitBltCanvas instead.' print.
					MorphicCanvas activeSubclass: BitBltCanvas.
					MorphicCanvas onForm: self ].
	^answer.! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/16/2024 17:47:50' prior: 50366689!
                     mainLoop

	| morphicCanvas morphicDamageRecorder delay |
	self morphPosition: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			morphicCanvas := Display getMainCanvas.
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater ]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			morphicCanvas := (Form extent: extent depth: Display depth) getMainCanvas ].

	morphicCanvas ownerProcess: Processor activeProcess.
	morphicCanvas world: self.
	morphicDamageRecorder := DamageRecorder new.
	"Set this as the main canvas"
	canvas := morphicCanvas.
	damageRecorder := morphicDamageRecorder.
	damageRecorder recordInvalidRect: self morphLocalBounds for: nil.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	delay := Delay forMilliseconds: 50.
	[
		self displayWorldOn: morphicCanvas.
		[
			"Set the main canvas on every iteration.
			This is needed if UI processes are interrupted, resumed, etc."
			canvas := morphicCanvas.
			damageRecorder := morphicDamageRecorder.
			self doOneCycleOn: morphicCanvas delay: delay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !

DisplayScreen removeSelector: #getMainCanvas!

!methodRemoval: DisplayScreen #getMainCanvas stamp: 'Install-6601-MainCanvas-useBitBltCanvasIfMemoryIsScarce-JuanVuletich-2024Aug17-17h42m-jmv.001.cs.st 8/20/2024 10:12:11'!
getMainCanvas
	"Return a Canvas that can be used to draw onto the receiver.
	Being the sole 'main' canvas means a priviledge: Can use VectorEnginePlugin if available."

	| answer |
	answer := [ MorphicCanvas onForm: self ]
				on: OutOfMemory
				do: [
					'Not enough memory to run VectorEngine. Using BitBltCanvas instead.' print.
					MorphicCanvas activeSubclass: BitBltCanvas.
					MorphicCanvas onForm: self ].
	^answer!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6601-MainCanvas-useBitBltCanvasIfMemoryIsScarce-JuanVuletich-2024Aug17-17h42m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6598] on 17 August 2024 at 6:18:46 pm'!
!MorphicCanvas methodsFor: 'other' stamp: 'jmv 8/16/2024 17:59:55'!
                 isConsistentWithTarget
	^true! !
!VectorCanvas methodsFor: 'other' stamp: 'jmv 8/16/2024 18:00:07' overrides: 50367082!
        isConsistentWithTarget
	^engine isConsistentWithTarget! !
!HybridCanvas methodsFor: 'other' stamp: 'jmv 8/16/2024 18:15:03' overrides: 50367082!
               isConsistentWithTarget
	^vectorCanvas isConsistentWithTarget! !
!VectorEngineDrawer methodsFor: 'services' stamp: 'jmv 8/17/2024 18:06:31'!
                    isConsistentWithTarget
	"and display!!!!!!!!!!"
	targetForm extent = Display extent ifFalse: [ ^false ].
	^edgeCounts size = (targetWidth * targetHeight) and: [
		targetWidth = targetForm width and: [ targetForm height = targetHeight ]].! !
!Debugger methodsFor: 'private' stamp: 'jmv 8/17/2024 18:08:06' prior: 16844245!
                              process: aProcess context: aContext

	interruptedProcess := aProcess.
	interruptedProcessUI := (UISupervisor animatedUIOf: interruptedProcess) ifNotNil: [ :world | world mainCanvas ].
	contextStackTop := aContext.
	self newStack: (contextStackTop stackOfSize: 1).
	contextStackIndex := 1.! !
!Debugger methodsFor: 'private' stamp: 'jmv 8/17/2024 18:17:11' prior: 16844278!
           resumeProcess
	| mustTerminateActive mustRedisplay |
	mustRedisplay := self runningWorld.
	savedCursor
		ifNotNil: [savedCursor activateCursor].
	mustTerminateActive := false.
	interruptedProcess isTerminated ifFalse: [
		interruptedProcessUI notNil ifTrue: [
			interruptedProcessUI isConsistentWithTarget
				ifTrue: [
					(interruptedProcess name withoutPrefix: 'Formerly: ') ifNotNil: [ :originalName |
						interruptedProcess
							name: originalName;
							priority: interruptedProcess priority + 1 ].
					UISupervisor isUIProcessRunning
						ifTrue: [ mustTerminateActive := true]
						ifFalse: [ UISupervisor stopUIProcess].
					UISupervisor uiProcess: interruptedProcess ]
				ifFalse: [
					"The Display has changed size while running the debugger.
					The interupted process would use an invalid canvas, corrupting the Display,
					and likely crashing the system. Don't resume the process. Just keep the current UI process running."
					interruptedProcess terminate.
					interruptedProcess := nil ]].
		interruptedProcess ifNotNil: [ :p | p resolvePendingQuickReturns; resume ]].
	interruptedProcess := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	mustRedisplay ifNotNil: [ :w |
		[UISupervisor whenUIinSafeState: [ w invalidateBounds ]]
			forkAt: Processor userSchedulingPriority-1 ].
	"restart low space handler"
	Smalltalk installLowSpaceWatcher.
	"If this process was the UI process, and we just resumed the old one,
	then terminate us and never return to caller."
	mustTerminateActive
		ifTrue: [ Processor terminateActive ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6602-Debugger-ProtectFromInvalidResume-JuanVuletich-2024Aug17-17h52m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6598] on 17 August 2024 at 6:44:22 pm'!
!MorphicCanvas methodsFor: 'other' stamp: 'jmv 8/17/2024 18:37:41'!
                        unpinAndFreeMemory! !
!VectorCanvas methodsFor: 'other' stamp: 'jmv 8/17/2024 18:37:46' overrides: 50367182!
                   unpinAndFreeMemory
	engine unpinAndFreeMemory! !
!HybridCanvas methodsFor: 'other' stamp: 'jmv 8/17/2024 18:37:51' overrides: 50367182!
                        unpinAndFreeMemory
	vectorCanvas unpinAndFreeMemory! !
!VectorEngineDrawer methodsFor: 'services' stamp: 'jmv 8/17/2024 18:39:37'!
                             unpinAndFreeMemory

	"Unpin, if possible, any pinned large arrays."
	targetForm ifNotNil: [
		targetForm == Display ifFalse: [
			targetForm bits unpin ]].
	morphIds ifNotNil: [ morphIds unpin ].
	edgeCounts ifNotNil: [ edgeCounts unpin ].
	alphaMask ifNotNil: [ alphaMask unpin ].
	contour ifNotNil: [ contour unpin ].

	targetForm := nil.
	morphIds := nil.
	edgeCounts := nil.
	alphaMask := nil.
	contour := nil.! !
!DisplayScreen class methodsFor: 'display box access' stamp: 'jmv 8/17/2024 18:29:49' prior: 16850241!
                       isDisplayExtentOk
	"False if Cuis main window size has changed, but Display hasn't been updated yet."

	Display extent = DisplayScreen actualScreenSize ifTrue: [ ^true ].

	"Note: We assume here that this condition means that in last #setupDisplay a memory allocation
	problem occured, and we are using a 1/4 emergency Display.
	If this is the case, don't try to allocate a new Display unless the OS Display is resized again."
	Display extent = (DisplayScreen actualScreenSize // 4) ifTrue: [ ^true ].

	^false! !
!DisplayScreen class methodsFor: 'snapshots' stamp: 'jmv 8/17/2024 18:31:34' prior: 50366656!
setupDisplay
	"
	DisplayScreen setupDisplay.
	Display forceToScreen.
	"

	self terminateScreenUpdater.
	Display ifNil: [
		Smalltalk at: #Display put: DisplayScreen new.
		"See #recreateSpecialObjectsArray"
		Smalltalk specialObjectsArray at: 15 put: Display ].
	[
		Display setExtent: self actualScreenSize depth: Display nativeDepth
	] on: OutOfMemory do: [
		"In case of memory emergency, use a much smaller Display"
		'Display allocation failed - Using Emergency (small) Display.'  print.
		'Resize Display (or OS Window) to retry Display allocation.'  print.
		Display setExtent: self actualScreenSize // 4 depth: Display nativeDepth ].! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 8/17/2024 18:44:13' prior: 50363820!
   checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |
	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"This allocates new memory for Display and is critical."
		needsNewUIProcessAndCanvas := true.
		"This may help with memory fragmentation issues possibly making new display allocation fail."
		canvas unpinAndFreeMemory.
		DisplayScreen setupDisplay ].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"This may help with memory fragmentation issues possibly making new canvas allocation fail.
			In any case, if ther is not enough free memory for VectorCanvas and engine, use BitBltCanvas.
			See #getMainCanvas"
			canvas unpinAndFreeMemory.
			UISupervisor newUIProcess ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6603-BetterHandlingOfOutOfMemoryOnDisplayAllocation-JuanVuletich-2024Aug17-18h18m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6603] on 17 August 2024 at 7:02:36 pm'!
!UISupervisor class methodsFor: 'gui process' stamp: 'jmv 8/17/2024 18:56:44'!
     spawnNewMorphicProcessFor: guiRootObject andTerminateCurrent: aBoolean
	"
	aBoolean ifTrue terminate current process. Use with care.
	Maybe prefer the safer #spawnNewMorphicProcessFor:
	"
	| doYield |
	doYield := false.
	"If the old one gets resumed, don't step on each other feet"
	UIProcess ifNotNil: [
		UIProcess
			name: 'Formerly: ', UIProcess name;
			priority: UIProcess priority-1.
		UIProcess isRunning ifTrue: [ doYield := true ]].
	UI := guiRootObject.
	UIProcess := guiRootObject runProcess.
	UIProcess resume.
	aBoolean
		ifFalse: [	doYield ifTrue: [ Processor yield ]]
		ifTrue: [ Processor terminateActive ].! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 8/17/2024 19:01:15' prior: 50367255!
                    checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |
	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"This allocates new memory for Display and is critical."
		needsNewUIProcessAndCanvas := true.
		"This may help with memory fragmentation issues possibly making new display allocation fail."
		canvas unpinAndFreeMemory.
		DisplayScreen setupDisplay ].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"The current canvas is not consistent with Display, and therefore can no longer be used. A new one is required.
			Freeeing the memory it uses may help with memory fragmentation issues possibly making new canvas allocation fail.
			(In any case, if ther is not enough free memory for VectorCanvas and engine, use a BitBltCanvas, see #getMainCanvas)"
			canvas unpinAndFreeMemory.
			"Create a new UI process, including a new canvas consistent with updated Display.
			This will also terminate the current process, and this is needed because the current canvas can no longer be used.
			A canvas and vector engine inconsistent with Display could cause invalid memory accesses, possibly crashing the system."
			UISupervisor spawnNewMorphicProcessFor: self andTerminateCurrent: true ].! !
!UISupervisor class methodsFor: 'gui process' stamp: 'jmv 8/17/2024 18:54:53' prior: 16990714!
                  spawnNewMorphicProcessFor: guiRootObject
	"
	Safe to run anytime, as the old Morphic process will end by itself.
	UISupervisor spawnNewMorphicProcessFor: UISupervisor ui.
	"
	self spawnNewMorphicProcessFor: guiRootObject andTerminateCurrent: false.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6604-EnsureOldAndNowInconsistentVectorEngineIsNoLongerUsed-JuanVuletich-2024Aug17-18h53m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6604] on 19 August 2024 at 10:59:40 am'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/19/2024 10:59:14' prior: 50366168!
                              snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		(c ownerProcess notNil and: [c ownerProcess isTerminated]) ifTrue: [
			c releaseEngine			]].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit.
			"Some command line arguments need to be processed before starting the UI"
			self processCommandLineArguments: true.
			self assureStartupStampLogged ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	"It is needed to do this at least once on MacVMs, where it may not be needed later.
	For instance #forceToScreen: is usually not called in #displayWorldOn: if running on Mac."
	Display forceToScreen.
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				"Some command line arguments need to be processed after the UI is up, and in the UI process"
				self processCommandLineArguments: false.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6605-FixMacPossiblyNeverShowingCuisWindow-JuanVuletich-2024Aug19-10h56m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6605] on 19 August 2024 at 12:47:19 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/19/2024 12:37:38' prior: 50348293!
                menuNshortcutsSpecsDo: aBlock
	"Iterate over our own menu and shortcut specs.
	Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/19/2024 12:36:30' prior: 50348301!
                             menuNshortcutsSpecsFor: aWidget do: aBlock
	"aWidget is a submorph, or submorph of a submorph, etc.
	Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs.
	See implementors."! !
!InnerTextMorph methodsFor: 'menu' stamp: 'jmv 8/19/2024 12:37:44' prior: 50365833 overrides: 50367616!
                menuNshortcutsSpecsDo: aBlock
	"Iterate over our own menu and shortcut specs.
	Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for themselves.
	See implementors."

	"First take default editor menu and shortcut specs"
	self editor defaultMenuSpec do: aBlock.

	self window ifNotNil: [ :myWindow |

		"Then include additions, overrides and deletions registered for #Editor, #TextEditor, #SmalltalkEditor, etc.
		Hierarchy order allows more specific classes to override choices made by superclasses."
		(self editor class withAllSuperclassesDownFrom: Editor) do: [ :editorClass |
			(myWindow class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
				(windowClass registeredMenuAndShortcutsSpecProviders: editorClass name) ifNotNil: [ :providers |
					providers do: [ :eachMessageSend |
						(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		]].
		
		(myWindow class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
			"Also allow registering menu+shortcut entries for specific TextModels or TextProviders"
			(windowClass registeredMenuAndShortcutsSpecProviders: self textProviderOrModel class name) ifNotNil: [ :providers |
				providers do: [ :eachMessageSend |
					(eachMessageSend valueWithPossibleArgument: self) do: aBlock ]]		]].! !
!SystemWindow methodsFor: 'submorphs-menus' stamp: 'jmv 8/19/2024 12:42:57' prior: 50365877 overrides: 50367626!
 menuNshortcutsSpecsFor: aWidget do: aBlock
	"aWidget is a submorph, or submorph of a submorph, etc.
	Subclasses may implement specific ways of providing menu items and
	keyboard shortcuts for their submorphs."

	aWidget menuNshortcutsKey ifNotNil: [ :widgetKey |
		(widgetKey numArgs = 0
			ifTrue: [self perform: widgetKey]
			ifFalse: [self perform: widgetKey with: aWidget]) do: aBlock.
		(self class withAllSuperclassesDownFrom: SystemWindow) do: [ :windowClass |
			(windowClass registeredMenuAndShortcutsSpecProviders: widgetKey) ifNotNil: [ :providers |
				providers do: [ :eachMessageSend |
					(eachMessageSend valueWithPossibleArgument: aWidget) do: aBlock ]]]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6606-widgetAsOptionalArgumentToMenuNSpecGetter-JuanVuletich-2024Aug19-12h46m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6606] on 19 August 2024 at 1:26:05 pm'!
!TextEditor methodsFor: 'accessing' stamp: 'jmv 8/19/2024 13:21:30' prior: 16980144!
               defaultFont
	^defaultFont ifNil: [FontFamily defaultFamilyAndPointSize].! !
!TextEditor methodsFor: 'accessing' stamp: 'jmv 8/19/2024 13:21:38' prior: 16980151!
                               lastFont
	"Answer the Font for to be used if positioned at the end of the text"

	^self startIndex > model textSize
		ifTrue: [ model actualContents fontIfApplying: emphasisHere default: self defaultFont ]
		ifFalse: [ model actualContents fontAt: model textSize +1 default: self defaultFont ]! !
!TextEditor methodsFor: 'attributes' stamp: 'jmv 8/19/2024 13:21:44' prior: 16980381!
 offerFontMenu
	"Present a menu of available fonts, and if one is chosen, apply it to the current selection.
	Note: use #baseFont. If emphasis is desired, add it separatedly."
	"This is a user command, and generates undo"

	| currentFont attr startIndex |
	startIndex := self startIndex.
	currentFont := model actualContents fontAt: startIndex default: self defaultFont.
	(FontFamily promptUser: currentFont familyName) ifNotNil: [ :fontFamily |
		attr := TextFontFamily familyName: fontFamily familyName.
		self applyAttribute: attr.
		morph updateFromTextComposition ].! !
!TextEditor methodsFor: 'attributes' stamp: 'jmv 8/19/2024 13:21:48' prior: 16980401!
            offerFontSizeMenu
	| startIndex currentFont fontFamily attr |
	startIndex := self startIndex.
	currentFont := model actualContents fontAt: startIndex default: self defaultFont.
	fontFamily := currentFont family.
	(FontFamily
		promptUserForSize: currentFont pointSize
		fontFamily: fontFamily) ifNotNil: [ :ptSize |
			attr := TextFontSize pointSize: ptSize.
			self applyAttribute: attr.
			morph updateFromTextComposition ].! !
!TextEditor methodsFor: 'initialization' stamp: 'jmv 8/19/2024 13:22:06' prior: 16981913 overrides: 16932029!
    initialize
	emphasisHere := #().
	initialSelectionStart := nil.
	initialSelectionStop := nil.
	doWordSelection := false.
	doParagraphSelection := false.
	defaultFont := nil.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6607-BasicTextEditor-HonorDefaultFontChanges-JuanVuletich-2024Aug19-13h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6607] on 19 August 2024 at 3:36:10 pm'!
!OrderedDictionary methodsFor: 'accessing' stamp: 'jmv 8/19/2024 15:29:54'!
               atLast: key put: anObject
	"Similar to #at:put:, but the key will be at the end, even if it was already there."
	self at: key put: anObject.
	orderedKeys last = key ifFalse: [
		orderedKeys remove: key; addLast: key ].
	^anObject! !
!SystemWindow class methodsFor: 'menu and shortcuts' stamp: 'jmv 8/19/2024 15:35:21' prior: 50335609!
                 at: aWidgetKey registerMenuAndShortcutsSpecProvider: aMessageSend
	menuNshortcutsProviders ifNil: [ menuNshortcutsProviders := Dictionary new ].
	(menuNshortcutsProviders at: aWidgetKey ifAbsentPut: [ OrderedDictionary new ])
		atLast: aMessageSend put: aMessageSend.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6608-ifMultipleMenuNshortcutRegistrations-justkeepLast-JuanVuletich-2024Aug19-15h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6594] on 16 August 2024 at 9:55:00 am'!

SystemDictionary removeSelector: #processCommandLineArguments!

!methodRemoval: SystemDictionary #processCommandLineArguments stamp: 'Install-6609-cmdLineProcessing-cleanup-JuanVuletich-2024Aug16-09h54m-jmv.001.cs.st 8/20/2024 10:12:11'!
processCommandLineArguments
	"
	Smalltalk processCommandLineArguments

	Note: By default, any exceptions thrown during the evaluation of arguments are simply ignored.
	To ease debugging, use the -e argument: Do Not Ignore Exceptions. 
	For example:
		squeak Cuis.image -e -s myScript.st
	If ``myScript.st`` contains an error, a Debugger will pop up.
	
	See comment at
		processCommandLineOption:optionArgument:raiseExceptions:
	See displayCommandLineUsageOn:
	"
	| optionString optionArgument optionIndex nextOptionIndex optionLastParameterIndex raiseExceptions dashFinder |

	"Any command line argument that starts with $- is an Option.
	NonOption arguments are parameters for the preceding Option."
	raiseExceptions := false.
	startUpScriptArguments := #().
	"Empty Strings are valid command line arguments, generated by two double quotes. Handle them."
	dashFinder := [ :any | any notEmpty and: [ any first = $- ] ].
	optionIndex := startUpArguments findFirst: dashFinder startingAt: 1.
	[ optionIndex > 0 ] whileTrue: [
		"Find parameters for this option"
		nextOptionIndex := startUpArguments findFirst: dashFinder startingAt: optionIndex+1.
		optionLastParameterIndex := nextOptionIndex = 0
			ifTrue: [startUpArguments size]
			ifFalse: [nextOptionIndex-1].
		optionString := startUpArguments at: optionIndex.
		optionString size > 1 ifTrue: [
			optionString = '--' 						"Including    --    as an option means 'ignore everything after here'"
				ifTrue: [^self].
			optionString = '-e'
				ifTrue: [ raiseExceptions := true ]
				ifFalse: [
					optionArgument := optionLastParameterIndex > optionIndex ifTrue: [startUpArguments at: optionIndex+1].
					startUpScriptArguments := startUpArguments copyFrom: optionIndex+2 to: optionLastParameterIndex.
					self processCommandLineOption: optionString optionArgument: optionArgument raiseExceptions: raiseExceptions.
					startUpScriptArguments := #() ]
			].
		optionIndex := nextOptionIndex ].!

SystemDictionary removeSelector: #processCommandLineOption:optionArgument:raiseExceptions:!

!methodRemoval: SystemDictionary #processCommandLineOption:optionArgument:raiseExceptions: stamp: 'Install-6609-cmdLineProcessing-cleanup-JuanVuletich-2024Aug16-09h54m-jmv.001.cs.st 8/20/2024 10:12:11'!
processCommandLineOption: optionString optionArgument: optionArgument raiseExceptions: aBoolean
	"
	A possible example (duplicated single quotes: '' should be double quotes, but not allowed in a Smalltalk comment):
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -h
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -v
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -q
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -e -d''0 zope''
Squeak.app/Contents/MacOS/Squeak Cuis-Smalltalk-Dev/Cuis6.0-????.image -r YAXO -rJSON -d ''Smalltalk startUpScriptArguments print'' xx YY 3492 -d'' 'here comes another' print'' -d ''{'The answer is: '. Smalltalk startUpScriptArguments first asNumber + Smalltalk startUpScriptArguments second asNumber} print'' 3 4 -- -d'' 'not this' print' ''

Squeak.exe Cuis4.2-2211x.image -r RequiredFeature1 -r RequiredFeature2 -d ''Transcript show: 'popo1'; newLine'' -d ''Transcript show: 'popo2'; newLine'' -s smalltalkScript.st param1ToScript param2ToSCript ''parametro 3 to script ->>>--// 3''
	"
	"You can use 'Smalltalk startUpScriptArguments' inside the startUp script:"


	| exceptionToIgnoreOrNil file directory |
	exceptionToIgnoreOrNil := aBoolean ifFalse: [UnhandledError] ifTrue: [nil].
	optionString caseOf: {
		[ '-h' ] -> [
			self displayCommandLineUsageOn: StdIOWriteStream stdout.
			self quit ].

		[ '-v' ] -> [ 
			self displaySystemInformationStringOn: StdIOWriteStream stdout.
			self quit ].

		[ '-q' ] -> [ self quit ].

		[ '-u' ] -> [ ChangeSet installNewUpdates ].

		[ '-r' ] -> [		"as in 		-rRequiredFeature2        or         -r RequiredFeature2"
			{ 'Feature require: '. optionArgument } print.
			[ Feature require: optionArgument ] on: FeatureRequirementUnsatisfied do: [ :ex |
				StdIOWriteStream stdout nextPutAll: ex messageText; newLine; flush.
				ex messageText print.
				self quit ] ].

		[ '-d' ] -> [		"as in 		-d ''Transcript show: 'popo1'; newLine'' -d''Transcript show: 'popo2'; newLine''        (duplicated singleQuotes should read doubleQuote)"
			{ 'Compiler evaluate: '. optionArgument } print.
			[ Compiler evaluate: optionArgument ] on: exceptionToIgnoreOrNil do: [ :ex | ex return] ].

		['-l' ] -> ["file in the file"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'File in: '. optionArgument. ' -> '. file} print.
			[file readStreamDo: [ :stream | stream fileIn ]] on: exceptionToIgnoreOrNil do: [ :ex | ex return]].

		[ '-s' ] -> [		"as in 		-s smalltalkScript.st paramAlScript1 paramAlSCript2 ''parameter to script script ->>>--// 3'' 			(duplicated singleQuotes should read doubleQuote)"
			file := optionArgument isAbsolutePathName
				ifTrue: [ FileEntry withAbsolutePathName: optionArgument ]
				ifFalse: [FileEntry withRelativePathName: optionArgument to: DirectoryEntry currentDirectory ].
			{ 'Compiler evaluate contents of file named: '. optionArgument. ' -> '. file. ' arguments: '. self startUpScriptArguments } print.
			file exists ifTrue: [
				file readStreamDo: [ :stream |
					[ Compiler evaluate: stream contentsOfEntireFile ] on: exceptionToIgnoreOrNil do: [ :ex | ex return]]]].

		[ '-ud' ] -> [
			directory := optionArgument asDirectoryEntry.
			DirectoryEntry setUserBaseDirectory: directory ].

		[ '-udIsBase' ] -> [ DirectoryEntry setUserBaseDirectoryAsCuisBase ].
	}
	otherwise: [].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6609-cmdLineProcessing-cleanup-JuanVuletich-2024Aug16-09h54m-jmv.001.cs.st----!

----QUIT----(20 August 2024 10:12:15) Cuis7.1-6609-32.image priorSource: 1111718!

----STARTUP---- (23 August 2024 20:13:19) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6609-32.image!


'From Cuis7.1 [latest update: #6609] on 20 August 2024 at 11:02:32 am'!
!Behavior methodsFor: 'accessing class hierarchy' stamp: 'jmv 8/20/2024 11:00:34'!
                  subclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses.
	Sort by name."

	^(self subclasses sort: [:c1 :c2 | c1 name < c2 name ]) do: aBlock! !
!Behavior methodsFor: 'enumerating' stamp: 'jmv 8/20/2024 11:01:19'!
                      allSubclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's subclasses.
	At each level, sort subclasses."

	self subclassesSortedDo: [ :cl | 
		aBlock value: cl.
		cl allSubclassesSortedDo: aBlock ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6610-allSubclassesSortedDo-JuanVuletich-2024Aug20-11h00m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6610] on 20 August 2024 at 5:12:22 pm'!
!MenuMorph methodsFor: 'control' stamp: 'jmv 8/20/2024 17:10:51' prior: 50348144!
   deleteIfPopUp: evt
	"Remove this menu from the screen if stayUp is not true. If it is a submenu, also remove its owning menu."

	| h |
	h := evt ifNotNil: [ evt hand ].
	h ifNil: [
		self world ifNotNil: [ :w | h := h activeHand ]].
	h ifNil: [ h := self activeHand ].
	h ifNotNil: [
		h keyboardFocus == self ifTrue: [
			h newKeyboardFocus: prevKbdFocus ].
		h mouseFocus == self ifTrue: [
			"h newMouseFocus: prevMouseFocus."
			h newMouseFocus: nil ]].
	stayUp ifFalse: [
		self delete.
		popUpOwner ifNotNil: [
			popUpOwner isSelected: false.
			popUpOwner deleteIfPopUp: evt ]].! !
!MenuMorph methodsFor: 'halos and balloon help' stamp: 'jmv 8/20/2024 17:02:27' prior: 16894603 overrides: 16905728!
                             addHalo: evt
	self stayUp.
	self world ifNotNil: [ :w | w activeHand ifNotNil: [ :h | h releaseMouseFocus: self ]].
	super addHalo: evt.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6611-FixTwoIssuesWithMenusHalosAndFocus-JuanVuletich-2024Aug20-17h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6611] on 21 August 2024 at 11:07:54 am'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 8/21/2024 11:07:21' prior: 50362700!
      knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('dkh'						'Dale Henrichs')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSG'						'David Graham')
	#('DSM' 						'Duane Maxwell')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jfr' 						'Jon Raiford')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('kdpm' 						'Kevin P√©rez Machado')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('PHK' 						'Peter Keeler')
	#('pmon'						'Paolo Montrasi')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RMV' 						'R. Mark Volkmann')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6612-AddMarkAsKnownAuthor-JuanVuletich-2024Aug21-11h07m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6611] on 21 August 2024 at 11:06:33 am'!
!BoxedMorph methodsFor: 'accessing' stamp: 'RMV 8/21/2024 11:06:15' prior: 16796393!
              borderWidth: anInteger
	borderWidth = anInteger ifFalse: [
		borderWidth := anInteger max: 0.
		self  ensureMinimumExtent;
			redrawNeeded ].! !
!BoxedMorph methodsFor: 'geometry' stamp: 'RMV 8/21/2024 11:06:01'!
           ensureMinimumExtent

	| oldExtent |
	oldExtent := extent.
	(self privateExtent: extent) ifTrue: [
		self extentChanged: oldExtent ].! !

BoxedMorph removeSelector: #ensureMinimimExtent!

!methodRemoval: BoxedMorph #ensureMinimimExtent stamp: 'Install-6613-FixTypo-R.MarkVolkmann-2024Aug21-11h05m-RMV.001.cs.st 8/23/2024 20:13:19'!
ensureMinimimExtent

	| oldExtent |
	oldExtent := extent.
	(self privateExtent: extent) ifTrue: [
		self extentChanged: oldExtent ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6613-FixTypo-R.MarkVolkmann-2024Aug21-11h05m-RMV.001.cs.st----!

'From Cuis7.1 [latest update: #6613] on 21 August 2024 at 12:09:04 pm'!

BoxedMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6614-OptionalOuterGapForLayouts-part1-MarkVolkmann-KenDickey-2024Aug21-12h03m-KenD.001.cs.st 8/23/2024 20:13:19'!
BoxedMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!
!LayoutMorph commentStamp: 'KenD 8/21/2024 12:07:09' prior: 16889605!
                       A row or column of Morphs, does layout by placing them along either a horizontal axis or a vertical axis.

Submorphs might specify a LayoutSpec. If some don't, then, for a column, the column width is taken as the width, and any morph height is kept. Same for rows: submorph width would be maintained, and submorph height would be made equal to row height.

Notes:
  - Contained submorphs may have fixed or minimum sizes.
  - We can specify fixed separation.
  - We can offset to left or right.
  - Contained submorphs can, via LayoutSpecs, ask for a proportion of
    the space which is left over after the minimum extent.

  One subtlety with the proportional layouts is that the sum of
  proportions may add up to more than 100%.

  We want to allocate fairly.

  Say we have 2 submorphs which ask for 80% and 50%.

  They should be normalized to get 80/130 and 50/130 of the excess space.

Instance Variables:
  direction - either #horizontal (row) or #vertical (column).
  separation - Empty space between Morphs:
	separation for both x and y axes or a point: (xSeparation @ ySeparation)
  axisEdgeWeight  - Along the Major or Layout Axis, subMorphs may be attracted 
	toward one side (0.0) or the other (1.0).  
	See comment in method #axisEdgeWeight:
  doAdoptWidgetsColor - see method #adoptWidgetsColor:
  useEdgeSpace - When true, x and y separation are kept between submorphs and the
	edge of our extent, othersize no space is kept between submorphs 
	and our outer edge.

!
!LayoutMorph methodsFor: 'accessing' stamp: 'RMV 8/14/2024 18:32:08'!
             useEdgeSpace
	^ useEdgeSpace! !
!LayoutMorph methodsFor: 'accessing' stamp: 'RMV 8/14/2024 18:31:59'!
                          useEdgeSpace: aBoolean
	useEdgeSpace := aBoolean! !
!LayoutMorph methodsFor: 'initialization' stamp: 'KenD 6/4/2020 14:22:33' prior: 16890017 overrides: 16796424!
                             initialize
	super initialize.
	separation := 0.
	axisEdgeWeight := 0.0.
	useEdgeSpace := true.
	doAdoptWidgetsColor := false! !
!LayoutMorph class methodsFor: 'examples' stamp: 'KenD 8/15/2024 05:26:44'!
                    exampleEdgesColumn
	"Show 2 cases :1 useEdgeSpace true and 1 false"
	" self exampleEdgesColumn "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newColumn :: useEdgeSpace: true;  separation: 20.
	noEdge := self newColumn :: useEdgeSpace: false;  separation: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Edge').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Edge').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !
!LayoutMorph class methodsFor: 'examples' stamp: 'KenD 8/15/2024 05:26:38'!
                    exampleEdgesRow
	"Show 2 cases: 1 useEdgeSpace true and 1 false"
	" self exampleEdgesRow "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newRow :: useEdgeSpace: true;  separation: 20.
	noEdge := self newRow :: useEdgeSpace: false;  separation: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Edge').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Edge').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !

BoxedMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6614-OptionalOuterGapForLayouts-part1-MarkVolkmann-KenDickey-2024Aug21-12h03m-KenD.001.cs.st 8/23/2024 20:13:19'!
BoxedMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
LayoutMorph allSubInstancesDo: [ :each | each instVarNamed: 'useEdgeSpace' put: true ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6614-OptionalOuterGapForLayouts-part1-MarkVolkmann-KenDickey-2024Aug21-12h03m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6614] on 21 August 2024 at 12:50:32 pm'!
!LayoutMorph methodsFor: 'geometry' stamp: 'RMV 8/14/2024 19:47:20' prior: 16889952!
                    minimumExtent: cachedValues
	"Answer size sufficient to frame my submorphs."
	
	| width height mle |
	width  := 0.
	height := 0.
	(self direction = #vertical)
		ifTrue: [ "Column"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"use maximum width across submorphs"
				width := width max: mle x.
				"sum up submorph heights, including separation"
				height := height + mle y + self ySeparation.
			].
			useEdgeSpace
				ifTrue: [
					height := height + self ySeparation. "one side already separated"
					width := width + (2 * self xSeparation). "separation on each side"
				]
				ifFalse: [
					height := height - self ySeparation. "one side already separated"
				].
		]
		ifFalse: [ "Row"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"sum up submorphs width"
				width := width + mle x + self xSeparation.
				"use maximum height across submorph"
				height := height max: mle y.
			].
			useEdgeSpace
				ifTrue: [
					width := width + self xSeparation. "one side already separated"
					height := height + (2 * self ySeparation). "separation on each side"
				]
				ifFalse: [
					width := width - self xSeparation. "one side already separated"
				].
		].

	^ (width @ height) + self extentBorder! !
!LayoutMorph methodsFor: 'layout' stamp: 'RMV 8/14/2024 18:32:47' prior: 16890171!
                      layoutSubmorphsHorizontallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gap gapCount widths widthToAllocate leftOver x height y cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].
	
	gap := self xSeparation.
	gapCount := useEdgeSpace ifTrue: [ visibleSubmorphs size + 1 ] ifFalse: [ visibleSubmorphs size - 1].
	widthToAllocate := (boundsForLayout width - (gapCount * gap)).
	cache := IdentityDictionary new.
	widths := self widthsFor: visibleSubmorphs within: widthToAllocate minLayoutExtentCache: cache.
	leftOver := widthToAllocate - widths sum.
	x := boundsForLayout left + (leftOver * self axisEdgeWeight).
	useEdgeSpace ifTrue: [ x := x + gap ].

	visibleSubmorphs with: widths do: [ :sm :smWidth |
		height := self offAxisHeightFor: sm within: boundsForLayout height minLayoutExtentCache: cache.
		y := self offAxisYOffsetFor: sm within: boundsForLayout height - height.
		sm fitInto: (x @ (boundsForLayout top + y) extent: smWidth @ height).
		x := x + smWidth + gap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 8/15/2024 05:24:55' prior: 16890209!
                     layoutSubmorphsVerticallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gap gapCount heights heightToAllocate leftOver y width x cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	gap := self ySeparation.
	gapCount := useEdgeSpace ifTrue: [ visibleSubmorphs size + 1 ] ifFalse: [ visibleSubmorphs size - 1].
	heightToAllocate := (boundsForLayout height - (gapCount * gap)).
	cache := IdentityDictionary new.
	heights := self heightsFor: visibleSubmorphs within: heightToAllocate minLayoutExtentCache: cache.
	leftOver := heightToAllocate - heights sum.
	y := boundsForLayout top + (leftOver * self axisEdgeWeight).
	useEdgeSpace ifTrue: [ y := y + gap ].

	visibleSubmorphs with: heights do: [ :sm :smHeight |
		width := self offAxisWidthFor: sm within: boundsForLayout width minLayoutExtentCache: cache.
		x := self offAxisXOffsetFor: sm within: boundsForLayout width - width.
		sm fitInto: (boundsForLayout left + x @ y extent: width @ smHeight).
		y := y + smHeight + gap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 8/15/2024 05:41:15' prior: 16890247!
                    offAxisHeightFor: aMorph within: availableHeight minLayoutExtentCache: cache
	"Answer height for a single morph -- offAxis calculation for a Row"
	
	| availableForPropHeight actualPropHeight |
	availableForPropHeight := useEdgeSpace 
		ifTrue: [ availableHeight  - (2 * self ySeparation) ]
		ifFalse: [ availableHeight ].
	actualPropHeight := (availableForPropHeight * aMorph layoutSpec proportionalLayoutHeight)
							 max: (aMorph minimumLayoutExtent: cache) y.
	^ actualPropHeight! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 8/15/2024 05:42:45' prior: 16890263!
    offAxisWidthFor: aMorph within: availableWidth minLayoutExtentCache: cache
	"Answer width for a single morph -- offAxis calculation for a Column"

	| availableForPropWidth actualPropWidth |
	availableForPropWidth := useEdgeSpace 
		ifTrue: [ 	availableWidth - (2 * self xSeparation) ]
		 ifFalse: [ availableWidth ].
	actualPropWidth := (availableForPropWidth * aMorph layoutSpec proportionalLayoutWidth)
						 	max: (aMorph minimumLayoutExtent: cache) x.
	^ actualPropWidth! !
!LayoutMorph methodsFor: 'layout' stamp: 'RMV 8/14/2024 19:30:46' prior: 16890279!
              offAxisXOffsetFor: aMorph within: availableWidth
	"Answer x offset for a single morph -- offAxis calculation for a Column"

	| leftOver offset |
	leftOver := useEdgeSpace
		ifTrue: [availableWidth - (2 * self xSeparation)] 
		ifFalse: [availableWidth].
	offset := leftOver * aMorph layoutSpec offAxisEdgeWeight. 
	useEdgeSpace ifTrue: [ ^ self xSeparation + offset ].
	^ offset! !
!LayoutMorph methodsFor: 'layout' stamp: 'RMV 8/14/2024 19:30:50' prior: 16890291!
                offAxisYOffsetFor: aMorph within: availableHeight
	"Answer y offset for a single morph -- offAxis calculation for a Row"
	
	| leftOver offset |
	leftOver := useEdgeSpace
		ifTrue: [availableHeight - (2 * self ySeparation)] 
		ifFalse: [availableHeight].
	offset := leftOver * aMorph layoutSpec offAxisEdgeWeight.
	useEdgeSpace ifTrue: [ ^ self ySeparation + offset ].
	^offset! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6615-OptionalOuterGapForLayouts-part2-MarkVolkmann-KenDickey-2024Aug21-12h40m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6615] on 22 August 2024 at 10:51:00 am'!
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 8/22/2024 10:40:06' prior: 16954314 overrides: 16851781!
                         paste
	| objectName |
	
	model canBindVariables ifTrue: [
		"Not pasting String or Text, but some other object.
		Create a Workspace variable pointing to original object (Not a copy!!!!!!)"
		Clipboard contentsOriginalObject ifNotNil: [ :object |
			objectName := model nameForObject: object.
			(model bindingOf: objectName) value: object.
			self replaceSelectionWith: objectName.
			^ self ]].
	^ super paste! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6616-CommentTweak-JuanVuletich-2024Aug22-10h38m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6615] on 22 August 2024 at 10:56:30 am'!
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 10:55:41'!
                               isTextStylingEnabled

	^shouldStyle ifNil: [ Preferences at: #shoutInWorkspaces]! !
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 10:55:51' prior: 17006823 overrides: 16982867!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."

	self isTextStylingEnabled ifFalse: [ ^false ].
	anSHTextStyler 
		classOrMetaClass: nil;
		workspace: self.
	^true! !
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 10:55:55' prior: 17006845!
                            toggleStyling

	shouldStyle := self isTextStylingEnabled not.
	actualContents := actualContents asPlainString asText.
	self changed: #actualContents! !
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 10:56:00' prior: 17006852!
                toggleStylingLabel

	^self isTextStylingEnabled 
		ifTrue: [ '<on> syntax highlighting' ]
		ifFalse: [ '<off> syntax highlighting' ]! !
!TranscriptMorph methodsFor: 'menu commands' stamp: 'jmv 8/22/2024 10:56:03' prior: 16988651!
                          editContents
	workspace := Workspace new.
	workspace isTextStylingEnabled ifTrue: [ workspace toggleStyling ].
	workspace contents: Transcript contents.
	lastUnfinishedEntrySize := Transcript unfinishedEntrySize.
	workspaceWindow := workspace openLabel: 'Workspace - Transcript contents'.
	lastIncludedIndex := Transcript lastIndex.! !

Workspace removeSelector: #shouldStyle!

!methodRemoval: Workspace #shouldStyle stamp: 'Install-6617-isTextStylingEnabled-not-shouldStyle-JuanVuletich-2024Aug22-10h51m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle

	^shouldStyle ifNil: [ Preferences at: #shoutInWorkspaces]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6617-isTextStylingEnabled-not-shouldStyle-JuanVuletich-2024Aug22-10h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6617] on 22 August 2024 at 2:54:54 pm'!
!TextModel methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:18:19'!
  aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."! !
!TextModel methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 12:25:44'!
       stylesText
	"Answer true to allow styling to proceed, or false to veto the styling"

	^(Preferences at: #syntaxHighlightingAsYouType)
		and: [ self textStylerClass notNil ].! !
!PluggableTextModel methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:18:31' overrides: 50368860!
          aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly."

	textProvider aboutToStyleWith: anSHTextStyler.! !
!PluggableTextModel methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 12:26:24' overrides: 50368866!
                           stylesText
	"Answer true to allow styling to proceed, or false to veto the styling"

	^(Preferences at: #syntaxHighlightingAsYouType) and: [
		self textStylerClass notNil and: [
			textProvider allowsStyling ]].! !
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:18:36' overrides: 50368860!
             aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."

	anSHTextStyler 
		classOrMetaClass: nil;
		workspace: self.! !
!Workspace methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 12:26:38' overrides: 50368866!
                     stylesText
	"Answer true to allow styling to proceed, or false to veto the styling"

	^(Preferences at: #syntaxHighlightingAsYouType) and: [
		self textStylerClass notNil and: [
			self isTextStylingEnabled ]].! !
!TextProvider methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:43'!
                               allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling.
	Not even asked if text stylyng makes no sense for this model.
	True by default."

	^true! !
!CodeProvider methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:49:58'!
 aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly."

	anSHTextStyler classOrMetaClass: self selectedClassOrMetaClass.! !
!CodeProvider methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:46' overrides: 50368916!
                allowsStyling
	"Answer false if showing difs, to veto the styling."

	^self showingAnyKindOfDiffs not! !
!Browser methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:57:53' overrides: 50368924!
                             aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly."

	anSHTextStyler classOrMetaClass:
		((#(editClass newClass) includes: self editSelection)  ifFalse:[
			self selectedClassOrMetaClass ]). "nil for class definitions"! !
!Browser methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:49' overrides: 50368936!
                allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	| type |
	self isModeStyleable ifFalse: [^false].
	type := self editSelection.
	^ #(newMessage editMessage editClass newClass) includes: type.! !
!CodeFileBrowser methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:52' overrides: 50368958!
                   allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!MethodSet methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:55' overrides: 50368936!
                  allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!ChangeList methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:46:57' overrides: 50368936!
                 allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	listIndex = 0 ifFalse: [
		(changeList at: listIndex) changeType = #method ifTrue: [
			self selectedClassOrMetaClass ifNotNil: [ :cl |
				^true ]]].
	^false! !
!ChangeSorter methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:47:00' overrides: 50368936!
                             allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	^self currentSelector notNil! !
!Debugger methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:19:02' overrides: 50368924!
   aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly."

	anSHTextStyler 
		classOrMetaClass: 
			(self selectedContext selector = Scanner doItSelector ifFalse: [
				self selectedClassOrMetaClass]); "nil for DoIts"
		workspace: self.! !
!Debugger methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:47:03' overrides: 50368936!
   allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!Inspector methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:19:05'!
      aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."

	anSHTextStyler workspace: self.! !
!ObjectExplorer methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:19:52'!
aboutToStyleWith: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."

	anSHTextStyler workspace: self.! !
!ObjectExplorer methodsFor: 'shout styling' stamp: 'jmv 8/22/2024 11:47:06'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^true! !
!Compiler class methodsFor: 'user interface support' stamp: 'jmv 8/22/2024 12:28:16' prior: 16836410!
                        textStylerClass

	^SHTextStylerST80! !
!TextModel methodsFor: 'user interface support' stamp: 'jmv 8/22/2024 12:22:18' prior: 16982836!
                        convertAndStyleIfNeededWith: anSHTextStyler

	self aboutToStyleWith: anSHTextStyler.
	self styleByParagraphs
		ifTrue: [ self convertAndStyleIByParagraphsWith: anSHTextStyler ]
		ifFalse: [ 	self convertAndStyleAllWith: anSHTextStyler ]	.! !
!TextModel methodsFor: 'user interface support' stamp: 'jmv 8/22/2024 12:27:57' prior: 16982863!
             textStylerClass

	^nil! !
!PluggableTextModel methodsFor: 'user interface support' stamp: 'jmv 8/22/2024 12:27:48' prior: 16925389 overrides: 50369062!
        textStylerClass

	^textProvider textStylerClassFor: textGetter! !
!Workspace methodsFor: 'user interface support' stamp: 'jmv 8/22/2024 12:28:08' prior: 17006888 overrides: 50369062!
         textStylerClass

	^SHTextStylerST80! !
!InnerTextMorph methodsFor: 'private' stamp: 'jmv 8/22/2024 12:23:55' prior: 50348745!
  installEditorAndTextComposition
	"Install an editor for my textComposition. Install also the textComposition."
	| e tc |
	
	"Editor and TextComposition are assigned here atomically."
	e := model editorClass new morph: self.
	e model: model.
	tc := TextComposition new.
	"Keep critical section short"
	self mutex critical: [
		editor := e.
		textComposition := tc.
		tc
			setModel: model;
			extentForComposing: self extentForComposing.
		e textComposition: tc.
		tc editor: e ].
	e setEmphasisHereFromText.
	tc composeAll.
	e resetState.
	self fit.
	self selectionChanged.
	self possiblyChanged.

	"Add extras. Text Styler and Autocompleter"
	self stylerClass: (model stylesText ifTrue: [model textStylerClass]).
	self autoCompleterClass: model autoCompleterClass.! !
!InnerTextMorph methodsFor: 'shout' stamp: 'jmv 8/22/2024 12:22:08' prior: 16881672!
          convertAndStyleIfNeeded
	"Apply both converting (changes to the characters in the text, such as 	preferred assignment operators),
	and styling (TextAttributes to make Smalltalk code easier to understand)"

	| previousSize delta isAtEnd |
	previousSize := model actualContents size.
	isAtEnd := editor stopIndex > previousSize.
	model stylesText ifTrue: [
		model convertAndStyleIfNeededWith: styler ].
	delta := model actualContents size - previousSize.
	(isAtEnd and: [ delta < 0 ]) ifTrue: [
		delta := 0].
	delta = 0 ifFalse: [
		editor moveCursor: [ :p | p+delta] forward: delta>0 event: nil ].! !

ObjectExplorer removeSelector: #shouldStyle:with:!

!methodRemoval: ObjectExplorer #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Answer true to allow styling to proceed, or false to veto the styling"

	anSHTextStyler workspace: self.
	^true!

Inspector removeSelector: #shouldStyle:with:!

!methodRemoval: Inspector #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Answer true to allow styling to proceed, or false to veto the styling"

	anSHTextStyler workspace: self.
	^(text = self acceptedContents) not!

Debugger removeSelector: #shouldStyle:with:!

!methodRemoval: Debugger #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	anSHTextStyler 
		classOrMetaClass: 
			(self selectedContext selector = Scanner doItSelector ifFalse: [
				self selectedClassOrMetaClass]); "nil for DoIts"
		workspace: self.
	^true!

ChangeSorter removeSelector: #shouldStyle:with:!

!methodRemoval: ChangeSorter #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	self currentSelector ifNil: [^false].
	anSHTextStyler classOrMetaClass: self selectedClassOrMetaClass.
	^true!

ChangeList removeSelector: #shouldStyle:with:!

!methodRemoval: ChangeList #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"
	
	self isModeStyleable ifFalse: [^false].
	listIndex = 0 ifFalse: [
		(changeList at: listIndex) changeType = #method ifTrue: [
			self selectedClassOrMetaClass ifNotNil: [ :cl |
				anSHTextStyler classOrMetaClass: cl.
				^true ]]].
	^false!

MethodSet removeSelector: #shouldStyle:with:!

!methodRemoval: MethodSet #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"
	
	self isModeStyleable ifFalse: [ ^false ].
	anSHTextStyler classOrMetaClass: self selectedClassOrMetaClass.
	^true!

CodeFileBrowser removeSelector: #shouldStyle:with:!

!methodRemoval: CodeFileBrowser #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	anSHTextStyler classOrMetaClass: self selectedClassOrMetaClass.
	^true!

Browser removeSelector: #shouldStyle:with:!

!methodRemoval: Browser #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"
	| type |
	
	self isModeStyleable ifFalse: [^false].
	type := self editSelection.
	(#(newMessage editMessage editClass newClass) includes: type) ifFalse:[^false].
	anSHTextStyler classOrMetaClass: ((#(editClass newClass) includes: type)  ifFalse:[
		self selectedClassOrMetaClass]).
	^true!

CodeProvider removeSelector: #shouldStyle:with:!

!methodRemoval: CodeProvider #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Answer false if showing difs, to veto the styling."
	
	^self showingAnyKindOfDiffs not!

Workspace removeSelector: #shouldStyle:with:!

!methodRemoval: Workspace #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text."

	self isTextStylingEnabled ifFalse: [ ^false ].
	anSHTextStyler 
		classOrMetaClass: nil;
		workspace: self.
	^true!

PluggableTextModel removeSelector: #shouldStyle:with:!

!methodRemoval: PluggableTextModel #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: text with: anSHTextStyler
	"This is a notification that anSHTextStyler is about to re-style its text.
	Set the classOrMetaClass in anSHTextStyler, so that identifiers
	will be resolved correctly.
	Answer true to allow styling to proceed, or false to veto the styling"
	^textProvider shouldStyle: text with: anSHTextStyler!

TextModel removeSelector: #shouldStyle:with:!

!methodRemoval: TextModel #shouldStyle:with: stamp: 'Install-6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st 8/23/2024 20:13:19'!
shouldStyle: aText with: aSHTextStylerST80 
	
	^true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6618-CodeStylingRefactor-JuanVuletich-2024Aug22-14h48m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6620] on 22 August 2024 at 4:38:26 pm'!
!TextEditor methodsFor: 'accessing' stamp: 'jmv 8/22/2024 16:37:47' prior: 16980175!
                    replaceSelectionWith: aTextOrString
	"Deselect, and replace the selection text by aText."
	"This is a user command, and generates undo"

	| start stop replacement |

	morph disablesEditing ifTrue: [
		^ self ].

	start := self startIndex.
	stop := self stopIndex.
	(aTextOrString isEmpty and: [stop > start]) ifTrue: [
		"If deleting, then set emphasisHere from 1st character of the deletion"
		emphasisHere := (model actualContents attributesAt: start) select: [:att |
			att mayBeExtended]].

	(start = stop and: [ aTextOrString isEmpty ]) ifFalse: [
		replacement := self addAttributesForPasting: aTextOrString.
		model logUndoAndReplaceFrom: start to: stop - 1 with: replacement.
		textComposition
			recomposeFrom: start
			to:  start + replacement size - 1
			delta: replacement size - (stop-start).
		self deselectAndPlaceCursorAt: start + replacement size.
		self userHasEdited.  " -- note text now dirty"
		morph updateFromTextComposition ].

	morph possiblyChanged! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6619-Editor-fixMissingRefresh-JuanVuletich-2024Aug22-16h37m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6619] on 22 August 2024 at 4:42:38 pm'!
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 8/22/2024 16:40:55' prior: 50368773 overrides: 16851781!
                       paste
	| objectName |
	
	model canBindVariables ifTrue: [
		"Not pasting String or Text, but some other object.
		Create a Workspace variable pointing to original object (Not a copy!!!!!!)"
		Clipboard contentsOriginalObject ifNotNil: [ :object |
			objectName := model nameForObject: object.
			(model bindingOf: objectName) value: object.
			self replaceSelectionWith: objectName.
			^ self ]].
	self pasteString.! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/22/2024 16:41:38' prior: 50360664 overrides: 50360509!
    defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((240				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon 							'Save')) ]
		ifFalse: [ #((240 				'Accept' 					nil 	editor 			nil 						acceptIcon 							'Save')) ].
	^#(
		#(0 		'Smalltalk Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
		#(20 		'-----')
		#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
		#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
		#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
		#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon
					'Inspect via Object Explorer')
		#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon
					'Debug it')
		#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
		#(90 		'-----')
		#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
		#(110 		'-----')
		#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
		#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
		#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
		#(170 		'-----')
		#(180		'Refactorings' 							nil 	nil 			2000 						listAddIcon)
		#(190 		'-----')
		#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
		#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
		#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
		#(230 		'-----')
	),
	acceptEntry,
	#(
		#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
		#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
		#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')

		" 'Edit' SubMenu"
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon 									'Find')
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 									'Find again')
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 									'Set selection as search string for find again')
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 									'Undo (multiple levels)')
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 									'Redo (multiple levels)')
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 									'Copy selection to the Clipboard')
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon 									'Cut selection and store it in the Clipboard')
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 									'Paste Clipboard contents')
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 									'Set font')
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)

		"Keyboard shortcuts only"
		#(1500		nil 							$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 							$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 							$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 							$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 							$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 							$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 							$T 	editor 			displayIfTrue)
		#(1511		nil 							$F 	editor 			displayIfFalse)
		#(1601 		nil 							$a 	editor 			selectAll 									nil 		'Select all')
		#(1602 		nil 							$C 	editor 			compareToClipboard 									nil 		'Compare argument to clipboard')
		#(1603 		nil 							$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 							$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 							$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 							$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')

		" 'Refactorings' SubMenu"
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon 				'Renames what is under cursor')
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon 				'Extracts the selected code as parameter')
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon 				'Adds parameter to message that is under cursor')
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon 'Removes parameter to message that is under cursor')
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon 				'Extracts the selected code into a temporary variable')
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon 				'Extracts the selected code into a separate method')
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon 				'Inlines the selected temporary variable into each usage')
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon  				'Inlines the selected message send into desired colaborations')
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon 				'Extracts temporary variable to instance variable')
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6620-SmalltalkEditor-pastesStringNotText-JuanVuletich-2024Aug22-16h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6620] on 23 August 2024 at 10:01:10 am'!
!TextProvider methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:35:11'!
                            allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling.
	Not even asked if text stylyng makes no sense for this model.
	True by default."

	^true! !
!CodeProvider methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:14' overrides: 50369687!
   allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer false if showing difs, to veto the styling."

	^self showingAnyKindOfDiffs not! !
!Browser methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:21' overrides: 50369697!
                   allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	| type |
	self isModeStyleable ifFalse: [^false].
	type := self editSelection.
	^ #(newMessage editMessage editClass newClass) includes: type.! !
!CodeFileBrowser methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:25' overrides: 50369705!
         allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!MethodSet methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:28' overrides: 50369697!
        allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!ChangeList methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:31' overrides: 50369697!
       allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	listIndex = 0 ifFalse: [
		(changeList at: listIndex) changeType = #method ifTrue: [
			self selectedClassOrMetaClass ifNotNil: [ :cl |
				^true ]]].
	^false! !
!ChangeSorter methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:34' overrides: 50369697!
                   allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	^self currentSelector notNil! !
!Debugger methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:34:37' overrides: 50369697!
                         allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable! !
!Inspector methodsFor: 'as yet unclassified' stamp: 'jmv 8/23/2024 09:36:15' overrides: 50369687!
  allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling.
	Not even asked if text stylyng makes no sense for this model.
	True by default."

	selector = #acceptedContents ifTrue: [
		^hasUnsavedEdits ].

	^true! !
!ObjectExplorer methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:32:36'!
                      allowsStylingFor: selector isTextDirty: hasUnsavedEdits
	"Answer true to allow styling to proceed, or false to veto the styling"

	^true! !
!Compiler class methodsFor: 'user interface support' stamp: 'jmv 8/23/2024 09:42:54' prior: 50369046!
              textStylerClass

	(Preferences at: #syntaxHighlightingAsYouType)
		ifFalse: [ ^nil ].
	^SHTextStylerST80! !
!PluggableTextModel methodsFor: 'shout styling' stamp: 'jmv 8/23/2024 09:33:29' prior: 50368887 overrides: 50368866!
                               stylesText
	"Answer true to allow styling to proceed, or false to veto the styling"

	^(Preferences at: #syntaxHighlightingAsYouType) and: [
		self textStylerClass notNil and: [
			textProvider allowsStylingFor: textGetter isTextDirty: self isDirty ]].! !
!Workspace methodsFor: 'user interface support' stamp: 'jmv 8/23/2024 09:42:35' prior: 50369073 overrides: 50369062!
           textStylerClass

	(Preferences at: #syntaxHighlightingAsYouType)
		ifFalse: [ ^nil ].
	^SHTextStylerST80! !
!CodeProvider methodsFor: 'user interface support' stamp: 'jmv 8/23/2024 09:42:11' prior: 16826580 overrides: 16983635!
                            textStylerClassFor: textGetter

	(Preferences at: #syntaxHighlightingAsYouType)
		ifFalse: [ ^nil ].
	textGetter = #acceptedContents ifFalse: [
		^super textStylerClassFor: textGetter ].
	currentCompiledMethod ifNotNil: [ :cm |
		^cm compilerClass textStylerClass ].
	^SHTextStylerST80! !
!Inspector methodsFor: 'user interface support' stamp: 'jmv 8/23/2024 09:42:18' prior: 16882863 overrides: 16983635!
          textStylerClassFor: textGetter

	(Preferences at: #syntaxHighlightingAsYouType)
		ifFalse: [ ^nil ].
	^SHTextStylerST80! !
!ObjectExplorer methodsFor: 'user interface support' stamp: 'jmv 8/23/2024 09:42:21' prior: 16916417 overrides: 16915835!
           textStylerClassFor: textGetter

	(Preferences at: #syntaxHighlightingAsYouType)
		ifFalse: [ ^nil ].
	^SHTextStylerST80! !
!InnerTextMorph methodsFor: 'private' stamp: 'jmv 8/23/2024 09:43:12' prior: 50369077!
              installEditorAndTextComposition
	"Install an editor for my textComposition. Install also the textComposition."
	| e tc |
	
	"Editor and TextComposition are assigned here atomically."
	e := model editorClass new morph: self.
	e model: model.
	tc := TextComposition new.
	"Keep critical section short"
	self mutex critical: [
		editor := e.
		textComposition := tc.
		tc
			setModel: model;
			extentForComposing: self extentForComposing.
		e textComposition: tc.
		tc editor: e ].
	e setEmphasisHereFromText.
	tc composeAll.
	e resetState.
	self fit.
	self selectionChanged.
	self possiblyChanged.

	"Add extras. Text Styler and Autocompleter"
	self stylerClass: model textStylerClass.
	self autoCompleterClass: model autoCompleterClass.! !

ObjectExplorer removeSelector: #allowsStyling!

!methodRemoval: ObjectExplorer #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^true!

Debugger removeSelector: #allowsStyling!

!methodRemoval: Debugger #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable!

ChangeSorter removeSelector: #allowsStyling!

!methodRemoval: ChangeSorter #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	^self currentSelector notNil!

ChangeList removeSelector: #allowsStyling!

!methodRemoval: ChangeList #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	self isModeStyleable ifFalse: [^false].
	listIndex = 0 ifFalse: [
		(changeList at: listIndex) changeType = #method ifTrue: [
			self selectedClassOrMetaClass ifNotNil: [ :cl |
				^true ]]].
	^false!

MethodSet removeSelector: #allowsStyling!

!methodRemoval: MethodSet #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable!

CodeFileBrowser removeSelector: #allowsStyling!

!methodRemoval: CodeFileBrowser #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	^self isModeStyleable!

Browser removeSelector: #allowsStyling!

!methodRemoval: Browser #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling"

	| type |
	self isModeStyleable ifFalse: [^false].
	type := self editSelection.
	^ #(newMessage editMessage editClass newClass) includes: type.!

CodeProvider removeSelector: #allowsStyling!

!methodRemoval: CodeProvider #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer false if showing difs, to veto the styling."

	^self showingAnyKindOfDiffs not!

TextProvider removeSelector: #allowsStyling!

!methodRemoval: TextProvider #allowsStyling stamp: 'Install-6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st 8/23/2024 20:13:20'!
allowsStyling
	"Answer true to allow styling to proceed, or false to veto the styling.
	Not even asked if text stylyng makes no sense for this model.
	True by default."

	^true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6621-Inspector-TextStyling-fix-JuanVuletich-2024Aug23-09h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6620] on 23 August 2024 at 9:56:23 am'!
!SinglePackageBrowser methodsFor: 'lists' stamp: 'jmv 8/23/2024 09:52:15' prior: 50349871 overrides: 50349860!
  basicClassList
	"Answer an array of the class names of the selected category. Answer an 
	empty array if no selection exists."
	| answer |
	answer := selectedSystemCategory
		ifNil: [#()]
		ifNotNil: [
			(package includesSystemCategory: selectedSystemCategory)
				ifTrue: [ systemOrganizer fullListAtCategoryNamed: selectedSystemCategory ]
				ifFalse: [ 
					package extensionClassNamesIn:
						(selectedSystemCategory copyFrom: 2 to: selectedSystemCategory size) ]].
	selectedClassName ifNil: [
		answer isEmpty ifFalse: [
			selectedClassName := answer first.
			self setClassOrganizer.
			self editSelection: #editClass ]].
	^answer! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6622-InstalledPackageBrowser-rootCategoriesNodeShowsAll-JuanVuletich-2024Aug23-09h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6622] on 23 August 2024 at 3:06:46 pm'!
!TTFontReader methodsFor: 'processing' stamp: 'jmv 8/23/2024 14:57:38' prior: 16972576!
     mapAndStoreGlyphsUsing: characterMap
	"
	https://developer.apple.com/fonts/TrueType-Reference-Manual/RM07/appendixB.html
	"
	| glyphsByUTF8 unknownGlyph nullGlyph spaceGlyph mapSize preferredCodePoint arrowGlyphIndexes leftArrowGlyph upArrowGlyph rightArrowGlyph downArrowGlyph carriageReturnGlyph leftArrowGlyphCodePoint upArrowGlyphCodePoint rightArrowGlyphCodePoint downArrowGlyphCodePoint carriageReturnGlyphCodePoint |
	unknownGlyph := glyphs first.
	nullGlyph := glyphs second.
	mapSize := characterMap size.
	glyphsByUTF8 := Array new: 256.
	leftArrowGlyphCodePoint := self class smalltalkAssignmentArrowGlyphCodePoint.
	upArrowGlyphCodePoint := self class smalltalkReturnArrowGlyphCodePoint.
	rightArrowGlyphCodePoint := 8594.
	downArrowGlyphCodePoint := 8595.
	carriageReturnGlyphCodePoint := 8617.
	
	"Store Unicode arrow glyphs for future use if appropriate,"
	(FallbackArrowGlyphs isNil or: [fontDescription name = 'DejaVuSans']) ifTrue: [
		mapSize > 8617 ifTrue: [								"Usually true. Just in case."
			arrowGlyphIndexes := {leftArrowGlyphCodePoint. upArrowGlyphCodePoint. rightArrowGlyphCodePoint. downArrowGlyphCodePoint. carriageReturnGlyphCodePoint}
					collect: [ :codePoint | (characterMap at: codePoint+1)+1 ].
				(arrowGlyphIndexes allSatisfy: [ :i | i > 1 ]) ifTrue: [
					FallbackArrowGlyphs := arrowGlyphIndexes collect: [ :i | glyphs at: i ]]]].
	"Take arrow glyphs if present, or use fallbacks if not."
	leftArrowGlyph := upArrowGlyph := rightArrowGlyph := downArrowGlyph := carriageReturnGlyph := unknownGlyph.
	mapSize > downArrowGlyphCodePoint ifTrue: [
		leftArrowGlyph := glyphs at: (characterMap at: leftArrowGlyphCodePoint+1)+1.
		upArrowGlyph := glyphs at: (characterMap at: upArrowGlyphCodePoint+1)+1.
		rightArrowGlyph := glyphs at: (characterMap at: rightArrowGlyphCodePoint+1)+1.
		downArrowGlyph := glyphs at: (characterMap at: downArrowGlyphCodePoint+1)+1 ].
	leftArrowGlyph == unknownGlyph ifTrue: [ leftArrowGlyph := FallbackArrowGlyphs at: 1 ].
	upArrowGlyph == unknownGlyph ifTrue: [ upArrowGlyph := FallbackArrowGlyphs at: 2 ].
	rightArrowGlyph == unknownGlyph ifTrue: [ rightArrowGlyph := FallbackArrowGlyphs at: 3 ].
	downArrowGlyph == unknownGlyph ifTrue: [ downArrowGlyph := FallbackArrowGlyphs at: 4 ].
	mapSize > carriageReturnGlyphCodePoint ifTrue: [
		carriageReturnGlyph := glyphs at: (characterMap at: carriageReturnGlyphCodePoint+1)+1 ].
	carriageReturnGlyph == unknownGlyph ifTrue: [ carriageReturnGlyph := FallbackArrowGlyphs at: 5 ].

	0 to: mapSize - 1 do: [ :codePoint | | g array prevByte|

		preferredCodePoint := codePoint.
		(codePoint = $- codePoint and: [mapSize > 16r2212]) ifTrue: [ preferredCodePoint := 16r2212 ]. "WIDE MINUS"
		(codePoint = $* codePoint and: [mapSize > 16r2217]) ifTrue: [ preferredCodePoint := 16r2217 ]. "CENTERED ASTERISK"
		g := glyphs at: (characterMap at: preferredCodePoint+1)+1 ifAbsent: [ unknownGlyph ].
		g == unknownGlyph ifTrue: [
			g := glyphs at: (characterMap at: codePoint+1)+1 ifAbsent: [ unknownGlyph ]].

		array := glyphsByUTF8.
		prevByte := nil.
		Character
			evaluate: [ :byte |
				prevByte notNil ifTrue: [
					array := (array at: prevByte+1) ifNil: [ array at: prevByte+1 put: (Array new: 256) ].
					].
				prevByte := byte.
				]
			withUtf8BytesOf: codePoint.
			array at: prevByte+1 put: g.
		codePoint = 32 ifTrue: [
			spaceGlyph := g ].

		].

	"Synthetic Unicode zero width space glyph. Add others as needed."
	{ Character zeroWidthSpace } do: [ :codePoint | | g array prevByte|
		g := TTGlyph new.					"Suitable as zero width space"
		array := glyphsByUTF8.
		prevByte := nil.
		Character
			evaluate: [ :byte |
				prevByte notNil ifTrue: [
					array := (array at: prevByte+1) ifNil: [ array at: prevByte+1 put: (Array new: 256) ]].
				prevByte := byte ]
			withUtf8BytesOf: codePoint codePoint.
			array at: prevByte+1 put: g ].

	Character separators do: [ :s |
		s codePoint < 256 ifTrue: [
			glyphsByUTF8 at: s codePoint +1 put: spaceGlyph ]].
	1 to: 4 do: [ :i |			glyphsByUTF8 at: 28+i put: i ].
	glyphsByUTF8 at: 13 +1 put: carriageReturnGlyph.
	fontDescription
		glyphsByUtf8Bytes: glyphsByUTF8
		unknownGlyph: unknownGlyph scaleArrowGlyphs: {leftArrowGlyph. rightArrowGlyph. upArrowGlyph. downArrowGlyph. carriageReturnGlyph}! !
!TTFontDescription methodsFor: 'private-initialization' stamp: 'jmv 8/23/2024 15:35:18' prior: 16972190!
  appendGlyphDataTo: stream glyphsArray: glyphsArray indexes: indexes base: baseIndex	 bar: aProgressBarOrNil unknown: theUnknownGlyph scaleArrowGlyphs: arrowGlyphs

		glyphsArray withIndexDo: [ :glyphOrArrayOrNumberNil :index |
			aProgressBarOrNil ifNotNil: [ :bar | bar value: index ].
			glyphOrArrayOrNumberNil ifNotNil: [
				glyphOrArrayOrNumberNil == theUnknownGlyph
					ifTrue: [ indexes at: baseIndex + index put: 1 ]
					ifFalse: [
						glyphOrArrayOrNumberNil isArray
							ifTrue: [
								| nextBaseIndex |
								nextBaseIndex := indexes size - 128.
								indexes addAll: (IntegerArray new: 64).
								indexes at: baseIndex + index put: nextBaseIndex negated.
								self appendGlyphDataTo: stream glyphsArray: glyphOrArrayOrNumberNil indexes: indexes
									base: nextBaseIndex bar: nil unknown: theUnknownGlyph scaleArrowGlyphs: arrowGlyphs ]
							ifFalse: [
								glyphOrArrayOrNumberNil isNumber
									ifTrue: [ | glyph tx |
										glyph := arrowGlyphs at: glyphOrArrayOrNumberNil.
										tx := AffineTransformation withScale: letterMTopSideBearing asFloat / arrowGlyphs second topSideBearing * 0.7.
										indexes at: baseIndex + index put: stream position+1.
										glyph addGlyphDataTo: stream tx: tx
										]
									ifFalse: [
										indexes at: baseIndex + index put: stream position+1.
										glyphOrArrayOrNumberNil addGlyphDataTo: stream tx: nil ]]]]].! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 8/23/2024 14:47:14' prior: 50332221!
smalltalkRightArrow
	"
	The use of code 29 for a right arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text.
	Cuis holds a right arrow glyph at this code. This is for possible future use.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkRightArrow
	"
	^ `Character codePoint: 29`! !
!Character class methodsFor: 'accessing untypeable characters' stamp: 'jmv 8/23/2024 14:47:36' prior: 50332238!
         smalltalkUpArrow
	"
	The use of code 30 for an up arrow is not part of the ASCII or Unicode standards.
	This code is generally not used in text files.

	Cuis holds an up arrow glyph at this code, that is only used to show $^ as an up arrow,
	when used for return from a Smalltalk method.
	Note that it will be replaced by $^ when saving code files or exporting to OS clipboard.
	Browse senders to see how this works.

	The actual glyph used is decided by the TrueType font. See #mapAndStoreGlyphsUsing:
		and references to FallbackArrowGlyphs.

	Character smalltalkUpArrow
	"
	^ `Character codePoint: 30`! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
TrueTypeFontFamily readAllTrueTypeFontsIn: DirectoryEntry trueTypeFontsDirectory / 'DejaVu' / 'DejaVuSans'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6623-MakeSmalltalkArrowsConsistentWithKeyCodes-part1-JuanVuletich-2024Aug23-14h46m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6623] on 23 August 2024 at 3:16:52 pm'!
!Scanner class methodsFor: 'class initialization' stamp: 'jmv 8/23/2024 15:12:25' prior: 16945267 overrides: 16916245!
          initialize
	"
	Scanner initialize.
	"
	self initTypeTable.
	self initializeDoitCharacter.! !
!Scanner class methodsFor: 'cached class state' stamp: 'jmv 8/23/2024 15:15:34' prior: 16945283!
  initTypeTable
	| newTable |
	newTable := Array new: 127 withAll: #xIllegal. "default"
	newTable atAll: #(9 10 12 13 32 ) put: #xDelimiter. "tab lf ff cr space"
	newTable atAll: '!!%&+-*/\,<=>?@~' asByteArray put: #xBinary.
	1 to: 127 do: [:index |
		(Character codePoint: index) isLetter ifTrue: [
			newTable at: index put: #xLetter ]].
	newTable atAll: ($0 codePoint to: $9 codePoint) put: #xDigit.
	newTable at: self doItCharacterValue put: #doIt.
	newTable at: $" codePoint put: #xDoubleQuote.
	newTable at: $# codePoint put: #xLitQuote.
	newTable at: $$ codePoint put: #xDollar.
	newTable at: $' codePoint put: #xSingleQuote.
	newTable at: $` codePoint put: #xBacktick.
	newTable at: $: codePoint put: #xColon.
	newTable at: $( codePoint put: #leftParenthesis.
	newTable at: $) codePoint put: #rightParenthesis.
	newTable at: $. codePoint put: #period.
	newTable at: $; codePoint put: #semicolon.
	newTable at: $[ codePoint put: #leftBracket.
	newTable at: $] codePoint put: #rightBracket.
	newTable at: ${ codePoint put: #leftBrace.
	newTable at: $} codePoint put: #rightBrace.
	newTable at: $^ codePoint put: #upArrow.
	newTable at: $_ codePoint put: #xUnderscore.
	newTable at: $| codePoint put: #verticalBar.
	newTable at: Character smalltalkLeftArrow codePoint put: #leftArrow.
	newTable at: Character smalltalkUpArrow codePoint put: #upArrow.
	TypeTable := newTable "bon voyage!!"

	"
	Scanner initTypeTable
	"! !
!Workspace methodsFor: 'accessing' stamp: 'jmv 8/23/2024 15:14:37' prior: 50355914 overrides: 50355909!
       contentsForFileSaving
	"See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:
	See also CodeProvider class >> #normalizeCodeForSaving:in:	"
	| normalized |
	normalized := self actualContents asPlainString.
	normalized := normalized copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	normalized := normalized copyReplaceAll: Character smalltalkLeftArrow asString with: ':='.
	normalized := normalized copyReplaceAll: Character smalltalkUpArrow asString with: '^'.
	^normalized.! !
!CodeProvider class methodsFor: 'services' stamp: 'jmv 8/23/2024 15:13:24' prior: 50355935!
 normalizeCodeForSaving: aTextOrString in: aClassOrMetaclass
	"Adapt edited code to be suitable for saving to sources or changes files.
	Answer is a plain text.
	Additionally, if code was modified for better look and edition experience, normalize it.
	This may include reverting to ':=' for assignment, '^' for return, and any replacements of
	ASCII by Unicode symbols done by Shout.
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Clipboard >> #storeObject:
	See also Workspace >> #contentsForFileSaving"

	| answer |
	answer := aTextOrString asPlainString.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkLeftArrow asString` with: ':='.
	answer := answer copyReplaceAll: `Character smalltalkUpArrow asString` with: '^'.
	"Apply code any normalization services. For example, try:
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment1' asSmalltalkComment ].
	CodeProvider addCodeNormalizer: [ :code :cls | cls compilerClass new format: code in: cls notifying: nil. ].
	CodeProvider addCodeNormalizer: [ :code :cls | code, ' 						This is an extra comment2' asSmalltalkComment ].
	""
	CodeProvider clearCodeNormalizers.
	"
	CodeNormalizers ifNotNil: [
		CodeNormalizers do: [ :each |
			answer := each value: answer value: aClassOrMetaclass ]].
	^answer.! !
!Clipboard methodsFor: 'accessing' stamp: 'jmv 8/23/2024 15:13:38' prior: 50356011!
         storeObject: anObject
	"Set new contents on the clipboard. Also export to OS.
	anObject can be a:
		String
		Text
		Form
		Morph
		Object.
	OS clipboard supports String. Other formats might be supported if ExtendedClipboardInterface is present and operative."

	| primitiveFormat id |

	"Store a copy of the object. This is appropriate in case the original object is modified after being copied to the clipboard.
	Another copy must be made again when pasting, as the same object could be pasted many times.
	Besides, store the original object, but weakly (so we don't prevent it GCed). The original object might be used in workspaces."
	(anObject isString or: [ anObject is: #Text])
		ifTrue: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: nil ]
		ifFalse: [
			contents := anObject copyForClipboard.
			contentsOriginalObjectWeakly at: 1 put: anObject ].
	
	self noteRecentClipping: contents.

	"Store on OS clipboard using ExtendedClipboardInterface if present.
	Warning: This has not yet been adapted to UTF-8 Unicode"
	self extendedClipboardInterface ifNotNil: [ :interface |
		interface canStore ifTrue: [
			id := self idFor: contents.
			contents isString
				ifTrue: [ ^interface storeString: contents id: id ].
			(contents is: #Text)
				ifTrue: [ ^interface storeText: contents id: id ].
			(contents is: #Form)
				ifTrue: [ ^interface storeForm: contents id: id ].
			(contents is: #Morph)
				ifTrue: [ ^interface storeForm: (contents imageForm: 32) id: id ].
			^interface storeString: contents asString id: id ]].

	"Otherwise use the clipboard primitives in the VM"
	"The VM uses UTF-8 for clipboard"
	primitiveFormat := self stringOrIdFor: contents.
	"See also CodeProvider class >> #normalizeCodeForSaving:in:	
	See also SHTextStylerST80 >> #privateConvertAssignmentsOffset:
	See also Workspace >> #contentsForFileSaving"
	primitiveFormat := primitiveFormat copyReplaceAll: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString` with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkLeftArrow asString with: ':='.
	primitiveFormat := primitiveFormat copyReplaceAll: Character smalltalkUpArrow asString with: '^'.
	primitiveFormat := primitiveFormat asUtf8Bytes.
	self primitiveClipboardString: primitiveFormat.! !
!SmalltalkEditor methodsFor: 'clipboard' stamp: 'jmv 8/23/2024 15:13:46' prior: 50356087 overrides: 16851745!
clipboardStringOrText
	"When pasting possibly external text into Smalltalk code,
	assume any Unicode left and up arrows are meant to be Assignment and Return.
	This is just a help to users. Not really necessary for the system itself."
	| clipContents |
	clipContents := super clipboardStringOrText.
	self replaceUnicodeArrowsWithSmalltalkArrows ifTrue: [
		clipContents := clipContents copyReplaceAll: `(Character codePoint: 16r2190) asString` with: `(Character smalltalkLeftArrow ) asString`.
		clipContents := clipContents copyReplaceAll: `(Character codePoint: 16r2191) asString` with: `(Character smalltalkUpArrow ) asString`.
		].
	^clipContents.! !
!SHParserST80 methodsFor: 'parse' stamp: 'jmv 8/23/2024 15:13:54' prior: 16942495!
                              parseStatement
	(currentToken isNil or: [	currentToken size = 1]) ifTrue: [
		currentTokenFirst = $^ ifTrue: [self scanPast: #return].
		currentTokenFirst = Character smalltalkUpArrow ifTrue: [self scanPast: #return]].
	self parseExpression.! !
!SHTextStylerST80 methodsFor: 'private' stamp: 'jmv 8/23/2024 15:14:01' prior: 50356111 overrides: 16943209!
                              privateConvertAssignmentsOffset: delta
	"See also CodeProvider class >> #normalizeCodeForSaving:in:	
	See also Clipboard >> #storeObject:
	See also Workspace >> #contentsForFileSaving"
	"Turn $_ into a left arrow"

	self
		replaceStringForRangesWithType: #assignment
		with: `Character smalltalkLeftArrow asString`
		offset: delta.
	(Preferences at: #showAssignmentAsLeftArrow)
		ifTrue: [
			"Turn := into a left arrow. Include a #zeroWidthSpace so as not to modify ranges, etc."
			self
				replaceStringForRangesWithType: #ansiAssignment
				with: `Character smalltalkLeftArrow asString, Character zeroWidthSpace asString`
				offset: delta.
			"Turn $^into up arrow"
			self
				replaceStringForRangesWithType: #return
				with: `Character smalltalkUpArrow asString`
				offset: delta ].! !

Scanner initialize!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6624-MakeSmalltalkArrowsConsistentWithKeyCodes-part2-JuanVuletich-2024Aug23-15h12m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6624] on 23 August 2024 at 4:34:05 pm'!
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 16:32:27' prior: 50358268!
                 messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(90 		'-----')
		#(100		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(110		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(120		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(130		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(140 		'-----')
		#(150		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(160		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(170		'implementors of... (m)' 							nil 	window 			browseMessages 									developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(200 		'-----')
		#(210		'inst var refs...' 							nil 	window 			browseInstVarRefs 									instanceIcon)
		#(220		'inst var defs...' 							nil 	window 			browseInstVarDefs 									instanceIcon)
		#(230		'class var refs...' 							nil 	window 			browseClassVarRefs 									classIcon)
		#(240		'class variabless' 							nil 	window 			browseClassVariables 									classIcon)
		#(250		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(260 		'-----')
		#(270		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(280		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(290		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 									switchIcon)
		#(2020		'implementors of sent messages' 								nil 	window 			browseAllMessages 									developmentIcon)
		#(2030 		'-----')
		#(2040		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 									mailForwardIcon)
		#(2050		'local implementors of...' 								nil 	window 			browseLocalImplementors 									classIcon)
		#(2060 		'-----')
		#(2070		'sample instance' 								nil 	window 			makeSampleInstance 									instanceIcon)
		#(2080		'inspect instances' 								nil 	window 			inspectInstances 									inspectIcon)
		#(2090		'inspect subinstances' 								nil 	window 			inspectSubInstances 									inspectIcon)
		#(2100		'change category...' 								nil 	model 			changeCategory 									saveAsIcon)
		#(2110		'select method category (C)' 								$C 	model 			showHomeCategory 									editFindReplaceIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 									changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 									undoIcon)
	)! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 16:33:10' prior: 50358421!
                               messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 								warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 								deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 								editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 								goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 								scriptIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 								fileOutIcon)
			#(100 		'-----')		
			#(110		'senders of... (n)' 									nil 	window 			browseSendersOfMessages 								mailForwardIcon)
			#(120		'implementors of... (m)' 									nil 	window 			browseMessages 								developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 								goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 								clockIcon)

			"Shortcut only. No menu entry."
			#(991		nil 									$m 	window 			browseImplementors)
			#(992		nil 									$n 	window 			browseSenders)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6625-Remove-BrowseProtocol-fromMethodLists-JuanVuletich-2024Aug23-16h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6625] on 23 August 2024 at 6:31:20 pm'!
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 8/23/2024 17:57:19'!
     allImplementorsOf: aSelector subTo: aClass
	"Answer a sorted Collection of all the methods that implement the message
	aSelector in, or below the given class."

	| aSet cls |
	aSet := Set new.
	cls := aClass theNonMetaClass.
	cls withAllSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	cls class withAllSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	^aSet asArray! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 8/23/2024 17:57:08'!
       allImplementorsOf: aSelector superTo: aClass
	"Answer a sorted Collection of all the methods that implement the message
	aSelector in, or above the given class."

	| aSet cls |
	aSet := Set new.
	cls := aClass theNonMetaClass.
	cls withAllSuperclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	cls class withAllSuperclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	^aSet asArray! !
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 8/23/2024 18:09:01'!
   browseAllImplementorsOf: selector subTo: aClass
	"Create and schedule a message browser on each method in or below the given class
	that implements the message whose selector is the argument, selector. For example, 
	Smalltalk browseAllImplementorsOf: #at:put: localTo: Dictionary."

	aClass ifNil: [ ^self inform: 'no class selected' ].
	^self
		browseMessageList: (self allImplementorsOf: selector subTo: aClass)
		name: 'Implementors of ' , selector, ' in ', aClass name, ' and subclasses'! !
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 8/23/2024 18:08:53'!
      browseAllImplementorsOf: selector superTo: aClass
	"Create and schedule a message browser on each method in or above the given class
	that implements the message whose selector is the argument, selector. For example, 
	Smalltalk browseAllImplementorsOf: #at:put: localTo: Dictionary."

	aClass ifNil: [ ^self inform: 'no class selected' ].
	^self
		browseMessageList: (self allImplementorsOf: selector superTo: aClass)
		name: 'Implementors of ' , selector, ' in ', aClass name, ' and superclasses'! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 16:48:47'!
 browseImplementorsOfMessages
	"Present a menu of all messages sent by the currently selected message. 
	Open a message set browser of all implementors of the message chosen."

	self getSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 17:59:00'!
                             browseLocalImplementorsOfMessages
	"Present a menu of all messages sent by the currently selected message. 
	Open a message set browser of all implementors of the message chosen in, above, or below
	the selected class.
	Do nothing if no message is chosen."
	self getSelectorAndSendQuery: #browseAllImplementorsOf:localTo:
		to: Smalltalk
		with: { model selectedClass }! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 17:08:17'!
  browseLocalSenders
	"Browse the senders of the selected method."
	
	model selectedMessageName ifNotNil: [ :selector |
		Smalltalk browseAllCallsOn: selector localTo: model selectedClass  ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 18:02:07'!
                       browseSubImplementors
	"Browse the senders of the selected method."
	
	model selectedMessageName ifNotNil: [ :selector |
		Smalltalk browseAllImplementorsOf: selector subTo: model selectedClass  ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 18:02:16'!
               browseSuperImplementors
	"Browse the senders of the selected method."
	
	model selectedMessageName ifNotNil: [ :selector |
		Smalltalk browseAllImplementorsOf: selector superTo: model selectedClass  ]! !
!SystemDictionary methodsFor: 'retrieving' stamp: 'jmv 8/23/2024 17:56:48' prior: 50350278!
                        allImplementorsOf: aSelector localTo: aClass
	"Answer a sorted Collection of all the methods that implement the message
	aSelector in, above, or below the given class."

	| aSet cls |
	aSet := Set new.
	cls := aClass theNonMetaClass.
	cls withAllSuperAndSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	cls class withAllSuperAndSubclassesDo: [ :class |
		(class includesSelector: aSelector)
			ifTrue: [ aSet add: (MethodReference class: class selector: aSelector) ] ].
	^aSet asArray! !
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 8/23/2024 16:45:51' prior: 16967346!
browseAllCallsOn: aLiteral localTo: aClass
	"Create and schedule a message browser on each method in or below the given class that refers to
	aLiteral. For example, Smalltalk browseAllCallsOn: #open:label:."
	aClass ifNil: [ ^ self inform: 'no selected class' ].
	(aLiteral isKindOf: LookupKey)
		ifTrue: [
			self
				browseMessageList: (aClass allLocalCallsOn: aLiteral)
				name: 'Users of ' , aLiteral key , ' in the full hierarchy of ' , aClass name
				autoHighlight: aLiteral key
				allOccurrences: true ]
		ifFalse: [
			self
				browseMessageList: (aClass allLocalCallsOn: aLiteral)
				name: 'Senders of ' , aLiteral , ' in the full hierarchy of ' , aClass name
				autoHighlight: aLiteral
				allOccurrences: true ].! !
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 8/23/2024 17:58:01' prior: 16967398!
          browseAllImplementorsOf: selector localTo: aClass
	"Create and schedule a message browser on each method in, above, or below the given class
	that implements the message whose selector is the argument, selector. For example, 
	Smalltalk browseAllImplementorsOf: #at:put: localTo: Dictionary."

	aClass ifNil: [ ^self inform: 'no class selected' ].
	^self
		browseMessageList: (self allImplementorsOf: selector localTo: aClass)
		name: 'Implementors of ' , selector, ' in the full hierarchy of ', aClass name! !
!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 8/23/2024 18:28:27' prior: 16826757!
         optionalButtonTuples
	"Answer a tuple buttons, in the format:
			button label
			selector to send
			help message"

	| aList textConstructor |
	textConstructor := [ :string :backgroundColor | 
		string asText addAttribute: (TextBackgroundColor color: backgroundColor) ].

	aList := #(
		(10	'browse'				browseMethodFull									'view this method in a browser'								browseMethodFullAndReplaceMe)
		(11	'senders' 				browseSendersOfMessages									'browse senders of...'								browseSenders)
		(16	'implementors'				browseImplementorsOfMessages									'browse implementors of...' 								browseImplementors)
		(12	'versions'				browseVersions									'browse versions')), 

		((Preferences at: #decorateBrowserButtons)
			ifTrue: [
				{{13	. 'inheritance'.	 #methodInheritance. 	'Browse Method Inheritance

', (textConstructor value: 'green' value: `Color green muchLighter`),': sends to super
', (textConstructor value: 'tan' value: `Color tan`), ': has override(s)
', (textConstructor value: 'mauve' value: `Color blue muchLighter`), ': both of the above
', (textConstructor value: 'pink' value: `Color red muchLighter`), ': is an override but doesn''t call super
', (textConstructor value: 'pinkish tan' value: `Color r: 0.94 g: 0.823 b: 0.673`), ': has override(s), also is an override but doesn''t call super
'. #methodInheritanceAndReplaceMe }}]
			ifFalse: [
				{#(13	'inheritance'		 methodInheritance	 'browse method inheritance'. #methodInheritanceAndReplaceMe)}]),

		#(
		(12	'hierarchy'				browseHierarchy									'browse class hierarchy'								browseHierarchyAndReplaceMe)
		(10	'inst vars'				browseInstVarRefs									'inst var refs...')
		(11	'class vars'				browseClassVarRefs									'class var refs...')
		(10	'show...'				offerWhatToShowMenu									'menu of what to show in lower pane')).

	^ aList! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 17:03:33' prior: 16827188!
  browseSenders
	"Browse the senders of the selected method."
	
	model selectedMessageName ifNotNil: [ :selector |
		Smalltalk browseAllCallsOn: selector ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/23/2024 18:11:36' prior: 16827290!
          methodInheritance
	"Create and schedule a method browser on the inheritance of implementors."

	| list aClassNonMeta isMeta theClassOrMeta aClass sel |
	aClass := model selectedClassOrMetaClass.
	sel := model selectedMessageName.
	aClass ifNil: [ ^ self ].
	sel ifNil: [ ^ self ].
	aClassNonMeta := aClass theNonMetaClass.
	isMeta := aClassNonMeta ~~ aClass.
	list := OrderedCollection new.
	aClass allSuperclasses reverseDo: [ :cl |
		(cl includesSelector: sel) ifTrue: [
			list addLast: (MethodReference class: cl selector: sel) ]].
	aClassNonMeta
		allSubclassesWithLevelDo: [ :cl :level |
			theClassOrMeta := isMeta
				ifTrue: [ cl class ]
				ifFalse: [ cl ].
			(theClassOrMeta includesSelector: sel) ifTrue: [
				list addLast: (MethodReference class: theClassOrMeta selector: sel) ]]
		startingLevel: 0.
	^ Smalltalk
		browseMessageList: list
		name: 'Implementors of ' , sel, ' in ', aClass name, ' and super / sub classes'.! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 17:36:49' prior: 50364547!
                 classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Class List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse protocol (p)' 							$p 	window 			browseFullProtocol 									spreadsheetIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutClass 									fileOutIcon)
		#(60		'run tests (t)' 							$t 	model 			runClassTests 									weatherFewCloudsIcon)
		#(70 		'-----')
		#(80		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(90		'copy class...' 							nil 	model 			copyClass 									copyIcon)
		#(100		'remove class (x)' 							$x 	model 			removeClass 									deleteIcon)
		#(110 		'-----')
		#(120		'show classes hierarchically' 							nil 	model 			enableListClassesHierarchically 									goTopIcon)
		#(130		'show classes alphabetically' 							nil 	model 			enableListClassesAlphabetically 									sendReceiveIcon)
		#(140		'show definition' 							nil 	model 			editClass 									editFindReplaceIcon)
		#(150		'show comment' 							nil 	model 			editComment 									editFindReplaceIcon)
		#(160 		'-----')
		#(170		'class refs (N)' 							$N 	window 			browseClassRefs 									classIcon)
		#(180 		'-----')
		#(190		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$r 	model 			recent)

		" 'refactorings' SubMenu"
		#(1010		'rename class... (R)' 							$R 	model 			renameClass 									saveAsIcon)
		#(1020		'insert superclass...' 							nil 	model 			insertSuperclass 									saveAsIcon)
		#(1030 		'-----')
		#(1040		'add inst var...' 							nil 	model 			addInstVar 									listAddIcon)
		#(1050		'rename inst var...' 							nil 	model 			renameInstVar 									saveAsIcon)
		#(1060		'remove inst var...' 							nil 	model 			removeInstVar 									deleteIcon)
		#(1070		'remove all unreferenced inst var...' 						
											nil 	model 			removeAllUnreferencedInstVar 									deleteIcon)
		#(1080		'push up inst var...' 							nil 	model 			pushUpInstanceVariable 									goTopIcon)
		#(1090		'push down inst var...' 							nil 	model 			pushDownInstanceVariable 									goBottomIcon)
		#(1100 		'-----')
		#(1110		'rename global...' 							nil 	model 			renameGlobal 									saveAsIcon)

		" 'more' SubMenu"
		#(2010		'unsent methods' 							nil 	window 			browseUnusedMethods 									junkIcon
					'browse all methods defined by this class that have no senders')
		#(2020		'unreferenced inst vars' 							nil 	window 			showUnreferencedInstVars 									junkIcon
					'show a list of all instance variables that are not referenced in methods')
		#(2030		'unreferenced class vars' 							nil 	window 			showUnreferencedClassVars 									junkIcon
					'show a list of all class variables that are not referenced in methods')
		#(2040		'subclass template' 							nil 	model 			makeNewSubclass 									classIcon
					'put a template into the code pane for defining of a subclass of this class')
		#(2050 		'-----')
		#(2060		'sample instance' 							nil 	window 			makeSampleInstance 									instanceIcon
					'give me a sample instance of this class, if possible')
		#(2070		'inspect instances' 							nil 	window 			inspectInstances 									inspectIcon
					'open an inspector on all the extant instances of this class')
		#(2080		'inspect subinstances' 							nil 	window 			inspectSubInstances 									inspectIcon
					'open an inspector on all the extant instances of this class and of all of its subclasses')
		#(2090 		'-----')
		#(2100		'create inst var accessors' 							nil 	model 			createInstVarAccessors 									sendReceiveIcon
					'compile instance-variable access methods for any instance variables that do not yet have them')
	)! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 17:37:25' prior: 50370527!
                  messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70 		'-----')
		#(80		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(90		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(100		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(110		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(120 		'-----')
		#(130		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(140		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(150		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 									developmentIcon)
		#(160		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(170		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(180 		'-----')
		#(190		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(200		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(210		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 											switchIcon)
		#(2020 		'-----')
		#(2030		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(2040		'local implementors of...' 								nil 	window 			browseLocalImplementorsOfMessages 											classIcon)
		#(2050 		'-----')
		#(2060		'sample instance' 								nil 	window 			makeSampleInstance 											instanceIcon)
		#(2070		'inspect instances' 								nil 	window 			inspectInstances 											inspectIcon)
		#(2080		'inspect subinstances' 								nil 	window 			inspectSubInstances 											inspectIcon)
		#(2090 		'-----')
		#(2100		'change category...' 								nil 	model 			changeCategory 											saveAsIcon)
		#(2110		'select method category (C)' 								$C 	model 			showHomeCategory 											editFindReplaceIcon)
		#(2120		'change sets with this method' 								nil 	window 			findMethodInChangeSets 											changesIcon)
		#(2130		'revert to previous version' 								nil 	model 			revertToPreviousVersion 											undoIcon)
	)! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 17:37:34' prior: 50345577!
                               classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Class List' 						false)
			#(10 		'delete class from change set (d)' 								$d 	model 			forgetClass 						warningIcon)
			#(20 		'remove class from system (x)' 								$x 	model 			removeClass 						deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 								$b 	window 			browseMethodFull 						editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 								$h 	window 			browseHierarchy 						goTopIcon)
			#(60 		'browse protocol (p)' 								$p 	window 			browseFullProtocol 						spreadsheetIcon)
			#(70 		'-----')		
			#(80 		'class refs (N)' 								$N 	window 			browseClassRefs 						classIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 16:54:08' prior: 50370677!
           messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'delete method from change set (d)' 									$d 	model 			forget 									warningIcon)
			#(20 		'remove method from system (x)' 									$x 	model 			removeMessage 									deleteIcon)
			#(30 		'-----')
			#(40 		'browse full (b)' 									$b 	window 			browseMethodFull 									editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 									$h 	window 			browseHierarchy 									goTopIcon)
			#(60 		'browse method (O)' 									$O 	window 			openSingleMessageBrowser 									scriptIcon)
			#(80 		'-----')		
			#(90 		'fileOut (o)' 									$o 	model 			fileOutMessage 									fileOutIcon)
			#(100 		'-----')		
			#(110		'senders of... (n)' 									nil 	window 			browseSendersOfMessages 									mailForwardIcon)
			#(120		'implementors of... (m)' 									nil 	window 			browseImplementorsOfMessages 									developmentIcon)
			#(130 		'inheritance (i)' 									$i 	window 			methodInheritance 									goDownIcon)
			#(140 		'versions (v)' 									$v 	window 			browseVersions 									clockIcon)

			"Shortcut only. No menu entry."
			#(991		nil 									$m 	window 			browseImplementors)
			#(992		nil 									$n 	window 			browseSenders)
	).
! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 17:38:06' prior: 50358469!
      messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 											preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 											debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 											editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 											goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 											scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 											spreadsheetIcon)
		#(80 		'-----')
		#(90		'fileOut' 							nil 	model 			fileOutMessage 											fileOutIcon)
		#(100		'run test (t)' 							$t 	model 			runMethodTest 											weatherFewCloudsIcon)
		#(110		'debug test (r)' 							$r 	model 			debugMethodTest 											weatherFewCloudsIcon)
		#(120		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 											exploreIcon)
		#(130 		'-----')
		#(140		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 											mailForwardIcon)
		#(150		'local senders of...' 							nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(160		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 											developmentIcon)
		#(170		'local implementors of...' 							nil 	window 			browseLocalImplementorsOfMessages 											developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 											goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 											clockIcon)
		#(200 		'-----')
		#(210		'remove method (x)' 							$x 	model 			removeMessage 											deleteIcon)
		#(220		'more' 							nil 	nil 			2000 											listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 										switchIcon)
		#(2020 		'-----')
		#(2030		'sample instance' 								nil 	window 			makeSampleInstance 										instanceIcon)
		#(2040		'inspect instances' 								nil 	window 			inspectInstances 										inspectIcon)
		#(2050		'inspect subinstances' 								nil 	window 			inspectSubInstances 										inspectIcon)
		#(2060 		'-----')
		#(2070 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 										listRemoveIcon)
		#(2080 		'filter message list...' 								nil 	window 			filterMessageList 										findIcon)
		#(2090		'change category...' 								nil 	model 			changeCategory 										saveAsIcon)
		#(2100		'change sets with this method' 								nil 	window 			findMethodInChangeSets 										changesIcon)
		#(2110		'revert to previous version' 								nil 	model 			revertToPreviousVersion 										undoIcon)
		#(2120 		'-----')
		#(2130 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 										classIcon)
		#(2140 		'sort by class name' 								nil 	model 			sortByClassName 										classIcon)
		#(2150 		'sort by selector' 								nil 	model 			sortBySelector 										scriptIcon)
		#(2160 		'sort by date' 								nil 	model 			sortByDate 										dateIcon)
		#(2170 		'reverse sort' 								nil 	model 			sortReverse 										redoIcon)
	).
! !

CodeWindow removeSelector: #browseSendersOfMethod!

!methodRemoval: CodeWindow #browseSendersOfMethod stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseSendersOfMethod
	"Browse the senders of the selected method."
	
	model selectedMessageName ifNotNil: [ :selector |
		Smalltalk browseAllCallsOn: selector ]!

CodeWindow removeSelector: #browseMessages!

!methodRemoval: CodeWindow #browseMessages stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseMessages
	"Present a menu of all messages sent by the currently selected message. 
	Open a message set browser of all implementors of the message chosen."

	self getSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk!

CodeWindow removeSelector: #browseInstVarDefs!

!methodRemoval: CodeWindow #browseInstVarDefs stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseInstVarDefs 

	model selectedClassOrMetaClass ifNotNil: [ :cls |
		Smalltalk browseInstVarDefs: cls ]!

CodeWindow removeSelector: #browseAllMessages!

!methodRemoval: CodeWindow #browseAllMessages stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseAllMessages
	"Create and schedule a message set browser on all implementors of all the messages sent by the current method."

	| aClass method filteredList |
	model selectedMessageName ifNotNil: [ :aName |
		method := (aClass := model selectedClassOrMetaClass) compiledMethodAt: aName.
		filteredList := method messages reject: 
			[:each | #(new initialize = ) includes: each].
		Smalltalk browseAllImplementorsOfList: filteredList asArray sort
			 title: 'All messages sent in ', aClass name, '.', aName]!

CodeWindow removeSelector: #browseLocalImplementors!

!methodRemoval: CodeWindow #browseLocalImplementors stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseLocalImplementors
	"Present a menu of all messages sent by the currently selected message. 
	Open a message set browser of all implementors of the message chosen in or below
	the selected class.
	Do nothing if no message is chosen."
	self getSelectorAndSendQuery: #browseAllImplementorsOf:localTo:
		to: Smalltalk
		with: { model selectedClass }!

CodeWindow removeSelector: #browseClassVariables!

!methodRemoval: CodeWindow #browseClassVariables stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseClassVariables

	model selectedClass ifNotNil: [ :cls | 
		cls classPool inspectWithLabel: 'Class Variables in ', cls name]!

SystemDictionary removeSelector: #browseInstVarDefs:!

!methodRemoval: SystemDictionary #browseInstVarDefs: stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseInstVarDefs: aClass
	"Copied from browseInstVarRefs.  Should be consolidated some day. 7/29/96 di
	7/30/96 sw: did the consolidation"

	aClass chooseInstVarThenDo:	
		[:aVar | self browseAllStoresInto: aVar from: aClass]!

SystemDictionary removeSelector: #browseAllStoresInto:from:!

!methodRemoval: SystemDictionary #browseAllStoresInto:from: stamp: 'Install-6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st 8/23/2024 20:13:21'!
browseAllStoresInto: instVarName from: aClass
	"Create and schedule a Message Set browser for all the receiver's methods
	or any methods of a subclass/superclass that refer to the instance variable name."

	"self new browseAllStoresInto: 'contents' from: Collection."

	| coll |
	coll := OrderedCollection new.
	aClass withAllSubAndSuperclassesDo: [:class |
		(class whichSelectorsStoreInto: instVarName) do: [:sel |
			coll add: (MethodReference class: class selector: sel)]].
	^ self
		browseMessageList: coll
		name: 'Stores into ' , instVarName
		autoHighlight: instVarName
		allOccurrences: true!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6626-BrowserMenusReduction-JuanVuletich-2024Aug23-18h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6626] on 23 August 2024 at 7:24:44 pm'!
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/23/2024 19:23:29' prior: 50366874!
      addItemTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	"
	See coment at Morph >> #getMenu
	"
	| submenuId menu label target selector arguments iconSymbol helpText menuItem |
	label := itemSpec second.
	label ifNil: [ ^self ]. "Only a keyboard shortcut, not a real menu item."
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ifAbsent: [^self]].
	target := itemSpec fourth
		ifNotNil: [ :targetOrGetter |
			targetOrGetter isSymbol
				ifTrue: [ 	self perform: targetOrGetter ]
				ifFalse: [ targetOrGetter ]]
		ifNil: [ self ].
	selector := itemSpec fifth.
	arguments := (selector isNil or: [ selector numArgs = 0 ])
		ifTrue: [#()]
		ifFalse: [itemSpec size >= 8 ifTrue: [ {itemSpec eighth} ] ifFalse: [ {self} ]].
	menuItem := label isSymbol
		ifTrue: [ menu addUpdating: label target: target action: selector argumentList: arguments ]
		ifFalse: [ menu add: label target: target action: selector argumentList: arguments ].
	selector ifNil: [
		menuItem isEnabled: false ].
	iconSymbol := itemSpec size >= 6 ifTrue: [ itemSpec sixth ].
	iconSymbol ifNotNil: [ menuItem setIcon: iconSymbol ].
	helpText := itemSpec size >= 7 ifTrue: [ itemSpec seventh ].
	helpText ifNotNil: [ menuItem setBalloonText: helpText ].! !
!Morph methodsFor: 'submorphs-menus' stamp: 'jmv 8/23/2024 19:23:46' prior: 50340474!
              addLineTo: topMenu fromSpec: itemSpec submenus: submenusDictionary
	| submenuId menu |
	submenuId := itemSpec first // 1000.
	menu := submenuId = 0 ifTrue: [ topMenu ] ifFalse: [ submenusDictionary at: submenuId ifAbsent: [^self]].
	menu addLine.! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/23/2024 19:20:59' prior: 50369400 overrides: 50360509!
             defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| codeProvider acceptEntry methodEntries |
	codeProvider := self codeProvider.
	((codeProvider is: #CodeProvider) and: [ codeProvider isEditingMethod ])
		ifTrue: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #((240				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon 							'Save')) ]
				ifFalse: [ #((240 				'Accept' 					nil 	editor 			nil 						acceptIcon 							'Save')) ].
			methodEntries := #(
				#(170 		'-----')
				#(180		'Refactorings' 							nil 	nil 			2000 						listAddIcon)
				#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
				#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
				#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')
			) ]
		ifFalse: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #((240				'Save to file (s)' 					$s 	editor 			acceptContents 						acceptIcon 							'Save contents to a file')) ]
				ifFalse: [ #((240 				'Save to file' 					nil 	editor 			nil 						acceptIcon 							'Save contents to a file')) ].
			methodEntries := #()].
	^#(
		#(0 		'Smalltalk Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
		#(20 		'-----')
		#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
		#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
		#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
		#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon
					'Inspect via Object Explorer')
		#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon
					'Debug it')
		#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
		#(90 		'-----')
		#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
		#(110 		'-----')
		#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
		#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
		#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
		#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
		#(190 		'-----')
		#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
		#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
		#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
		#(230 		'-----')
	),
	acceptEntry, methodEntries,
	#(

		" 'Edit' SubMenu"
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon 									'Find')
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 									'Find again')
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 									'Set selection as search string for find again')
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 									'Undo (multiple levels)')
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 									'Redo (multiple levels)')
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 									'Copy selection to the Clipboard')
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon 									'Cut selection and store it in the Clipboard')
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 									'Paste Clipboard contents')
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 									'Set font')
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)

		"Keyboard shortcuts only"
		#(1500		nil 							$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 							$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 							$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 							$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 							$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 							$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 							$T 	editor 			displayIfTrue)
		#(1511		nil 							$F 	editor 			displayIfFalse)
		#(1601 		nil 							$a 	editor 			selectAll 									nil 		'Select all')
		#(1602 		nil 							$C 	editor 			compareToClipboard 									nil 		'Compare argument to clipboard')
		#(1603 		nil 							$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 							$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 							$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 							$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')

		" 'Refactorings' SubMenu"
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon 				'Renames what is under cursor')
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon 				'Extracts the selected code as parameter')
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon 				'Adds parameter to message that is under cursor')
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon 'Removes parameter to message that is under cursor')
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon 				'Extracts the selected code into a temporary variable')
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon 				'Extracts the selected code into a separate method')
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon 				'Inlines the selected temporary variable into each usage')
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon  				'Inlines the selected message send into desired colaborations')
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon 				'Extracts temporary variable to instance variable')
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6627-RemoveMethodOptionsFromWorkspaceMenu-JuanVuletich-2024Aug23-19h15m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6517] on 15 July 2024 at 11:41:07 am'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
PreferenceSet setDefaultFont: FontFamily defaultFamilyName.
Smalltalk garbageCollect.
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6628-GarbageCollect-Cleanup-JuanVuletich-2024Jul15-11h37m-jmv.001.cs.st----!

----QUIT----(23 August 2024 20:13:52) Cuis7.1-6628-32.image priorSource: 1163625!

----STARTUP---- (28 August 2024 17:06:35) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6628-32.image!


'From Cuis7.1 [latest update: #6628] on 23 August 2024 at 8:23:32 pm'!
!InnerTextMorph methodsFor: 'notifications' stamp: 'jmv 8/23/2024 20:22:49' prior: 16881557!
                   possiblyChanged
	| embeddedMorphs |
	embeddedMorphs := model actualContents embeddedMorphs.
	self submorphsDo: [:each| 
		(embeddedMorphs includes: each) ifFalse: [
			self privateRemove: each.
			each privateOwner: nil ]].
	embeddedMorphs do: [ :each|
		each owner == self ifFalse: [
			self addMorphFront: each.
			each hide "Show it only when properly located"]].
	(owner is: #ScrollPane) ifTrue: [
		owner possiblyChanged ].
	self redrawNeeded.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6629-Editor-fixAnotherPossibleMissingRefresh-JuanVuletich-2024Aug23-20h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6629] on 25 August 2024 at 8:52:21 am'!
!Theme class methodsFor: 'user interface' stamp: 'jmv 8/25/2024 08:49:38' prior: 16986385!
             changeFontSizes
	| options menu |
	options := #(
		'40 - very large GUI elements'
		'32 - large GUI elements'
		'28 - large GUI elements'
		'24 - very high dpi laptops'
		'21 - very high dpi laptops'
		'18 - high dpi laptops'
		'16 - high dpi laptops'
		'14 - large desktop displays'
		'13 - large desktop displays'
		'12 - standard dpi displays'
		'11 - standard dpi displays'
		'10 - small GUI elements'
		'  9 - small GUI elements'
		'  6 - very small GUI elements'
		).
	menu := MenuMorph new.
	menu addTitle: 'Point size of default Font'; addStayUpIcons; removeStayUpBox.
	options do: [ :option | | pt |
		pt := option findPositiveInteger.
		(menu add: option target: self action: #setDefaultFontSize: argument: pt)
			isSelected: pt = FontFamily defaultPointSize ].
	menu popUpInWorld: self runningWorld.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6630-SizeOfGUIelements-menuTweaks-JuanVuletich-2024Aug25-08h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6630] on 25 August 2024 at 9:15:43 am'!
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:58:42'!
          localBoundsForError
	"Only to be used for drawing in an error condition. See senders."

	^`0@0 corner: 75@70`.! !
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:56:32'!
               positionInWorld
	"Answer is in world coordinates."

	^ self externalizeToWorld: `0@0`! !
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:55:00'!
        positionInWorld: newPositionInWorld
	"Change the position of this morph. Argument is in world coordinates.
	Ignored by morphs that are not movable."! !
!PlacedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:55:07' overrides: 50372064!
               positionInWorld: newPositionInWorld
	"Change the position of this morph.
	Argument is in world coordinates."

	| newPositionInOwner |
	newPositionInOwner := owner
		ifNotNil: [ owner internalizeFromWorld: newPositionInWorld ]
		ifNil: [ newPositionInWorld ].

	(location isTranslation: newPositionInOwner) ifTrue: [
		^ self ].		"Null change".

	location := location withTranslation: newPositionInOwner.
	owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
	self redrawNeeded.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:59:06'!
                 localBounds

	^`0@0` extent: extent.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:59:22' overrides: 50372053!
localBoundsForError
	"Only to be used for drawing in an error condition. See senders."

	^self localBounds.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:54:16'!
             widthInOwner: newWidth

	self morphExtentInOwner: newWidth @ self morphExtentInOwner y! !
!WorldMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:56:36' overrides: 50372059!
              positionInWorld
	"Answer is in world coordinates."

	^ `0@0`! !
!Morph methodsFor: 'dropping/grabbing' stamp: 'jmv 8/25/2024 08:55:34' prior: 16904075!
        rejectDropMorphEvent: dropEvent
	"The receiver has been rejected, and must be put back somewhere.
	 If the original owner and position are known, use them, 
	else Just keep it in the hand"

	((dropEvent formerOwner isNil) or: [ dropEvent formerPosition isNil ])
		ifTrue: [
			dropEvent hand grabMorph: self.
		]
		ifFalse: [
			dropEvent formerOwner addMorph: self.
				   self positionInWorld: dropEvent formerPosition.
		]
		! !
!PlacedMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:56:41' prior: 16922394 overrides: 16907432!
        privateOwner: aMorph
	"Private!! Should only be used by methods that maintain the ower/submorph invariant."

	| oldGlobalPosition prevOwner |

	self flag: #jmvVer2.
	"Is this the best behavior???"
	prevOwner := owner.
	prevOwner
		ifNotNil: [
			"Had an owner. Maintain my global position..."
			oldGlobalPosition := self positionInWorld ].
	owner := aMorph.
	owner
		ifNil: [
			"Won't have any owner. Keep local position, as it will be maintained in my new owner later"
			]
		ifNotNil: [
			prevOwner
				ifNil: [
					"Didn't have any owner. Assume my local position is to be maintained in my new owner"
					]
				ifNotNil: [
					"Had an owner. Maintain my global position..."
					location := location withTranslation: (owner internalizeFromWorld: oldGlobalPosition).
					self flag: #jmvVer2.
					"extent := owner internalizeDistanceFromWorld: oldGlobalExtent" 	"or something like this!!"
					]].
	self fixYAxisDirection.! !
!BoxedMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 08:59:15' prior: 16796436 overrides: 16903887!
                  drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:59:18' prior: 16796473 overrides: 16905133!
   fullBoundsInOwner
	"Find and answer full bounds in whatever owner.
	Note: Answers an integer rectangle"

	"Rethoric question. If it is ever true, call super."
	"(self submorphsMightProtrude and: [self clipsSubmorphsReally not]) ifFalse: ["
	^ (self externalizeBoundingRectOf: self localBounds) encompassingIntegerRectangle! !
!BoxedMorph methodsFor: 'geometry services' stamp: 'jmv 8/25/2024 08:59:11' prior: 16796614!
                             coversLocalPoint: aLocalPoint
	"Answer true as long as aLocalPoint is inside our shape even if:
		- a submorph (above us) also covers it
		- a sibling that is above us or one of their submorphs also covers it."

	"If not visible, won't cover any point at all."
	self visible ifFalse: [ ^false ].

	"We know our local bounds, and completely fill them."
	^ self localBounds containsPoint: aLocalPoint! !
!FillInTheBlankMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 08:59:26' prior: 16863478 overrides: 50372161!
                              drawOn: aCanvas

	Theme current roundWindowCorners
		ifTrue: [
			aCanvas
				roundRect: self localBounds
				color: color
				radius: Theme current roundedWindowRadius ]
		ifFalse: [ super drawOn: aCanvas ]! !
!HoverHelpMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 08:59:30' prior: 16875349 overrides: 50372161!
  drawOn: aCanvas

	| r |
	r := self localBounds.
	aCanvas roundRect: r color: self color radius: 4.
	aCanvas
		drawTextComposition: textComposition
		at: `4@4`
		extent: extent - 8
		color: `Color black`
		selectionColor: (Theme current textHighlightFocused: false).! !
!TranscriptMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 08:59:36' prior: 50341591 overrides: 50372161!
       drawOn: aCanvas
	aCanvas
		fillRectangle: self localBounds
		color: color.
	Transcript displayTextOn: aCanvas in: self localBounds.
	Transcript bounds: (self externalizeBoundsToWorld: self localBounds)
				encompassingIntegerRectangle.
	self updateWorkspace! !
!HaloMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 08:59:40' prior: 16871307!
         drawCoordinateSystemOn: aCanvas

	| x0 x1 y0 y1 c stepX stepY haloTargetTx prevTx font strokeWidth tickLength stepXDecimals stepYDecimals |
	haloTargetTx := MorphicTranslation identity.
	target allOwnersReverseDo: [ :o | haloTargetTx := haloTargetTx composedWith: o location ].
	haloTargetTx := haloTargetTx composedWith: target location.

	target knowsOwnLocalBounds
		ifTrue: [ | r |
			r := target localBounds.
			x0 := r left.
			x1 := r right.
			y0 := r top.
			y1 := r bottom ]
		ifFalse: [
			x0 := x1 := y0 := y1 := 0.
			target displayFullBounds corners collect: [ :pt | | p |
				p := haloTargetTx inverseTransform: pt.
				x0 := x0 min: p x.
				x1 := x1 max: p x.
				y0 := y0 min: p y.
				y1 := y1 max: p y.]].

	font := FontFamily defaultFamilyPointSize: FontFamily defaultPointSize * 1.5 / haloTargetTx scale.
	stepX := (font pointSize * 9) round4perMagnitudeOrder asFloat.
	stepXDecimals := stepX log rounded negated + 1.
	stepY := (font pointSize * 5) round4perMagnitudeOrder asFloat.
	stepYDecimals := stepY log rounded negated + 1.
	strokeWidth := 3/ haloTargetTx scale.
	tickLength := 5 / haloTargetTx scale.

	prevTx := aCanvas currentTransformation.
	aCanvas geometryTransformation: haloTargetTx.

	c := `Color black alpha: 0.4`.
	aCanvas line: x0@0 to: x1@0 width: strokeWidth color: c.
	aCanvas line: 0@y0 to: 0@y1 width: strokeWidth color: c.

	(x0 truncateTo: stepX) to: x1 by: stepX do: [ :x |
		aCanvas line: x @ tickLength negated to: x @ tickLength width: strokeWidth color: c.
	   	aCanvas drawString: (x printStringFractionDigits: stepXDecimals) atWaistCenter: x @ (tickLength*4) negated font: font color: c ].
	  aCanvas drawString: 'x' atCenterX: x1 - (tickLength*3) @ 0 font: font color: c.

	(y0 truncateTo: stepY) to: y1 by: stepY do: [ :y |
		aCanvas line: tickLength negated @ y to: tickLength @ y width: strokeWidth color: c.
	   	aCanvas drawString: (y printStringFractionDigits: stepYDecimals), ' ' atWaistRight: tickLength negated @ y font: font color: c ].
	  aCanvas drawString: 'y' atWaist: tickLength @ (y1 - (tickLength*4)) font: font color: c.

	aCanvas geometryTransformation: prevTx.! !
!HaloMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:57' prior: 16871377 overrides: 50372161!
                              drawOn: aCanvas 

	| b |
	target ifNil: [^super drawOn: aCanvas].
	
	"For debugging halos' morph bounds visually."
	
	"Fill the bounds of halo's morph. To activate:
	Preferences at: #halosMorphBoundsFillColor put: (Color blue alpha: 0.2)
	"
	(Preferences at: #halosMorphBoundsFillColor) ifNotNil: [:fillColor |
		aCanvas
			fillRectangle: self localBounds
			color: fillColor].
	
	"Draw a frame over halos morph bounds. To activate:
	Preferences at: #halosMorphBoundsFrameColor put: Color blue.
	"
	(Preferences at: #halosMorphBoundsFrameColor) ifNotNil: [:frameColor |
		aCanvas frameRectangle: self localBounds 
			borderWidth: 1 
			color: frameColor].
		
	target haloShowsCoordinateSystem ifTrue: [
		target displayFullBounds ifNotNil: [ :fb |
			aCanvas privateFrameGlobalRect: fb borderWidth: 3 color: `Color black alpha: 0.1`.
			b := target displayBounds.
			b = fb ifFalse: [
				aCanvas privateFrameGlobalRect: b borderWidth: 3 color: `Color black alpha: 0.1` ].
			self drawCoordinateSystemOn: aCanvas ]].! !
!HaloMorph methodsFor: 'dropping/grabbing' stamp: 'jmv 8/25/2024 08:57:07' prior: 16871412!
        startDrag: evt with: dragHandle
	"Drag my target without removing it from its owner."

	| p |
	evt hand obtainHalo: self.	"Make sure the event's hand correlates with the receiver"
	p := target positionInWorld.
	positionOffset := dragHandle referencePosition - p.
	haloDelta := self positionInWorld - p.
! !
!HaloMorph methodsFor: 'events' stamp: 'jmv 8/25/2024 08:56:59' prior: 16871424 overrides: 16904243!
        mouseButton3Down: aMouseButtonEvent localPosition: localEventPosition
	"Transfer the halo to the next likely recipient"
	target ifNil: [
		self delete.
		^self].
	aMouseButtonEvent hand obtainHalo: self.
	positionOffset := aMouseButtonEvent eventPosition - target positionInWorld.
	"wait for click to transfer halo"
	aMouseButtonEvent hand 
		waitForClicksOrDrag: self 
		event: aMouseButtonEvent
		clkSel: #transferHalo:localPosition:
		dblClkSel: nil! !
!HaloMorph methodsFor: 'event handling' stamp: 'jmv 8/25/2024 08:57:02' prior: 50357384!
                               popUpFor: aMorph handPosition: handPosition hand: hand

	hand halo: self.
	hand world addMorphFront: self.
	self target: aMorph.
	positionOffset := handPosition - aMorph positionInWorld.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:55:42' prior: 16871775!
                doDrag: evt with: dragHandle
	| thePoint |
	evt hand obtainHalo: self.
	thePoint := evt eventPosition - positionOffset.
	target positionInWorld: thePoint.
	self positionInWorld: thePoint + haloDelta.
! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:56:47' prior: 16871784!
  doDup: evt with: dupHandle 
	"Ask hand to duplicate my target."

	| hand positionInHandCoordinates |
	target okayToDuplicate ifFalse: [^ self].
	hand := evt hand.
	positionInHandCoordinates := target positionInWorld - hand positionInWorld.
	"Duplicate has no meaningful position, as it is not in the world. Grab position from original!!"
	target := target duplicateMorph: evt.
	self addNameString: target shortPrintString.	
	hand
		obtainHalo: self;
		grabMorph: target delta: positionInHandCoordinates! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:56:51' prior: 16871838!
                    doResize: evt with: resizeHandle
	"Called while the mouse is down in the grow handle"

	| newExtent |
	evt hand obtainHalo: self.
	newExtent := (evt eventPosition - target positionInWorld) - positionOffset.
	(newExtent x = 0 or: [newExtent y = 0]) ifTrue: [^ self].
	target morphExtentInWorld: newExtent.
	resizeHandle positionInWorld: evt eventPosition - (resizeHandle morphExtent // 2).	
	self redrawNeeded.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:55:54' prior: 16871854!
                 doRot: evt with: rotHandle
	"Update the rotation of my target if it is rotatable."

	| radians prevLocation deltaRadians |
	evt hand obtainHalo: self.
	radians := (evt eventPosition - target referencePosition) theta + angleOffset.
	radians := radians detentBy: 0.05 atMultiplesOf: Float pi / 4 snap: false.
	rotHandle color: (radians = 0.0
		ifTrue: [`Color lightBlue`]
		ifFalse: [`Color blue`]).
	rotHandle submorphsDo: [ :m |
		m color: rotHandle color makeForegroundColor].
	prevLocation := target location.
	deltaRadians := radians-prevLocation radians.
	target yAxisPointsUp ifTrue: [ deltaRadians := deltaRadians negated ].
	target location: (prevLocation composedWith: (
		AffineTransformation withRadians: deltaRadians around: target rotationCenter)).
	rotHandle positionInWorld: evt eventPosition - (rotHandle morphExtent // 2).	
	self redrawNeeded.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:56:55' prior: 16871884!
               doScale: evt with: scaleHandle
	"Update the scale of my target if it is scalable."

	| scale |
	evt hand obtainHalo: self.
	scale := (evt eventPosition - target positionInWorld) rho * scaleOffset.
	scale = 1.0
		ifTrue: [scaleHandle color: `Color lightBlue`]
		ifFalse: [scaleHandle color: `Color blue`].
	scaleHandle submorphsDo:
		[:m | m color: scaleHandle color makeForegroundColor].
	target scale: scale.
	scaleHandle positionInWorld: evt eventPosition - (scaleHandle morphExtent // 2).
	self redrawNeeded.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:57:10' prior: 16871988!
           startResize: evt with: resizeHandle
	"Initialize resizing of my target."

	| botRt |
	evt hand obtainHalo: self.	"Make sure the event's hand correlates with the receiver"
	self removeAllHandlesBut: resizeHandle.  "remove all other handles"
	botRt := target positionInWorld + target morphExtentInWorld.
	positionOffset := (self world viewBox containsPoint: botRt)
		ifTrue: [evt eventPosition - botRt]
		ifFalse: [`0@0`]! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:57:14' prior: 16872017!
       startScale: evt with: scaleHandle
	"Initialize scale of my target if it is scalable."

	evt hand obtainHalo: self.						"Make sure the event's hand correlates with the receiver"

	self removeAllHandlesBut: scaleHandle.  "remove all other handles"
	scaleOffset := target scale / (evt eventPosition - target positionInWorld) rho.! !
!HandMorph methodsFor: 'grabbing/dropping' stamp: 'jmv 8/25/2024 08:58:00' prior: 16873074!
                         grabMorph: aMorph delta: delta
	"Grab the given morph (i.e., add it to this hand and remove it from its current owner)."

	| formerOwner formerPositionInWorld |
	self releaseMouseFocus. "Break focus"

	"Grab the halo if present"
	self halo ifNotNil: [ :h |
		(h target == aMorph or: [h target hasOwner: aMorph]) ifTrue: [
			self addMorphBack: h position: h positionInWorld - self positionInWorld ]].

	"Remember previous owner and position, in case the drop is later rejected"
	formerOwner := aMorph owner.
	formerOwner ifNotNil: [
		formerPositionInWorld := aMorph positionInWorld.
		grabMorphData
			at: aMorph 
			put: { formerOwner. formerPositionInWorld. } ].
	self addMorphBack: aMorph position: delta.

	aMorph displayBounds ifNotNil: [ :r | | d |
		d := formerPositionInWorld ifNotNil: [aMorph positionInWorld - formerPositionInWorld].
		(d isNil or: [d isZero not]) ifTrue: [
			aMorph adjustDisplayBoundsBy: d ]].

	aMorph justGrabbedFrom: formerOwner.
	formerOwner ifNotNil: [
		"Morph was in the world"
		lastPosition := self morphPosition ].! !
!HandMorph methodsFor: 'grabbing/dropping' stamp: 'jmv 8/25/2024 08:57:28' prior: 16873111!
 grabMorph: aMorph moveUnderHand: moveUnderHand
	"Grab the given morph (i.e., add it to this hand and remove it from its current owner).
	If moveUnderHand is requested or it seems neccesary anyway, move the grabbed morph under the hand."

	| grabbed positionInHandCoordinates tx bounds |
	self releaseMouseFocus.	"Break focus"
	grabbed := aMorph.
	aMorph owner ifNotNil: [ :o | grabbed := o aboutToGrab: aMorph ].
	grabbed ifNil: [ ^ self ].
	grabbed := grabbed aboutToBeGrabbedBy: self.
	grabbed ifNil: [ ^ self ].
	self hideHardwareCursor.
	self redrawNeeded.

	moveUnderHand ifTrue: [
		bounds := nil.
		grabbed isInWorld ifTrue: [
			bounds := (grabbed displayBounds ifNil: [grabbed fullBoundsInOwner ])
				translatedBy: grabbed positionInWorld negated ].
		bounds ifNil: [ bounds := grabbed fullBoundsInOwner ].
		positionInHandCoordinates := (bounds center + bounds bottomRight //2) negated + 
			grabbed morphPosition.
		self grabMorph: grabbed delta: positionInHandCoordinates.
		^self ].

	positionInHandCoordinates := (grabbed isInWorld ifTrue: [grabbed] ifFalse: [aMorph])
		positionInWorld - self positionInWorld.

	tx := GeometryTransformation identity.
	(grabbed isInWorld ifTrue: [grabbed] ifFalse: [aMorph]) withAllOwnersDo: [ :o |
		tx := o location composedWith: tx ].
	self withAllOwnersReverseDo: [ :o |
		tx := o location inverseTransformation composedWith: tx ].
	self grabMorph: grabbed delta: positionInHandCoordinates.

	grabbed location: tx.! !
!HandMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 08:57:39' prior: 16873259!
               rememberGrabMorphDataFor: aMorph

	grabMorphData
		at: aMorph 
		put: { aMorph owner. aMorph positionInWorld }! !
!WorldMorph methodsFor: 'change reporting' stamp: 'jmv 8/25/2024 08:59:48' prior: 17007143 overrides: 16903700!
                              invalidateDisplayRect: damageRect for: aMorph
        "Clip damage reports to my bounds, since drawing is _always_ clipped to my bounds."

	self recordDamagedRect: (damageRect intersect: self localBounds ) for: aMorph! !
!WorldMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 08:59:58' prior: 17007386!
               viewBox

	^ self localBounds! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/25/2024 08:59:55' prior: 50366981!
    mainLoop

	| morphicCanvas morphicDamageRecorder delay |
	self morphPosition: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			morphicCanvas := Display getMainCanvas.
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater ]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			morphicCanvas := (Form extent: extent depth: Display depth) getMainCanvas ].

	morphicCanvas ownerProcess: Processor activeProcess.
	morphicCanvas world: self.
	morphicDamageRecorder := DamageRecorder new.
	"Set this as the main canvas"
	canvas := morphicCanvas.
	damageRecorder := morphicDamageRecorder.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	delay := Delay forMilliseconds: 50.
	[
		self displayWorldOn: morphicCanvas.
		[
			"Set the main canvas on every iteration.
			This is needed if UI processes are interrupted, resumed, etc."
			canvas := morphicCanvas.
			damageRecorder := morphicDamageRecorder.
			self doOneCycleOn: morphicCanvas delay: delay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !
!WorldMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/25/2024 08:56:02' prior: 17007747!
                           addMorph: aMorph centeredNear: aPoint
	"Add the given morph to this world, attempting to keep its center as close to the given point possible while also keeping the it entirely within the bounds of this world."

	| trialRect delta |
	trialRect := Rectangle center: aPoint extent: aMorph morphExtent.
	delta := trialRect amountToTranslateWithin: self displayBounds.
	self addMorph: aMorph.
	aMorph positionInWorld: (trialRect origin + delta) rounded.! !
!LayoutAdjustingMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:02' prior: 16889523 overrides: 50372161!
          drawOn: aCanvas

	aCanvas
		fillRectangle: self localBounds
		color: color! !
!WindowEdgeAdjustingMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:12' prior: 17006426 overrides: 50372704!
                             drawOn: aCanvas

	| c |
	(owner is: #SystemWindow) ifFalse: [
		^super drawOn: aCanvas ].

	"Use almost transparent, so effect on antialiasing for drawing exactly on top of Window is kept to a minimum."
	c := owner windowFrameColor alpha: 0.1.
	selector caseOf: {
		[ #windowTopLeft: ] -> [
			aCanvas roundTopLeftCornerX: 0 y: 0 length: extent x border: owner borderWidth color: c ].
		[ #windowTopRight: ] -> [
			aCanvas roundTopRightCornerX: 0 y: 0 length: extent x border: owner borderWidth color: c ].
		[ #windowBottomLeft: ] -> [
			aCanvas roundBottomLeftCornerX: 0 y: 0 length: extent x border: owner borderWidth color: c ].
		[ #windowBottomRight: ] -> [
			aCanvas roundBottomRightCornerX: 0 y: 0 length: extent x border: owner borderWidth color: c ].
	}
	otherwise: [
		"all the morph is sensitive for horizontal and vertical (i.e. non corner) instances."	
		aCanvas roundEdge: self localBounds border: owner borderWidth color: c ].! !
!WindowEdgeAdjustingMorph methodsFor: 'geometry services' stamp: 'jmv 8/25/2024 09:00:06' prior: 17006467 overrides: 50372187!
            coversLocalPoint: aLocalPoint
	"We don't completely cover our bounds. Account for that."

	| sensitiveBorder |
	sensitiveBorder := owner borderWidth.
	((self localBounds outsetBy: sensitiveBorder) containsPoint: aLocalPoint) ifFalse: [ ^false ].
	selector caseOf: {
		[ #windowTopLeft: ] -> [ ^ aLocalPoint x < sensitiveBorder or: [ aLocalPoint y < sensitiveBorder ]].
		[ #windowTopRight: ] -> [ ^ extent x - aLocalPoint x <= sensitiveBorder or: [ aLocalPoint y < sensitiveBorder ]].
		[ #windowBottomLeft: ] -> [ ^ aLocalPoint x < sensitiveBorder or: [ extent y- aLocalPoint y <= sensitiveBorder ]].
		[ #windowBottomRight: ] -> [ ^ extent x - aLocalPoint x <= sensitiveBorder or: [ extent y - aLocalPoint y <= sensitiveBorder ]].
	}
	otherwise: [
		"all the morph is sensitive for horizontal and vertical (i.e. non corner) instances."
		^true ]! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 8/25/2024 09:00:16' prior: 16890149!
                          layoutBounds
	"Return the bounds for laying out children of the receiver"

	^ self localBounds insetBy: borderWidth! !
!StringRequestMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:26' prior: 16960861 overrides: 50372161!
                          drawOn: aCanvas
	
	| roundCorners |
	roundCorners := Theme current roundWindowCorners.
	roundCorners
		ifTrue: [
			aCanvas roundRect: self localBounds color: color radius: Theme current roundedWindowRadius ]
		ifFalse: [
			aCanvas fillRectangle: self localBounds color: color borderWidth: borderWidth borderStyleSymbol: #raised baseColorForBorder: color ]! !
!TaskbarMorph methodsFor: 'initialization' stamp: 'jmv 8/25/2024 08:57:44' prior: 16973985 overrides: 50368455!
       initialize
	super initialize.
	viewBox := LayoutMorph newRow color: self defaultColor.
	self
		addMorph: (clock := UpdatingLabelMorph initializedInstance)
		layoutSpec:  (LayoutSpec morphWidthProportionalHeight: 0.5).
	self
		addMorph: viewBox 
		layoutSpec: (LayoutSpec
			proportionalWidth: 1.0
			proportionalHeight: 1.0 
			offAxisEdgeWeight: #rightOrBottom).
	viewBox separation: self defaultHeight // 8.
	self setBalloonText: [ 
		'About this system:' bold, `String newLineString`,
		Smalltalk systemInformationString ].
	clock
		setProperty: #handlesMouseDown: toValue: true;
		setProperty: #'mouseButton1Down:localPosition:' 
		toValue: [ :evt : pos | | menu taskbarEdge point | 
			self runningWorld ifNotNil: [ :w |
				taskbarEdge := self positionInWorld y.
				menu := (Preferences at: #worldMenu) getMenuIn: w at: w activeHand.	
				menu hide.
				w addMorph: menu. ": Otherwise we do not have a proper extent"
				point := 0 @ (taskbarEdge - menu morphExtentInWorld y).
				menu popUpAt: point allowKeyboard: false ] ]! !
!MenuMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:32' prior: 16894545 overrides: 50372161!
              drawOn: aCanvas
	
	| roundCorners |
	roundCorners := Theme current roundWindowCorners.
	roundCorners
		ifTrue: [
			aCanvas roundRect: self localBounds color: color radius: Theme current roundedWindowRadius * 5//6 ]
		ifFalse: [
			aCanvas fillRectangle: self localBounds color: color borderWidth: borderWidth borderStyleSymbol: #raised baseColorForBorder: color ]! !
!InnerListMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:39' prior: 16880531!
                         drawBackgroundForMulti: row on: aCanvas
	| selectionDrawBounds c |
	"shade the background darker, if this row is selected"
	selectionDrawBounds := self drawBoundsForRow: row.
	selectionDrawBounds := selectionDrawBounds intersect: self localBounds.
	c := (selectedRow notNil and: [ row = selectedRow])
		ifTrue: [ Theme current listHighlightFocused: owner hasKeyboardFocus ]
		ifFalse: [ Theme current listMultiHighlightFocused: owner hasKeyboardFocus ].
	aCanvas fillRectangle: selectionDrawBounds color: c! !
!InnerListMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:43' prior: 16880550!
           drawHighlightOn: aCanvas
"Ademas, poner el mouse pointer de relojito si tarda... Detectarlo automaticamente, etc. Aunque no estoy seguro de como hacerlo... quizas colgar un cachito de codigo en un proceso de mayor prioridad, onda 'si pasa 1 segundo, y todavia no te resetee este flag, entonces pone el relojito'"
	| selectionDrawBounds |
	highlightedRow  ifNil: [ ^self ].
	highlightedRow = 0 ifTrue: [ ^self ].
	selectionDrawBounds := self drawBoundsForRow: highlightedRow.
	selectionDrawBounds := selectionDrawBounds intersect: self localBounds.
	aCanvas
		fillRectangle: selectionDrawBounds
		color: ((Theme current listHighlightFocused: owner hasKeyboardFocus) alpha: 0.3)! !
!InnerListMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:46' prior: 16880590!
 drawSelectionOn: aCanvas
	| selectionDrawBounds |
	selectedRow ifNil: [ ^self ].
	selectedRow = 0 ifTrue: [ ^self ].
	selectionDrawBounds := self drawBoundsForRow: selectedRow.
	selectionDrawBounds := selectionDrawBounds intersect: self localBounds.
	aCanvas
		fillRectangle: selectionDrawBounds
		color: (Theme current listHighlightFocused: owner hasKeyboardFocus)! !
!InnerTextMorph methodsFor: 'anchors' stamp: 'jmv 8/25/2024 08:57:51' prior: 16880971!
                        anchorMorph: aMorph at: aPoint
	| relPt |
	aMorph owner == self ifTrue: [ self removeMorph: aMorph ].
	aMorph isPlacedMorph ifFalse: [ self error: 'Only PlacedMorphs can be used in Texts' ].
	self addMorphFront: aMorph.
	relPt := aPoint - self positionInWorld.
	editor insertMorph: aMorph at: relPt.
	self fit.! !
!InnerTextMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/25/2024 08:57:48' prior: 16881381 overrides: 16906946!
              addMorphFrontFromWorldPosition: aMorph
	"Overridden for more specific re-layout and positioning"
	| positionInWorld |
	positionInWorld := aMorph positionInWorld.
	^self anchorMorph: aMorph at: positionInWorld! !
!MenuItemMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:00:50' prior: 16893019 overrides: 16888420!
  drawOn: aCanvas 
	| stringColor leftEdge magnifiedIcon |

	stringColor := color.
	isSelected & isEnabled
		ifTrue: [
			aCanvas fillRectangle: self localBounds color: Theme current menuHighlight].
	leftEdge := 0.

	self hasMarker ifTrue: [
		leftEdge := leftEdge + submorphs first morphWidth + 8 ].

	icon ifNotNil: [
		magnifiedIcon := self magnifiedIcon.
		aCanvas image: magnifiedIcon at: leftEdge+1 @ (magnifiedIcon height *1//10).
		leftEdge := magnifiedIcon width *12//10 + leftEdge].

	aCanvas
		drawString: contents
		at: leftEdge @ 1
		font: self fontToUse
		color: stringColor.
	subMenu ifNotNil: [
		aCanvas
			image: self class subMenuMarker
			at: extent x - self class subMenuMarker width @ (extent y - self class subMenuMarker height // 2) ]! !
!IndentingListItemMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:02' prior: 16876668 overrides: 16888420!
                     drawOn: aCanvas

	| x colorToUse centeringOffset |
	isHighlighted ifTrue: [
		aCanvas
			fillRectangle: self localBounds
			color: ((Theme current
				listHighlightFocused: owner owner hasKeyboardFocus) alpha: 0.3) ].

	isSelected ifTrue: [
		aCanvas
			fillRectangle: self localBounds
			color: (Theme current
				listHighlightFocused: owner owner hasKeyboardFocus) ].

	x := indentLevel * self indentWidth.

	complexContents hasContents ifTrue: [
		isExpanded
			ifTrue: [ aCanvas drawExpandedAt: x@(extent y//2) height: self indentWidth]
			ifFalse: [ aCanvas drawNotExpandedAt: x@(extent y//2) height: self indentWidth ]].
	x := self indentWidth * 3 // 2 + x.

	icon isNil ifFalse: [
		centeringOffset := ((extent y - icon height) / 2.0) roundedHAFZ.
		 aCanvas 
			image: icon
			at:  (x @ centeringOffset).
		x := self indentWidth // 2 + icon width + x. ].

	colorToUse := complexContents preferredColor ifNil: [ color ].
	aCanvas
		drawString: contents asString
		at: x@0
		font: self fontToUse
		color: colorToUse! !
!PluggableButtonMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:06' prior: 16922661!
  draw3DLookOn: aCanvas

	| borderStyleSymbol c |
	borderStyleSymbol := self isPressed ifFalse: [ #raised ] ifTrue: [ #inset ].
	c := color.
	self mouseIsOver | self isPressed ifTrue: [
		c := mouseOverColor ifNil: [ c lighter ]].
	c := self enableColorWith: c.
	aCanvas
		fillRectangle: self localBounds
		color: c
		borderWidth: borderWidth
		borderStyleSymbol: borderStyleSymbol
		baseColorForBorder: (borderColor ifNil: [ c ]).

	self drawRegularLabelOn: aCanvas! !
!PluggableButtonMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:09' prior: 16922793!
               roundButtonRect
	^self localBounds insetBy: 3! !
!DraggableButtonMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:12' prior: 16850497 overrides: 50373012!
                              roundButtonRect
	"Use full bounds for drawing.
	See #computeSlider and #expandSlider"
	^self localBounds! !
!ScrollBar methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:15' prior: 16945483 overrides: 50372161!
              drawOn: aCanvas

	aCanvas
		fillRectangle: self localBounds
		color: (color alphaMixed: 0.3 with: Theme current scrollbarColor)
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor! !
!SystemWindow methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:18' prior: 16970658!
              drawClassicFrameOn: aCanvas color: windowFrameColor
	"Window border encompasses title area. No round corners."

	aCanvas
		fillRectangle: (self localBounds insetBy: 1.5)
		color: color
		borderWidth: borderWidth borderStyleSymbol: #simple baseColorForBorder: self borderColor.

	"A border was drawn at the left, top and right of the title area.
	The look is that the title area is inside the window"
	aCanvas
		fillRectangle: (borderWidth@borderWidth extent: extent x - (2*borderWidth)@ self labelHeight)
		color: windowFrameColor.! !
!SystemWindow methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:21' prior: 16970711!
                    drawRoundedFrameOn: aCanvas color: windowFrameColor

	aCanvas
		drawRoundedFrame: self localBounds
		border: borderWidth
		color: self borderColor
		topColor: windowFrameColor
		insideColor: color
		labelHeight: self labelHeight.! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 08:58:04' prior: 16827067!
                              browseHierarchyAndReplaceMe
	"Create and schedule a new hierarchy browser on the currently selected class or meta.
	Resize and position it over me and dismiss me."

	model hierarchyBrowser ifNotNil: [ :newBrowser | | newBrowserWindow |
		newBrowserWindow := HierarchyBrowserWindow
			openNoSysCat: newBrowser
			label: newBrowser labelString.
		newBrowser assureSelectionsShow.
		newBrowserWindow
			positionInWorld: self positionInWorld;
			morphExtentInWorld: self morphExtentInWorld.
		self dismissMorph ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 08:58:08' prior: 16827156!
       browseMethodFullAndReplaceMe
	"Create and schedule a full Browser and then select the current class and message.
	Resize and position it over me and dismiss me."

	model selectedClassOrMetaClass ifNotNil: [ :myClass | | newBrowserWindow |
		newBrowserWindow := BrowserWindow
			fullOnClass: myClass 
			selector: model selectedMessageName.
		newBrowserWindow
			positionInWorld: self positionInWorld;
			morphExtentInWorld: self morphExtentInWorld.
		self dismissMorph ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 08:58:11' prior: 16827321!
             methodInheritanceAndReplaceMe
	"Create and schedule a method browser on the inheritance of implementors.
	Resize and position it over me and dismiss me."

	| newBrowser |
	(newBrowser := self methodInheritance) == self ifFalse: [
		newBrowser
			positionInWorld: self positionInWorld;
			morphExtentInWorld: self morphExtentInWorld.
		self dismissMorph ]
	! !
!TextParagraphMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:27' prior: 16983472 overrides: 50372161!
         drawOn: aCanvas
	| b |
	b := self localBounds insetBy: borderWidth * 2.
	aCanvas
		fillRectangle: self localBounds color: color.
	aCanvas
		drawTextComposition: textComposition
		at: b topLeft
		extent: b extent
		color: Theme current text
		selectionColor: `Color red`
		avoidOverhang: true.
	aCanvas
		frameRectangle: self localBounds
		color: borderColor
		borderWidth: borderWidth
		borderStyleSymbol: nil! !
!AutoCompleterMorph methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:01:30' prior: 16784907!
        drawContainingRectangle: aCanvas
	
	aCanvas frameAndFillRectangle: self localBounds fillColor: self color borderWidth: borderWidth borderColor: borderColor.
! !
!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 8/25/2024 08:54:23' prior: 16891203!
          fixedOrMorphWidth: aNumber
	"aNumber is taken as the fixed width to use.
	No proportional part."
	fixedWidth
		ifNotNil: [ fixedWidth := aNumber ]
		ifNil: [ fixedWidth := aNumber.
			morph widthInOwner: aNumber ].
	proportionalWidth := nil.
	self updateContainingLayout.! !
!MorphicCanvas methodsFor: 'morphic' stamp: 'jmv 8/25/2024 08:58:48' prior: 16908168!
                       drawCurrentAsError
	"The morph (or one of its submorphs) had an error in its drawing method."
	| r w |
	r := currentMorph localBoundsForError.
	w := r extent > `50@50`
		ifTrue: [ 6 ]
		ifFalse: [ 2 ].
	self
		frameAndFillRectangle: r
		fillColor: `Color red`
		borderWidth: w
		borderColor: `Color yellow`.
	self line: r topLeft+1 to: r bottomRight-w width: w color: `Color yellow`.
	self line: r topRight + (w negated@1) to: r bottomLeft + (1@ w negated) width: w color: `Color yellow`.	
	self displayBoundsSetOnCurrentMorph.
	self contourClearOnCurrentMorph.! !
!MorphicCanvas methodsFor: 'morphic world' stamp: 'jmv 8/25/2024 09:01:34' prior: 16908408!
               boundingRectOfCurrentIfTrivial
	"In targetForm coordinates.
	Answer only if it can be known wothout drawing.
	Don't include any clipping."

	currentMorph knowsOwnLocalBounds ifTrue: [
		^ (currentTransformation externalBoundingRectOf: currentMorph localBounds)
			encompassingIntegerRectangle ].
	^nil.! !
!AbstractVectorCanvas methodsFor: 'morphic world' stamp: 'jmv 8/25/2024 09:01:37' prior: 16778903 overrides: 50373175!
                       boundingRectOfCurrentIfTrivial
	"In targetForm coordinates.
	Answer only if it can be known wothout drawing.
	Don't include any clipping."

	| boundingRect |
	currentMorph knowsOwnLocalBounds ifTrue: [
		boundingRect :=  (currentTransformation externalBoundingRectOf: currentMorph localBounds)
			encompassingIntegerRectangle.
		"Include an extra pixel to cover possible anti aliasing."
		currentMorph requiresVectorCanvas ifTrue: [
			boundingRect := boundingRect outsetBy: 1 ].
		^boundingRect ].
	^nil.! !
!VectorCanvas methodsFor: 'morphic' stamp: 'jmv 8/25/2024 08:58:52' prior: 16998006 overrides: 50373154!
                          drawCurrentAsError
	"The morph (or one of its submorphs) had an error in its drawing method."
	| r w |
	r := currentMorph localBoundsForError.
	w := r extent > `50@50`
		ifTrue: [ 6 ]
		ifFalse: [ 2 ].
	self
		frameAndFillRectangle: r
		fillColor: `Color red`
		borderWidth: w
		borderColor: `Color yellow`.
	r := r insetBy: w.
	self line: r topLeft to: r bottomRight width: w color: `Color yellow`.
	self line: r topRight to: r bottomLeft width: w color: `Color yellow`.	
	self displayBoundsSetOnCurrentMorph.
	self contourSetOnCurrentMorph.! !
!AutoCompleter methodsFor: 'menu morph' stamp: 'jmv 8/25/2024 08:58:17' prior: 16784392!
     openCompletionMenu

	| theEditor |

	theEditor := textMorph editor.
	position := theEditor startIndex - 1.
	self closeMenu.
	self computeEntries.
	entries notEmpty
		ifTrue: [ | startIndex characterBlock cursorIndex |
			cursorIndex := theEditor pointIndex.
			startIndex := (theEditor text at: cursorIndex-1) = Character space
				ifTrue: [ cursorIndex ]
				ifFalse: [ theEditor previousWordStart: (cursorIndex >  theEditor text size ifTrue: [ cursorIndex-1 ] ifFalse: [ cursorIndex ])].
			characterBlock := theEditor characterBlockForIndex: startIndex.
			menuMorph :=  self morphClass
				completer: self
				position: characterBlock bottomLeft + textMorph positionInWorld ].
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6631-MorphProtocolsCleanup-JuanVuletich-2024Aug25-09h14m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6630] on 25 August 2024 at 9:21:26 am'!
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:19:44' prior: 16905220!
  morphPositionInWorld
	"Answer is in world coordinates."

	self flag: #deprecated.
	^ self positionInWorld.! !
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:19:56' prior: 16905225!
   morphPositionInWorld: newPositionInWorld
	"Change the position of this morph. Argument is in world coordinates.
	Ignored by morphs that are not movable."

	self flag: #deprecated.
	^self positionInWorld: newPositionInWorld! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:18:38' prior: 16796547!
          morphLocalBounds

	self flag: #deprecated.
	^self localBounds! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:18:56' prior: 16796588!
           morphWidthInOwner: newWidth

	self flag: #deprecated.
	^self widthInOwner: newWidth! !

WorldMorph removeSelector: #morphPositionInWorld!

!methodRemoval: WorldMorph #morphPositionInWorld stamp: 'Install-6632-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h15m-jmv.001.cs.st 8/28/2024 17:06:35'!
morphPositionInWorld
	"Answer is in world coordinates."

	^ `0@0`!

BoxedMorph removeSelector: #morphLocalBoundsForError!

!methodRemoval: BoxedMorph #morphLocalBoundsForError stamp: 'Install-6632-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h15m-jmv.001.cs.st 8/28/2024 17:06:35'!
morphLocalBoundsForError
	"Only to be used for drawing in an error condition. See senders."

	^self morphLocalBounds.!

PlacedMorph removeSelector: #morphPositionInWorld:!

!methodRemoval: PlacedMorph #morphPositionInWorld: stamp: 'Install-6632-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h15m-jmv.001.cs.st 8/28/2024 17:06:35'!
morphPositionInWorld: newPositionInWorld
	"Change the position of this morph.
	Argument is in world coordinates."

	| newPositionInOwner |
	newPositionInOwner := owner
		ifNotNil: [ owner internalizeFromWorld: newPositionInWorld ]
		ifNil: [ newPositionInWorld ].

	(location isTranslation: newPositionInOwner) ifTrue: [
		^ self ].		"Null change".

	location := location withTranslation: newPositionInOwner.
	owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
	self redrawNeeded.!

Morph removeSelector: #morphLocalBoundsForError!

!methodRemoval: Morph #morphLocalBoundsForError stamp: 'Install-6632-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h15m-jmv.001.cs.st 8/28/2024 17:06:35'!
morphLocalBoundsForError
	"Only to be used for drawing in an error condition. See senders."

	^`0@0 corner: 75@70`.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6632-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h15m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6630] on 25 August 2024 at 9:23:06 am'!
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:03:33'!
                         extentInOwner

	self morphExtent ifNotNil: [ :e |
		^ self externalizeDistance: e ].
	^self fullBoundsInOwner extent! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:04:16'!
    extentInOwner: newExtent

	self morphExtent: (self internalizeDistance: newExtent).! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:05:50'!
     extentInWorld
	"World coordinates"

	^(self externalizeDistanceToWorld: extent) ceiling! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:06:11'!
 extentInWorld: newExtent
	"world coordinates"

	self morphExtent: (self internalizeDistanceFromWorld: newExtent).! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:05:11'!
       heightInOwner: newHeight

	self extentInOwner: self extentInOwner x @ newHeight! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:07:06'!
         position: newPos extent: newExtent
	"Change the position and extent of this morph. Arguments are owner's coordinates."

	self morphPosition: newPos.
	self extentInOwner: newExtent.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:04:16' prior: 16796462 overrides: 16922074!
fitInto: aRectangle
	"Change the position and extent of this morph. Arguments are owner's coordinates.
	See inheritance: For general, non resizeable morphs, adjust position and scale."

	self morphPosition: aRectangle origin.
	self extentInOwner: aRectangle extent.! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:04:16' prior: 50372100!
                               widthInOwner: newWidth

	self extentInOwner: newWidth @ self extentInOwner y! !
!BoxedMorph methodsFor: 'window like behavior' stamp: 'jmv 8/25/2024 09:07:06' prior: 16796770!
                fullScreen
	"Zoom Window to Full World size with possible DeskMargins"

	| left right possibleBounds |
	(self hasProperty: #originalBounds)
		ifFalse: [ "Expand"
			self setProperty: #originalBounds toValue: self displayBounds.
			left := right := 0.
			possibleBounds := (RealEstateAgent maximumUsableAreaInWorld: self world) 
				insetBy: (left @ 0 corner: right @ 0).
			possibleBounds := possibleBounds insetBy: Theme current fullScreenDeskMargin
		] 
		ifTrue: [ "Contract"
			possibleBounds := self valueOfProperty: #originalBounds.
			self removeProperty: #originalBounds.
		].
	self position: possibleBounds topLeft extent: possibleBounds extent! !
!BoxedMorph methodsFor: 'window like behavior' stamp: 'jmv 8/25/2024 09:07:06' prior: 16796794!
               resize: boundingBox
	(self hasProperty: #originalBounds) ifFalse: [
		self setProperty: #originalBounds toValue: self displayBounds].
	self position: boundingBox origin extent: boundingBox extent! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 09:07:06' prior: 16871662!
       addHandle: handleSpec
	"Add a handle within the halo box as per the haloSpec, and set it up to respond to the given event by sending the given selector to the given recipient. Return the handle."

	| handle aPoint colorToUse form icon e |
	aPoint := self 
				positionIn: haloBox
				horizontalPlacement: handleSpec horizontalPlacement
				verticalPlacement: handleSpec verticalPlacement.
	colorToUse := Color colorFrom: handleSpec color.
	handle := HaloHandleMorph new color: colorToUse.
	self addMorph: handle.
	e := (Preferences at: #haloHandleSize) asPoint.
	handle position: aPoint-(e//2) extent: e.
	handleSpec iconSymbol ifNotNil: [ :iconName |
			form := self class icons at: iconName ifAbsent: [self class perform: iconName].
			form ifNotNil: [
				form extent = e ifFalse: [ 
					": Non default size, scale that bugger!!"
					form := form  ": Be as smooth as possible, these images are small."
						magnify: form boundingBox
						to: e
						smoothing: 2 ].
				icon := (ImageMorph newWith: form)
					color: colorToUse makeForegroundColor;
					lock.
				handle addMorphFront: icon position: `0@0` ]].
	handle mouseUpSelector: #endInteraction.
	handle setBalloonText: handleSpec hoverHelp.
	^ handle! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 09:07:06' prior: 16871720!
           addHandles: aDisplayRectangle
	"update my size. owner is world, therefore owner coordinates are Display coordinates."

	self position: aDisplayRectangle topLeft extent: aDisplayRectangle extent.
	haloBox := self handlesBox.
	target addHandlesTo: self box: haloBox.
	self addNameString: target shortPrintString.
	self redrawNeeded.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 09:06:11' prior: 50372411!
doResize: evt with: resizeHandle
	"Called while the mouse is down in the grow handle"

	| newExtent |
	evt hand obtainHalo: self.
	newExtent := (evt eventPosition - target positionInWorld) - positionOffset.
	(newExtent x = 0 or: [newExtent y = 0]) ifTrue: [^ self].
	target extentInWorld: newExtent.
	resizeHandle positionInWorld: evt eventPosition - (resizeHandle morphExtent // 2).	
	self redrawNeeded.! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 09:05:50' prior: 50372476!
                      startResize: evt with: resizeHandle
	"Initialize resizing of my target."

	| botRt |
	evt hand obtainHalo: self.	"Make sure the event's hand correlates with the receiver"
	self removeAllHandlesBut: resizeHandle.  "remove all other handles"
	botRt := target positionInWorld + target extentInWorld.
	positionOffset := (self world viewBox containsPoint: botRt)
		ifTrue: [evt eventPosition - botRt]
		ifFalse: [`0@0`]! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/25/2024 09:07:06' prior: 50372613!
  mainLoop

	| morphicCanvas morphicDamageRecorder delay |
	self position: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			morphicCanvas := Display getMainCanvas.
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater ]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			morphicCanvas := (Form extent: extent depth: Display depth) getMainCanvas ].

	morphicCanvas ownerProcess: Processor activeProcess.
	morphicCanvas world: self.
	morphicDamageRecorder := DamageRecorder new.
	"Set this as the main canvas"
	canvas := morphicCanvas.
	damageRecorder := morphicDamageRecorder.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	delay := Delay forMilliseconds: 50.
	[
		self displayWorldOn: morphicCanvas.
		[
			"Set the main canvas on every iteration.
			This is needed if UI processes are interrupted, resumed, etc."
			canvas := morphicCanvas.
			damageRecorder := morphicDamageRecorder.
			self doOneCycleOn: morphicCanvas delay: delay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !
!WorldMorph class methodsFor: 'instance creation' stamp: 'jmv 8/25/2024 09:07:06' prior: 17008248!
                             newWorld
	"
[
	UISupervisor stopUIProcess.
	UISupervisor spawnNewMorphicProcessFor: WorldMorph newWorld
] fork.
	"
	| w |
	w := self new.
	w color: (Color r: 0.167 g: 0.344 b: 0.629).
	w borderWidth: 0.
	w position: `0@0` extent: Display extent.
	w handsDo: [ :h |
		h privateOwner: w ].
	^w! !
!WindowEdgeAdjustingMorph methodsFor: 'adjusting' stamp: 'jmv 8/25/2024 09:05:50' prior: 17006390 overrides: 16889516!
  adjustOwnerAt: aGlobalPoint millisecondSinceLast: millisecondSinceLast

	self basicAdjustOwnerAt: aGlobalPoint.

	"If UI is becoming slow or is optimized for slow systems, resize without
	showing window contents, but only edges. But don't do it for rotated Windows!!"
	(owner isOrAnyOwnerIsRotated not and: [
		(Preferences at: #cheapWindowReframe) or: [millisecondSinceLast > 200]]) ifTrue: [
			owner displayBounds newRectFrom: [ :f |
				self basicAdjustOwnerAt: Sensor mousePoint.
				owner morphPosition extent: owner extentInWorld ]].! !
!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 8/25/2024 09:03:33' prior: 16889728!
             adjustHorizontallyBy: aLayoutAdjustMorph at: localPoint
	| delta l ls r rs lNewWidth rNewWidth i lCurrentWidth rCurrentWidth |
	i := submorphs indexOf: aLayoutAdjustMorph.
	((i = 1) or: [i = self submorphs size]) ifTrue: [
			 self inform: 'LayoutAdjustingMorphs require morphs before and after'.
			^self 
	].
	l := self submorphs at: i +1.
	ls := l layoutSpec.
	lCurrentWidth := l extentInOwner x max: 1.	"avoid division by zero"
	r := self submorphs at: i - 1.
	rs := r layoutSpec.
	rCurrentWidth := r extentInOwner x max: 1.	"avoid division by zero"
	delta := localPoint x - aLayoutAdjustMorph referencePositionInOwner x.
	delta := delta max: l minimumShrinkWidth - lCurrentWidth.
	delta := delta min: rCurrentWidth - r minimumShrinkWidth.
	delta = 0 ifTrue: [ ^self ].
	rNewWidth := rCurrentWidth - delta.
	lNewWidth := lCurrentWidth + delta.
	(ls isProportionalWidth and: [ rs isProportionalWidth ])
		ifTrue: [ | leftNewProportion rightNewProportion toDistribute |	"If both proportional, update them"
			leftNewProportion := lNewWidth / (lNewWidth + rNewWidth).
			rightNewProportion := 1.0 - leftNewProportion.
			toDistribute := ls proportionalLayoutWidth + rs proportionalLayoutWidth.
			ls setProportionalWidth: leftNewProportion * toDistribute.
			rs setProportionalWidth: rightNewProportion * toDistribute ]
		ifFalse: ["If at least one is fixed, update only the fixed"
			ls isProportionalWidth ifFalse: [
				ls fixedOrMorphWidth: lNewWidth ].
			rs isProportionalWidth ifFalse: [
				rs fixedOrMorphWidth: rNewWidth ]].
	self layoutSubmorphs.! !
!LayoutMorph methodsFor: 'adjust' stamp: 'jmv 8/25/2024 09:03:33' prior: 16889780!
                   adjustVerticallyBy: aLayoutAdjustMorph at: localPoint
	| delta t ts b bs tNewHeight bNewHeight i tCurrentHeight bCurrentHeight |
	i := submorphs indexOf: aLayoutAdjustMorph.
	((i = 1) or: [i = self submorphs size]) ifTrue: [
			 self inform: 'LayoutAdjustingMorphs require morphs above and below'.
			^self 
	].	t := self submorphs at: i +1.
	ts := t layoutSpec.
	tCurrentHeight := t extentInOwner y max: 1.	"avoid division by zero"
	b := self submorphs at: i - 1.
	bs := b layoutSpec.
	bCurrentHeight := b extentInOwner y max: 1.	"avoid division by zero"
	delta := localPoint y - aLayoutAdjustMorph referencePositionInOwner y.
	delta := delta max: t minimumShrinkHeight - tCurrentHeight.
	delta := delta min: bCurrentHeight - b minimumShrinkHeight.
	delta = 0 ifTrue: [ ^self ].
	tNewHeight := tCurrentHeight + delta.
	bNewHeight := bCurrentHeight - delta.
	(ts isProportionalHeight and: [ bs isProportionalHeight ])
		ifTrue: [ | bottomNewProportion toDistribute topNewProportion |	"If both proportional, update them"
			topNewProportion := tNewHeight / (tNewHeight + bNewHeight).
			bottomNewProportion := 1.0 - topNewProportion.
			toDistribute := ts proportionalLayoutHeight + bs proportionalLayoutHeight.
			ts setProportionalHeight: topNewProportion * toDistribute.
			bs setProportionalHeight: bottomNewProportion * toDistribute ]
		ifFalse: ["If at least one is fixed, update only the fixed"
			ts isProportionalHeight ifFalse: [
				ts fixedOrMorphHeight: tNewHeight ].
			bs isProportionalHeight ifFalse: [
				bs fixedOrMorphHeight: bNewHeight ]].
	self layoutSubmorphs! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890545!
                    example1
"
	self example1
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (BoxedMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890674!
                               example101VG
"
	self example101VG
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (Sample09Clock new name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 100); 
	addMorph: (Sample01Star new name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Sample03Smiley new name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (Sample03Smiley new name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color lightRed;
	addMorph: (Sample02Bezier new name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Sample02Bezier new  name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (Sample02Bezier new  name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890733!
                    example11
"
	self example11
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (BoxedMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890800!
              example13
	"
	self example13
	"
	| pane row innerRow |
pane := (LayoutMorph newColumn separation: 5)	name: #example13.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	innerRow := (LayoutMorph newRow separation: 5) name: #InnerRow;
		color: Color red.
	innerRow
		addMorph: (BoxedMorph new name: #Box1)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (BoxedMorph new name: #Box2)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (BoxedMorph new name: #Bar)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: innerRow
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 offAxisEdgeWeight: #center);
		addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 
		addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #Rect1)
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 
		addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Rect2)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 250@130 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890846!
        example1b
"
Based on #example1, but using some ImageMorph instead of RectangleLikeMorph, so extent is not adjustable
	self example1b
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (ImageMorph new name: #B);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (BoxedMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (BoxedMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ImageMorph new name: #G);
	addMorph: (BoxedMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ImageMorph new name: #J);
	addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890905!
                          example2
	"
	self example2
	"
	| pane row |
	pane := (LayoutMorph newColumn separation: 5)	name: #example2.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: (BoxedMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #A)
			layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8 offAxisEdgeWeight: #rightOrBottom);
		addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #B)
			layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #C)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 0.7 offAxisEdgeWeight: #center).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 200@180 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890936!
                   example20
"
	self example20
"
| column |

column := (LayoutMorph newColumn separation: 5) name: #Column.
column
	color: Color red;
	addMorph: (BoxedMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 20);
	addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec fixedWidth: 40 proportionalHeight: 0.5);
	addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 30).
column position: 150@130 extent: 400@300.
column openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890958!
                            example3
	"
	self example3
	"
	| pane row innerRow |
pane := (LayoutMorph newColumn separation: 5)	name: #example3.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	innerRow := (LayoutMorph newRow separation: 5) name: #InnerRow;
		color: Color red.
	innerRow
		addMorph: (BoxedMorph new name: #Box1)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (BoxedMorph new name: #Box2)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (BoxedMorph new name: #Bar)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: innerRow
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 offAxisEdgeWeight: #center);
		addMorph: (BoxedMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #Rect1)
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: (BoxedMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Rect2)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 250@130 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 8/25/2024 09:07:06' prior: 16890999!
       example6
	"
	Useful example contributed by Ken Dickey
	All these should look the same, right? (mmmh this should be a test...)
	self example6
	"
| pane rect1 rect2 |
pane := LayoutMorph newRow separation: 5. "1"
pane addMorph: (LabelMorph contents: '1').

rect1 := BoxedMorph new color: (Color lightOrange); 
	morphExtent: 20 @ 30.
pane addMorphFront: rect1.
rect2 := BoxedMorph new color: (Color cyan); 
	morphExtent: 20 @ 30.
pane addMorphFront: rect2.
pane
	color: Color lightGreen;
	position: 120 @ 50 extent: 180 @ 100;
	openInWorld.

pane := LayoutMorph newRow separation: 5. "2"
pane addMorph: (LabelMorph contents: '2').

rect1 := BoxedMorph new color: (Color lightOrange);
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane addMorph: rect1.
rect2 := BoxedMorph new color: (Color cyan).
pane addMorph: rect2
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane
	color: Color lightGreen;
	position: 320 @ 50 extent: 180 @ 100;
	openInWorld.


pane := LayoutMorph newRow separation: 5. "3"
pane addMorph: (LabelMorph contents: '3').

rect1 := BoxedMorph new color: (Color lightOrange).
pane addMorph: rect1 
         layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
rect2 := BoxedMorph new color: (Color cyan);
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane addMorph: rect2.
pane
	color: Color lightGreen;
	position: 520 @ 50 extent: 180 @ 100;
	openInWorld! !
!ProgressMorph methodsFor: 'accessing' stamp: 'jmv 8/25/2024 09:07:06' prior: 16931780!
                    updatePositionAndExtent
	| w newExtent |
	layoutSpec notNil ifTrue: [
		^self ].
	w := ((labelMorph measureContents x max: subLabelMorph measureContents x) max: 200) + 18.
	w := w min: Display extent x.
	newExtent := w > extent x
		ifTrue: [ w@(labelMorph morphHeight + subLabelMorph morphHeight + progress morphHeight + 10) ]
		ifFalse: [ extent ].
	self world
		ifNotNil: [ :world |
			self position: world morphExtent - newExtent // 2 extent: newExtent ]
		ifNil: [ self morphExtent: newExtent ]! !
!TaskbarMorph methodsFor: 'events' stamp: 'jmv 8/25/2024 09:07:06' prior: 16973960!
                      screenSizeChanged
	"Respond to change in screen size by repositioning self to bottom of screen"
	
"	Transcript newLine; print: 'Taskbar screenSizeChanged'.
"
	| y e |
	self world ifNotNil: [ :w |
		y := w morphExtent y - self defaultHeight.
		e := (self internalizeDistance: w morphExtent x @ self defaultHeight) asIntegerPoint.
		self position: 0@y extent: e ].! !
!TaskbarMorph methodsFor: 'initialization' stamp: 'jmv 8/25/2024 09:05:50' prior: 50372798 overrides: 50368455!
  initialize
	super initialize.
	viewBox := LayoutMorph newRow color: self defaultColor.
	self
		addMorph: (clock := UpdatingLabelMorph initializedInstance)
		layoutSpec:  (LayoutSpec morphWidthProportionalHeight: 0.5).
	self
		addMorph: viewBox 
		layoutSpec: (LayoutSpec
			proportionalWidth: 1.0
			proportionalHeight: 1.0 
			offAxisEdgeWeight: #rightOrBottom).
	viewBox separation: self defaultHeight // 8.
	self setBalloonText: [ 
		'About this system:' bold, `String newLineString`,
		Smalltalk systemInformationString ].
	clock
		setProperty: #handlesMouseDown: toValue: true;
		setProperty: #'mouseButton1Down:localPosition:' 
		toValue: [ :evt : pos | | menu taskbarEdge point | 
			self runningWorld ifNotNil: [ :w |
				taskbarEdge := self positionInWorld y.
				menu := (Preferences at: #worldMenu) getMenuIn: w at: w activeHand.	
				menu hide.
				w addMorph: menu. ": Otherwise we do not have a proper extent"
				point := 0 @ (taskbarEdge - menu extentInWorld y).
				menu popUpAt: point allowKeyboard: false ] ]! !
!MenuMorph methodsFor: 'private' stamp: 'jmv 8/25/2024 09:07:06' prior: 16894514!
       adjustSubmorphsLayout
	"Enlarge the width of submorphs as needed
	so all of them are have the same width, and no less than #minWidth.
	Also adjust their vertical position.
	Finally, set our own extent."
	
	| w p h |
	
	submorphs isEmpty ifTrue: [ ^self ].
	w := submorphs inject: 0 into: [ :prev :each |
		prev max: each minItemWidth].

	w := w + 1.
	p := `5 @ 5`.
	submorphs do: [ :m |
		h := m morphHeight.
		m position: p extent: w@h.
		p := p + (0@(h + 1)) ].

	self morphExtent: w+4 @ p y + 5! !
!InnerHierarchicalListMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:07:06' prior: 16880206 overrides: 16922001!
                   adjustExtent
	"And reposition submorphs"
	| w h y |
	"make all items wide, so selection indicator is wide too"
	w := self desiredWidth.
	y := 0.
	self submorphsDo: [ :m |
		h := m morphHeight.
		m position: 0@y extent: w@h.
		y := y + h ].
	self morphExtent: w@y! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:03:33' prior: 16924774!
                         hTotalScrollRange
	"Return the width extent of the receiver's scrollable area"
	scroller ifNil: [ ^0 ].
	^scroller extentInOwner x! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:03:33' prior: 50355653 overrides: 50355613!
         someSubmorphPositionOrExtentChanged
	"Some submorph changed at any nested level.
	Must layout submorphs again."

	super someSubmorphPositionOrExtentChanged.
	scroller ifNotNil: [ | scrollerLocation doIt |
		doIt := false.
		scroller hasVariableExtent ifTrue: [
			theScrollerExtent = scroller extentInOwner ifFalse: [
				theScrollerExtent := scroller extentInOwner.
				doIt := true ]].
		scrollerLocation := scroller location.
		scrollerScale = scrollerLocation scale ifFalse: [
			scrollerScale := scrollerLocation scale.
			doIt := true ].
		scrollerRadians = scrollerLocation radians ifFalse: [
			scrollerRadians := scrollerLocation radians.
			doIt := true ].
		doIt ifTrue: [ self setScrollDeltas ]].! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:07:06' prior: 16924905!
                           updateScrollBarsBounds
	
	| t |
	hideScrollBars = #hide ifTrue: [^self].
	t := ScrollBar scrollbarThickness.
	(hideScrollBars = #hideVertical)
	ifFalse: [
		scrollBar
			position: extent x - t - borderWidth @ borderWidth
			extent: t @ self vScrollBarHeight.
	].
	hScrollBar
		position: borderWidth @ (extent y - t - borderWidth)
		extent: self hScrollBarWidth@t! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:03:33' prior: 16924956!
                     vTotalScrollRange
	"Return the height extent of the receiver's scrollable area"
	scroller ifNil: [ ^0 ].
	^scroller extentInOwner y! !
!ScrollBar methodsFor: 'scrolling' stamp: 'jmv 8/25/2024 09:07:06' prior: 16945792!
     sliderGrabbedAt: handPositionRelativeToSlider

	| e p |
	grabPosition := handPositionRelativeToSlider.
	self isHorizontal
		ifTrue: [
			e := slider morphWidth @ self buttonExtent.
			p := slider morphPosition x @ borderWidth ]
		ifFalse: [
			e := self buttonExtent @ slider morphHeight.
			p := borderWidth @ slider morphPosition y ].
	sliderShadow
		position: p extent: e;
		show! !
!SystemWindow methodsFor: 'drawing' stamp: 'jmv 8/25/2024 09:05:50' prior: 16970726!
         makeMeFullyVisible 

	self world morphExtent > `0@0` ifFalse: [^ self].

	(self morphPosition >= `0@0` and: [ self morphPosition < (self world morphExtent-extent)]) ifTrue: [
		^ self "OK -- visible"].

	self morphPosition: (RealEstateAgent initialFrameFor: self initialExtent: self extentInWorld world: self world) topLeft! !
!SystemWindow methodsFor: 'layout' stamp: 'jmv 8/25/2024 09:07:06' prior: 16970987 overrides: 16906128!
                 layoutSubmorphs
	"Compute a new layout of submorphs based on the given layout bounds."

	| h thickness w cornerExtent wh ww pos halfThickness |
	thickness := self borderWidth.
	halfThickness := thickness * 0.5.
	cornerExtent := thickness * 5.
	ww := extent x.
	wh := extent y.
	w := ww - cornerExtent - cornerExtent.
	h := wh - cornerExtent - cornerExtent.
	(adjusters at: #topAdjuster) position: cornerExtent@halfThickness extent: w@0.
	(adjusters at: #bottomAdjuster) position: cornerExtent@(wh-halfThickness) extent: w@0.
	(adjusters at: #leftAdjuster) position: halfThickness@cornerExtent extent: 0@h.
	(adjusters at: #rightAdjuster) position: ww-halfThickness@cornerExtent extent: 0@h.
	(adjusters at: #topLeftAdjuster) position: `0@0` extent: cornerExtent@cornerExtent.
	(adjusters at: #topRightAdjuster) position: ww-cornerExtent@0 extent: cornerExtent@cornerExtent.
	(adjusters at: #bottomLeftAdjuster) position: 0@(wh-cornerExtent) extent: cornerExtent@cornerExtent.
	(adjusters at: #bottomRightAdjuster) position: ww@wh-cornerExtent extent: cornerExtent@cornerExtent.

	layoutMorph ifNotNil: [
		pos := borderWidth @ (borderWidth + self labelHeight).
		layoutMorph
			position: pos
			extent: extent - pos - borderWidth ].

	self layoutNeeded: false.! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 09:06:11' prior: 50373066!
                       browseHierarchyAndReplaceMe
	"Create and schedule a new hierarchy browser on the currently selected class or meta.
	Resize and position it over me and dismiss me."

	model hierarchyBrowser ifNotNil: [ :newBrowser | | newBrowserWindow |
		newBrowserWindow := HierarchyBrowserWindow
			openNoSysCat: newBrowser
			label: newBrowser labelString.
		newBrowser assureSelectionsShow.
		newBrowserWindow
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 09:06:11' prior: 50373085!
                 browseMethodFullAndReplaceMe
	"Create and schedule a full Browser and then select the current class and message.
	Resize and position it over me and dismiss me."

	model selectedClassOrMetaClass ifNotNil: [ :myClass | | newBrowserWindow |
		newBrowserWindow := BrowserWindow
			fullOnClass: myClass 
			selector: model selectedMessageName.
		newBrowserWindow
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ]! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 8/25/2024 09:06:11' prior: 50373103!
                       methodInheritanceAndReplaceMe
	"Create and schedule a method browser on the inheritance of implementors.
	Resize and position it over me and dismiss me."

	| newBrowser |
	(newBrowser := self methodInheritance) == self ifFalse: [
		newBrowser
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ]
	! !
!ResizeMorph methodsFor: 'as yet unclassified' stamp: 'jmv 8/25/2024 09:07:06' prior: 16940498!
  updateOutlineMorph
	| rectangle |
	rectangle := self selectionRectangle: Display extent.
	outlineMorph
		position: rectangle origin extent: rectangle extent;
		show! !
!AutoCompleterMorph methodsFor: 'actions' stamp: 'jmv 8/25/2024 09:07:06' prior: 16784805!
                             resetMenu
	| width newExtent |

	self calculateItemsPerPage.

	self firstVisible: 1.
	self selected: self firstSelectableEntryIndex.

	width := self calculateWidth.
	newExtent := width + 4 @ (self itemsPerPage * self itemHeight + 2).

	self position: originalPosition extent: newExtent.
	"redraw is needed even if position and extent haven't changed"
	self redrawNeeded ! !
!SmalltalkCompleterMorph methodsFor: 'selector documentation' stamp: 'jmv 8/25/2024 09:07:06' prior: 16952681!
                           showSelectorDocumentation

	| selectorDocumentationLocation selectorDocumentationExtent |

	selectorDocumentationLocation := self selectorDefaultDocumentationLocation.
	selectorDocumentationExtent := self selectorDocumentationExtent.
	selectorDocumentationLocation := self adjust: selectorDocumentationLocation ifOutOfScreenWith: selectorDocumentationExtent xOffset: extent x yOffset: self itemHeight negated.

	self setDefaultColors.

	self selectorDocumentation
		model: (TextModel withText: self selectorDocumentationText);
		position: selectorDocumentationLocation extent: selectorDocumentationExtent;
		wrapFlag: false;
		show.

	! !
!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 8/25/2024 09:03:33' prior: 16891178!
            fixedHeight
	^proportionalHeight isNil ifTrue: [fixedHeight ifNil: [morph extentInOwner y]] ifFalse: [ 0 ]! !
!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 8/25/2024 09:05:11' prior: 16891192!
                             fixedOrMorphHeight: aNumber
	"aNumber is taken as the fixed height to use.
	No proportional part."
	fixedHeight
		ifNotNil: [ fixedHeight := aNumber ]
		ifNil: [ fixedHeight := aNumber.
			  morph heightInOwner: aNumber 
		].
	proportionalHeight := nil! !
!LayoutSpec methodsFor: 'accessing' stamp: 'jmv 8/25/2024 09:03:33' prior: 16891214!
           fixedWidth
	^proportionalWidth isNil ifTrue: [fixedWidth ifNil: [morph extentInOwner x]] ifFalse: [ 0 ]! !
!LayoutSpec methodsFor: 'layout' stamp: 'jmv 8/25/2024 09:03:33' prior: 16891360!
   fixedOrMinimumLayoutHeight
	^fixedHeight ifNil: [ morph extentInOwner y ]! !
!LayoutSpec methodsFor: 'layout' stamp: 'jmv 8/25/2024 09:03:33' prior: 16891365!
 fixedOrMinimumLayoutWidth
	^fixedWidth ifNil: [ morph extentInOwner x ]! !
!LayoutSpec methodsFor: 'layout' stamp: 'jmv 8/25/2024 09:03:33' prior: 16891384!
   minimumSpecExtent
	"If fixedHeight is not nil, use it.  
	 If fixdHeight and propostionlHeight are nil, use morphHeight"

	| meo h w |
	meo := morph extentInOwner.
	w := fixedWidth ifNil: [ proportionalWidth ifNotNil: [ 0 ] ifNil: [  meo x ] ].
	h := fixedHeight ifNil: [ proportionalHeight ifNotNil: [ 0 ] ifNil: [ meo y ] ].
	^w@h! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6633-MoreMorphProtocolsCleanup-JuanVuletich-2024Aug25-09h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6630] on 25 August 2024 at 9:26:06 am'!
!Morph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:25:28' prior: 16905194!
                           morphExtentInOwner

	self flag: #deprecated.
	^self extentInOwner! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:25:06' prior: 16796515!
       morphExtentInOwner: newExtent

	self flag: #deprecated.
	^self extentInOwner: newExtent! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:24:31' prior: 16796520!
                 morphExtentInWorld
	"World coordinates"

	self flag: #deprecated.
	^self extentInWorld! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:24:56' prior: 16796526!
                  morphExtentInWorld: newExtent
	"world coordinates"

	self flag: #deprecated.
	^self extentInWorld: newExtent! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:24:42' prior: 16796541!
                            morphHeightInOwner: newHeight

	self flag: #deprecated.
	^ self heightInOwner: newHeight! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 8/25/2024 09:24:21' prior: 16796557!
                morphPosition: newPos extent: newExtent
	"Change the position and extent of this morph. Arguments are owner's coordinates."

	self flag: #deprecated.
	^self position: newPos extent: newExtent! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6634-MorphProtocolsCleanup-markOldAsDeprecated-JuanVuletich-2024Aug25-09h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6630] on 25 August 2024 at 9:34:38 am'!
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 8/25/2024 09:33:42' prior: 50360235 overrides: 50335628!
                             keyStroke: aKeyboardEvent

	super keyStroke: aKeyboardEvent.

	"Ignore any unknown keyboard shortcut"
	aKeyboardEvent anyModifierKeyPressed ifTrue: [
		aKeyboardEvent wasHandled: true ].

	aKeyboardEvent wasHandled ifTrue: [ 
		self selectionChanged.  "Note new selection"
		self updateFromTextComposition.
		^self ].

	autoCompleter 
		ifNil: [ self processKeystrokeEvent: aKeyboardEvent ]
		ifNotNil: [
			autoCompleter
				autoCompletionAround: [ self processKeystrokeEvent: aKeyboardEvent ]
				keyStroke: aKeyboardEvent ].

	aKeyboardEvent wasHandled: true.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6635-IgnoreUnknownKeyboardShortcuts-JuanVuletich-2024Aug25-09h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6635] on 26 August 2024 at 4:40:35 pm'!
!InnerTextMorph methodsFor: 'events' stamp: 'jmv 6/10/2024 16:31:01' prior: 50374610 overrides: 50335628!
                    keyStroke: aKeyboardEvent

	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ 
		self selectionChanged.  "Note new selection"
		self updateFromTextComposition.
		^self ].

	autoCompleter 
		ifNil: [ self processKeystrokeEvent: aKeyboardEvent ]
		ifNotNil: [
			autoCompleter
				autoCompletionAround: [ self processKeystrokeEvent: aKeyboardEvent ]
				keyStroke: aKeyboardEvent ].

	aKeyboardEvent wasHandled: true.
! !
!Editor methodsFor: 'typing/selecting keys' stamp: 'jmv 8/26/2024 16:39:26' prior: 16852139!
           normalCharacter: aKeyboardEvent 
	"A nonspecial character is to be added to the stream of characters."

	| character i replacement |

	"Ignore keystrokes that could be keyboard shortcuts, even if not defined as such."
	((aKeyboardEvent keyValue between: 32 and: 126) and: [ aKeyboardEvent commandAltKeyPressed ])
		ifTrue: [ ^true ].

	"Convert strings like '\+161 ' (≈°) to unicode"
	aKeyboardEvent isSpace ifTrue: [ | string |
		string := self privateCurrentString.
		self pointIndex - 1 to: (self pointIndex - 7 max: 1) by: -1 do: [ :index |
		(string at: index) = $\ ifTrue: [ | key |
			key := string copyFrom: index + 1 to: self pointIndex - 1.
			(key size > 2 and: [ (key at: 1) = $+ ])
				ifTrue: [ | stream number value |
					stream := ReadStream on: key asUppercase from: 2 to: key size.
					[ number := Integer readFrom: stream  base: 16 ] on: Error do: [ ^ false ].
					value := Character codePoint: number.
					self
						selectFrom: index to: self pointIndex - 1;
						replaceSelectionWith: (UnicodeString with: value).
						^ false ] ] ] ].
	character := aKeyboardEvent keyCharacter.
	"Linux VMs don't automatically replace combining marks + space with ASCII,
	as Windows and Mac VMs do. It seems it is an app responsability to do that in Linux."
	character isDiacriticalMark ifTrue: [
		i := self pointIndex-1.
		(i > 0 and: [ (self privateCurrentString at: i) = $  ]) ifTrue: [
			replacement := character caseOf: {
				[ `Character codePoint: 16r300` ] -> [ '`' ].
				[ `Character codePoint: 16r301` ] -> [ '''' ].
				[ `Character codePoint: 16r302` ] -> [ '^' ].
				[ `Character codePoint: 16r303` ] -> [ '~' ].
				[ `Character codePoint: 16r308` ] -> [ '"' ].
			} otherwise: [].
			replacement notNil ifTrue: [
				self selectFrom: i to: i; replaceSelectionWith: replacement.
				^ false ]
			]
		].
	self addString: (UnicodeString with: character).
	^false! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6636-FixBuggy6635-JuanVuletich-2024Aug26-16h36m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6636] on 26 August 2024 at 5:11:31 pm'!
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 8/26/2024 17:07:30' prior: 50371357!
                            messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 											preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 											debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 											editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 											goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 											scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 											spreadsheetIcon)
		#(80 		'-----')
		#(90		'fileOut' 							nil 	model 			fileOutMessage 											fileOutIcon)
		#(100		'run test (t)' 							$t 	model 			runMethodTest 											weatherFewCloudsIcon)
		#(110		'debug test (r)' 							$r 	model 			debugMethodTest 											weatherFewCloudsIcon)
		#(120		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 											exploreIcon)
		#(130 		'-----')
		#(140		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 											mailForwardIcon)
		#(150		'local senders of...' 							nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(160		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 											developmentIcon)
		#(170		'local implementors of...' 							nil 	window 			browseLocalImplementorsOfMessages 											developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 											goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 											clockIcon)
		#(200 		'-----')
		#(210		'remove method (x)' 							$x 	model 			removeMessage 											deleteIcon)
		#(220		'more' 							nil 	nil 			2000 											listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)
		#(994		nil 							$N 	window 			browseClassRefs)

		" 'more' SubMenu"
		#(2010		'toggle diffing (D)' 								$D 	model 			toggleDiffing 										switchIcon)
		#(2020 		'-----')
		#(2030		'sample instance' 								nil 	window 			makeSampleInstance 										instanceIcon)
		#(2040		'inspect instances' 								nil 	window 			inspectInstances 										inspectIcon)
		#(2050		'inspect subinstances' 								nil 	window 			inspectSubInstances 										inspectIcon)
		#(2060 		'-----')
		#(2070 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 										listRemoveIcon)
		#(2080 		'filter message list...' 								nil 	window 			filterMessageList 										findIcon)
		#(2090		'change category...' 								nil 	model 			changeCategory 										saveAsIcon)
		#(2100		'change sets with this method' 								nil 	window 			findMethodInChangeSets 										changesIcon)
		#(2110		'revert to previous version' 								nil 	model 			revertToPreviousVersion 										undoIcon)
		#(2120 		'-----')
		#(2130 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 										classIcon)
		#(2140 		'sort by class name' 								nil 	model 			sortByClassName 										classIcon)
		#(2150 		'sort by selector' 								nil 	model 			sortBySelector 										scriptIcon)
		#(2160 		'sort by date' 								nil 	model 			sortByDate 										dateIcon)
		#(2170 		'reverse sort' 								nil 	model 			sortReverse 										redoIcon)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6637-AddBackClassReferencesShortcutToMethodLists-JuanVuletich-2024Aug26-17h11m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6637] on 27 August 2024 at 10:43:08 am'!
!TextModel methodsFor: 'misc' stamp: 'jmv 8/27/2024 10:39:17' prior: 16982569!
                       refetch
	"Nothing here. Answer true if actualContents was actually fetched."
	self actualContents: self actualContents.
	self changed: #refetched.! !
!PluggableTextModel methodsFor: 'misc' stamp: 'jmv 8/27/2024 10:39:29' prior: 16925291 overrides: 50374852!
                              refetch
	"Answer true if actualContents was actually fetched."
	textGetter
		ifNil: [
			actualContents ifNil: [
				self actualContents: Text new ]]
		ifNotNil: [
			self actualContents: (Text
				initialFont: (Preferences at: #standardCodeFont)
				stringOrText: (textProvider perform: textGetter)).
			self changed: #refetched ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6638-BasicTextEditor-ReflowText-onDefaultFontChanges-JuanVuletich-2024Aug27-10h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6638] on 27 August 2024 at 11:58:30 am'!
!String methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:24:10' prior: 16959828!
  asHex

	^self species streamContents: [ :strm |
		self do: [ :ch | strm nextPutAll: ch hex ] separatedBy: [ strm space ]].! !
!String class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:27:36' prior: 50352406!
   fromUtf8Bytes: aByteArray trimLastNull: doTrimLastNullChar
	"Convert the given string from UTF-8 to the internal encoding: ISO Latin-1 (ISO 8859-1).
	Discard any code points that can not be represented."

	^self streamContents: [ :strm | | s byteIndex n |
		s := aByteArray size.
		byteIndex := 1.
		[  byteIndex <= s ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: aByteArray
				into: nil
				into: [ :codePoint |
					codePoint < 256 ifTrue: [
						strm nextPut: (Character codePoint: codePoint) ]].
			byteIndex := byteIndex + n
		].
		(doTrimLastNullChar and: [ aByteArray last = 0 ]) ifTrue: [
			strm position: strm position - 1 ]].! !
!String class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:34:17' prior: 16960226!
     percentEscapingNonAscii: aByteArray
	"Percent encode any byte not in the ASCII range:
	replace it with %XX where XX are the hexadecimal digits.
	See https://en.wikipedia.org/wiki/URL_encoding
	
	String percentEscapingNonAscii: '‚äô' bytes
	(String percentEscapingNonAscii: '‚äô' bytes) unescapePercents
	"

	^self percentEscapingNonAsciiAndThoseIn: nil bytes: aByteArray! !
!String class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:27:32' prior: 50347959!
           percentEscapingNonAsciiAndThoseIn: aCharacterMapByteArray bytes: aByteArray
	"Percent encode any byte not in the ASCII range.
	Also encode any in aCharacterMap.
	Replace them with %XX where XX are the hexadecimal digits.
	See https://en.wikipedia.org/wiki/URL_encoding
	
	String percentEscapingNonAscii: '‚äô' bytes
	"

	^self streamContents: [ :strm |
		aByteArray do: [ :byte | 
			(byte > 127 or: [
						aCharacterMapByteArray isNil or: [
							(aCharacterMapByteArray at: byte+1) = 1 ]])
				ifTrue: [
					strm nextPut: $%.
					strm nextPut: (byte // 16) asHexDigit.
					strm nextPut: (byte \\ 16) asHexDigit ]
				ifFalse: [ strm nextPut: (Character codePoint: byte) ]]].! !
!Symbol methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:29:50' prior: 16961357 overrides: 16813384!
             asPlainString
	"Answer a plain String, not a Symbol."
	| newString |
	newString := self species new: self size.
	1 to: self size do: [:index | newString at: index put: (self at: index)].
	^newString! !
!Symbol methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:25:02' prior: 16961377!
    numArgs: n
	"Answer a string that can be used as a selector with n arguments.
	 TODO: need to be extended to support shrinking and for selectors like #+ 
	
	Note: Unrelated, but remember that we inherit #numArgs " 

	| numArgs offs |
	(numArgs := self numArgs) >= n ifTrue: [ ^self ].	
	^ (self species streamContents: [ :strm |
		strm nextPutAll: self.
		(numArgs = 0) ifTrue: [ strm nextPutAll: ':'. offs := 0 ] ifFalse: [offs := 1].
		2 to: n - numArgs + offs do: [ :i | strm nextPutAll: 'with:' ]]) asSymbol! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6639-RemoveHardcodedReferencesTo-String-JuanVuletich-2024Aug27-11h53m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6638] on 27 August 2024 at 12:00:51 pm'!
!UnicodeString methodsFor: 'copying' stamp: 'jmv 8/27/2024 11:39:37' prior: 16992904!
                       appendToString: aString

	^ self species fromUtf8Bytes: aString asUtf8Bytes, bytes codePointCount: aString size + self size.! !
!UnicodeString methodsFor: 'copying' stamp: 'jmv 8/27/2024 11:42:21' prior: 16992911 overrides: 16947368!
                      copyFrom: startIndex to: stopIndex
	"Return a new string, a copy of me from startIndex to stopIndex, both character indices.
	Signal SubscriptOutOfBounds or CollectionIsEmpty in case of illegal indices."
	
	| startByteIndex stopByteIndex |
	startIndex = (self size+1) ifTrue: [ ^ self species empty ].
	stopIndex = 0 ifTrue: [ ^ self species empty ].
	self boundsCheck: startIndex. 
	self boundsCheck: stopIndex. 
	startByteIndex := self byteIndexAt: startIndex.
	stopByteIndex := self byteIndexAt: stopIndex.
	stopByteIndex := stopByteIndex + (self encodedByteCountAt: stopByteIndex) - 1.
	^ self species
		fromUtf8Bytes: (bytes copyFrom: startByteIndex to: stopByteIndex)
		codePointCount: stopIndex-startIndex+1.! !
!UnicodeString methodsFor: 'copying' stamp: 'jmv 8/27/2024 11:39:47' prior: 16992936 overrides: 16947394!
       copyReplaceFrom: startIndex to: endIndex with: replacement
	"Answer a copy of the receiver satisfying the following conditions: 
	+ stop is less than start, then this is an insertion; stop should be exactly start-1, 
	+ start = 1 means insert before the first character,
	+ start = size+1 means append after last character. 
	+ Otherwise, this is a replacement; start and stop have to be within the receiver's bounds."

	| epilogFirstIndex prologLastIndex newBytes replacementBytes |
	prologLastIndex := (self byteIndexAt: startIndex)-1.
	epilogFirstIndex := self byteIndexAt: endIndex+1.
	replacementBytes := replacement string asUtf8BytesOrByteString.
	newBytes := (bytes copyFrom: 1 to: prologLastIndex),
		replacementBytes,
		(bytes
			copyFrom: epilogFirstIndex
			to: bytes size).
	^ self species fromUtf8Bytes: newBytes codePointCount: (startIndex-1) + replacement size + (self size-endIndex).! !
!UnicodeString methodsFor: 'copying' stamp: 'jmv 8/27/2024 11:39:54' prior: 16992967 overrides: 16947460!
              copyWith: aCharacter

	^ self species
		fromUtf8Bytes: bytes, (Character utf8BytesOf: aCharacter codePoint)
		codePointCount: self size + 1.! !
!UnicodeString methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:22:11' prior: 16993323 overrides: 16813362!
   asLowercase
	| b |
	self isAscii ifFalse: [ ^super asLowercase ].
	b := bytes copy.
	String translateToLowercase: b.
	^ self species fromUtf8Bytes: b! !
!UnicodeString methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:22:16' prior: 16993336 overrides: 16813492!
                          asUppercase
	| b |
	self isAscii ifFalse: [ ^super asUppercase ].
	b := bytes copy.
	String translateToUppercase: b.
	^ self species fromUtf8Bytes: b! !
!UnicodeString methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:22:45' prior: 16993357!
              substrings
	"Answer an array of the substrings that compose the receiver.
	Whitespace characters are considered separators, and not included in the result.

	'  Hello World!! Some  		1234 more  ‚Ç¨s ' substrings

	'  Hello World!!     Some  		1234 more  ‚Ç¨s 
	for you
	to play with ' substrings
	"
	^ self isAscii
		ifTrue: [ (String substringsIn: bytes) collect: [ :eachBytes |
				self species fromUtf8Bytes: eachBytes codePointCount: eachBytes size ]]
		ifFalse: [ (String substringsIn: bytes) collect: [ :eachBytes |
				self species fromUtf8Bytes: eachBytes ]].! !
!UnicodeString methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:41:05' prior: 16993393!
            withLineEndings: lineEndingString
	"assume the string is textual, and that CR, LF, and CRLF are all valid line endings. 
	Answer a new String, where each occurence with is replaced with lineEndingString"

	| correctedBytes |
	correctedBytes := String string: bytes withLineEndings: lineEndingString asByteArray.
	"The codePointCount trick can be done because the line endings considered are all single byte UTF-8.
	If we ever consider unicode line endings taking more than one byte, this is no longer valid (pass nil instead)."
	^ self species fromUtf8Bytes: correctedBytes codePointCount: self size - bytes size + correctedBytes size.! !
!UnicodeString methodsFor: 'Unicode normalization' stamp: 'jmv 8/27/2024 11:25:26' prior: 16993819!
                             basicCanonicalComposition
	"
	Usually prefer #canonicalComposition or #canonicalDecomposition
	https://unicode.org/reports/tr15/#Norm_Forms

	See examples at #canonicalComposition.
	(UnicodeString fromCodePoints: #(119128 119141)) basicCanonicalComposition asCodePoints
	(UnicodeString fromCodePoints: #(119135 119151)) basicCanonicalComposition asCodePoints
	(UnicodeString fromCodePoints: #(119128 119141 119151)) basicCanonicalComposition asCodePoints
	"
	| byteIndex stopByteIndex n combining cls |
	byteIndex := 1.
	stopByteIndex := bytes size.
	combining := OrderedCollection new.
	^self species streamContents: [ :strm |
		[ byteIndex <= stopByteIndex ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: bytes into: nil into: [ :codePoint |
				cls := Character combiningClass: codePoint.
				cls = 0 ifTrue: [
					self basicCompose: combining on: strm.
					combining := OrderedCollection new ].
				combining add: codePoint ].
			byteIndex := byteIndex + n ].
		self basicCompose: combining on: strm ].! !
!UnicodeString methodsFor: 'Unicode normalization' stamp: 'jmv 8/27/2024 11:26:01' prior: 16993855!
                basicCanonicalDecomposition
	"
	Usually prefer #canonicalComposition or #canonicalDecomposition
	https://unicode.org/reports/tr15/#Norm_Forms

	See examples at #canonicalDecomposition.
	(Character codePoint: 119135) asString basicCanonicalDecomposition asCodePoints
	(Character codePoint: 119137) asString basicCanonicalDecomposition asCodePoints
	"
	| byteIndex stopByteIndex n |
	byteIndex := 1.
	stopByteIndex := bytes size.
	^self species streamContents: [ :strm |
		[ byteIndex <= stopByteIndex ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: bytes into: nil into: [ :codePoint |
				Character canonicalDecomposition: codePoint on: strm ].
			byteIndex := byteIndex + n ]].! !
!UnicodeString methodsFor: 'Unicode normalization' stamp: 'jmv 8/27/2024 11:26:06' prior: 16993880!
                          basicCanonicallyOrdered
	"
	Usually prefer #canonicalComposition or #canonicalDecomposition
	https://unicode.org/reports/tr15/#Norm_Forms

	(UnicodeString fromCodePoints: #(16r61  16r0300 16r0315 16r031B)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	(UnicodeString fromCodePoints: #(16r61  16r0300 16r031B 16r0315)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	(UnicodeString fromCodePoints: #(16r61  16r0315 16r031B 16r0300)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	(UnicodeString fromCodePoints: #(16r61  16r0315 16r0300 16r031B)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	(UnicodeString fromCodePoints: #(16r61  16r031B 16r0300 16r0315)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	(UnicodeString fromCodePoints: #(16r61  16r031B 16r0315 16r0300)) basicCanonicallyOrdered asCodePoints asArray collect: [ :e | e hex ]
	"
	| byteIndex stopByteIndex n combining cls element |
	byteIndex := 1.
	stopByteIndex := bytes size.
	combining := OrderedCollection new.
	^self species streamContents: [ :strm |
		[ byteIndex <= stopByteIndex ] whileTrue: [
			n := Character utf8BytesAndCodePointAt: byteIndex in: bytes into: nil into: [ :codePoint |
				cls := Character combiningClass: codePoint.
				cls = 0
					ifTrue: [
						combining notEmpty ifTrue: [
							combining sort: [ :a :b | a first < b first or: [ a first = b first and: [a second < b second]] ].
							combining do: [ :e | strm nextPutCodePoint: e third ]].
						strm nextPutCodePoint: codePoint.
						combining := OrderedCollection new ]
					ifFalse: [
						element := { cls. combining size+1. codePoint }.
						combining add: element ]].
			byteIndex := byteIndex + n ].
		combining notEmpty ifTrue: [
			combining sort: [ :a :b | a first < b first or: [ a first = b first and: [a second < b second]] ].
			combining do: [ :e | strm nextPutCodePoint: e third ] ]].! !
!UnicodeString class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:40:22' prior: 50352448!
      fromBytesStream: aByteStream
	"Handle UTF-8 bytes, but convert invalid UTF-8 assuming it means ISO-8859-1.
	Argument can be, for example, a InflateStream."

	| utf8 codePointCount buffer readBytes leftover byteIndex n |
	buffer := ByteArray new: 10000.
	leftover := nil.
	codePointCount := 0.
	utf8 := ByteArray streamContents: [ :utf8Stream |
		[aByteStream atEnd] whileFalse: [ 
			readBytes := aByteStream nextInto: buffer.
			leftover ifNotNil: [
				readBytes := leftover, readBytes.
				leftover := nil ].
			byteIndex := 1.
			[ byteIndex <= (aByteStream atEnd
						ifFalse: [readBytes size-3] "To be sure we don't break a possible partially read multibyte code point."
						ifTrue: [readBytes size])   						"But do taks _all_ the bytes if they are the last ones."
			] whileTrue: [
				n := Character utf8BytesAndCodePointAt: byteIndex in: readBytes
					into: [ :byte1 :byte2 :byte3 :byte4 |
						utf8Stream nextPut: byte1.
						byte2 ifNotNil: [
							utf8Stream nextPut: byte2.
							byte3 ifNotNil: [
								utf8Stream nextPut: byte3.
								byte4 ifNotNil: [
									utf8Stream nextPut: byte4 ]]].
						codePointCount := codePointCount + 1]
					into: nil.
				byteIndex := byteIndex + n ].
			leftover := byteIndex > readBytes size ifFalse: [
				readBytes copyFrom: byteIndex to: readBytes size ].
		].
	].
	^self fromUtf8Bytes: utf8 codePointCount: codePointCount.! !
!UnicodeString class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:40:41' prior: 16994153!
       fromCodePoints: aWordArray

	^self fromUtf8Bytes: (self utf8FromCodePoints: aWordArray) codePointCount: aWordArray size.! !
!UnicodeString class methodsFor: 'instance creation' stamp: 'jmv 8/27/2024 11:27:12' prior: 16994213 overrides: 16829128!
          newFrom: aSimilarObject
	^self streamContents: [ :strm |
		aSimilarObject do: [ :codePoint |
			strm nextPut: codePoint ]]

"
	{$c. $h. $r} as: String
	{$c. $h. $r} as: UnicodeString
"! !
!UnicodeSymbol methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:41:24' prior: 16994859 overrides: 16813384!
                       asPlainString
	"Answer a plain String, not a Symbol."

	^ self species fromUtf8Bytes: bytes codePointCount: self size.! !
!UnicodeSymbol methodsFor: 'converting' stamp: 'jmv 8/27/2024 11:26:13' prior: 16994878!
             numArgs: n
	"Answer a string that can be used as a selector with n arguments.
	 TODO: need to be extended to support shrinking and for selectors like #+ 
	
	Note: Unrelated, but remember that we inherit #numArgs " 

	| numArgs offs |
	(numArgs := self numArgs) >= n ifTrue: [ ^self ].	
	^ (self species streamContents: [ :strm |
		strm nextPutAll: self.
		(numArgs = 0) ifTrue: [ strm nextPutAll: ':'. offs := 0 ] ifFalse: [offs := 1].
		2 to: n - numArgs + offs do: [ :i | strm nextPutAll: 'with:' ]]) asSymbol.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6640-RemoveHardcodedReferencesTo-UnicodeString-JuanVuletich-2024Aug27-11h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6642] on 27 August 2024 at 2:50:03 pm'!
!Morph methodsFor: 'halos and balloon help' stamp: 'jmv 8/27/2024 14:14:05' prior: 16905728!
         addHalo: aMorphicEventOrNil

	| hand position |
	aMorphicEventOrNil
		ifNil: [
			hand := self world activeHand.
			position := hand lastMouseEvent eventPosition ]
		ifNotNil: [
			hand := aMorphicEventOrNil hand.
			position := aMorphicEventOrNil eventPosition ].

	HaloMorph new popUpFor: self handPosition: position hand: hand.! !

WorldMorph removeSelector: #firstHand!

!methodRemoval: WorldMorph #firstHand stamp: 'Install-6641-cleanup-JuanVuletich-2024Aug27-14h47m-jmv.001.cs.st 8/28/2024 17:06:35'!
firstHand

	^ hands first!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6641-cleanup-JuanVuletich-2024Aug27-14h47m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6643] on 27 August 2024 at 2:57:48 pm'!
!HandMorph methodsFor: 'halo handling' stamp: 'jmv 8/27/2024 14:20:28' prior: 16873171!
                              obtainHalo: aHalo
	"Used for transfering halos between hands"

	self halo == aHalo ifTrue: [^self].
	"Find former owner"
	self world handsDo: [ :h |
		h halo == aHalo ifTrue: [h releaseHalo: aHalo]].
	self halo: aHalo.! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 8/27/2024 14:17:56' prior: 17007859!
          doOneCycleNowOn: aMorphicCanvas
	"Immediately do one cycle of the interaction loop.
	Only used for a few tests."
	"See #eventTickler"
	| hadAny |
	lastCycleTime := Time localMillisecondClock.
	Cursor currentCursor = (Cursor cursorAt: #waitCursor) ifTrue: [ Cursor defaultCursor activateCursor ].
	"Repair visual damage."
	self checkForNewScreenSize.
	self displayWorldOn: aMorphicCanvas.
	"Run steps, alarms and deferred UI messages."
	self runDeferredUIMessages.
	self triggerAlarmsBefore: lastCycleTime.
	self runLocalStepMethods: lastCycleTime.
	"Ensure that any affected morph is redrawn ASAP."
	self displayWorldOn: aMorphicCanvas.
	"Process user input events. Run all event triggered code."
	hadAny := false.
	"The default is the first hand"
	self handsReverseDo: [ :h |
		activeHand := h.
		hadAny := hadAny | h processEventQueue ].
	"Run any deferred UI messages that were enqueued during this cycle, perhaps
	as consequence of event handling or step methods, or sent from other processes,
	before the inter cycle pause."
	self runDeferredUIMessages.
	"Ensure that any affected morph is redrawn ASAP, before the inter cycle pause."
	self displayWorldOn: aMorphicCanvas.
	lastCycleHadAnyEvent := hadAny.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6642-cleanup-JuanVuletich-2024Aug27-14h57m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6643] on 27 August 2024 at 2:58:30 pm'!
!WorldMorph methodsFor: 'hands' stamp: 'jmv 8/27/2024 14:08:41' prior: 17007408 overrides: 16915804!
         activeHand
	activeHand isNil ifTrue: [
		hands isEmpty
			ifTrue: [
				activeHand := HandMorph new.
				hands := {activeHand } ]
			ifFalse: [ activeHand := hands first].].
	^activeHand.! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 8/27/2024 14:07:15' prior: 17007962!
         doOneMinimalCycleNow
	"Immediately do one cycle of the interaction loop.
	Only repair display and process events. For modal menus and such."

	"Repair visual damage."
	self displayWorldOn: self mainCanvas.

	"Process user input events. Run all event triggered code."
	^self activeHand processEventQueue! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6643-robust-activeHand-JuanVuletich-2024Aug27-14h57m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6643] on 27 August 2024 at 4:34:13 pm'!
!SystemWindow methodsFor: 'geometry' stamp: 'jmv 8/27/2024 16:33:11' prior: 16970791!
                          rescaleButtons
	"boxExtent changed. Update my buttons."

	| buttonExtent buttonPos spacing |
	buttonExtent := Theme current titleBarButtonsExtent.
	buttonPos := (self labelHeight + borderWidth - Theme current titleBarButtonsExtent / 2) ceiling asPoint.
	spacing := Theme current titleBarButtonsExtent x *13//10.
	self submorphsReverseDo: [ :aMorph |
		(aMorph is: #PluggableButtonMorph) 
		  ifTrue: [ 
				aMorph morphExtent: buttonExtent. 
				aMorph morphPosition: buttonPos.
				buttonPos := buttonPos + (spacing@0).
		].
	]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6644-SystemWindow-rescaleButtons-consistentWith-initilizeLabelArea-JuanVuletich-2024Aug27-16h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6644] on 28 August 2024 at 8:58:54 am'!
!PackageRequirementsList methodsFor: 'initialization' stamp: 'jmv 8/28/2024 08:58:27' prior: 16917876!
                           codePackageList: cpList

	codePackageList := cpList.
	selection := 0.
	self updateRequirementsFromPackageList.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6645-Cleanup-PackageRequirementsList-JuanVuletich-2024Aug28-08h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6645] on 28 August 2024 at 9:18:35 am'!
!HierarchyBrowser methodsFor: 'class functions' stamp: 'jmv 8/28/2024 09:15:42' overrides: 16797534!
                             defineClass: defString notifying: aRequestor  
	"The receiver's textual content is a request to define a new class. The
	source code is defString. If any errors occur in compilation, notify
	aRequestor."
	| oldClass class newClassName defTokens keywdIx |
	oldClass := self selectedClassOrMetaClass.
	defTokens := defString findTokens: Character separators.
	keywdIx := defTokens findFirst: [ :x | x beginsWith: 'category' ].
	keywdIx := defTokens findFirst: [ :x | '*subclass*' match: x ].
	newClassName := (defTokens at: keywdIx+1) copyWithoutAll: '#()'.
	((oldClass isNil or: [ oldClass theNonMetaClass name asPlainString ~= newClassName ])
		and: [ Smalltalk includesKey: newClassName asSymbol ]) ifTrue: [
			"Attempting to define new class over existing one when
				not looking at the original one in this browser..."
			(self confirm: (newClassName bold , ' is an existing class in this system.
Redefining it might cause serious problems.
Is this really what you want to do?'))
				ifFalse: [ ^ false ]].
	"ar 8/29/1999: Use oldClass superclass for defining oldClass
	since oldClass superclass knows the definerClass of oldClass."
	oldClass ifNotNil: [ oldClass := oldClass superclass ].
	class := Compiler
				evaluate: defString
				notifying: aRequestor
				logged: true.
	(class isKindOf: Behavior)
		ifTrue: [
				self changed: #systemCategoryRoots.
				self updateAfterClassChange.
				self changed: #classList.
				self changed: #clearUserEdits.
				self setClass: class selector: nil.
				"self clearUserEditFlag; editClass."
				^ true ]
		ifFalse: [ ^ false ]! !

HierarchyBrowser removeSelector: #changed:!

!methodRemoval: HierarchyBrowser #changed: stamp: 'Install-6646-Cleanup-HierarchyBrowser-JuanVuletich-2024Aug28-09h17m-jmv.001.cs.st 8/28/2024 17:06:35'!
changed: sym
	sym == #classList ifTrue: [self updateAfterClassChange].
	super changed: sym!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6646-Cleanup-HierarchyBrowser-JuanVuletich-2024Aug28-09h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6646] on 28 August 2024 at 9:28:15 am'!
!PluggableListMorph methodsFor: 'model access' stamp: 'jmv 8/28/2024 09:25:35' prior: 16923869!
           setSelectionIndex: anInteger
	"Change the model's selected item index to be anInteger."

	setIndexSelector ifNotNil: [
		model perform: setIndexSelector with: anInteger.
		self privateVisualSelectionIndex: self getCurrentSelectionIndex.
		^ true ].
	^ false! !
!PluggableListMorphByItem methodsFor: 'model access' stamp: 'jmv 8/28/2024 09:25:44' prior: 16924134 overrides: 50375587!
 setSelectionIndex: anInteger
	"Change the model's selected item to be the one at the given index."

	| item |
	setIndexSelector ifNotNil: [
		item := itemList at: anInteger ifAbsent: [ nil ].
		model perform: setIndexSelector with: item.
		self privateVisualSelectionIndex: self getCurrentSelectionIndex.
		^ true ].
	^false
	! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6647-Cleanup-PluggableListMorph-JuanVuletich-2024Aug28-09h25m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6646] on 28 August 2024 at 9:33:47 am'!
!PluggableButtonMorph methodsFor: 'enabling' stamp: 'jmv 8/28/2024 09:30:18' prior: 16923072!
                 disable

	enableSelector := false.
	self redrawNeeded.! !
!PluggableButtonMorph methodsFor: 'enabling' stamp: 'jmv 8/28/2024 09:30:08' prior: 16923078!
        enable

	enableSelector := true.
	self redrawNeeded.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6648-Cleanup-PluggableButtonMorph-JuanVuletich-2024Aug28-09h28m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6648] on 28 August 2024 at 11:18:45 am'!
!PluggableMorph methodsFor: 'updating' stamp: 'jmv 8/28/2024 09:38:43' overrides: 16915941!
  update: aspectSymbol
	"Receive a change notice from an object we are observing. 
	The default behavior is to do nothing.
	Subclasses should act appropriately on the aspects they are interested in."

	^self! !
!Object methodsFor: 'dependency mechanism' stamp: 'jmv 8/28/2024 10:02:19' prior: 16914014!
                   addDependent: anObserver
	"Make the given object one of the receiver's observers (dependents).

	Receivers of this message, i.e. objects being observed, are usually called Models.
	Observing can also be set up sending one of the #when:send:to: or #addDependent: messages.
	Models will send themselves #changed:, #changed or one of the #triggerEvent* messages to notify possible observers.

	If appropriate, it is best to make Models inherit from ActiveModel, for performance reasons."

	self
		when: #changed:
		send: #update:
		to: anObserver.
	^anObserver.! !
!Object methodsFor: 'dependency mechanism' stamp: 'jmv 8/28/2024 09:46:00' prior: 16914022!
                  breakDependents
	"Remove all of the receiver's observers (dependents)."

	self removeActionsForEvent: #changed:! !
!Object methodsFor: 'dependency mechanism' stamp: 'jmv 8/28/2024 09:46:33' prior: 16914028!
                 changed: aspectSymbol
	"Receiver changed. The change is denoted by the argument. 
	Usually the argument is a Symbol that is part of the observer's change 
	protocol. Inform all of the observers.
	Note: In Smalltalk-80 observers were called 'dependents'."

	self 
		triggerEvent: #changed:
		with: aspectSymbol! !
!Object methodsFor: 'dependency mechanism' stamp: 'jmv 8/28/2024 09:48:00' prior: 16914039!
           removeDependent: anObject
	"Remove the given object as one of the receiver's observers (dependents)."

	self 
		removeActionsWithReceiver: anObject
		forEvent: #changed:.
	^ anObject! !
!Object methodsFor: 'events-registering' stamp: 'rww 12/30/2002 10:37' prior: 16914315!
              when: anEventNameSymbol
send: aMessageSelector
to: anObserver
	"Make the given object one of the receiver's observers (dependents).
	Receivers of this message, i.e. objects being observed, are usually called Models.
	Observing can also be set up sending one of the #when:send:to: or #addDependent: messages.
	Models will send themselves #changed:, #changed or one of the #triggerEvent* messages to notify possible observers.
	If appropriate, it is best to make Models inherit from ActiveModel, for performance reasons."
 
    self
        when: anEventNameSymbol
        evaluate: (WeakMessageSend
            receiver: anObserver
            selector: aMessageSelector)! !
!Object methodsFor: 'events-registering' stamp: 'rww 12/30/2002 10:37' prior: 16914324!
      when: anEventNameSymbol
send: aMessageSelector
to: anObserver
with: messageArgument
	"Make the given object one of the receiver's observers (dependents).
	Receivers of this message, i.e. objects being observed, are usually called Models.
	Observing can also be set up sending one of the #when:send:to: or #addDependent: messages.
	Models will send themselves #changed:, #changed or one of the #triggerEvent* messages to notify possible observers.
	If appropriate, it is best to make Models inherit from ActiveModel, for performance reasons."
 
    self
        when: anEventNameSymbol
        evaluate: (WeakMessageSend
            receiver: anObserver
            selector: aMessageSelector
		arguments: (Array with: messageArgument))! !
!Object methodsFor: 'events-registering' stamp: 'rww 12/30/2002 10:37' prior: 16914335!
     when: anEventNameSymbol
send: aMessageSelector
to: anObserver
withArguments: messageArgumentsArray
	"Make the given object one of the receiver's observers (dependents).
	Receivers of this message, i.e. objects being observed, are usually called Models.
	Observing can also be set up sending one of the #when:send:to: or #addDependent: messages.
	Models will send themselves #changed:, #changed or one of the #triggerEvent* messages to notify possible observers.
	If appropriate, it is best to make Models inherit from ActiveModel, for performance reasons."
 
    self
        when: anEventNameSymbol
        evaluate: (WeakMessageSend
            receiver: anObserver
            selector: aMessageSelector
		arguments: messageArgumentsArray)! !
!Object methodsFor: 'object serialization' stamp: 'jmv 8/28/2024 09:43:35' prior: 16914803!
                          storeDataOn: aDataStream
	"Store myself on a DataStream.  Answer self.  This is a low-level DataStream/ReferenceStream method. See also objectToStoreOnDataStream.  NOTE: This method must send 'aDataStream beginInstance:size:' and then (nextPut:/nextPutWeak:) its subobjects.  readDataFrom:size: reads back what we write here."
	| cntInstVars cntIndexedVars |

	cntInstVars := self class instSize.
	cntIndexedVars := self basicSize.
	aDataStream
		beginInstance: self class
		size: cntInstVars + cntIndexedVars.
	1 to: cntInstVars do:
		[:i | aDataStream nextPut: (self instVarAt: i)].

	"Write fields of a variable length object.  When writing to a dummy 
		stream, don't bother to write the bytes"
	((aDataStream byteStream class == DummyStream) and: [self class isBits]) ifFalse: [
		self class isWeak
			ifTrue: [
				"For weak classes (for example ActiveModel's ActionMaps) write the referenced object only
				if referenced from elsewhere in the dumped object graph.
				This means, for instance that if we only dump a model, no observers are stored, 
				but if we store a view (i.e. a Morph), it is properly handled as an observer after the object graph is revived."
				1 to: cntIndexedVars do: [ :i |
					aDataStream nextPutWeak: (self basicAt: i)]]
			ifFalse: [
				1 to: cntIndexedVars do: [ :i |
					aDataStream nextPut: (self basicAt: i)]]]! !
!Object methodsFor: 'updating' stamp: 'ST-80 5/31/1983 9:10:35' prior: 16915934!
                               changed
	"Receiver changed in a general way. Inform all of the observers by sending
	them an #update: message.
	Note: In Smalltalk-80 observers were called 'dependents'."

	self changed: self! !
!Object methodsFor: 'updating' stamp: 'ST-80 5/31/1983 9:10:35' prior: 16915941!
            update: aspectSymbol
	"Receive a change notice from an object we are observing. 
	The default behavior is to do nothing.
	Subclasses should act appropriately on the aspects they are interested in."

	^self! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6649-Documentation-Dependency-Events-JuanVuletich-2024Aug28-11h16m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6646] on 28 August 2024 at 10:24:24 am'!

TestSuite removeSelector: #addDependentToHierachy:!

!methodRemoval: TestSuite #addDependentToHierachy: stamp: 'Install-6650-Cleanup-TestSuite-JuanVuletich-2024Aug28-10h06m-jmv.001.cs.st 8/28/2024 17:06:36'!
addDependentToHierachy: anObject
	self addDependent: anObject.
	self tests do: [ :each | each addDependentToHierachy: anObject]!

TestCase removeSelector: #addDependentToHierachy:!

!methodRemoval: TestCase #addDependentToHierachy: stamp: 'Install-6650-Cleanup-TestSuite-JuanVuletich-2024Aug28-10h06m-jmv.001.cs.st 8/28/2024 17:06:36'!
addDependentToHierachy: anObject 
	"an empty method. for Composite compability with TestSuite"


			!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6650-Cleanup-TestSuite-JuanVuletich-2024Aug28-10h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6652] on 28 August 2024 at 12:36:50 pm'!
!PluggableButtonMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 12:33:51'!
        actionTarget: anObject
	"Set my model.
	We will not observe the model. We will not receive #update: or other notifications from them.
	Call #model: if observing the model for updates is required."

	model ifNotNil: [model removeActionsWithReceiver: self].
	model := anObject.! !
!PluggableButtonMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 12:27:01' prior: 16922916!
     enableSelector: aSymbol

	enableSelector := aSymbol.
	enableSelector notNil ifTrue: [
		model ifNotNil: [
			"So we get #update: called"
			model addDependent: self]].! !
!PluggableButtonMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 12:32:13' prior: 16922938!
                 model: anObject stateGetter: getStateSel action: actionSel label: aString

	stateSelector := getStateSel.
	stateArgument := nil.
	actionSelector := actionSel.
	actionArgument := nil.
	stateSelector notNil
		ifTrue: [
			"So we get #update: called"
			self model: anObject ]
		ifFalse: [ self actionTarget: anObject ].
	self label: aString.! !
!PluggableButtonMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 12:32:26' prior: 16922948!
     model: anObject stateGetter: getStateSel stateArgument: getStateArg action: actionSel actionArgument: actionArg label: aString

	stateSelector := getStateSel.
	stateArgument := getStateArg.
	actionSelector := actionSel.
	actionArgument := actionArg.
	stateSelector notNil
		ifTrue: [
			"So we get #update: called"
			self model: anObject ]
		ifFalse: [ self actionTarget: anObject ].
	self label: aString.! !
!PluggableButtonMorph methodsFor: 'updating' stamp: 'jmv 8/28/2024 12:23:12' prior: 16922971 overrides: 50375639!
                    update: aSymbol
	super update: aSymbol.
	"Note: if any of these selectors is not nil, then we need to observe on the model,
	setting it with #model: and not with #actionTarget:"
	(aSymbol == stateSelector or: [aSymbol == enableSelector ]) ifTrue: [
		self redrawNeeded ].! !

PluggableMorph removeSelector: #actionTarget:!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6651-ButtonsMayNotObserveModel-JuanVuletich-2024Aug28-12h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6646] on 28 August 2024 at 11:06:04 am'!
!ScrollBar methodsFor: 'initialization' stamp: 'jmv 8/28/2024 11:03:45' prior: 16945626!
                             initializeDownButton
	"Initialize the receiver's downButton"

	| e |
	e := self buttonExtent.
	downButton := PluggableButtonMorph new.
	downButton actionTarget: self.
	downButton morphExtent: e@e.
	self addMorph: downButton position: extent - borderWidth - e.
	downButton
		actWhen: #buttonStillDown.		"to enable multiple action if held down".
	self isHorizontal
		ifTrue: [ self updateRightButton: downButton ]
		ifFalse: [ self updateDownButton: downButton ].
	downButton visible: Theme current scrollbarShowButtons! !
!ScrollBar methodsFor: 'initialization' stamp: 'jmv 8/28/2024 11:03:51' prior: 50348182!
                              initializeSlider
	"initialize the receiver's slider"

	sliderShadow := BoxedMorph new noBorder.
	self addMorph: sliderShadow.
	sliderShadow hide.
		
	slider := DraggableButtonMorph new.
	slider actionTarget: self.
	slider grabSelector: #sliderGrabbedAt:.
	slider dragSelector: #scrollTo:.
	slider action: #sliderReleased.
	self addMorph: slider.

	self computeSlider! !
!ScrollBar methodsFor: 'initialization' stamp: 'jmv 8/28/2024 11:03:55' prior: 16945659!
                     initializeUpButton
	"Initialize the receiver's upButton"

	| e |
	e := self buttonExtent.
	upButton := PluggableButtonMorph new.
	upButton actionTarget: self.
	upButton morphExtent: e@e.
	self addMorph: upButton position: borderWidth@borderWidth.
	upButton
		actWhen: #buttonStillDown.		"to enable multiple action if held down"
	self isHorizontal
		ifTrue: [ self updateLeftButton: upButton ]
		ifFalse: [ self updateUpButton: upButton ].
	upButton visible: Theme current scrollbarShowButtons! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6652-Scrollbar-DontObserveOurButtons-JuanVuletich-2024Aug28-10h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6646] on 28 August 2024 at 11:09:20 am'!
!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 11:07:27' prior: 16863346!
createAcceptButton
	"create the [accept] button"
	| result |
	result := PluggableButtonMorph new
		 actionTarget: self;
		 color: Theme current acceptButton;
		 label: 'Accept';
		 action: #acceptClicked.
	result morphExtent: `6@2` * self sizeUnit.
	self addMorph: result position: `2@7.5` * self sizeUnit // 1.
	^ result! !
!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'jmv 8/28/2024 11:07:31' prior: 16863359!
                        createCancelButton
	"create the [cancel] button"
	| result |
	result := PluggableButtonMorph new
		 actionTarget: self;
		 color: Theme current cancelButton;
		 label: 'Cancel';
		 action: #cancelClicked.
	result morphExtent: `6@2` * self sizeUnit.
	self addMorph: result position: `12@7.5` * self sizeUnit // 1.
	^ result! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6653-FillInTheBlankMorph-DontObserveButtons-JuanVuletich-2024Aug28-11h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6653] on 28 August 2024 at 1:00:22 pm'!
!Morph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/28/2024 12:54:27'!
                            clearDependencyAndEvents
"
Morph allSubInstancesDo: [ :m | m clearDependencyAndEvents ].
"
	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.
	self releaseActionMap.! !
!PluggableMorph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/28/2024 12:52:06' overrides: 50376049!
                            clearDependencyAndEvents

	model removeActionsWithReceiver: self.
	super clearDependencyAndEvents.! !
!Morph methodsFor: 'submorphs-add/remove' stamp: 'jmv 8/28/2024 12:53:59' prior: 16906967!
                               delete
	"Remove the receiver as a submorph of its owner and make its 
	new owner be nil."

	| aWorld |
	aWorld := self world ifNil: [ self runningWorld ].
	aWorld ifNotNil: [
		aWorld activeHand ifNotNil: [ :h | h
			releaseKeyboardFocus: self;
			releaseMouseFocus: self ]].
	owner ifNotNil: [ self privateDelete].
	self clearDependencyAndEvents.
	self allSubmorphsDo: [ :each |
		each clearDependencyAndEvents ].! !

FillInTheBlankMorph removeSelector: #delete!

!methodRemoval: FillInTheBlankMorph #delete stamp: 'Install-6654-ClearDependencyAndEventsOnMorphDelete-JuanVuletich-2024Aug28-12h43m-jmv.001.cs.st 8/28/2024 17:06:36'!
delete

	self breakDependents.
	super delete.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6654-ClearDependencyAndEventsOnMorphDelete-JuanVuletich-2024Aug28-12h43m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6654] on 28 August 2024 at 1:19:07 pm'!
!DebuggerWindow methodsFor: 'initialization' stamp: 'jmv 8/28/2024 13:16:47' overrides: 16827690!
    model: anObject
	"Set my model and make me me a dependent of the given object."

	super model: anObject.
	model when: #closeViews send: #closeView to: self.! !
!PreDebugWindow methodsFor: 'initialization' stamp: 'jmv 8/28/2024 13:16:55' overrides: 16827690!
                              model: anObject
	"Set my model and make me me a dependent of the given object."

	super model: anObject.
	model when: #closeViews send: #closeView to: self.! !
!CodeWindow methodsFor: 'initialization' stamp: 'jmv 8/28/2024 13:16:29' prior: 16827690 overrides: 16924461!
                  model: anObject
	"Set my model and make me me a dependent of the given object."

	super model: anObject.

	"Avoid double registration"
	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.
	SystemChangeNotifier uniqueInstance
		when: #classAdded send: #classAdded: to: self;
		when: #classCommented send: #updateListsAndCode to: self;
		when: #classDefinitionChanged send: #updateListsAndCode to: self;
		when: #classRecategorized send: #updateListsAndCode to: self;
		when: #classRemoved send: #updateListsAndCode to: self;
		when: #classRenamed send: #classRenamed:from:to:inCategory: to: self;
		when: #classReorganized send: #updateListsAndCode to: self;
		when: #methodAddedInProtocol send: #updateListsAndCode to: self;
		when: #methodChanged send: #updateListsAndCode to: self;
		when: #methodRemoved send: #updateListsAndCode to: self;
		when: #selectorRecategorized send: #updateListsAndCode to: self.! !
!ChangeSet class methodsFor: 'class initialization' stamp: 'jmv 8/28/2024 13:14:05' prior: 16808955 overrides: 16916245!
     initialize
	"
	ChangeSet initialize
	"
	AllChangeSets := OrderedCollection new.

	"Avoid double registration"
	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.
	SystemChangeNotifier uniqueInstance
		when: #classAdded send: #classAdded:inCategory: to: self;
		when: #classCommented send: #classCommented: to: self;
		when: #classDefinitionChanged send: #classDefinitionChangedFrom:to: to: self;
		when: #classRecategorized send: #classRecategorized:from:to: to: self;
		when: #classRemoved send: #classRemoved:fromCategory: to: self;
		when: #aboutToRenameClass send: #aboutToRenameClass:from:to:inCategory: to: self;
		when: #classReorganized send: #classReorganized: to: self;
		when: #methodAddedInProtocol send: #methodAdded:selector:inProtocol:class:requestor: to: self;
		when: #methodChanged send: #methodChangedFrom:to:selector:inClass:requestor: to: self;
		when: #methodRemoved send: #methodRemoved:selector:inProtocol:class: to: self;
		when: #selectorRecategorized send: #selectorRecategorized:from:to:inClass: to: self.! !

ChangeSet class removeSelector: #initializeNotificationActions!

!methodRemoval: ChangeSet class #initializeNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
initializeNotificationActions

	"Avoid double registration"
	self 
		removeNotificationActions;
		registerNotificationActions !

ChangeSet class removeSelector: #registerNotificationActions!

!methodRemoval: ChangeSet class #registerNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
registerNotificationActions

	"Only sent when model is not nil - Hernan"
	SystemChangeNotifier uniqueInstance
		when: #classAdded send: #classAdded:inCategory: to: self;
		when: #classCommented send: #classCommented: to: self;
		when: #classDefinitionChanged send: #classDefinitionChangedFrom:to: to: self;
		when: #classRecategorized send: #classRecategorized:from:to: to: self;
		when: #classRemoved send: #classRemoved:fromCategory: to: self;
		when: #aboutToRenameClass send: #aboutToRenameClass:from:to:inCategory: to: self;
		when: #classReorganized send: #classReorganized: to: self;
		when: #methodAddedInProtocol send: #methodAdded:selector:inProtocol:class:requestor: to: self;
		when: #methodChanged send: #methodChangedFrom:to:selector:inClass:requestor: to: self;
		when: #methodRemoved send: #methodRemoved:selector:inProtocol:class: to: self;
		when: #selectorRecategorized send: #selectorRecategorized:from:to:inClass: to: self!

ChangeSet class removeSelector: #removeNotificationActions!

!methodRemoval: ChangeSet class #removeNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
removeNotificationActions

	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.

	!

PreDebugWindow removeSelector: #registerNotificationActions!

!methodRemoval: PreDebugWindow #registerNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
registerNotificationActions

	super registerNotificationActions.
	model when: #closeViews send: #closeView to: self !

DebuggerWindow removeSelector: #registerNotificationActions!

!methodRemoval: DebuggerWindow #registerNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
registerNotificationActions

	super registerNotificationActions.
	model when: #closeViews send: #closeView to: self !

CodeWindow removeSelector: #initializeNotificationActions!

!methodRemoval: CodeWindow #initializeNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
initializeNotificationActions

	"Avoid double registration"
	self 
		removeNotificationActions;
		registerNotificationActionsIfModelNotNil 
!

CodeWindow removeSelector: #registerNotificationActionsIfModelNotNil!

!methodRemoval: CodeWindow #registerNotificationActionsIfModelNotNil stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
registerNotificationActionsIfModelNotNil 

	"model set to nil on delete"
	model ifNotNil: [ self registerNotificationActions ] !

CodeWindow removeSelector: #registerNotificationActions!

!methodRemoval: CodeWindow #registerNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
registerNotificationActions

	SystemChangeNotifier uniqueInstance
		when: #classAdded send: #classAdded: to: self;
		when: #classCommented send: #updateListsAndCode to: self;
		when: #classDefinitionChanged send: #updateListsAndCode to: self;
		when: #classRecategorized send: #updateListsAndCode to: self;
		when: #classRemoved send: #updateListsAndCode to: self;
		when: #classRenamed send: #classRenamed:from:to:inCategory: to: self;
		when: #classReorganized send: #updateListsAndCode to: self;
		when: #methodAddedInProtocol send: #updateListsAndCode to: self;
		when: #methodChanged send: #updateListsAndCode to: self;
		when: #methodRemoved send: #updateListsAndCode to: self;
		when: #selectorRecategorized send: #updateListsAndCode to: self !

CodeWindow removeSelector: #removeNotificationActions!

!methodRemoval: CodeWindow #removeNotificationActions stamp: 'Install-6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st 8/28/2024 17:06:36'!
removeNotificationActions

	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.
!

ChangeSet initialize!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6655-cleanup-JuanVuletich-2024Aug28-13h10m-jmv.001.cs.st----!

	MorphicCanvas activeSubclass: BitBltCanvas!

	MorphicCanvas activeSubclass: HybridCanvas!

----QUIT----(28 August 2024 17:07:07) Cuis7.1-6655-32.image priorSource: 1290559!

----STARTUP---- (30 August 2024 15:45:46) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6655-32.image!


'From Cuis7.1 [latest update: #6655] on 29 August 2024 at 10:08:41 am'!
!DisplayScreen class methodsFor: 'snapshots' stamp: 'jmv 8/29/2024 10:06:49' prior: 50367232!
              setupDisplay
	"
	DisplayScreen setupDisplay.
	Display forceToScreen.
	"

	self terminateScreenUpdater.
	Display ifNil: [
		Smalltalk at: #Display put: DisplayScreen new.
		"See #recreateSpecialObjectsArray"
		Smalltalk specialObjectsArray at: 15 put: Display ].
	[
		Display setExtent: self actualScreenSize depth: Display nativeDepth.
		"{'New Smalltalk Display:'. self actualScreenSize} print."
	] on: OutOfMemory do: [
		"In case of memory emergency, use a much smaller Display"
		'Display allocation failed - Using Emergency (small) Display.'  print.
		'Resize Display (or OS Window) to retry Display allocation.'  print.
		Display setExtent: self actualScreenSize // 4 depth: Display nativeDepth ].! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 8/29/2024 10:07:14' prior: 50367334!
     checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |

	"Linux VMs continuously update #actualScreenSize while the user is resizing the OS window.
	Avoid reallocation of Display until the user is done with that.
	Currently, wait until a real event happens inside Cuis.
	This requires the user to move the mouse back into Cuis.
	Maybe other ways are possible."
	lastCycleHadAnyEvent ifFalse: [
		Smalltalk osVersion = 'linux-gnu' ifTrue: [ 		^self ]].

	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"''print. {DateAndTime now. 'Smalltalk Display:'. Display extent. 'os display:'. DisplayScreen actualScreenSize} print."
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				(ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent) truncated ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [
				"{'New ScaleFactor'. ScaleFactor. 'Set os display to:'. e} print."
				DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"When moving the Cuis window, for instance, between a laptop screen with ScaleFactor=2.0 and an external screen with
		ScaleFactor=1.0, usually the #hostOSWindowExtent: already left us with isDisplayExtentOk, so asking again is in order."
		DisplayScreen isDisplayExtentOk ifFalse: [
			"This allocates new memory for Display and is critical."
			needsNewUIProcessAndCanvas := true.
			"This may help with memory fragmentation issues possibly making new display allocation fail."
			canvas unpinAndFreeMemory.
			DisplayScreen setupDisplay ]].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"The current canvas is not consistent with Display, and therefore can no longer be used. A new one is required.
			Freeeing the memory it uses may help with memory fragmentation issues possibly making new canvas allocation fail.
			(In any case, if ther is not enough free memory for VectorCanvas and engine, use a BitBltCanvas, see #getMainCanvas)"
			canvas unpinAndFreeMemory.
			"Create a new UI process, including a new canvas consistent with updated Display.
			This will also terminate the current process, and this is needed because the current canvas can no longer be used.
			A canvas and vector engine inconsistent with Display could cause invalid memory accesses, possibly crashing the system."
			UISupervisor spawnNewMorphicProcessFor: self andTerminateCurrent: true ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6656-AvoidDisplayReallocationDuringResizeOnLiinux-JuanVuletich-2024Aug29-10h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6656] on 29 August 2024 at 5:31:23 pm'!

Object subclass: #MorphicCanvas
	instanceVariableNames: 'ownerProcess world form clipRect transformations currentTransformation cti currentMorph drawingMorphStack engine clippingMorphDisplayBounds '
	classVariableNames: 'ActiveSubclass '
	poolDictionaries: ''
	category: 'Morphic-Support'!

!classDefinition: #MorphicCanvas category: #'Morphic-Support' stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
Object subclass: #MorphicCanvas
	instanceVariableNames: 'ownerProcess world form clipRect transformations currentTransformation cti currentMorph drawingMorphStack engine clippingMorphDisplayBounds'
	classVariableNames: 'ActiveSubclass'
	poolDictionaries: ''
	category: 'Morphic-Support'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/29/2024 17:29:24' prior: 50367419!
snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	self processShutDownList: quit.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit.
			"Some command line arguments need to be processed before starting the UI"
			self processCommandLineArguments: true.
			self assureStartupStampLogged ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	"It is needed to do this at least once on MacVMs, where it may not be needed later.
	For instance #forceToScreen: is usually not called in #displayWorldOn: if running on Mac."
	Display forceToScreen.
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				"Some command line arguments need to be processed after the UI is up, and in the UI process"
				self processCommandLineArguments: false.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/29/2024 17:29:13' prior: 50373523!
     mainLoop

	| morphicCanvas morphicDamageRecorder delay |
	self position: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			morphicCanvas := Display getMainCanvas.
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater ]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			morphicCanvas := (Form extent: extent depth: Display depth) getMainCanvas ].

	morphicCanvas world: self.
	morphicDamageRecorder := DamageRecorder new.
	"Set this as the main canvas"
	canvas := morphicCanvas.
	damageRecorder := morphicDamageRecorder.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	delay := Delay forMilliseconds: 50.
	[
		self displayWorldOn: morphicCanvas.
		[
			"Set the main canvas on every iteration.
			This is needed if UI processes are interrupted, resumed, etc."
			canvas := morphicCanvas.
			damageRecorder := morphicDamageRecorder.
			self doOneCycleOn: morphicCanvas delay: delay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !

HybridCanvas removeSelector: #releaseEngine!

!methodRemoval: HybridCanvas #releaseEngine stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
releaseEngine
	super releaseEngine.
	morphIDsForm := nil.!

HybridCanvas removeSelector: #ownerProcess:!

!methodRemoval: HybridCanvas #ownerProcess: stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
ownerProcess: aProcess
	ownerProcess := aProcess.
	vectorCanvas ownerProcess: aProcess.!

BitBltCanvas removeSelector: #releaseEngine!

!methodRemoval: BitBltCanvas #releaseEngine stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
releaseEngine
	super releaseEngine.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas releaseEngine ].!

VectorCanvas removeSelector: #releaseEngine!

!methodRemoval: VectorCanvas #releaseEngine stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
releaseEngine
	super releaseEngine.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas releaseEngine ].
	auxBitBltEngine := nil.!

MorphicCanvas removeSelector: #ownerProcess:!

!methodRemoval: MorphicCanvas #ownerProcess: stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
ownerProcess: aProcess
	ownerProcess := aProcess!

MorphicCanvas removeSelector: #ownerProcess!

!methodRemoval: MorphicCanvas #ownerProcess stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
ownerProcess
	^ownerProcess!

MorphicCanvas removeSelector: #releaseEngine!

!methodRemoval: MorphicCanvas #releaseEngine stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:46'!
releaseEngine
	engine := nil.
	ownerProcess := nil.
	world := nil.
	form := nil.!

Object subclass: #MorphicCanvas
	instanceVariableNames: 'world form clipRect transformations currentTransformation cti currentMorph drawingMorphStack engine clippingMorphDisplayBounds'
	classVariableNames: 'ActiveSubclass'
	poolDictionaries: ''
	category: 'Morphic-Support'!

!classDefinition: #MorphicCanvas category: #'Morphic-Support' stamp: 'Install-6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st 8/30/2024 15:45:47'!
Object subclass: #MorphicCanvas
	instanceVariableNames: 'world form clipRect transformations currentTransformation cti currentMorph drawingMorphStack engine clippingMorphDisplayBounds'
	classVariableNames: 'ActiveSubclass'
	poolDictionaries: ''
	category: 'Morphic-Support'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6657-CanvasDoesntKnowProcess-JuanVuletich-2024Aug29-17h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6656] on 29 August 2024 at 5:34:26 pm'!
!WorldMorph methodsFor: 'canvas' stamp: 'jmv 8/29/2024 11:54:41'!
           mainCanvas: aMorphicCanvas
	"Set the main canvas"

	canvas := aMorphicCanvas.! !
!MorphicCanvas methodsFor: 'morphic world' stamp: 'jmv 8/29/2024 11:56:18'!
   beMainCanvasOfWorld
	world mainCanvas: self! !
!Debugger methodsFor: 'initialization' stamp: 'jmv 8/29/2024 11:46:05' prior: 16843933!
                         windowIsClosing
	"My window is being closed; clean up. Restart the low space watcher."

	interruptedProcess
		ifNil: [^ self].
	interruptedProcess terminate.
	interruptedProcess := nil.
	interruptedProcessUI := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	Smalltalk installLowSpaceWatcher.  "restart low space handler"
! !
!Debugger methodsFor: 'private' stamp: 'jmv 8/29/2024 11:56:23' prior: 50367119!
             resumeProcess
	| mustTerminateActive worldIfMustRedisplay |
	worldIfMustRedisplay := self runningWorld.
	savedCursor
		ifNotNil: [savedCursor activateCursor].
	mustTerminateActive := false.
	interruptedProcess isTerminated ifFalse: [
		interruptedProcessUI notNil ifTrue: [
			interruptedProcessUI isConsistentWithTarget
				ifTrue: [
					(interruptedProcess name withoutPrefix: 'Formerly: ') ifNotNil: [ :originalName |
						interruptedProcess
							name: originalName;
							priority: interruptedProcess priority + 1 ].
					UISupervisor isUIProcessRunning
						ifTrue: [ mustTerminateActive := true]
						ifFalse: [ UISupervisor stopUIProcess].
					UISupervisor uiProcess: interruptedProcess ]
				ifFalse: [
					"The Display has changed size while running the debugger.
					The interupted process would use an invalid canvas, corrupting the Display,
					and likely crashing the system. Don't resume the process. Just keep the current UI process running."
					interruptedProcess terminate.
					interruptedProcess := nil.
					interruptedProcessUI := nil ]].
		interruptedProcess ifNotNil: [ :p |
			interruptedProcessUI ifNotNil: [ :canvas |
				canvas beMainCanvasOfWorld ].
			p resolvePendingQuickReturns; resume ]].
	interruptedProcess := nil.
	interruptedProcessUI := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	worldIfMustRedisplay ifNotNil: [ :w |
		[UISupervisor whenUIinSafeState: [ w invalidateBounds ]]
			forkAt: Processor userSchedulingPriority-1 ].
	"restart low space handler"
	Smalltalk installLowSpaceWatcher.
	"If this process was the UI process, and we just resumed the old one,
	then terminate us and never return to caller."
	mustTerminateActive
		ifTrue: [ Processor terminateActive ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6658-RestoreCanvasInWorldOnUIProcessResumeInDebugger-JuanVuletich-2024Aug29-17h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6656] on 29 August 2024 at 5:35:13 pm'!
!WorldMorph methodsFor: 'canvas' stamp: 'jmv 8/29/2024 12:21:07' prior: 50376836!
                    mainCanvas: aMorphicCanvas
	"Set the main canvas"

	canvas := aMorphicCanvas.
	damageRecorder := DamageRecorder new.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	waitDelay := Delay forMilliseconds: 50.! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 8/29/2024 12:24:11' prior: 50376674!
     mainLoop

	self position: `0@0` extent: Display extent.

        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"
	(Display deferUpdates: true)
		ifNotNil: [
			"But then, they need to flush updates periodically."
			DisplayScreen installScreenUpdater.
			"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
			self mainCanvas: Display getMainCanvas.
			canvas world: self.
			]
		ifNil: [
			"Mac (at least intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
			self mainCanvas: (Form extent: extent depth: Display depth) getMainCanvas.
			canvas world: self ].
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	[
		self displayWorldOn: canvas.
		[
			"Here canvas and waitDelay are passed as arguments.
			This is because when debugging Morphic, a new UI process,
			these ivars are updated, but in the debugger process we still want the original ones."
			self doOneCycleOn: canvas delay: waitDelay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6659-UIProcessNoLongerHoldsCanvas-JuanVuletich-2024Aug29-17h34m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6656] on 29 August 2024 at 5:36:51 pm'!
!MorphicCanvas methodsFor: 'other' stamp: 'jmv 8/29/2024 16:53:03' prior: 50367182!
                         unpinAndFreeMemory
	form ifNotNil: [
		form == Display ifFalse: [
			form bits unpin ]].! !
!VectorCanvas methodsFor: 'other' stamp: 'jmv 8/29/2024 16:53:13' prior: 50367186 overrides: 50377012!
                             unpinAndFreeMemory
	engine unpinAndFreeMemory.
	super unpinAndFreeMemory.! !
!HybridCanvas methodsFor: 'other' stamp: 'jmv 8/29/2024 16:53:16' prior: 50367191 overrides: 50377012!
            unpinAndFreeMemory
	vectorCanvas unpinAndFreeMemory.
	super unpinAndFreeMemory.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6660-unpinAndFreeMemory-tweak-JuanVuletich-2024Aug29-17h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6624] on 30 August 2024 at 9:58:26 am'!
!ClosureScanner methodsFor: 'explorer window' stamp: 'jmv 8/30/2024 09:58:16' prior: 16821760!
         openExplorerWindow
	"Assumes closure scanning already done"

	| explorer window |
	explorer := self explorerClass finder: self.
	window := self explorerWindowClass
		open: explorer
		label: self explorerWindowPrefix, self target printString, '(', self target identityHash printString,  ')'.
	window expandAll! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6661-ReferencesExplorer-tweak-JuanVuletich-2024Aug30-09h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6628] on 30 August 2024 at 10:09:58 am'!
!TrueTypeFont methodsFor: 'printing' stamp: 'jmv 8/30/2024 10:08:51' prior: 16990163 overrides: 16914997!
                        printOn: aStream
	aStream
		nextPutAll: 'TrueTypeFont(''';
		nextPutAll: self familyName;
		nextPutAll: ''' ';
		space;
		print: self pointSize;
		space;
		nextPutAll:  ttFontDescription subfamilyName;
		nextPut: $).! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6662-TrueTypeFont-printOn-tweak-JuanVuletich-2024Aug30-10h07m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6662] on 30 August 2024 at 1:54:39 pm'!
!MorphicCanvas methodsFor: 'other' stamp: 'jmv 8/30/2024 11:07:16'!
                         pinArrays! !
!VectorCanvas methodsFor: 'other' stamp: 'jmv 8/30/2024 11:03:07' overrides: 50377079!
                            pinArrays
	engine pinArrays.
	super pinArrays.! !
!HybridCanvas methodsFor: 'other' stamp: 'jmv 8/30/2024 11:03:13' overrides: 50377079!
                       pinArrays
	vectorCanvas pinArrays.
	super pinArrays.! !
!VectorEngineDrawer methodsFor: 'services' stamp: 'jmv 8/30/2024 11:15:42'!
                            pinArrays
	"Pin if pinning is supported by the VM, NOP otherwise."
	"Warning: #pin may fail for Spur images if run on the SqueakJS VM, at least on October 2023."

	targetForm bits pin.
	morphIds pin.
	edgeCounts pin.
	alphaMask pin.
	contour pin.! !
!Form methodsFor: 'accessing' stamp: 'jmv 8/30/2024 13:52:50' prior: 50366959!
                       getMainCanvas
	"Return a Canvas that can be used to draw onto the receiver.
	In case of lack of memory, use a much cheaper (but limited) BitBltCanvas."

	| answer |
	answer := [ MorphicCanvas onForm: self ]
				on: OutOfMemory
				do: [
					'Not enough memory to run VectorEngine. Using BitBltCanvas instead.' print.
					MorphicCanvas activeSubclass: BitBltCanvas.
					MorphicCanvas onForm: self ].
	^answer.! !
!DisplayScreen methodsFor: 'private' stamp: 'jmv 8/30/2024 10:57:57' prior: 16850053 overrides: 50363772!
                       setExtent: aPoint depth: bitsPerPixel
	"DisplayScreen startUp"
	"This method is critical. If the setExtent fails, there will be no
	proper display on which to show the error condition."

	| bitsPerPixelToUse oldBits |
	(depth = bitsPerPixel and: [aPoint = self extent and: [
					self supportsDisplayDepth: bitsPerPixel]]) ifFalse: [
		bitsPerPixelToUse := (self supportsDisplayDepth: bitsPerPixel)
			ifTrue: [ bitsPerPixel ]
			ifFalse: [
				(self supportsDisplayDepth: bitsPerPixel negated)
					ifTrue: [ bitsPerPixel negated ]
					ifFalse: [ self findAnyDisplayDepth ]].
		"Keep the old bits with a hard reference until the #beDisplay call below."
		oldBits := bits.
		"This super call will assign the new contents of the 'bits' instance variable.
		The old one may be still used by the VM (see comment at #beDisplay),
		but it is also stored in the oldBits variable, so it is safe."
		super setExtent: aPoint depth: bitsPerPixelToUse.
		"Let the VM know our bits have changed.
		See http://lists.squeakfoundation.org/archives/list/vm-dev@lists.squeakfoundation.org/message/F3I7L5IJT2J5RXCS3QXLLQ3TZ6KU6FD6/	"
		"Usually you don't create new instances of DisplayScreen, but if ever done, do what follows only for the real Display."
		self == Display ifTrue: [
			"It is important to keep oldBits referencing the bits passed to the VM in the previous
			call to #beDisplay until AFTER we passed it the new value in the call that follows."
			self beDisplay ].
		"Most likely not needed, even if some VMs could have pinned it.
		Still, this is a way to ensure that no optimizer may ever try to kill the oldBits before we're sure the VM doesn't need us to keep a reference to it."
		oldBits unpin.
		"Only now it is safe to no longer reference oldBits."
		oldBits := nil.
	].! !
!WorldMorph methodsFor: 'caching' stamp: 'jmv 8/30/2024 13:45:10' prior: 17007116 overrides: 16921308!
  releaseCachedState
	super releaseCachedState.
	self cleanseStepList.
	canvas ifNotNil: [
		canvas unpinAndFreeMemory ].
	canvas := nil.
	damageRecorder := nil.
	hands do: [ :h | h releaseCachedState ].! !
!WorldMorph methodsFor: 'canvas' stamp: 'jmv 8/30/2024 13:47:56' prior: 50376931!
 mainCanvas: aMorphicCanvas
	"Set the main canvas"

	canvas == aMorphicCanvas ifFalse: [
		canvas ifNotNil: [
			canvas unpinAndFreeMemory ].
		(Preferences at: #saveReleaseOptionsInWorldMenu) ifFalse: [
			aMorphicCanvas pinArrays ].
		canvas := aMorphicCanvas.
	].
	damageRecorder := DamageRecorder new.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	waitDelay := Delay forMilliseconds: 50.! !
!VectorEngineDrawer methodsFor: 'private' stamp: 'jmv 8/30/2024 11:08:02' prior: 16999907!
          pvtSetForm: aForm

	| s |
	"Unpin if pinning is supported by the VM, NOP otherwise."
	self unpinAndFreeMemory.

	targetForm := aForm.
	targetWidth := targetForm width.
	targetHeight := targetForm height.
	s := targetWidth * targetHeight.
	self flag: #VEPapi5.		"Eventually remove the +1.
	Needed for VEPapi=5 and 6 (for plugins older than Sept-21-2021, and version less than 1.29).
	Avoid it altoghether if the plugin is not available (#pluginApiVersion answers 0)"
	morphIds := WordArray new: (
		(VectorEngineWithPlugin pluginApiVersion between: 5 and: 6)
			ifTrue: [s+1]
			ifFalse: [s]).
	edgeCounts := self auxPixelDataClass new: s.
	alphaMask := self auxPixelDataClass new: s.
	contour := Float32Array new: targetHeight * 2.
	0 to: targetHeight-1 do: [ :y |
		contour at: y * 2 + 1 put: targetWidth.
		contour at: y * 2 + 2 put: 0 ].
	self resetMorphBounds.
	self clipRect: targetForm boundingBox.
	self antiAliasingWidth: self class defaultAntiAliasingWidth.
	geometryTransformation := MorphicTranslation identity.! !
!VectorEngineDrawer methodsFor: 'services' stamp: 'jmv 8/30/2024 11:04:33' prior: 50367196!
  unpinAndFreeMemory

	"Unpin, if possible, any pinned large arrays."
	"Unpin if pinning is supported by the VM, NOP otherwise."
	targetForm ifNotNil: [
		targetForm == Display ifFalse: [
			targetForm bits unpin ]].
	morphIds ifNotNil: [ morphIds unpin ].
	edgeCounts ifNotNil: [ edgeCounts unpin ].
	alphaMask ifNotNil: [ alphaMask unpin ].
	contour ifNotNil: [ contour unpin ].

	targetForm := nil.
	morphIds := nil.
	edgeCounts := nil.
	alphaMask := nil.
	contour := nil.! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Bitmap allInstancesDoAlt: [ :fd | fd == Display bits ifFalse: [ fd unpin ]].
WordArray allInstancesDoAlt: [ :fd | fd unpin ].
ByteArray allInstancesDoAlt: [ :fd | fd unpin ].
Float32Array allInstancesDoAlt: [ :fd | fd unpin ].
IntegerArray allInstancesDoAlt: [ :fd | fd unpin ].
Smalltalk garbageCollect.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6663-PinOnlyMainCanvasArrays-JuanVuletich-2024Aug30-13h52m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6663] on 30 August 2024 at 2:31:41 pm'!
!MorphicCanvas methodsFor: 'private' stamp: 'jmv 8/30/2024 14:27:25'!
                nilState
	"Nil possibly trouble making references. See senders."
	world := nil.
	form := nil.! !
!VectorCanvas methodsFor: 'private' stamp: 'jmv 8/30/2024 14:28:00' overrides: 50377284!
      nilState
	"Nil possibly trouble making references. See senders."
	super nilState.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas nilState ].
	auxBitBltEngine := nil.! !
!BitBltCanvas methodsFor: 'private' stamp: 'jmv 8/30/2024 14:28:05' overrides: 50377284!
                   nilState
	"Nil possibly trouble making references. See senders."
	super nilState.
	boundsFinderCanvas notNil ifTrue: [
		boundsFinderCanvas nilState ].! !
!HybridCanvas methodsFor: 'private' stamp: 'jmv 8/30/2024 14:28:09' overrides: 50377299!
            nilState
	"Nil possibly trouble making references. See senders."
	super nilState.
	morphIDsForm := nil.! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 8/30/2024 14:28:51' prior: 50376494!
                  snapshot: save andQuit: quit embedded: embeddedFlag clearAllClassState: clearAllStateFlag
	"This is the main method for image save and / or quit.
	See senders."
	"WARNING: Current process will be killed. UI Process will be restarted"
	"Mark the changes file and close all files as part of #processShutdownList.
	If save is true, save the current state of this Smalltalk in the image file.
	If quit is true, then exit to the outer OS shell.
	The latter part of this method runs when resuming a previously saved image. This resume logic
	checks for a document file to process when starting up."
	"
	To test the full cleanup and startup procedures, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: true

	To test the cleanup done when saving the image, evaluate:
		Smalltalk snapshot: false andQuit: false embedded: false clearAllClassState: false
	"
	| activeProc |
	activeProc := Processor activeProcess.
[
	| isARealStartup guiRootObject guiRootObjectClass userBaseDirectory |
	save not & quit
		ifTrue: [ (SourceFiles at: 2) ifNotNil: [ :changes |
				ChangesInitialFileSize ifNotNil: [ changes truncate: ChangesInitialFileSize ]]]
		ifFalse: [ self logSnapshot: save andQuit: quit ].
	clearAllStateFlag ifTrue: [
		TranscriptWindow allInstancesDoAlt: [ :each |
			each isInWorld ifTrue: [ each delete.]].
		UISupervisor ui tearDownDesktop.
		Transcript logToFile: false ].
	ActiveModel flushEventSystem.
	"These could be moved to some #shutDown"
	self stopLowSpaceWatcher.
	WeakArray stopFinalizationProcess.
	ProcessorScheduler stopBackgroundProcess.
	"Stuff needed to relaunch UI on startup"
	guiRootObjectClass := UISupervisor ui class.
	"Replace with this to create a new world at startup after 'saveAsNewVersion'"
	guiRootObject := clearAllStateFlag ifFalse: [ UISupervisor ui ].

	UISupervisor stopUIProcess.
	activeProc isTerminated ifFalse: [ activeProc terminate ].
	guiRootObject ifNotNil: [ guiRootObject releaseCachedState ].
	clearAllStateFlag ifTrue: [
		Processor processesDo: [ :p |
			(p name = 'Formerly: Morphic UI') ifTrue: [ p terminate ]]].
	MorphicCanvas allSubInstancesDoAlt: [ :c |
		c nilState ].
	self processShutDownList: quit.

	"Clean Globals"
	userBaseDirectory := DirectoryEntry userBaseDirectory.
	self at: #Sensor put: nil.
	self closeSourceFiles.
	self at: #SourceFiles put: nil.
	self allClassesDo: [ :cls |
		cls releaseClassCachedState ].
	clearAllStateFlag ifTrue: [
		self allClassesDo: [ :cls |
			cls releaseClassState ]].
	"To keep cleaning stuff that shouldn't be saved..."
	clearAllStateFlag ifTrue: [
		Transcript clear.
		"Enable this call to actually see the image clean report."
		false ifTrue: [self printStuffToCleanOnImageSave]].
	"Do image save & quit as apropriate"
	(Cursor cursorAt: #writeCursor) activateCursor.
	isARealStartup := false.
	save ifTrue: [
		"The snapshot primitive answers false if it was just called to do the snapshot.
		But image startup is resumed by returning (again) from the primitive, but this time answering true.
		nil means saving image failed"
		isARealStartup := embeddedFlag
			ifTrue: [ self snapshotEmbeddedPrimitive ]
			ifFalse: [ self snapshotPrimitive ]].
	quit & (isARealStartup == false) ifTrue: [ self quitPrimitive ]. "Don't quit on nil (image save failed)"

	isARealStartup == true ifFalse: [ 									"Keep current #userBaseDirectory unless a real startup"
		DirectoryEntry setUserBaseDirectory: userBaseDirectory ].

	"If starting from absolute scratch, this would be a good time to recreate Global names"
	self at: #Sensor put: nil.
	self at: #SourceFiles put: (Array new: 2).
	self logStartupDebugAid: 'To #openSourceFiles'.
	self openSourceFiles.
	"Here, startup begins!! (isARealStartup might be nil)"
	self logStartupDebugAid: 'To #initClassCachedState'.
	self allClassesDo: [ :cls | cls initClassCachedState ].
	self logStartupDebugAid: 'To #doStartUp:'.
	self doStartUp: isARealStartup == true.
	self logStartupDebugAid: 'To #spawnNewMorphicProcessFor: ', guiRootObject printString.
	UISupervisor spawnNewMorphicProcessFor: (guiRootObject ifNil: [ guiRootObject := guiRootObjectClass newWorld ]).
	isARealStartup == true
		ifTrue: [
			self logStartupDebugAid: 'To #checkIfAlreadyRunningOrStoppedNoExit'.
			self checkIfAlreadyRunningOrStoppedNoExit.
			"Some command line arguments need to be processed before starting the UI"
			self processCommandLineArguments: true.
			self assureStartupStampLogged ].
	clearAllStateFlag ifTrue: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #recreateDefaultDesktop'.
			guiRootObject recreateDefaultDesktop; restoreDisplay ]]
	ifFalse: [
		UISupervisor whenUIinSafeState: [
			self logStartupDebugAid: 'To #restoreDisplay'.
			guiRootObject restoreDisplay ]].
	"It is needed to do this at least once on MacVMs, where it may not be needed later.
	For instance #forceToScreen: is usually not called in #displayWorldOn: if running on Mac."
	Display forceToScreen.
	isARealStartup == true
		ifTrue: [
			"If system is coming up (VM and image just started)"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs.
				self logStartupDebugAid: 'To #processCommandLineArguments'.
				"Some command line arguments need to be processed after the UI is up, and in the UI process"
				self processCommandLineArguments: false.
				self logStartupDebugAid: 'To #launchApp'.
				AppLauncher launchApp ]]
		ifFalse: [
			"If we are just saving the image"
			UISupervisor whenUIinSafeState: [
				self logStartupDebugAid: 'To #readAndApplyUserPrefs'.
				self readAndApplyUserPrefs ]].
	"Now it's time to raise an error"
	isARealStartup ifNil: [ self logStartupError: 'Failed to write image file (disk full?)' ]
]
	forkAt: Processor timingPriority - 1
	named: 'Startup process'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6664-ReleaseCanvasStateOnSnapshot-JuanVuletich-2024Aug30-14h26m-jmv.001.cs.st----!

----QUIT----(30 August 2024 15:45:50) Cuis7.1-6664-32.image priorSource: 1429890!

----STARTUP---- (1 September 2024 16:43:18) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6664-32.image!


'From Cuis7.1 [latest update: #6664] on 1 September 2024 at 4:26:08 pm'!
!Debugger methodsFor: 'private' stamp: 'jmv 9/1/2024 16:11:41' prior: 50376862!
   resumeProcess
	| mustTerminateActive worldIfMustRedisplay |
	worldIfMustRedisplay := self runningWorld.
	savedCursor
		ifNotNil: [savedCursor activateCursor].
	mustTerminateActive := false.
	interruptedProcess isTerminated ifFalse: [
		interruptedProcessUI notNil ifTrue: [
			interruptedProcessUI isConsistentWithTarget
				ifTrue: [
					(interruptedProcess name withoutPrefix: 'Formerly: ') ifNotNil: [ :originalName |
						interruptedProcess
							name: originalName;
							priority: interruptedProcess priority + 1 ].
					UISupervisor isUIProcessRunning
						ifTrue: [ mustTerminateActive := true]
						ifFalse: [ UISupervisor stopUIProcess].
					UISupervisor uiProcess: interruptedProcess.
					UISupervisor ui mainCanvas unpinAndFreeMemory ]
				ifFalse: [
					"The Display has changed size while running the debugger.
					The interupted process would use an invalid canvas, corrupting the Display,
					and likely crashing the system. Don't resume the process. Just keep the current UI process running."
					interruptedProcess terminate.
					interruptedProcess := nil.
					interruptedProcessUI unpinAndFreeMemory.
					interruptedProcessUI := nil ]].
		interruptedProcess ifNotNil: [ :p |
			interruptedProcessUI ifNotNil: [ :canvas |
				canvas beMainCanvasOfWorld ].
			p resolvePendingQuickReturns; resume ]].
	interruptedProcess := nil.
	interruptedProcessUI := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	worldIfMustRedisplay ifNotNil: [ :w |
		[UISupervisor whenUIinSafeState: [ w invalidateBounds ]]
			forkAt: Processor userSchedulingPriority-1 ].
	"restart low space handler"
	Smalltalk installLowSpaceWatcher.
	"If this process was the UI process, and we just resumed the old one,
	then terminate us and never return to caller."
	mustTerminateActive
		ifTrue: [ Processor terminateActive ].! !
!WorldMorph methodsFor: 'canvas' stamp: 'jmv 9/1/2024 16:14:59' prior: 50377189!
               mainCanvas: aMorphicCanvas
	"Set the main canvas"

	canvas == aMorphicCanvas ifFalse: [
		(Preferences at: #saveReleaseOptionsInWorldMenu) ifFalse: [
			aMorphicCanvas pinArrays ].
		canvas := aMorphicCanvas.
	].
	damageRecorder := DamageRecorder new.
	damageRecorder recordInvalidRect: self localBounds for: nil.
	waitDelay := Delay forMilliseconds: 50.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6665-Debugger-resume-fixRecentBreackage-JuanVuletich-2024Sep01-16h25m-jmv.001.cs.st----!

----QUIT----(1 September 2024 16:43:21) Cuis7.1-6665-32.image priorSource: 1467352!

----STARTUP---- (2 September 2024 16:04:50) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6665-32.image!


'From Cuis7.1 [latest update: #6665] on 2 September 2024 at 2:35:27 pm'!
!WorldMorph methodsFor: 'canvas' stamp: 'jmv 9/2/2024 14:25:19'!
                            setupCanvas
	"If possible, reuse VectorEngine, avoiding the allocation of new large arrays for it."

	| newCanvas |
	newCanvas := [ MorphicCanvas onDisplayToReplace: canvas ]
				on: OutOfMemory
				do: [
					"In case of lack of memory, use a much cheaper (but limited) BitBltCanvas."
					'Not enough memory to run VectorEngine. Using BitBltCanvas instead.' print.
					MorphicCanvas activeSubclass: BitBltCanvas.
					MorphicCanvas onDisplay ].
	self mainCanvas: newCanvas.
	canvas world: self.! !
!MorphicCanvas methodsFor: 'accessing' stamp: 'jmv 9/2/2024 11:26:20'!
    vectorEngine
	"Answer our VectorEngineDrawer, or nil if we don't have one."
	^nil! !
!MorphicCanvas methodsFor: 'private' stamp: 'jmv 9/2/2024 12:01:47'!
      doOwnEngine
	"VectorCanvas needs this."! !
!MorphicCanvas class methodsFor: 'instance creation' stamp: 'jmv 9/2/2024 14:25:08'!
onDisplay
	"Answer an instance of the appropriate subclass targetting Display,
	or an intermediate buffer, as appropriate.
	Create a new VectorEngineDrawer or BitBltCanvasEngine as appropriate."
	        "If this platform supports deferred updates
		- Set Display to deferred update mode
		- Use a Canvas on Display
	otherwise
		- Set a non-Display canvas"

	| canvasTarget |
	canvasTarget := (Display deferUpdates: true)
		"Both Linux and Windows VM do support deferUpdates:, so Morphic Canvas target is Display."
		ifNotNil: [ Display ]
		"Mac (at least on Intel) doesn't support deferUpdates:, so Morphic Canvas target is this aux Form."
		ifNil: [ Form extent: Display extent depth: Display depth ].
	canvasTarget == Display ifTrue: [
		"But then, they need to flush updates periodically."
		DisplayScreen installScreenUpdater ].
	^self onForm: canvasTarget.! !
!MorphicCanvas class methodsFor: 'instance creation' stamp: 'jmv 9/2/2024 14:25:34'!
         onDisplayToReplace: oldCanvasOrNil
	"If possible, reuse VectorEngine, avoiding the allocation of new large arrays for it."

	| vectorEngineToReuse |
	self subclassToUse = oldCanvasOrNil class ifFalse: [
		^self onDisplay ].
	vectorEngineToReuse := oldCanvasOrNil vectorEngine.
	vectorEngineToReuse isNil ifTrue: [
		^self onDisplay ].
	vectorEngineToReuse isConsistentWithTarget ifFalse: [
		^self onDisplay ].
	^self subclassToUse basicNew
		setVectorEngine: vectorEngineToReuse;
		initializeWithTranslation: `0@0`.! !
!VectorCanvas methodsFor: 'accessing' stamp: 'jmv 9/2/2024 11:26:31' overrides: 50377626!
                              vectorEngine
	"Answer our VectorEngineDrawer, or nil if we don't have one."
	^engine! !
!VectorCanvas methodsFor: 'initialization' stamp: 'jmv 9/2/2024 12:02:38'!
                             setVectorEngine: vectorEngineToReuse

	form := vectorEngineToReuse target.
	engine := vectorEngineToReuse.
	self doOwnEngine.
	auxBitBltEngine := BitBltCanvasEngine toForm: form.
	self newClipRect: nil.! !
!VectorCanvas methodsFor: 'private' stamp: 'jmv 9/2/2024 12:02:22' overrides: 50377631!
                          doOwnEngine
	"VectorCanvas needs this."
	engine canvas: self.! !
!HybridCanvas methodsFor: 'accessing' stamp: 'jmv 9/2/2024 11:26:47' overrides: 50377626!
     vectorEngine
	"Answer our VectorEngineDrawer, or nil if we don't have one."
	^vectorCanvas vectorEngine! !
!HybridCanvas methodsFor: 'private' stamp: 'jmv 9/2/2024 12:02:03' overrides: 50377631!
                             doOwnEngine
	"VectorCanvas needs this."
	vectorCanvas doOwnEngine! !
!HybridCanvas methodsFor: 'private' stamp: 'jmv 9/2/2024 11:57:57'!
                       setVectorEngine: vectorEngineToReuse

	form := vectorEngineToReuse target.
	engine := BitBltCanvasEngine toForm: form.
	"Init BitBlt so that the first call to the 'primitiveDisplayString' primitive will not fail"
	engine sourceX: 0; width: 0.
	vectorCanvas := VectorCanvas basicNew
		setVectorEngine: vectorEngineToReuse.
	vectorCanvas attachedCanvas: self.
	morphIDsForm := Form extent: form extent depth: 32 bits: vectorCanvas engine morphIds.
	drawingOnMorphIDs := false.
	self newClipRect: nil.! !
!VectorEngineDrawer methodsFor: 'accessing' stamp: 'jmv 9/2/2024 11:42:35'!
                              target
	^targetForm! !
!Debugger methodsFor: 'private' stamp: 'jmv 9/2/2024 14:18:58' prior: 50377515!
                         resumeProcess
	| mustTerminateActive worldIfMustRedisplay |
	worldIfMustRedisplay := self runningWorld.
	savedCursor
		ifNotNil: [savedCursor activateCursor].
	mustTerminateActive := false.
	interruptedProcess isTerminated ifFalse: [
		interruptedProcessUI notNil ifTrue: [
			interruptedProcessUI isConsistentWithTarget
				ifTrue: [
					(interruptedProcess name withoutPrefix: 'Formerly: ') ifNotNil: [ :originalName |
						interruptedProcess
							name: originalName;
							priority: interruptedProcess priority + 1 ].
					UISupervisor isUIProcessRunning
						ifTrue: [ mustTerminateActive := true]
						ifFalse: [ UISupervisor stopUIProcess].
					UISupervisor uiProcess: interruptedProcess ]
				ifFalse: [
					"The Display has changed size while running the debugger.
					The interupted process would use an invalid canvas, corrupting the Display, likely
					crashing the system. Don't resume the process. Just keep the current UI process running."
					interruptedProcess terminate.
					interruptedProcess := nil.
					interruptedProcessUI := nil ]].
		interruptedProcess ifNotNil: [ :p |
			interruptedProcessUI ifNotNil: [ :canvas |
				canvas beMainCanvasOfWorld ].
			p resolvePendingQuickReturns; resume ]].
	interruptedProcess := nil.
	interruptedProcessUI := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	worldIfMustRedisplay ifNotNil: [ :w |
		[UISupervisor whenUIinSafeState: [ w invalidateBounds ]]
			forkAt: Processor userSchedulingPriority-1 ].
	"restart low space handler"
	Smalltalk installLowSpaceWatcher.
	"If this process was the UI process, and we just resumed the old one,
	then terminate us and never return to caller."
	mustTerminateActive
		ifTrue: [ Processor terminateActive ].! !
!WorldMorph methodsFor: 'interaction loop' stamp: 'jmv 9/2/2024 14:20:33' prior: 50376941!
           mainLoop

	self position: `0@0` extent: Display extent.
	"If possible, reuse VectorEngine, avoiding the allocation of new large arrays for it."
	self setupCanvas.
	self restoreDisplay.

	"Needed if for some reason Cuis is started with an earlier DateTime than the image was saved.
	Might happen, especially on RasPi or other systems without an RTC"
	lastCycleTime := Time localMillisecondClock.
	lastAlarmTime := 0.

	[
		self displayWorldOn: canvas.
		[
			"Here canvas and waitDelay are passed as arguments.
			This is because when debugging Morphic, a new UI process,
			these ivars are updated, but in the debugger process we still want the original ones."
			self doOneCycleOn: canvas delay: waitDelay.
			UISupervisor isUIProcessRunning ]
				whileTrue: []
	] on: Error, Halt do: [ :ex |
		"Handle a drawing error"
		(ex signalerContext findContextSuchThat: [ :context |
				context  selector = #drawOn: ])
			ifNotNil: [ :context |
				context receiver drawingFails.
				"Install the old error handler, so we can re-raise the error.
				This means, open a Debugger.
				This will also create a new Morphic process. if the user closes the debugger."
				ex receiver error: ex description.
				"Create a new UI process, if the user proceeds in the debugger.
				This is to use a new, clean Canvas."
				UISupervisor newUIProcess ]
			ifNil: [ ex pass ]
	].! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/2/2024 14:23:58' prior: 50376370!
                    checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |

	"Linux VMs continuously update #actualScreenSize while the user is resizing the OS window.
	Avoid reallocation of Display until the user is done with that.
	Currently, wait until a real event happens inside Cuis.
	This requires the user to move the mouse back into Cuis.
	Maybe other ways are possible."
	lastCycleHadAnyEvent ifFalse: [
		Smalltalk osVersion = 'linux-gnu' ifTrue: [ 		^self ]].

	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"''print. {DateAndTime now. 'Smalltalk Display:'. Display extent. 'os display:'. DisplayScreen actualScreenSize} print."
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				(ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent) truncated ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [
				"{'New ScaleFactor'. ScaleFactor. 'Set os display to:'. e} print."
				DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"When moving the Cuis window, for instance, between a laptop screen with ScaleFactor=2.0 and an external screen with
		ScaleFactor=1.0, usually the #hostOSWindowExtent: already left us with isDisplayExtentOk, so asking again is in order."
		DisplayScreen isDisplayExtentOk ifFalse: [
			"This allocates new memory for Display and is critical."
			needsNewUIProcessAndCanvas := true.
			"This may help with memory fragmentation issues possibly making new display allocation fail."
			canvas unpinAndFreeMemory.
			DisplayScreen setupDisplay ]].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"The current canvas is not consistent with Display, and therefore can no longer be used. A new one is required.
			Freeeing the memory it uses may help with memory fragmentation issues possibly making new canvas allocation fail.
			(If there is not enough free memory for VectorCanvas and engine, use a BitBltCanvas, see #getMainCanvas)"
			canvas unpinAndFreeMemory.
			"Create a new UI process, including a new canvas consistent with updated Display.
			This will also terminate the current process, and this is needed because the current canvas can no longer be used.
			A canvas + vector engine inconsistent with Display will cause invalid memory accesses, crashing the system."
			UISupervisor spawnNewMorphicProcessFor: self andTerminateCurrent: true ].! !
!MorphicCanvas methodsFor: 'morphic world' stamp: 'jmv 9/2/2024 12:02:49' prior: 50376841!
         beMainCanvasOfWorld
	world mainCanvas: self.
	self doOwnEngine.! !
!HybridCanvas methodsFor: 'private' stamp: 'jmv 9/2/2024 11:57:47' prior: 16875638 overrides: 16791701!
                     setForm: aForm subPixelAntiAliasing: aBooleanOrNil
	"nil means use default kind of anti aliasing"

	form := aForm.
	engine := BitBltCanvasEngine toForm: form.
	"Init BitBlt so that the first call to the 'primitiveDisplayString' primitive will not fail"
	engine sourceX: 0; width: 0.
	vectorCanvas := VectorCanvas onForm: form.
	vectorCanvas attachedCanvas: self.
	morphIDsForm := Form extent: form extent depth: 32 bits: vectorCanvas engine morphIds.
	drawingOnMorphIDs := false.
	self newClipRect: nil.! !
!VectorEngineDrawer methodsFor: 'private' stamp: 'jmv 9/2/2024 14:21:24' prior: 50377205!
           pvtSetForm: aForm

	| s |
	targetForm := aForm.
	targetWidth := targetForm width.
	targetHeight := targetForm height.
	s := targetWidth * targetHeight.
	self flag: #VEPapi5.		"Eventually remove the +1.
	Needed for VEPapi=5 and 6 (for plugins older than Sept-21-2021, and version less than 1.29).
	Avoid it altoghether if the plugin is not available (#pluginApiVersion answers 0)"
	morphIds := WordArray new: (
		(VectorEngineWithPlugin pluginApiVersion between: 5 and: 6)
			ifTrue: [s+1]
			ifFalse: [s]).
	edgeCounts := self auxPixelDataClass new: s.
	alphaMask := self auxPixelDataClass new: s.
	contour := Float32Array new: targetHeight * 2.
	0 to: targetHeight-1 do: [ :y |
		contour at: y * 2 + 1 put: targetWidth.
		contour at: y * 2 + 2 put: 0 ].
	self resetMorphBounds.
	self clipRect: targetForm boundingBox.
	self antiAliasingWidth: self class defaultAntiAliasingWidth.
	geometryTransformation := MorphicTranslation identity.! !
!VectorEngineDrawer methodsFor: 'services' stamp: 'jmv 9/2/2024 12:53:43' prior: 50367096!
                         isConsistentWithTarget
	"and display!!!!!!!!!!"
	targetForm isNil ifTrue: [ ^false ].
	targetForm extent = Display extent ifFalse: [ ^false ].
	^edgeCounts size = (targetWidth * targetHeight) and: [
		targetWidth = targetForm width and: [ targetForm height = targetHeight ]].! !
!UISupervisor class methodsFor: 'gui process' stamp: 'jmv 9/2/2024 14:27:50' prior: 16990705!
           newUIProcess
	"Start a new UI process for the current UI.
	The current UI process (if any) will exit at the end of the current UI cycle."
	"If possible, reuse VectorEngine, avoiding the allocation of new large arrays for it."

	self spawnNewMorphicProcessFor: UI.! !
!UISupervisor class methodsFor: 'gui process' stamp: 'jmv 9/2/2024 14:29:41' prior: 50367398!
                       spawnNewMorphicProcessFor: guiRootObject
	"
	Safe to run anytime, as the old Morphic process will end by itself.
	UISupervisor spawnNewMorphicProcessFor: UISupervisor ui.
	"
	"If possible, reuse VectorEngine, avoiding the allocation of new large arrays for it."
	self spawnNewMorphicProcessFor: guiRootObject andTerminateCurrent: false.! !

Form removeSelector: #getMainCanvas!

!methodRemoval: Form #getMainCanvas stamp: 'Install-6666-ReuseVectorGraphicsEngineAndLargeArrays-JuanVuletich-2024Sep02-14h13m-jmv.001.cs.st 9/2/2024 16:04:50'!
getMainCanvas
	"Return a Canvas that can be used to draw onto the receiver.
	In case of lack of memory, use a much cheaper (but limited) BitBltCanvas."

	| answer |
	answer := [ MorphicCanvas onForm: self ]
				on: OutOfMemory
				do: [
					'Not enough memory to run VectorEngine. Using BitBltCanvas instead.' print.
					MorphicCanvas activeSubclass: BitBltCanvas.
					MorphicCanvas onForm: self ].
	^answer.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6666-ReuseVectorGraphicsEngineAndLargeArrays-JuanVuletich-2024Sep02-14h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6665] on 2 September 2024 at 2:37:39 pm'!
!Debugger methodsFor: 'initialization' stamp: 'jmv 9/2/2024 14:37:13' prior: 50376846!
                          windowIsClosing
	"My window is being closed.
	Terminate the process being debugged.
	Clean up. Restart the low space watcher."

	interruptedProcess
		ifNil: [^ self].
	interruptedProcess terminate.
	interruptedProcess := nil.
	interruptedProcessUI := nil.
	contextStackIndex := 0.
	contextStack := nil.
	contextStackTop := nil.
	receiverInspector := nil.
	contextVariablesInspector := nil.
	Smalltalk installLowSpaceWatcher.  "restart low space handler"
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6667-Tweak-JuanVuletich-2024Sep02-14h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6667] on 2 September 2024 at 3:09:11 pm'!
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/2/2024 15:08:46' prior: 50377847!
           checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |

	"Linux VMs continuously update #actualScreenSize while the user is resizing the OS window.
	Try to avoid reallocation of Display until the user is done with that.
	For that, wait until a real event happens inside Cuis. (This requires the user to move the mouse back into Cuis).
	Or use a timer, and do it no more often than every half a second."
	DisplayScreen isDisplayExtentOk ifFalse: [
		Smalltalk osVersion = 'linux-gnu' ifTrue: [
			self valueOfProperty: #startForNewDisplayTimeout ifAbsentPut: [Time localMillisecondClock].
			(lastCycleHadAnyEvent not and: [ Time localMillisecondClock - (self valueOfProperty: #startForNewDisplayTimeout) < 500 ])
				ifTrue: [ ^self ].
			self removeProperty: #startForNewDisplayTimeout ]].

	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"''print. {DateAndTime now. 'Smalltalk Display:'. Display extent. 'os display:'. DisplayScreen actualScreenSize} print."
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				(ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent) truncated ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [
				"{'New ScaleFactor'. ScaleFactor. 'Set os display to:'. e} print."
				DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"When moving the Cuis window, for instance, between a laptop screen with ScaleFactor=2.0 and an external screen with
		ScaleFactor=1.0, usually the #hostOSWindowExtent: already left us with isDisplayExtentOk, so asking again is in order."
		DisplayScreen isDisplayExtentOk ifFalse: [
			"This allocates new memory for Display and is critical."
			needsNewUIProcessAndCanvas := true.
			"This may help with memory fragmentation issues possibly making new display allocation fail."
			canvas unpinAndFreeMemory.
			DisplayScreen setupDisplay ]].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"The current canvas is not consistent with Display, and therefore can no longer be used. A new one is required.
			Freeeing the memory it uses may help with memory fragmentation issues possibly making new canvas allocation fail.
			(If there is not enough free memory for VectorCanvas and engine, use a BitBltCanvas, see #getMainCanvas)"
			canvas unpinAndFreeMemory.
			"Create a new UI process, including a new canvas consistent with updated Display.
			This will also terminate the current process, and this is needed because the current canvas can no longer be used.
			A canvas + vector engine inconsistent with Display will cause invalid memory accesses, crashing the system."
			UISupervisor spawnNewMorphicProcessFor: self andTerminateCurrent: true ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6668-Linux-HonorDisplayResizeWithinHalfASecond-JuanVuletich-2024Sep02-15h07m-jmv.001.cs.st----!

----QUIT----(2 September 2024 16:04:53) Cuis7.1-6668-32.image priorSource: 1470316!

----STARTUP---- (12 September 2024 11:39:24) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6668-32.image!


'From Cuis7.1 [latest update: #6668] on 2 September 2024 at 4:39:39 pm'!
!SystemDictionary methodsFor: 'startup' stamp: 'jmv 9/2/2024 16:39:15' prior: 50365009!
                    checkIfAlreadyRunningOrStoppedNoExit
	"
	If the Changes file is not clean during startup, it may mean either:
	- last run crashed or was killed (code recovery may be in order)
	- Cuis is already running. Running it again may mean inconsistent updates to .changes file.
	Smalltalk checkIfAlreadyRunningOrStoppedNoExit
	"
	| imageSaveChunk postImageSaveChunk |
	imageSaveChunk := nil.
	postImageSaveChunk := nil.
	self withChangesFileDo: [ :changesFile |
		changesFile position: self lastQuitLogPosition.
		changesFile atEnd ifFalse: [ imageSaveChunk := changesFile nextChunk ].
		changesFile atEnd ifFalse: [ postImageSaveChunk := changesFile nextChunk ]].

	"If we can't find the image save chunk at the image save position, something is wrong."
	(imageSaveChunk isNil or: [ ((Smalltalk isQuitRecord: imageSaveChunk		) or: [
			Smalltalk isSnapshotRecord: imageSaveChunk ]) not])
		ifTrue: [
			UISupervisor whenUIinSafeState: [
				self notify:
					self currentChangesName asFullFileEntry pathName, String newLineString,
					'Image save chunk not found. Possible image / changes file corruption. Proceed with caution.' ].
				^self ].

	"If there is already a post-imageSave chunk, it may mean Cuis is running in another OS process,
	or in a previous run, it was killed or crashed."
	postImageSaveChunk notNil ifTrue: [
		(Preferences at: #checkLostChangesOnStartUp)
			ifTrue: [
				"Let the user chose automatic or manual recovery from .changes file.
				Used mainly by CuisUniversity."
				UISupervisor whenUIinSafeState: [self restoreLostChanges ]]
			ifFalse: [
				"Notify user about the situation, open changes recovery tool on last User Changes file."
				(Preferences at: #warnAndOfferLastUserChanges) ifTrue: [
					UISupervisor whenUIinSafeState: [self warnAndOfferLastUserChanges]]]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6669-WarnOfPossiblyAlreadyRunningOrCrashedCuis-fix-JuanVuletich-2024Sep02-16h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6669] on 2 September 2024 at 7:29:41 pm'!
!MorphicCanvas methodsFor: 'morphic world' stamp: 'jmv 9/2/2024 19:28:59' prior: 16908421!
                              boundingRectOfCurrentMorphAfterDraw
	"In targetForm coordinates.
	Clipped to owner if appropriate.
	Only valid for morphs where #localBounds is known.
	Subclasses may raise this restriction. See inherintance."

	| boundingRect |
	boundingRect := self boundingRectOfCurrentIfTrivial.
	^ clippingMorphDisplayBounds
		ifNotNil: [ :ownerClips | boundingRect intersect: ownerClips ]
		ifNil: [ boundingRect ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6670-Tweak-JuanVuletich-2024Sep02-19h28m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6670] on 3 September 2024 at 11:29:30 am'!
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/3/2024 11:28:27' prior: 50378087!
                             checkForNewScreenSize
	"Check whether the screen size has changed and if so take appropriate actions"

	| newScaleFactor e p needsNewUIProcessAndCanvas |

	"Linux VMs continuously update #actualScreenSize while the user is resizing the OS window.
	Try to avoid reallocation of Display until the user is done with that.
	For that, wait until a real event happens inside Cuis. (This requires the user to move the mouse back into Cuis).
	Or use a timer, and do it no more often than every quarter a second, and only if the resize finishes/pauses for that time."
	DisplayScreen isDisplayExtentOk ifFalse: [
		Smalltalk osVersion = 'linux-gnu' ifTrue: [
			self valueOfProperty: #startForNewDisplayTimeout ifAbsentPut: [Time localMillisecondClock].
			self valueOfProperty: #newDisplayOldExtent ifAbsentPut: [DisplayScreen actualScreenSize].
			lastCycleHadAnyEvent ifFalse: [
				(self valueOfProperty: #newDisplayOldExtent) = DisplayScreen actualScreenSize ifFalse: [
					"If user still resizing, restart timer: wait until the user finishes resizing."
					self setProperty: #startForNewDisplayTimeout toValue: Time localMillisecondClock.
					self setProperty: #newDisplayOldExtent toValue: DisplayScreen actualScreenSize].
				Time localMillisecondClock - (self valueOfProperty: #startForNewDisplayTimeout) < 250 ifTrue: [
					^self ]].
			self removeProperty: #startForNewDisplayTimeout.
			self removeProperty: #newDisplayOldExtent ]].

	needsNewUIProcessAndCanvas := false.
	DisplayScreen isDisplayExtentOk ifFalse: [
		"''print. {DateAndTime now. 'Smalltalk Display:'. Display extent. 'os display:'. DisplayScreen actualScreenSize} print."
		"If host OS scale factor has changed, try to recover our previous Display extent"
		newScaleFactor := DisplayScreen hostOSScaleFactor.
		newScaleFactor = ScaleFactor ifFalse: [
			ScaleFactor := newScaleFactor.
			e := DisplayScreen hostOSWindowExtent ifNotNil: [ :ee |
				(ee * ScaleFactor - DisplayScreen actualScreenSize + Display extent) truncated ].
			p := DisplayScreen hostOSWindowPosition.
			e ifNotNil: [
				"{'New ScaleFactor'. ScaleFactor. 'Set os display to:'. e} print."
				DisplayScreen hostOSWindowExtent: e].
			p ifNotNil: [DisplayScreen hostOSWindowPosition: p].
		].
		"When moving the Cuis window, for instance, between a laptop screen with ScaleFactor=2.0 and an external screen with
		ScaleFactor=1.0, usually the #hostOSWindowExtent: already left us with isDisplayExtentOk, so asking again is in order."
		DisplayScreen isDisplayExtentOk ifFalse: [
			"This allocates new memory for Display and is critical."
			needsNewUIProcessAndCanvas := true.
			"This may help with memory fragmentation issues possibly making new display allocation fail."
			canvas unpinAndFreeMemory.
			DisplayScreen setupDisplay ]].
	(needsNewUIProcessAndCanvas or: [canvas isConsistentWithTarget not])
		ifTrue: [
			self whenUIinSafeState: [ Cursor defaultCursor activateCursor ].
			"The current canvas is not consistent with Display, and therefore can no longer be used. A new one is required.
			Freeeing the memory it uses may help with memory fragmentation issues possibly making new canvas allocation fail.
			(If there is not enough free memory for VectorCanvas and engine, use a BitBltCanvas, see #getMainCanvas)"
			canvas unpinAndFreeMemory.
			"Create a new UI process, including a new canvas consistent with updated Display.
			This will also terminate the current process, and this is needed because the current canvas can no longer be used.
			A canvas + vector engine inconsistent with Display will cause invalid memory accesses, crashing the system."
			UISupervisor spawnNewMorphicProcessFor: self andTerminateCurrent: true ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6671-Linux-HonorResizeWithinQuarterSecond-notIfStillResizing-JuanVuletich-2024Sep03-11h28m-jmv.001.cs.st----!

'From Haver7.0 [latest update: #6454] on 21 August 2024 at 6:10:52 pm'!
!SystemWindow methodsFor: 'initialization' stamp: 'KLG 8/21/2024 18:08:30'!
                           initializeAdjusters

	| adjusterClass |
	adjusterClass := self windowEdgeAdjustingMorphClass.
	adjusters := Dictionary new.
	adjusters at: #topAdjuster put: adjusterClass forTop.
	adjusters at: #bottomAdjuster put: adjusterClass forBottom.
	adjusters at: #leftAdjuster put: adjusterClass forLeft.
	adjusters at: #rightAdjuster put: adjusterClass forRight.
	adjusters at: #topLeftAdjuster put: adjusterClass forTopLeft.
	adjusters at: #bottomLeftAdjuster put: adjusterClass forBottomLeft.
	adjusters at: #topRightAdjuster put: adjusterClass forTopRight.
	adjusters at: #bottomRightAdjuster put: adjusterClass forBottomRight.
	adjusters do: [ :m |
		self addMorphFront: m ]! !
!SystemWindow methodsFor: 'initialization' stamp: 'KLG 8/21/2024 18:09:10'!
                 windowEdgeAdjustingMorphClass
	"Answer the adjusting morph class."

	^ self class windowEdgeAdjustingMorphClass! !
!SystemWindow class methodsFor: 'instance creation' stamp: 'KLG 8/21/2024 18:09:16'!
                        windowEdgeAdjustingMorphClass
	"Answer the adjusting morph class."

	^ WindowEdgeAdjustingMorph! !
!SystemWindow methodsFor: 'initialization' stamp: 'KLG 8/21/2024 18:04:54' prior: 16970881 overrides: 16924456!
             initialize
	"Initialize a system window. Add label, stripes, etc., if desired"

	super initialize.
	labelString ifNil: [ labelString := 'Untitled Window'].
	
	self initializeLabelArea.
	extent := `300 @ 200`.

	self initializeAdjusters.

	"by default"
	self beColumn! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6672-CleanerWindowEdgeAdjusterCreation-GeraldKlix-2024Aug21-18h03m-KLG.001.cs.st----!

'From Cuis7.0 [latest update: #6452] on 3 September 2024 at 10:52:15 pm'!
!FileList methodsFor: 'own services' stamp: 'JCM 9/3/2024 22:35:59'!
                              serviceViewContentsInTextEditor
	"Answer a service for viewing the contents of a file in a TextEditor"
	
	^ SimpleServiceEntry 
		provider: self 
		label: 'Text Editor with contents' 
		selector: #viewContentsInTextEditor
		description: 'open a new TextEditor whose contents are set to the contents of this file'
		icon: #textEditorIcon! !
!FileList methodsFor: 'own services' stamp: 'JCM 9/3/2024 22:35:15'!
       viewContentsInTextEditor
	"View the contents of my selected file in a new text editor"

	| fileEntry fileContents textEditor|
	fileEntry := directory // fileName.
	fileContents := fileEntry textContents.
	
	textEditor := TextEditor open.
	textEditor model actualContents:fileContents.
	textEditor forceSaveContentsTo: fileEntry.! !
!FileList methodsFor: 'file list menu' stamp: 'JCM 9/3/2024 22:41:18' prior: 16861731!
                             itemsForAnyFile2
	"Answer a list of universal services that could apply to any file"
	
	| services |
	services := OrderedCollection new.
	(#(fullHex briefHex needToGetFullHex needToGetBriefHex) includes: brevityState) ifFalse: [
		services add: self serviceGetHex ].
	services add: self serviceCopyName.
	services add: self serviceViewContentsInWorkspace.
	services add: self serviceViewContentsInTextEditor.
	^ services! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6673-EditTextFile-JuanCruzMontero-2024Sep03-22h31m-JCM.001.cs.st----!

'From Cuis7.1 [latest update: #6672] on 4 September 2024 at 12:06:17 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 9/4/2024 11:51:37' prior: 50368090!
                            knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('dkh'						'Dale Henrichs')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSG'						'David Graham')
	#('DSM' 						'Duane Maxwell')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('JCM'						'Juan Cruz Montero')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jfr' 						'Jon Raiford')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('kdpm' 						'Kevin P√©rez Machado')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('PHK' 						'Peter Keeler')
	#('pmon'						'Paolo Montrasi')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RMV' 						'R. Mark Volkmann')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6674-Add-JuanCruz-asKnownAuthor-JuanVuletich-2024Sep04-11h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6674] on 4 September 2024 at 2:56:15 pm'!
!WorldMorph methodsFor: 'hands' stamp: 'jmv 9/4/2024 14:41:51'!
                         ifHandToBeDrawnForDamage: aRectangle do: aBlock
	"Select the set of hands that must be redrawn because either (a) the hand itself has changed or (b) the hand intersects some damage rectangle."

	activeHand isDrawnBySoftware ifTrue: [
		activeHand isRedrawNeeded
			ifTrue: aBlock
			ifFalse: [
				aRectangle ifNotNil: [
					activeHand displayFullBounds ifNotNil: [ :handBounds |
						(aRectangle intersects: handBounds) ifTrue: aBlock ]]]].! !
!HandMorph methodsFor: 'halo handling' stamp: 'jmv 9/4/2024 14:36:13' prior: 50375382!
          obtainHalo: aHalo
	"Used for transfering halos between hands"

	self halo == aHalo ifTrue: [^self].
	"Find former owner"
	self world activeHand halo == aHalo ifTrue: [
		self world activeHand releaseHalo: aHalo].
	self halo: aHalo.! !
!WorldMorph methodsFor: 'caching' stamp: 'jmv 9/4/2024 14:56:01' prior: 50377180 overrides: 16921308!
               releaseCachedState
	super releaseCachedState.
	self cleanseStepList.
	canvas ifNotNil: [
		canvas unpinAndFreeMemory ].
	canvas := nil.
	damageRecorder := nil.
	activeHand releaseCachedState.
	hands := nil.! !
!WorldMorph methodsFor: 'drawing' stamp: 'jmv 9/4/2024 14:42:15' prior: 50366803!
                            displayWorldOn: aMorphicCanvas
	"Update this world's display on the argument."

	| allDamage |
	self checkIfUpdateNeeded ifFalse: [ ^ self ].  "display is already up-to-date"

	"Restore world drawing under hands and their carried morphs"
	(Preferences at: #cacheDisplayContentWhenMovingMorphs) ifTrue: [
		activeHand restoreSavedPatchOn: aMorphicCanvas ].

	"Update #displayBounds for all dirty morphs (marked as such with #redrawNeeded).
	Also add the updated bounds to aDamageRecorder, and update bounds of morphs carried by hand."
	aMorphicCanvas boundsFinderCanvas updateBoundsIn: self addDamageTo: damageRecorder.

	"repair world's damage on canvas"
	allDamage := aMorphicCanvas drawWorld: self repair: damageRecorder.
	"allDamage ifNotNil: [Display border: allDamage width: 3 fillColor: Color random].	 'Debugging Aid'."
	aMorphicCanvas newClipRect: nil.

	"Check which hands need to be drawn.
	(they are not the hardware mouse pointer and carry morphs)"
	self ifHandToBeDrawnForDamage: allDamage do: [
		(Preferences at: #cacheDisplayContentWhenMovingMorphs)
			ifTrue: [ allDamage := (activeHand savePatchFrom: aMorphicCanvas) quickMerge: allDamage ]
			ifFalse: [ allDamage := activeHand displayFullBoundsForPatch quickMerge: allDamage ].
		aMorphicCanvas fullDrawHand: activeHand.
		activeHand needsRedraw: false ].

	"Copy altered rects to Display"
	allDamage ifNotNil: [
		aMorphicCanvas drawsOnDisplay
			ifTrue: [
				"For instance for Linux and Windows. Drawing was done to Display, but given that #deferUpdates: is on,
				we need to specifically ask for changes to be visually effective."
				DisplayScreen isDisplayExtentOk ifTrue: [
					Display forceToScreen: allDamage ]]
			ifFalse: [
				"For Mac, drawing was done to off-Display canvas. Copy content to Display.
				#deferUpdates: is off, so no additional indication to show Display contents is needed."
				aMorphicCanvas showAt: self viewBox origin invalidRect: allDamage]].! !
!WorldMorph methodsFor: 'halos and balloon help' stamp: 'jmv 9/4/2024 14:36:26' prior: 17007390!
                             deleteBalloonTarget: aMorph
	"Delete the balloon help targeting the given morph"
	activeHand deleteBalloonTarget: aMorph.! !
!WorldMorph methodsFor: 'hands' stamp: 'jmv 9/4/2024 14:31:14' prior: 50375441 overrides: 16915804!
                               activeHand
	^activeHand! !
!WorldMorph methodsFor: 'initialization' stamp: 'jmv 9/4/2024 14:31:23' prior: 17007440 overrides: 16796424!
                        initialize

	super initialize.
	activeHand := HandMorph new.
	damageRecorder := DamageRecorder new.
	stepList := Heap sortBlock: self stepListSortBlock.
	alarms := Heap sortBlock: self alarmSortBlock.
	lastAlarmTime := 0.
	deferredUIMessages := SharedQueue new.
	drawingFailingMorphs := WeakIdentitySet new.
	pause := 20.
	lastCycleTime := Time localMillisecondClock.
	lastCycleHadAnyEvent := false! !
!WorldMorph methodsFor: 'misc' stamp: 'jmv 9/4/2024 14:37:24' prior: 17007597!
                               restoreDisplay
	self morphExtent: Display extent.
	activeHand visible: true.
	self fullRepaintNeeded.! !
!WorldMorph methodsFor: 'submorphs-accessing' stamp: 'jmv 9/4/2024 14:38:36' prior: 17007735 overrides: 16906740!
     allMorphsDo: aBlock
	"Enumerate all morphs in the world, including those held in hands."

	super allMorphsDo: aBlock.
	activeHand allMorphsDo: aBlock.! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/4/2024 14:34:02' prior: 17007841!
               checkIfUpdateNeeded

	self isSubmorphRedrawNeeded ifTrue: [ ^true ].
	damageRecorder updateIsNeeded ifTrue: [^true].
	(activeHand isRedrawNeeded | activeHand isSubmorphRedrawNeeded and: [
		activeHand isDrawnBySoftware]) ifTrue: [^true].
	^false  "display is already up-to-date"! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/4/2024 14:39:07' prior: 50375392!
               doOneCycleNowOn: aMorphicCanvas
	"Immediately do one cycle of the interaction loop.
	Only used for a few tests."
	"See #eventTickler"
	| hadAny |
	lastCycleTime := Time localMillisecondClock.
	Cursor currentCursor = (Cursor cursorAt: #waitCursor) ifTrue: [ Cursor defaultCursor activateCursor ].
	"Repair visual damage."
	self checkForNewScreenSize.
	self displayWorldOn: aMorphicCanvas.
	"Run steps, alarms and deferred UI messages."
	self runDeferredUIMessages.
	self triggerAlarmsBefore: lastCycleTime.
	self runLocalStepMethods: lastCycleTime.
	"Ensure that any affected morph is redrawn ASAP."
	self displayWorldOn: aMorphicCanvas.
	"Process user input events. Run all event triggered code."
	hadAny := activeHand processEventQueue.
	"Run any deferred UI messages that were enqueued during this cycle, perhaps
	as consequence of event handling or step methods, or sent from other processes,
	before the inter cycle pause."
	self runDeferredUIMessages.
	"Ensure that any affected morph is redrawn ASAP, before the inter cycle pause."
	self displayWorldOn: aMorphicCanvas.
	lastCycleHadAnyEvent := hadAny.! !
!WorldMorph methodsFor: 'update cycle' stamp: 'jmv 9/4/2024 14:32:44' prior: 17007901!
                 doOneCycleOn: aMorphicCanvas delay: delay
	"Do one cycle of the interaction loop. This method is called repeatedly when the world is running.
	
	Make for low cpu usage if the ui is inactive, but quick response when ui is in use.
	However, after some inactivity, there will be a larger delay before the ui gets responsive again."

	| wait waitUntil |
	"
	'Debugging Aid. Declare Delta either as a class variable or as a global variable. Declare delta and r as locals'.
	delta := Time localMillisecondClock - lastCycleTime.
	r := 15@1515 extent: 60@30.
	Delta := Delta ifNil: [ delta ] ifNotNil: [ Delta * 0.9 + (delta * 0.1) ].
	Random next > 0.9 ifTrue: [
		Display fill: r fillColor: Color white.
		(Delta printStringFractionDigits: 1) displayAt: 20@1520.
		Display forceToScreen: r ].
	"
	self doOneCycleNowOn: aMorphicCanvas.

	(lastCycleHadAnyEvent or: [ deferredUIMessages isEmpty not ])
		ifTrue: [
			pause := 20.				"This value will only be used later, when there are no more events to serve or deferred UI messages to process."
			wait := 0.				"Don't wait this time"]
		ifFalse: [
			"wait between 20 and 200 milliseconds"
			activeHand waitingForMoreClicks
				ifTrue: [ pause := 20 ]
				ifFalse: [ pause < 200 ifTrue: [ pause := pause * 21//20 ] ].
			waitUntil := lastCycleTime + pause.
			"Earlier if steps"
			stepList isEmpty not ifTrue: [
				waitUntil := waitUntil min: stepList first scheduledTime ].
			"Earlier if alarms"
			alarms ifNotNil: [
				alarms isEmpty not ifTrue: [
					waitUntil := waitUntil min: alarms first scheduledTime ]].
			wait := waitUntil - Time localMillisecondClock max: 0 ].
	(Preferences at: #serverMode)
		ifTrue: [ wait := wait max: 50 ].	"Always wait at least a bit on servers, even if this makes the UI slow."
	wait = 0
		ifTrue: [ Processor yield ]
		ifFalse: [
			delay setDelay: wait; wait ].! !
!WorldMorph methodsFor: 'world state' stamp: 'jmv 9/4/2024 14:36:51' prior: 17008236!
              haloMorphsDo: aBlock
	activeHand halo ifNotNil: [ :halo | aBlock value: halo ].! !
!WorldMorph class methodsFor: 'instance creation' stamp: 'jmv 9/4/2024 14:35:16' prior: 50373596!
           newWorld
	"
[
	UISupervisor stopUIProcess.
	UISupervisor spawnNewMorphicProcessFor: WorldMorph newWorld
] fork.
	"
	| w |
	w := self new.
	w color: (Color r: 0.167 g: 0.344 b: 0.629).
	w borderWidth: 0.
	w position: `0@0` extent: Display extent.
	w activeHand privateOwner: w.
	^w! !
!BoundsFinderCanvas methodsFor: 'morphic' stamp: 'jmv 9/4/2024 14:38:02' prior: 16795922!
          updateHandsDisplayBounds: aWorldMorph
	"Update displayBounds for carried morphs if never set.
	Useful for new morph, that are created and attached to the hand."

	| hand |
	hand := aWorldMorph activeHand.
	hand hasSubmorphs ifTrue: [
		self into: hand.
		hand submorphsDo: [ :morph |
			morph basicDisplayBounds ifNil: [
				self fullUpdateProtrudingBounds: morph ]].
		self outOfMorph ].! !
!BitBltBoundsFinderCanvas methodsFor: 'morphic' stamp: 'jmv 9/4/2024 14:38:15' prior: 16791086!
                        updateHandsDisplayBounds: aWorldMorph
	"Update displayBounds for carried morphs if never set.
	Useful for new morph, that are created and attached to the hand."

	| hand |
	hand := aWorldMorph activeHand.
	hand hasSubmorphs ifTrue: [
		self into: hand.
		hand submorphsDo: [ :morph |
			morph basicDisplayBounds ifNil: [
				self fullUpdateProtrudingBounds: morph ]].
		self outOfMorph ].! !

WorldMorph removeSelector: #handsToDrawForDamage:do:!

!methodRemoval: WorldMorph #handsToDrawForDamage:do: stamp: 'Install-6675-Cleanup-JuanVuletich-2024Sep04-14h52m-jmv.001.cs.st 9/12/2024 11:39:24'!
handsToDrawForDamage: aRectangle do: aBlock
	"Select the set of hands that must be redrawn because either (a) the hand itself has changed or (b) the hand intersects some damage rectangle."

	hands do: [: hand |
		hand isDrawnBySoftware ifTrue: [
			hand isRedrawNeeded
				ifTrue: [aBlock value: hand]
				ifFalse: [
					aRectangle ifNotNil: [
						hand displayFullBounds ifNotNil: [ :handBounds |
							(aRectangle intersects: handBounds) ifTrue: [
								aBlock value: hand ]]]]]].!

WorldMorph removeSelector: #handsDo:!

!methodRemoval: WorldMorph #handsDo: stamp: 'Install-6675-Cleanup-JuanVuletich-2024Sep04-14h52m-jmv.001.cs.st 9/12/2024 11:39:24'!
handsDo: aBlock

	^ hands do: aBlock!

WorldMorph removeSelector: #hands!

!methodRemoval: WorldMorph #hands stamp: 'Install-6675-Cleanup-JuanVuletich-2024Sep04-14h52m-jmv.001.cs.st 9/12/2024 11:39:24'!
hands

	^ hands!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6675-Cleanup-JuanVuletich-2024Sep04-14h52m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6674] on 4 September 2024 at 2:51:17 pm'!
!Object methodsFor: 'printing' stamp: 'jmv 9/4/2024 14:49:32' prior: 16915032!
                        printText

	^ self printTextLimitedTo: 50000! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6676-printText-limitByDefault-JuanVuletich-2024Sep04-14h43m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6676] on 6 September 2024 at 7:33:54 pm'!
!VectorCanvas methodsFor: 'drawing - MorphicCanvas protocol' stamp: 'jmv 9/6/2024 19:31:44' prior: 16997606 overrides: 16907693!
        image: srcForm at: aPoint
	"Workaround using WarpBlt until properly implemented in VectorEngine.
	 (WarpBlt might not give desired result, i.e. a properly filtered and resamples image)

	In the general case, use WarpBlt to apply currentTransformation.
	Prior to that, set morphIds for affected pixels, and update bounds in engine.
	This is expensive!!

	If No scaling and no rotation, use BitBlt instead (way faster). This is useful, for instance, for halo handles.
	We expect to replace them with vector graphics icons, anyway.

	But if drawing the world background, finding bounds is not needed. Use two BitBlts then:
	One to paint pixels, and a second one to set morphIds.
	In this way, performance is same as in HybridCanvas, and not too different from BitBltCanvas.
	This is especially important, the default World background is a Form!!"

	| p bits |

	"Special case for our world:
	- No bounds needed
	- currentTransformation is identity: No translation, no rotation, no scaling.
	BitBlt is enough, but we need two of them!!"
	(world notNil and: [currentMorph == world]) ifTrue: [
		p := (currentTransformation transform: aPoint) roundedHAFZ.
		auxBitBltEngine
			sourceForm: srcForm; fillColor: nil; combinationRule: Form blend;
			colorMap: (srcForm colormapIfNeededFor: form);
			clipRect: clipRect;
			sourceX: 0; sourceY: 0;
			destX: p x destY: p y width: srcForm width height: srcForm height;
			copyBits.
		bits := form bits.
		[
			form bits: engine morphIds.
			auxBitBltEngine
				sourceForm: nil;
				fillBitmap: (Bitmap with: (currentMorph morphId << 8 + 255));
				combinationRule: `Form over`;
				colorMap: nil;
				copyBits.
		] ensure: [ form bits: bits ].
		^self ].

	"Otherwise, we need to compute bounds. While we are at it, set morphID for affected pixels."
	self fillRectangle: (srcForm boundingBox translatedBy: aPoint) color: `Color gray alpha: 0.01`.
	currentTransformation isPureTranslation
		ifTrue: [
			p := (currentTransformation transform: aPoint) roundedHAFZ.
			auxBitBltEngine
				sourceForm: srcForm; fillColor: nil; combinationRule: Form blend;
				colorMap: (srcForm colormapIfNeededFor: form);
				clipRect: clipRect;
				sourceX: 0; sourceY: 0;
				destX: p x destY: p y width: srcForm width height: srcForm height;
				copyBits ]
		ifFalse: [
			| bb cellSize dstBox srcBox srcQuad |
			cellSize := 4.
			srcBox := srcForm boundingBox.
			dstBox := (currentTransformation externalBoundingRectOf: srcBox)
				encompassingIntegerRectangle.
			srcQuad := dstBox corners collect: [ :pt | (currentTransformation inverseTransform: pt) roundedHAFZ ].
			dstBox := (srcBox translatedBy: aPoint).
			dstBox := dstBox origin extent: dstBox extent + 1.1.
			dstBox := ((currentTransformation externalBoundingRectOf: dstBox))
				encompassingIntegerRectangle.
			bb := WarpBlt toForm: form.
			bb
				sourceForm: srcForm; combinationRule: Form blend;
				colorMap: (srcForm colormapIfNeededFor: form);
				clipRect: clipRect;
				cellSize: cellSize;
				copyQuad: srcQuad toRect: dstBox ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6677-ScaledImageDisplay-fix-JuanVuletich-2024Sep06-19h33m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6677] on 7 September 2024 at 2:13:37 pm'!
!SystemChangeNotifier methodsFor: 'private' stamp: 'jmv 9/7/2024 14:00:11' overrides: 16914414!
     triggerEvent: anEventSelector with: anObject

	self isBroadcasting ifTrue: [
		^super triggerEvent: anEventSelector with: anObject ]! !
!HierarchicalListMorph methodsFor: 'events' stamp: 'jmv 9/7/2024 14:13:12' prior: 50349366 overrides: 16904138!
        doubleClick: aMouseButtonEvent localPosition: localEventPosition
	doubleClickSelector ifNotNil: [
		^ (self window ifNil: [model]) perform: doubleClickSelector].
	selectedMorph ifNotNil: [
		self toggleExpandedState: selectedMorph.
		self scrollSelectionIntoView ]! !
!PluggableListMorph methodsFor: 'events' stamp: 'jmv 9/7/2024 14:13:19' prior: 50349385 overrides: 16904138!
       doubleClick: aMouseButtonEvent localPosition: localEventPosition
	| index |
	doubleClickSelector ifNil: [
		^super doubleClick: aMouseButtonEvent localPosition: localEventPosition ].
	index := self rowAtLocation: localEventPosition.
	index = 0 ifTrue: [
		^super doubleClick: aMouseButtonEvent localPosition: localEventPosition ].
	index == self visualSelectionIndex
		ifFalse: [ self setSelectionIndex: index ].
	^ (self window ifNil: [model]) perform: doubleClickSelector! !
!SystemWindow methodsFor: 'geometry' stamp: 'jmv 9/7/2024 14:10:32' prior: 16970769 overrides: 16905118!
                          fontPreferenceChanged

	super fontPreferenceChanged.
	self rescaleButtons.
	model ifNotNil: [ :m | m changed: #actualContents ].
	self redrawNeeded.! !
!BrowserWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:10:44' prior: 16799671 overrides: 16826891!
                              classAdded: addedClass

	model selectedSystemCategory = addedClass category 
		ifTrue: [ model changed: #classList ].! !
!BrowserWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:10:51' prior: 50349764 overrides: 16826898!
                             classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName

	self canDiscardEdits ifTrue: [
		model classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName ].! !
!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 9/7/2024 14:11:44' prior: 16823301 overrides: 50370924!
                     optionalButtonTuples
	"Answer a tuple buttons, in the format:
			button label
			selector to send
			help message"
	^ (model baseCodeSource isLiveSmalltalkImage and: [ model caseCodeSource isLiveSmalltalkImage not ])
		ifTrue: [ super optionalButtonTuples ]
		ifFalse: [ "For non-standard browser configurations assume most of the default buttons are invalid"
			#(
				#(10 'show...' #offerWhatToShowMenu 'menu of what to show in lower pane' )
			) ].! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/7/2024 14:11:07' prior: 50344712 overrides: 50371025!
                          classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^ model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(40		'browse full (b)' 					$b 	window 			browseMethodFull 						editFindReplaceIcon)
				#(50		'class refs (N)' 					$N 	window 			browseClassRefs 						classIcon)
				#(60 		'-----')
				#(70		'fileIn' 					nil 	model 			fileInClass 						updateIcon)
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Class List' 			false)
				#(10		'definition' 					nil 	model 			editClass 						editFindReplaceIcon)
				#(20		'comment' 					nil 	model 			editComment 						editFindReplaceIcon)
				#(30 		'-----')
				#(80		'fileOut' 					nil 	model 			fileOutClass 						fileOutIcon)
				#(90 		'-----')
				#(100		'rename...' 					nil 	model 			renameClass 						saveAsIcon)
				#(110		'remove' 					nil 	model 			removeClass 						listRemoveIcon)
				#(120 		'-----')
				#(130		'remove existing' 					nil 	model 			removeClass 						deleteIcon)
			) ].! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/7/2024 14:11:23' prior: 50345234!
                               codeFileListMenuSpec
	"Spec for the menu and shortcut keys for the single entry filename list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := 
			#(
				#(0 		'Code File' 			false)
				#(10		'find class... (f)' 					$f 	window 			findClass)
				#(20 		'-----') ).
	model baseCodeSource isLiveSmalltalkImage ifTrue: [
			answer := answer, #(
				#(30		'fileIn' 					nil 	model 			fileIn) )].
	answer := answer, 
			#(
				#(40		'fileOut' 					nil 	model 			fileOut) ).
	model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(50		'remove existing' 					nil 	model 			removeUnmodifiedClasses) )].
	^answer! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/7/2024 14:11:29' prior: 50345259 overrides: 50371151!
                             messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^ model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileIn' 						nil 	model 			fileInMessage 							updateIcon)
				#(20		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(30 		'-----')
				#(40		'senders (n)' 						$n 	window 			browseSenders 							mailForwardIcon)
				#(50		'implementors (m)' 						$m 	window 			browseImplementors 							developmentIcon)
				#(60		'method inheritance (h)' 						$h 	window 			methodInheritance 							goDownIcon)
				#(70		'browse full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
				#(80		'versions (v)' 						nil 	window 			browseVersions 							clockIcon)
				#(90 		'-----')
				#(100		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Messages' 			false)
				#(10		'fileOut' 						nil 	model 			fileOutMessage 							fileOutIcon)
				#(20 		'-----')
				#(30		'remove method (x)' 						$x 	model 			removeMessage 							deleteIcon)
			)].! !
!CodeFileBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/7/2024 14:11:37' prior: 50345300 overrides: 50345103!
                        methodCategoriesListMenuSpec
	"Spec for the menu and shortcut keys for the method categories list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := model baseCodeSource isLiveSmalltalkImage
		ifTrue: [
			#(
				#(0 		'Message Categories' 			false)
				#(10		'fileIn' 					nil 	model 			fileInMessageCategories 								updateIcon)
			)]
		ifFalse: [
			#(
				#(0 		'Message Categories' 			false)
			)].
	answer := answer, 
			#(
				#(20		'fileOut' 					nil 	model 			fileOutMessageCategories 								fileOutIcon)
				#(30 		'-----')
				#(40		'reorganize' 					nil 	model 			editMessageCategories 								sendReceiveIcon)
				#(50 		'-----')
				#(60		'add item...' 					nil 	model 			addCategory 								newIcon)
				#(70 		'-----')
				#(80		'rename...' 					nil 	model 			renameCategory 								saveAsIcon)
				#(90		'remove' 					nil 	model 			removeMessageCategory 								listRemoveIcon)
			).
	model caseCodeSource isLiveSmalltalkImage ifFalse: [
		answer := answer, #(
				#(100 		'-----')
				#(100		'remove existing' 					nil 	model 			removeUnmodifiedMethods 								deleteIcon)
		) ].
	^answer! !
!InspectorWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/7/2024 14:11:51' prior: 50342644!
                           fieldListMenuSpec
	"Spec for the menu and shortcut keys for the list of variables in our object.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
		#(10		'inspect (i)' 						$i 	window 			inspectSelection 							inspectIcon)
		#(20		'explore (I)' 						$I 	window 			exploreSelection 							exploreIcon)
		#(30		'copy to clipboard (c)' 						$c 	window 			copySelectionToClipboard 							copyIcon)
		#(40		'basic inspect' 						nil 	window 			inspectBasic 							inspectIcon)
		#(50		'references finder' 						nil 	window 			openReferencesFinder 							exploreIcon)
		#(60		'weight explorer' 						nil 	window 			openWeightExplorer 							exploreIcon)
	).
	(model objectSpecificMenuSpecFrom: self) ifNotNil: [ :spec |
		answer := answer, spec ].
	answer := answer, #(
		#(210 		'-----')
		#(220		'browser full (b)' 						$b 	window 			browseMethodFull 							editFindReplaceIcon)
		#(230		'browser hierarch (h)' 						$h 	window 			browseHierarchy 							goTopIcon)
		#(240		'browser protocol (p)' 						$p 	window 			browseFullProtocol 							spreadsheetIcon)
	).
	^answer! !
!ObjectExplorerWindow methodsFor: 'menu commands - reference finder' stamp: 'jmv 9/7/2024 14:12:07' prior: 16916692!
         objectsToSkipDuringRescan
	"Avoid observing side effects of the reference finder itself"

	| answer |
	answer := OrderedCollection
		with: self
		with: model
		with: model getCurrentSelection.
	self allMorphsDo: [:each | answer add: each].
	^answer.! !
!ObjectExplorerWindow methodsFor: 'menu commands - reference finder' stamp: 'jmv 9/7/2024 14:12:16' prior: 16916713!
              rescan

	| objectsToSkip |
	objectsToSkip := self objectsToSkipDuringRescan.
	model noteNewSelection: nil.
	model rescanSkipping: objectsToSkip.
	self expandAll.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6678-Cleanup-JuanVuletich-2024Sep07-14h00m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6677] on 7 September 2024 at 2:22:33 pm'!
!CodeWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:18:00' prior: 16826898!
                  classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName
	"Do nothing here. Subclasses should implement if necessary"! !
!CodeWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:19:13' prior: 16826972!
                          updateListsAndCode
	"All code windows receive this message on any code change in the system.
	Process it only once, for the benefit of installing large packages!!"

	owner ifNotNil: [
		(self hasProperty: #updateListsAndCode) ifFalse: [
			self setProperty: #updateListsAndCode toValue: true.
			self whenUIinSafeState: [
				self removeProperty: #updateListsAndCode.
				owner ifNotNil: [ self updateListsAndCodeNow ]]]].! !
!CodeWindow methodsFor: 'initialization' stamp: 'jmv 9/7/2024 14:21:56' prior: 50376117 overrides: 16924461!
         model: anObject
	"Set my model and make me me a dependent of the given object.
	Note: The implementors of the sent messages must check if they are still 'alive'. The usual
	way is asking `owner ifNotNil: [ do stuff ]`.
	The reason is that the receiver (i.e. the CodeWindow) may be already closed, and
	without a model, although not yet garbage collected, when the message gets dispatched"

	super model: anObject.

	"Avoid double registration"
	SystemChangeNotifier uniqueInstance removeActionsWithReceiver: self.
	SystemChangeNotifier uniqueInstance
		when: #classAdded send: #classAdded: to: self;
		when: #classCommented send: #updateListsAndCode to: self;
		when: #classDefinitionChanged send: #updateListsAndCode to: self;
		when: #classRecategorized send: #updateListsAndCode to: self;
		when: #classRemoved send: #updateListsAndCode to: self;
		when: #classRenamed send: #classRenamed:from:to:inCategory: to: self;
		when: #classReorganized send: #updateListsAndCode to: self;
		when: #methodAddedInProtocol send: #updateListsAndCode to: self;
		when: #methodChanged send: #updateListsAndCode to: self;
		when: #methodRemoved send: #updateListsAndCode to: self;
		when: #selectorRecategorized send: #updateListsAndCode to: self.! !
!BrowserWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:15:24' prior: 50379309 overrides: 16826891!
                               classAdded: addedClass

	owner ifNotNil: [
		model selectedSystemCategory = addedClass category 
			ifTrue: [ model changed: #classList ]].! !
!BrowserWindow methodsFor: 'updating' stamp: 'jmv 9/7/2024 14:18:31' prior: 50379317 overrides: 50379571!
       classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName

	owner ifNotNil: [
		self canDiscardEdits ifTrue: [
			model classRenamed: aClass from: oldClassName to: newClassName inCategory: aCategoryName ]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6679-DontDNUonNotificationsWhenNoLongerInWorld-JuanVuletich-2024Sep07-14h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6679] on 9 September 2024 at 2:11:02 pm'!

PlacedMorph subclass: #BoxMorph
	instanceVariableNames: 'extent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #BoxMorph category: #'Morphic-Kernel' stamp: 'Install-6680-BoxMorph-BorderedBoxMorph-InitialDefinition-JuanVuletich-2024Sep09-14h08m-jmv.002.cs.st 9/12/2024 11:39:24'!
PlacedMorph subclass: #BoxMorph
	instanceVariableNames: 'extent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!
!BoxMorph commentStamp: 'jmv 9/9/2024 13:26:56' prior: 0!
               Hierarchy for morphs that are rectangle like, and that occupy an area that can be specified as a Rectangle. This means that, besides being of rectangular shape, sides are aligned with local coordinate axes. Including rectangles with rounded corners and such. The idea is that the 'extent' ivar is all that's needed to establish our dimensions and shape.
Subclasses can add things like 'roundedCornerRadius' or such.
Note: Answers false to #submorphsMightProtrude. If you need a box like morph that can hold submorphs that can protrude if (i.e. submorphs may extend beyond box bounds) DONT subclass from here.!

BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #BorderedBoxMorph category: #'Morphic-Kernel' stamp: 'Install-6680-BoxMorph-BorderedBoxMorph-InitialDefinition-JuanVuletich-2024Sep09-14h08m-jmv.002.cs.st 9/12/2024 11:39:24'!
BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!
!BorderedBoxMorph commentStamp: 'jmv 9/9/2024 13:27:14' prior: 0!
        BorderedRectMorph adds a customizable background color. Instances may have a border, see instanceVariables borderWidth and borderColor. Subclasses can use a variety of border styles: simple, inset, raised.!
!BoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 12:58:22' overrides: 16922258!
                      initialize
	super initialize.
	extent := `50@40`.! !
!BoxMorph methodsFor: 'drawing' stamp: 'jmv 9/9/2024 13:08:29' overrides: 16903887!
                       drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: `Color lightGreen`.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:01:25'!
                       ensureMinimumExtent

	| oldExtent |
	oldExtent := extent.
	(self privateExtent: extent) ifTrue: [
		self extentChanged: oldExtent ].! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:09:31'!
                       extentInOwner: newExtent

	self morphExtent: (self internalizeDistance: newExtent).! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:03:49'!
        extentInWorld
	"World coordinates"

	^ (self externalizeDistanceToWorld: extent) ceiling! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:09:50'!
   extentInWorld: newExtent
	"world coordinates"

	self morphExtent: (self internalizeDistanceFromWorld: newExtent).! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:14:02' overrides: 16922074!
                      fitInto: aRectangle
	"Change the position and extent of this morph. Arguments are owner's coordinates.
	See inheritance: For general, non resizeable morphs, adjust position and scale."

	self morphPosition: aRectangle origin.
	self extentInOwner: aRectangle extent.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:12:18' overrides: 16905133!
                              fullBoundsInOwner
	"Find and answer full bounds in whatever owner.
	Note: Answers an integer rectangle"

	"Rethoric question. If it is ever true, call super."
	"(self submorphsMightProtrude and: [self clipsSubmorphsReally not]) ifFalse: ["
	^ (self externalizeBoundingRectOf: self localBounds) encompassingIntegerRectangle! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:14:18'!
                         heightInOwner: newHeight

	self extentInOwner: self extentInOwner x @ newHeight! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:25'!
            localBounds

	^ `0@0` extent: extent! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:14:26' overrides: 50372053!
   localBoundsForError
	"Only to be used for drawing in an error condition. See senders."

	^self localBounds.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:21'!
                morphBottomLeft
	"Local coordinates
	Must be consistent with #morphTopLef and #morphExtent"

	^ 0 @ extent y! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:03:37'!
               morphBottomRight
	"Local coordinates
	Must be consistent with #morphTopLef and #morphExtent"

	^ extent! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:00:21' overrides: 16905189!
morphExtent
	"In our own coordinates!!
	nil if unknown."

	^ extent! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:00:28'!
                        morphExtent: newExtent
	"In our own coordinates!!"

	| oldExtent |
	extent = newExtent ifFalse: [
		oldExtent := extent.
		(self privateExtent: newExtent) ifTrue: [
			self extentChanged: oldExtent.
			owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
			self redrawNeeded ]]! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:02:41'!
                           morphHeight
	"In own's coordinates"

	^ extent y! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:03:04'!
           morphHeight: aNumber
	"In our own coordinates!!"

	self morphExtent: extent x@aNumber! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:14:39'!
      morphTopLeft
	"Local coordinates.
	Our hierarchy occupies a rectangle specified by #morphTopLef and #morphExtent"

	^`0@0`.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:12'!
morphTopRight
	"Local coordinates
	Must be consistent with #morphTopLef and #morphExtent"

	^ extent x @ 0! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:36'!
                 morphWidth
	"In own's coordinates"

	^ extent x! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:44'!
            morphWidth: aNumber
	"In our own coordinates!!"

	self morphExtent: aNumber@extent y! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:10:25'!
       position: newPos extent: newExtent
	"Change the position and extent of this morph. Arguments are owner's coordinates."

	self morphPosition: newPos.
	self extentInOwner: newExtent.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:04:08'!
       privateExtent: aPoint
	"Answer whether extent was actually changed.
	If some subclass may reject the update, answer false in those cases."

	| newExtent |
	newExtent := aPoint max: self minimumExtent.
	^ extent = newExtent
		ifFalse: [ extent := newExtent ]; not! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:00:09' overrides: 16922224!
 rotationCenter
	"In own coordinates."

	^ extent / 2.0.! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:10:46' overrides: 16905257!
                topLeftInOwner

	^ self morphPosition! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 13:11:13'!
                      widthInOwner: newWidth

	self extentInOwner: newWidth @ self extentInOwner y! !
!BoxMorph methodsFor: 'geometry services' stamp: 'jmv 9/9/2024 13:15:16'!
      coversLocalPoint: aLocalPoint
	"Answer true as long as aLocalPoint is inside our shape even if:
		- a submorph (above us) also covers it
		- a sibling that is above us or one of their submorphs also covers it."

	"If not visible, won't cover any point at all."
	self visible ifFalse: [ ^false ].

	"We know our local bounds, and completely fill them."
	^ self localBounds containsPoint: aLocalPoint! !
!BoxMorph methodsFor: 'geometry services' stamp: 'jmv 9/9/2024 13:15:29' overrides: 16905418!
                coversPixel: worldPoint
	"Answer true as long as worldPoint is inside our shape even if:
		- a submorph (above us) also covers it
		- a sibling that is above us or one of their submorphs also covers it.
	This implementation is cheap, we are a rectangular shape."

	^ self coversLocalPoint:
		(self internalizeFromWorld: worldPoint)! !
!BoxMorph methodsFor: 'geometry services' stamp: 'jmv 9/9/2024 13:15:37' overrides: 16905490!
                   includesPixel: worldPoint
	"Answer true if the grabbing from the pixel argument pixel with the mouse should grab us:
	(See comment and implementation at Morph).
	Note: This implementation also answer true if we cover but don't own the pixel,
	meaning that some other morph was drawn later, covering us.
	Therefore, senders need to be aware that the answer is meaningful only when it is known that no other morph covers us.
	Note: This implementation is only used for morphs with a cheap #coversPixel:.
	(See other implementors)
	Also see #ownsPixel: and #coversPixel:"

	^ self visible and: [self coversPixel: worldPoint].! !
!BoxMorph methodsFor: 'geometry testing' stamp: 'jmv 9/9/2024 13:17:58' overrides: 16905658!
                 hasVariableExtent
	^ true! !
!BoxMorph methodsFor: 'geometry testing' stamp: 'jmv 9/9/2024 13:18:01' overrides: 16905667!
      knowsOwnLocalBounds
	"Meaning that it doesn't need running #drawOn: and #postDrawOn: on a BoundsFinderCanvas
	to explore affected pixels to deduce actual morph bounds.
	
	Note: No morph can answer false to #requiresVectorCanvas and #knowsOwnLocalBounds.
	All morphs are required to answer true to at least one of these methods."

	^ true! !
!BoxMorph methodsFor: 'geometry testing' stamp: 'jmv 9/9/2024 13:19:24' overrides: 16905680!
              requiresVectorCanvas
	"Widgets can usually run with any kind of Canvas, but not if zoomed or rotated.
	Note: Subclasses that use VectorGraphics for their drawing should answer true.

	Note: No morph can answer false to #requiresVectorCanvas and #knowsOwnLocalBounds.
	All morphs are required to answer true to at least one of these methods."

	^ location isPureTranslation not or: [ owner notNil and: [ owner requiresVectorCanvas ]].! !
!BoxMorph methodsFor: 'geometry testing' stamp: 'jmv 9/9/2024 13:13:26' overrides: 16905694!
              submorphsMightProtrude
	"Answered false by morphs that can guarantee that submorphs, and all morphs in their
	submorphs tree, will lie inside their bounds, either 'naturally' (by construction) or by
	being clipped by their owner. See #clipsSubmorphs and clipsSubmorphsReally.
	Allows for many optimizations to be done."

	^ false! !
!BoxMorph methodsFor: 'geometry testing' stamp: 'jmv 9/9/2024 13:19:43' overrides: 16905707!
                      wantsContour
	"Widget morphs don't need contour.
	See also #knowsOwnLocalBounds and senders."

	^ false! !
!BoxMorph methodsFor: 'layout' stamp: 'jmv 9/9/2024 13:05:19'!
                      minItemWidth

	^ extent x! !
!BoxMorph methodsFor: 'layout-properties' stamp: 'jmv 9/9/2024 13:20:19' overrides: 16922436!
     layoutSpec
	"Layout specific. Return the layout spec describing where the
	receiver should appear in a proportional layout"

	layoutSpec ifNotNil: [ :ls | ^ ls ].
	layoutSpec := LayoutSpec keepMorphExtent.
	layoutSpec morph: self.

	^ layoutSpec! !
!BoxMorph methodsFor: 'testing' stamp: 'jmv 9/9/2024 13:21:25' overrides: 16907083!
                   is: aSymbol
	^ aSymbol == #BoxMorph or: [ super is: aSymbol ]! !
!BoxMorph methodsFor: 'halos and balloon help' stamp: 'jmv 9/9/2024 13:21:56' overrides: 16905834!
                            haloShowsCoordinateSystem
	"We are usually not concerned with this level of detail for Widgets, as they prefer using automatic Layout."

	^ self requiresVectorCanvas! !
!BoxMorph methodsFor: 'halos and balloon help' stamp: 'jmv 9/9/2024 13:22:06' overrides: 16905867!
                    okayToResizeEasily
	"Answer whether it is appropriate to have the receiver be easily resized by the user from the halo"

	^ true! !
!BoxMorph methodsFor: 'halos and balloon help' stamp: 'jmv 9/9/2024 13:22:26' overrides: 16905875!
                         okayToRotateEasily
	"Answer whether it is appropriate for a rotation handle to be shown for the receiver."

	^ self mainCanvas usesVectorEnginePlugin.! !
!BoxMorph methodsFor: 'halos and balloon help' stamp: 'jmv 9/9/2024 13:22:34' overrides: 16905882!
   okayToScaleEasily
	"Answer whether it is appropriate for a scale handle to be shown for the receiver."

	^ self mainCanvas usesVectorEnginePlugin.! !
!BoxMorph methodsFor: 'window like behavior' stamp: 'jmv 9/9/2024 13:23:40'!
                             fullScreen
	"Zoom Window to Full World size with possible DeskMargins"

	| left right possibleBounds |
	(self hasProperty: #originalBounds)
		ifFalse: [ "Expand"
			self setProperty: #originalBounds toValue: self displayBounds.
			left := right := 0.
			possibleBounds := (RealEstateAgent maximumUsableAreaInWorld: self world) 
				insetBy: (left @ 0 corner: right @ 0).
			possibleBounds := possibleBounds insetBy: Theme current fullScreenDeskMargin
		] 
		ifTrue: [ "Contract"
			possibleBounds := self valueOfProperty: #originalBounds.
			self removeProperty: #originalBounds.
		].
	self position: possibleBounds topLeft extent: possibleBounds extent.! !
!BoxMorph methodsFor: 'window like behavior' stamp: 'jmv 9/9/2024 13:23:34'!
 resize: boundingBox
	(self hasProperty: #originalBounds) ifFalse: [
		self setProperty: #originalBounds toValue: self displayBounds].
	self position: boundingBox origin extent: boundingBox extent.! !
!BoxMorph class methodsFor: 'new-morph participation' stamp: 'jmv 9/9/2024 13:24:17' overrides: 16922489!
              categoryInNewMorphMenu
	^ 'Basic'! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06'!
                 borderColor
	^ borderColor! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06'!
                        borderColor: aColor
	borderColor = aColor ifFalse: [
		borderColor := aColor.
		self redrawNeeded]! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06'!
                borderWidth
	^ borderWidth! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06'!
                        borderWidth: anInteger
	borderWidth = anInteger ifFalse: [
		borderWidth := anInteger max: 0.
		self  ensureMinimumExtent;
			redrawNeeded ].! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06' overrides: 16903414!
                 color

	^ color! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/9/2024 12:38:06'!
   color: aColor
	"Set the receiver's color. "
	color = aColor ifFalse: [
		color := aColor.
		self redrawNeeded ]! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 12:38:06'!
                              defaultBorderColor
	"answer the default border color/fill style for the receiver"
	^ `Color gray`! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 13:35:35'!
            defaultBorderWidth
	"answer the default border width for the receiver"
	^ 5! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 12:38:06'!
  defaultColor
	^ `Color orange`! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 12:58:32' overrides: 50379728!
                           initialize
	super initialize.
	color := self defaultColor.
	borderColor := self defaultBorderColor.
	borderWidth := self defaultBorderWidth.! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 12:38:06'!
 noBorder
	self borderWidth: 0.! !
!BorderedBoxMorph methodsFor: 'drawing' stamp: 'jmv 9/9/2024 12:38:06' overrides: 50379733!
  drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor.! !
!BorderedBoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 12:38:06'!
  extentBorder
	"This is the number of pixels to add to internal minimum to calculate
	my minimumExtent.  "
	
	^ 2 * borderWidth ! !
!BorderedBoxMorph methodsFor: 'testing' stamp: 'jmv 9/9/2024 13:21:36' overrides: 50380021!
 is: aSymbol
	^ aSymbol == #BorderedBoxMorph or: [ super is: aSymbol ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6680-BoxMorph-BorderedBoxMorph-InitialDefinition-JuanVuletich-2024Sep09-14h08m-jmv.002.cs.st----!

'From Cuis7.1 [latest update: #6680] on 9 September 2024 at 5:51:44 pm'!

BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor padding '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #BorderedBoxMorph category: #'Morphic-Kernel' stamp: 'Install-6681-BorderedBoxMorph-Add-padding-ivar-KenDickey-2024Sep09-17h48m-KenD.001.cs.st 9/12/2024 11:39:25'!
BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor padding'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'KenD 9/9/2024 14:02:49'!
                         padding
	^ padding! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'KenD 9/9/2024 16:53:56'!
                               padding: numberOrPoint
	| p |
	p := numberOrPoint asPoint.
	padding = p ifFalse: [
		padding := p max: `0@0`.
		self ensureMinimumExtent;
			redrawNeeded ].! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'KenD 9/9/2024 16:59:41'!
                defaultPadding
	"answer the default inner padding for the receiver"
	^ `10@6`! !
!BorderedBoxMorph methodsFor: 'geometry' stamp: 'KenD 9/9/2024 13:56:09'!
     interiorExtent

	"Answer extent inset from borderWidth and Padding"
	^self morphExtent - (2 * borderWidth) - (2 * padding)! !
!BorderedBoxMorph methodsFor: 'geometry' stamp: 'KenD 9/9/2024 13:57:58'!
                        interiorOrigin

	"Answer point from borderWidth and Padding"
	| x y |
	x := borderWidth + padding x.
	y := borderWidth + padding y.
	^x @ y! !
!BorderedBoxMorph methodsFor: 'geometry' stamp: 'jmv 9/9/2024 17:51:06' overrides: 16905181!
                    minimumExtent
	"This returns the minimum extent that the morph may be shrunk to.
	It is expressed in the morph own coordinates, like morphExtent."

	^ super minimumExtent + (2 * self interiorOrigin)! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'KenD 9/9/2024 16:54:12' prior: 50380111!
                           borderWidth: anInteger
	borderWidth = anInteger ifFalse: [
		borderWidth := anInteger max: 0.
		self ensureMinimumExtent;
			redrawNeeded ].! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 13:30:18' prior: 50380145 overrides: 50379728!
                             initialize
	super initialize.
	color := self defaultColor.
	borderColor := self defaultBorderColor.
	borderWidth := self defaultBorderWidth.
	padding := self defaultPadding.! !
!BorderedBoxMorph methodsFor: 'drawing' stamp: 'jmv 9/9/2024 13:43:30' prior: 50380156 overrides: 50379733!
   drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor.

	"Make the existence of the normal invisible padding evident."
	aCanvas
		frameRectangle: (self localBounds insetBy: borderWidth)
		borderWidth: padding x
		color: `Color lightGreen alpha: 0.5`.
	aCanvas
		frameRectangle: (self localBounds insetBy: borderWidth)
		borderWidth: padding y
		color: `Color lightGreen alpha: 0.5`.! !

BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor padding'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #BorderedBoxMorph category: #'Morphic-Kernel' stamp: 'Install-6681-BorderedBoxMorph-Add-padding-ivar-KenDickey-2024Sep09-17h48m-KenD.001.cs.st 9/12/2024 11:39:25'!
BoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'color borderWidth borderColor padding'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6681-BorderedBoxMorph-Add-padding-ivar-KenDickey-2024Sep09-17h48m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6682] on 9 September 2024 at 3:01:32 pm'!
!LayoutMorph methodsFor: 'initialization' stamp: 'jmv 9/9/2024 14:40:23'!
                   defaultPadding
	"answer the default inner padding for the receiver"
	^ 0@0! !
!LayoutMorph methodsFor: 'drawing' stamp: 'jmv 9/9/2024 14:51:18' overrides: 50372161!
                           drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor.! !

BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6682-LayoutMorph-subclassFrom-BorderedBoxMorph-p1-JuanVuletich-2024Sep09-15h00m-jmv.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor useEdgeSpace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
LayoutMorph allSubInstances do: [ :m | m instVarNamed: 'padding' put: m defaultPadding ].
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6682-LayoutMorph-subclassFrom-BorderedBoxMorph-p1-JuanVuletich-2024Sep09-15h00m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6682] on 9 September 2024 at 6:07:39 pm'!
!LayoutMorph methodsFor: 'accessing' stamp: 'KenD 9/9/2024 16:54:03' overrides: 50380209!
                            padding: numberOrPoint

	super padding: numberOrPoint.
	self layoutSubmorphs! !
!LayoutMorph methodsFor: 'geometry' stamp: 'KenD 9/9/2024 17:24:46' prior: 50368571!
                           minimumExtent: cachedValues
	"Answer size sufficient to frame my submorphs."
	
	| width height mle |
	width  := 0.
	height := 0.
	(self direction = #vertical)
		ifTrue: [ "Column"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"use maximum width across submorphs"
				width := width max: mle x.
				"sum up submorph heights, including separation"
				height := height + mle y + self ySeparation.
			].
			height := height - self ySeparation. "An extra separation was added"
		]
		ifFalse: [ "Row"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"sum up submorphs width"
				width := width + mle x + self xSeparation.
				"use maximum height across submorph"
				height := height max: mle y.
			].
			width := width - self xSeparation. "An extra separation was added"
		].
	^ (width @ height) + (2 * self interiorOrigin)! !
!LayoutMorph methodsFor: 'initialization' stamp: 'KenD 9/9/2024 16:59:48' prior: 50380312 overrides: 50380217!
   defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!LayoutMorph methodsFor: 'initialization' stamp: 'KenD 9/9/2024 17:00:08' prior: 50368455 overrides: 50380256!
 initialize
	super initialize.
	separation := 0.
	axisEdgeWeight := 0.0.
	doAdoptWidgetsColor := false.! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/8/2024 13:13:06' prior: 50372775!
   layoutBounds
	"Return the bounds for laying out children of the receiver"

	^ self interiorOrigin extent: self interiorExtent ! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:40:24' prior: 50368615!
           layoutSubmorphsHorizontallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gap gapCount widths widthToAllocate leftOver x height y cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].
	
	gap := self xSeparation.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	widthToAllocate := boundsForLayout width - (gapCount * gap).
	cache := IdentityDictionary new.
	widths := self widthsFor: visibleSubmorphs within: widthToAllocate minLayoutExtentCache: cache.
	leftOver := widthToAllocate - widths sum.
	x := boundsForLayout left + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: widths do: [ :sm :smWidth |
		height := self offAxisHeightFor: sm within: boundsForLayout height minLayoutExtentCache: cache.
		y := self offAxisYOffsetFor: sm within: boundsForLayout height - height.
		sm fitInto: (x @ (boundsForLayout top + y) extent: smWidth @ height).
		x := x + smWidth + gap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:52:11' prior: 50368656!
                            layoutSubmorphsVerticallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gap gapCount heights heightToAllocate leftOver y width x cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	gap := self ySeparation.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	heightToAllocate := boundsForLayout height - (gapCount * gap).
	cache := IdentityDictionary new.
	heights := self heightsFor: visibleSubmorphs within: heightToAllocate minLayoutExtentCache: cache.
	leftOver := heightToAllocate - heights sum.
	y := boundsForLayout top + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: heights do: [ :sm :smHeight |
		width := self offAxisWidthFor: sm within: boundsForLayout width minLayoutExtentCache: cache.
		x := self offAxisXOffsetFor: sm within: boundsForLayout width - width.
		sm fitInto: (boundsForLayout left + x @ y extent: width @ smHeight).
		y := y + smHeight + gap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:45:27' prior: 50368697!
                           offAxisHeightFor: aMorph within: availableHeight minLayoutExtentCache: cache
	"Answer height for a single morph -- offAxis calculation for a Row"
	
	^(availableHeight * aMorph layoutSpec proportionalLayoutHeight)
							 max: (aMorph minimumLayoutExtent: cache) y.! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:45:59' prior: 50368715!
 offAxisWidthFor: aMorph within: availableWidth minLayoutExtentCache: cache
	"Answer width for a single morph -- offAxis calculation for a Column"

	^ (availableWidth * aMorph layoutSpec proportionalLayoutWidth)
						 	max: (aMorph minimumLayoutExtent: cache) x.
! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:48:57' prior: 50368733!
  offAxisXOffsetFor: aMorph within: availableWidth
	"Answer x offset for a single morph -- offAxis calculation for a Column"

	^ availableWidth * aMorph layoutSpec offAxisEdgeWeight. ! !
!LayoutMorph methodsFor: 'layout' stamp: 'KenD 9/3/2024 18:48:36' prior: 50368748!
                    offAxisYOffsetFor: aMorph within: availableHeight
	"Answer y offset for a single morph -- offAxis calculation for a Row"
	
	^ availableHeight * aMorph layoutSpec offAxisEdgeWeight! !
!LayoutMorph class methodsFor: 'examples' stamp: 'KenD 9/9/2024 17:07:05' prior: 50368462!
              exampleEdgesColumn
	"Show 2 cases :1 useEdgeSpace true and 1 false"
	" self exampleEdgesColumn "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newColumn :: padding: (120 @ 40);  separation: 20.
	noEdge := self newColumn ::  padding: (0 @ 0);  separation: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !
!LayoutMorph class methodsFor: 'examples' stamp: 'KenD 9/9/2024 17:07:12' prior: 50368497!
exampleEdgesRow
	"Show 2 cases: 1 useEdgeSpace true and 1 false"
	" self exampleEdgesRow "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newRow :: padding: (120 @ 40);  separation: 20.
	noEdge := self newRow :: padding: (0 @ 0);  separation: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !

LayoutMorph removeSelector: #useEdgeSpace:!

!methodRemoval: LayoutMorph #useEdgeSpace: stamp: 'Install-6683-LayoutMorph-subclassFrom-BorderedBoxMorph-p2-KenDickey-2024Sep09-18h05m-KenD.001.cs.st 9/12/2024 11:39:25'!
useEdgeSpace: aBoolean
	useEdgeSpace := aBoolean!

LayoutMorph removeSelector: #useEdgeSpace!

!methodRemoval: LayoutMorph #useEdgeSpace stamp: 'Install-6683-LayoutMorph-subclassFrom-BorderedBoxMorph-p2-KenDickey-2024Sep09-18h05m-KenD.001.cs.st 9/12/2024 11:39:25'!
useEdgeSpace
	^ useEdgeSpace!

BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6683-LayoutMorph-subclassFrom-BorderedBoxMorph-p2-KenDickey-2024Sep09-18h05m-KenD.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
LayoutMorph allSubInstances do: [ :m | m instVarNamed: 'padding' put: m defaultPadding ].
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6683-LayoutMorph-subclassFrom-BorderedBoxMorph-p2-KenDickey-2024Sep09-18h05m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6683] on 9 September 2024 at 6:16:28 pm'!

BorderedBoxMorph subclass: #ImageMorph
	instanceVariableNames: 'image '
	classVariableNames: 'DefaultForm '
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #ImageMorph category: #'Morphic-Widgets' stamp: 'Install-6684-ImageMorph-subclassFrom-BorderedBoxMorph-KenDickey-2024Sep09-18h15m-KenD.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #ImageMorph
	instanceVariableNames: 'image'
	classVariableNames: 'DefaultForm'
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!ImageMorph methodsFor: 'initialization' stamp: 'KenD 9/9/2024 17:15:03' overrides: 50380217!
                         defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!ImageMorph methodsFor: 'drawing' stamp: 'KenD 9/8/2024 12:28:10' prior: 16876054 overrides: 50380265!
         drawOn: aCanvas

	(padding > `0@0`) ifTrue: [ 	| innerOrigin |
		"Make use of my color in area between border and image"
		innerOrigin := borderWidth @ borderWidth.
		aCanvas
			fillRectangle:  (innerOrigin extent: extent - (2 * innerOrigin ))
			color:  color].
	(borderWidth > 0) ifTrue: [
		aCanvas
			frameRectangle:  (`0@0` extent: extent)
			color:  borderColor
			borderWidth:  borderWidth 
			borderStyleSymbol:  #simple ].
	aCanvas image: image at: self interiorOrigin.
! !
!ImageMorph methodsFor: 'drawing' stamp: 'KenD 9/9/2024 17:24:29' prior: 16876064 overrides: 50380237!
                      minimumExtent

	^ image extent + (2 * self interiorOrigin)! !
!ImageMorph class methodsFor: 'instance creation' stamp: 'KenD 9/9/2024 17:18:32' prior: 16876198 overrides: 16787725!
           new
	^super new
		image: self defaultForm;
		padding: `6@4`.! !

BorderedBoxMorph subclass: #ImageMorph
	instanceVariableNames: 'image'
	classVariableNames: 'DefaultForm'
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #ImageMorph category: #'Morphic-Widgets' stamp: 'Install-6684-ImageMorph-subclassFrom-BorderedBoxMorph-KenDickey-2024Sep09-18h15m-KenD.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #ImageMorph
	instanceVariableNames: 'image'
	classVariableNames: 'DefaultForm'
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6684-ImageMorph-subclassFrom-BorderedBoxMorph-KenDickey-2024Sep09-18h15m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6684] on 9 September 2024 at 6:25:19 pm'!

BorderedBoxMorph subclass: #LabelMorph
	instanceVariableNames: 'font emphasis contents '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #LabelMorph category: #'Morphic-Widgets' stamp: 'Install-6685-LabelMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-18h23m-KenD.002.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #LabelMorph
	instanceVariableNames: 'font emphasis contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!LabelMorph methodsFor: 'initialization' stamp: 'KenD 9/9/2024 17:22:24' overrides: 50380217!
                      defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!LabelMorph methodsFor: 'drawing' stamp: 'KenD 9/8/2024 13:06:07' prior: 16888420 overrides: 50380265!
         drawOn: aCanvas
	aCanvas
		drawString: (contents ifNil: [ '' ])
		at: self interiorOrigin 
		font: self fontToUse
		color: color.
	(borderWidth > 0) ifTrue: [
		aCanvas
			frameRectangle: (`0@0` extent: extent)
			color: borderColor
			borderWidth: borderWidth
			borderStyleSymbol: #simple ]! !
!LabelMorph methodsFor: 'geometry' stamp: 'KenD 9/8/2024 13:05:40' prior: 16888555 overrides: 50380237!
                minimumExtent

	^ self measureContents + (2 * self interiorOrigin) ! !

BorderedBoxMorph subclass: #LabelMorph
	instanceVariableNames: 'font emphasis contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #LabelMorph category: #'Morphic-Widgets' stamp: 'Install-6685-LabelMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-18h23m-KenD.002.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #LabelMorph
	instanceVariableNames: 'font emphasis contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
LabelMorph allSubInstances do: [ :m | m instVarNamed: 'padding' put: 0@0].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6685-LabelMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-18h23m-KenD.002.cs.st----!

'From Cuis7.1 [latest update: #6682] on 9 September 2024 at 5:39:24 pm'!

BorderedBoxMorph subclass: #TextParagraphMorph
	instanceVariableNames: 'textComposition setsHeightOnContent shrinkFromExtent '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #TextParagraphMorph category: #'Morphic-Widgets' stamp: 'Install-6686-TextParagraphMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-17h26m-KenD.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #TextParagraphMorph
	instanceVariableNames: 'textComposition setsHeightOnContent shrinkFromExtent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!TextParagraphMorph methodsFor: 'accessing' stamp: 'KenD 9/9/2024 17:35:05' prior: 16983428!
         extentForComposing

	shrinkFromExtent ifNotNil: [
		^shrinkFromExtent ].

	^ self interiorExtent x @ 9999999! !
!TextParagraphMorph methodsFor: 'drawing' stamp: 'KenD 9/8/2024 12:35:17' prior: 50373118 overrides: 50380265!
 drawOn: aCanvas

	aCanvas
		fillRectangle: self localBounds color: color.
	aCanvas
		drawTextComposition: textComposition
		at: self interiorOrigin
		extent: self interiorExtent
		color: Theme current text
		selectionColor: `Color red`
		avoidOverhang: true.
	aCanvas
		frameRectangle: self localBounds
		color: borderColor
		borderWidth: borderWidth
		borderStyleSymbol: nil! !
!TextParagraphMorph methodsFor: 'geometry' stamp: 'KenD 9/9/2024 17:31:25' prior: 16983512 overrides: 50380237!
                     minimumExtent

	^3@1 * FontFamily defaultLineSpacing ceiling + (2 *  self interiorOrigin) ! !
!TextParagraphMorph methodsFor: 'geometry' stamp: 'KenD 9/9/2024 17:38:03' prior: 16983527!
      reflowAndMaybeResize
	"Reflow text. If appropriate, adjust height or extent."

	| newHeight |
	textComposition
		extentForComposing: self extentForComposing;
		composeAll.
	setsHeightOnContent ifTrue: [
		newHeight := textComposition usedHeight + (2 * self interiorOrigin)
				max: self minimumExtent y.
		extent y = newHeight ifFalse: [
			extent := extent x @ newHeight.
			self redrawNeeded.
			owner ifNotNil: [
				owner someSubmorphPositionOrExtentChanged ]].
		(owner is: #ScrollPane) ifTrue: [
			owner
				updateScrollBarsBounds;
				setScrollDeltas ].
		^self ].
	shrinkFromExtent ifNotNil: [
		extent := textComposition usedExtent + (2 * self interiorOrigin) ].
	self redrawNeeded.! !

BorderedBoxMorph subclass: #TextParagraphMorph
	instanceVariableNames: 'textComposition setsHeightOnContent shrinkFromExtent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #TextParagraphMorph category: #'Morphic-Widgets' stamp: 'Install-6686-TextParagraphMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-17h26m-KenD.001.cs.st 9/12/2024 11:39:25'!
BorderedBoxMorph subclass: #TextParagraphMorph
	instanceVariableNames: 'textComposition setsHeightOnContent shrinkFromExtent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6686-TextParagraphMorph-subclassOf-BorderedBoxMorph-KenDickey-2024Sep09-17h26m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6686] on 9 September 2024 at 6:29:58 pm'!

BorderedBoxMorph removeSelector: #extentBorder!

!methodRemoval: BorderedBoxMorph #extentBorder stamp: 'Install-6687-Cleanup-JuanVuletich-2024Sep09-18h29m-jmv.001.cs.st 9/12/2024 11:39:25'!
extentBorder
	"This is the number of pixels to add to internal minimum to calculate
	my minimumExtent.  "
	
	^ 2 * borderWidth !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6687-Cleanup-JuanVuletich-2024Sep09-18h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6687] on 10 September 2024 at 2:38:55 pm'!
!PlacedMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:37:32'!
                     adjustExtentFor: aBlock
	"For morphs with variable extent, ensure extent is at least minimumExtent.
	See implementors. See senders."! !
!BoxMorph methodsFor: 'private' stamp: 'jmv 9/10/2024 14:37:58' overrides: 50380941!
   adjustExtentFor: aBlock
	"For morphs with variable extent, ensure extent is at least minimumExtent.
	This may mean do the same with owner.
	See implementors. See senders."

	(layoutSpec notNil and: [ owner notNil ]) ifTrue: [
		^ owner adjustExtentFor: [ self basicAdjustExtentFor: aBlock ]].
	self basicAdjustExtentFor: aBlock! !
!BoxMorph methodsFor: 'private' stamp: 'jmv 9/10/2024 14:38:22'!
                    basicAdjustExtentFor: aBlock
	"Ensure extent is at least minimumExtent.
	This may mean do the same with owner.
	See implementors. See senders."

	| forceMinimumExtent |
	forceMinimumExtent := extent = self minimumExtent.
	aBlock value.
	self morphExtent: (forceMinimumExtent ifTrue: [`0@0`] ifFalse: [extent]).! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/10/2024 11:06:40' overrides: 50380247!
            borderWidth: anInteger

	super borderWidth: anInteger.
	self layoutSubmorphs.! !
!PlacedMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:24:55' prior: 16922001!
                          adjustExtent
	"Some morphs may need to adjust their extent after some geometry change
	either in itself, some submorpy, or an owner.
	These include morphs intended to be included in PluggableScrollPanes as scrolled content.
	See implementors. NOP by default."! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 11:53:19' prior: 50379823!
       morphExtent: newExtent
	"In our own coordinates!!"

	| oldExtent |
	oldExtent := extent.
	(self privateExtent: newExtent) ifTrue: [
		self extentChanged: oldExtent.
		owner ifNotNil: [ owner someSubmorphPositionOrExtentChanged ].
		self redrawNeeded ].! !
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:25:42' prior: 50379873!
              privateExtent: aPoint
	"May or may not honor argument: #minimumExtente will be taken into account,
	as well as other possible restrictions by subclasses. See implementors.
	Answer whether extent was actually changed.
	If some subclass may reject the update, answer false in those cases."

	| newExtent |
	newExtent := aPoint max: self minimumExtent.
	^ extent = newExtent
		ifFalse: [ extent := newExtent ]; not! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/10/2024 11:23:08' prior: 50380247!
      borderWidth: anInteger

	borderWidth = anInteger ifFalse: [
		self adjustExtentFor: [ borderWidth := anInteger max: 0 ]].! !
!BorderedBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/10/2024 11:22:26' prior: 50380209!
        padding: numberOrPoint

	| p |
	p := numberOrPoint asPoint max: `0@0`.
	padding = p ifFalse: [
		self adjustExtentFor: [ padding := p ]].! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/10/2024 11:05:55' prior: 50380370 overrides: 50381025!
         padding: numberOrPoint

	super padding: numberOrPoint.
	self layoutSubmorphs.! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/10/2024 11:21:33' prior: 16889699!
                         separation: aNumberOrPoint

	separation = aNumberOrPoint ifFalse: [
		self adjustExtentFor: [ separation := aNumberOrPoint ]].
	self layoutSubmorphs ! !
!TextParagraphMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 11:23:33' prior: 16983499 overrides: 50381018!
                       borderWidth: aNumber

	super borderWidth: aNumber.
	self reflowAndMaybeResize.! !

BoxMorph removeSelector: #ensureMinimumExtent!

!methodRemoval: BoxMorph #ensureMinimumExtent stamp: 'Install-6688-Honor-minimumExtent-JuanVuletich-2024Sep10-14h24m-jmv.001.cs.st 9/12/2024 11:39:25'!
ensureMinimumExtent

	| oldExtent |
	oldExtent := extent.
	(self privateExtent: extent) ifTrue: [
		self extentChanged: oldExtent ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6688-Honor-minimumExtent-JuanVuletich-2024Sep10-14h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6687] on 10 September 2024 at 12:20:34 pm'!
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/10/2024 12:20:21' prior: 50355711 overrides: 16906128!
                    layoutSubmorphs
	"Compute a new layout based on the given layout bounds."

	submorphs isEmpty ifTrue: [
		self layoutNeeded: false.
		^self].

	"Invariant: morphExtent >=  minimumLayoutExtent"
	self adjustExtentFor: [].
	
	direction == #horizontal ifTrue: [
		self layoutSubmorphsHorizontallyIn: self layoutBounds ].

	direction == #vertical ifTrue: [
		self layoutSubmorphsVerticallyIn: self layoutBounds ].

	self invalidateBounds.
	self layoutNeeded: false.! !

LayoutMorph removeSelector: #refreshExtent!

!methodRemoval: LayoutMorph #refreshExtent stamp: 'Install-6689-Cleanup-JuanVuletich-2024Sep10-12h09m-jmv.001.cs.st 9/12/2024 11:39:26'!
refreshExtent
	"Invariant: my morphExtent >= my minimumExtent"
		
	self morphExtent: (extent max: self minimumExtent)!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6689-Cleanup-JuanVuletich-2024Sep10-12h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6688] on 10 September 2024 at 2:52:38 pm'!
!BoxMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:51:06' overrides: 16905181!
                     minimumExtent
	"This returns the minimum extent that the morph may be shrunk to.
	It is expressed in the morph own coordinates, like morphExtent."

	^ `1@1`! !
!BoxedMorph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:51:03' overrides: 16905181!
        minimumExtent
	"This returns the minimum extent that the morph may be shrunk to.
	It is expressed in the morph own coordinates, like morphExtent."

	^ `1@1`! !
!Morph methodsFor: 'geometry' stamp: 'jmv 9/10/2024 14:45:32' prior: 16905181!
                 minimumExtent
	"This returns the minimum extent that the morph may be shrunk to.
	It is expressed in the morph own coordinates, like morphExtent."

	^ `20@20`! !

LayoutAdjustingMorph removeSelector: #minimumExtent!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6690-minimumExtent-forVGMorphs-JuanVuletich-2024Sep10-14h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6691] on 10 September 2024 at 3:41:19 pm'!

BoxedMorph removeSelector: #morphLocalBounds!

!methodRemoval: BoxedMorph #morphLocalBounds stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphLocalBounds

	self flag: #deprecated.
	^self localBounds!

BoxedMorph removeSelector: #morphPosition:extent:!

!methodRemoval: BoxedMorph #morphPosition:extent: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphPosition: newPos extent: newExtent
	"Change the position and extent of this morph. Arguments are owner's coordinates."

	self flag: #deprecated.
	^self position: newPos extent: newExtent!

BoxedMorph removeSelector: #morphExtentInWorld:!

!methodRemoval: BoxedMorph #morphExtentInWorld: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphExtentInWorld: newExtent
	"world coordinates"

	self flag: #deprecated.
	^self extentInWorld: newExtent!

BoxedMorph removeSelector: #morphWidthInOwner:!

!methodRemoval: BoxedMorph #morphWidthInOwner: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphWidthInOwner: newWidth

	self flag: #deprecated.
	^self widthInOwner: newWidth!

BoxedMorph removeSelector: #morphExtentInOwner:!

!methodRemoval: BoxedMorph #morphExtentInOwner: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphExtentInOwner: newExtent

	self flag: #deprecated.
	^self extentInOwner: newExtent!

BoxedMorph removeSelector: #morphExtentInWorld!

!methodRemoval: BoxedMorph #morphExtentInWorld stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphExtentInWorld
	"World coordinates"

	self flag: #deprecated.
	^self extentInWorld!

BoxedMorph removeSelector: #morphHeightInOwner:!

!methodRemoval: BoxedMorph #morphHeightInOwner: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphHeightInOwner: newHeight

	self flag: #deprecated.
	^ self heightInOwner: newHeight!

Morph removeSelector: #morphExtentInOwner!

!methodRemoval: Morph #morphExtentInOwner stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphExtentInOwner

	self flag: #deprecated.
	^self extentInOwner!

Morph removeSelector: #morphPositionInWorld!

!methodRemoval: Morph #morphPositionInWorld stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphPositionInWorld
	"Answer is in world coordinates."

	self flag: #deprecated.
	^ self positionInWorld.!

Morph removeSelector: #morphPositionInWorld:!

!methodRemoval: Morph #morphPositionInWorld: stamp: 'Install-6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st 9/12/2024 11:39:26'!
morphPositionInWorld: newPositionInWorld
	"Change the position of this morph. Argument is in world coordinates.
	Ignored by morphs that are not movable."

	self flag: #deprecated.
	^self positionInWorld: newPositionInWorld!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6691-Cleanup-JuanVuletich-2024Sep10-15h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6691] on 10 September 2024 at 4:15:48 pm'!
!CodePackage methodsFor: 'saving' stamp: 'fgz 9/10/2024 16:15:04' prior: 16824100!
              save
	"If we can't save, find a new destination directory."
	fullFileName ifNotNil: [
		fullFileName asFullFileEntry parent exists ifFalse: [
			fullFileName := nil ]].

	"If we were never saved, or never saved since image was moved, or target directory disappeared,
	then ask where to save, suggesting the NewPackages folder."
	fullFileName ifNil: [
		fullFileName :=
			self request: 'Save on path: '
				initialAnswer: (DirectoryEntry newPackagesDirectory // self packageFileName) pathName
				orCancel: [ ^self ]].

	fullFileName asFullFileEntry forceWriteStreamDo: [ :stream |
		stream timeStamp.
		self writeOnStream: stream ].

	self hasUnsavedChanges: false.
	ChangeSet removeChangeSet: (ChangeSet existingOrNewChangeSetForPackage: self)! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6692-PackageFirstSaveAndCancel-fix-FelipeZak-2024Sep10-15h41m-fgz.001.cs.st----!

'From Cuis7.1 [latest update: #6692] on 11 September 2024 at 8:18:41 am'!
!ImageMorph methodsFor: 'drawing' stamp: 'KenD 9/10/2024 13:41:43' prior: 50380692 overrides: 50380265!
 drawOn: aCanvas

	((padding > `0@0`) or: [self morphExtent > self minimumExtent]) 
		ifTrue: [ 	| innerOrigin |
			"Make use of my color in area between border and image"
			innerOrigin := borderWidth @ borderWidth.
			aCanvas
				fillRectangle:  (innerOrigin extent: extent - (2 * innerOrigin ))
				color:  color].
			
	(borderWidth > 0) ifTrue: [
		aCanvas
			frameRectangle:  (`0@0` extent: extent)
			color:  borderColor
			borderWidth:  borderWidth 
			borderStyleSymbol:  #simple ].
		
	aCanvas image: image at: self interiorOrigin.
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6693-ImageMorph-tweak-KenDickey-2024Sep11-08h18m-KenD.001.cs.st----!

'From Cuis7.1 [latest update: #6693] on 11 September 2024 at 9:20:03 am'!
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 09:19:37' prior: 50380427!
               layoutSubmorphsHorizontallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs xGap gapCount widths widthToAllocate leftOver x height y cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].
	
	xGap := self xSeparation.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	widthToAllocate := boundsForLayout width - (gapCount * xGap).
	cache := IdentityDictionary new.
	widths := self widthsFor: visibleSubmorphs within: widthToAllocate minLayoutExtentCache: cache.
	leftOver := widthToAllocate - widths sum.
	x := boundsForLayout left + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: widths do: [ :sm :smWidth |
		height := self offAxisHeightFor: sm within: boundsForLayout height minLayoutExtentCache: cache.
		y := self offAxisYOffsetFor: sm within: boundsForLayout height - height.
		sm fitInto: (x @ (boundsForLayout top + y) extent: smWidth @ height).
		x := x + smWidth + xGap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 09:19:56' prior: 50380466!
                        layoutSubmorphsVerticallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs yGap gapCount heights heightToAllocate leftOver y width x cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	yGap := self ySeparation.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	heightToAllocate := boundsForLayout height - (gapCount * yGap).
	cache := IdentityDictionary new.
	heights := self heightsFor: visibleSubmorphs within: heightToAllocate minLayoutExtentCache: cache.
	leftOver := heightToAllocate - heights sum.
	y := boundsForLayout top + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: heights do: [ :sm :smHeight |
		width := self offAxisWidthFor: sm within: boundsForLayout width minLayoutExtentCache: cache.
		x := self offAxisXOffsetFor: sm within: boundsForLayout width - width.
		sm fitInto: (boundsForLayout left + x @ y extent: width @ smHeight).
		y := y + smHeight + yGap.
	]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6694-dontUse-gap-asTempName-JuanVuletich-2024Sep11-09h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6693] on 11 September 2024 at 9:20:36 am'!

BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor gap '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6695-rename-separatio-as-gap-p1-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st 9/12/2024 11:39:26'!
BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction separation axisEdgeWeight doAdoptWidgetsColor gap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
LayoutMorph allSubInstances do: [ :m | m instVarNamed: 'gap' put: (m instVarNamed: 'separation') ].
!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6695-rename-separatio-as-gap-p1-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6693] on 11 September 2024 at 9:20:36 am'!
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:20:26' prior: 50381039!
   separation: aNumberOrPoint

	gap = aNumberOrPoint ifFalse: [
		self adjustExtentFor: [ gap := aNumberOrPoint ]].
	self layoutSubmorphs ! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:20:26' prior: 16889704!
                               xSeparation
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap x ]! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:20:26' prior: 16889709!
     ySeparation
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap y ]! !
!LayoutMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 09:20:26' prior: 50380414 overrides: 50380256!
            initialize
	super initialize.
	gap := 0.
	axisEdgeWeight := 0.0.
	doAdoptWidgetsColor := false.! !

BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction gap axisEdgeWeight doAdoptWidgetsColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutMorph category: #'Morphic-Layouts' stamp: 'Install-6696-rename-separatio-as-gap-p2-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st 9/12/2024 11:39:26'!
BorderedBoxMorph subclass: #LayoutMorph
	instanceVariableNames: 'direction gap axisEdgeWeight doAdoptWidgetsColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6696-rename-separatio-as-gap-p2-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6693] on 11 September 2024 at 9:30:13 am'!
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:20:56'!
gap: aNumberOrPoint

	gap = aNumberOrPoint ifFalse: [
		self adjustExtentFor: [ gap := aNumberOrPoint ]].
	self layoutSubmorphs ! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:23:49'!
                      xGap
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap x ]! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:23:54'!
                            yGap
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap y ]! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 09:22:55' prior: 50381431!
            separation: aNumberOrPoint

	self padding: aNumberOrPoint.
	self gap: aNumberOrPoint.! !
!LayoutMorph methodsFor: 'geometry' stamp: 'jmv 9/11/2024 09:25:35' prior: 50380376!
                  minimumExtent: cachedValues
	"Answer size sufficient to frame my submorphs."
	
	| width height mle |
	width  := 0.
	height := 0.
	(self direction = #vertical)
		ifTrue: [ "Column"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"use maximum width across submorphs"
				width := width max: mle x.
				"sum up submorph heights, including separation between them"
				height := height + mle y + self yGap.
			].
			height := height - self yGap. "An extra gap was just added"
		]
		ifFalse: [ "Row"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"sum up submorphs width, include gap"
				width := width + mle x + self xGap.
				"use maximum height across submorph"
				height := height max: mle y.
			].
			width := width - self xGap. "An extra gap was just added"
		].
	^ (width @ height) + (2 * self interiorOrigin)! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 09:25:24' prior: 50381307!
     layoutSubmorphsHorizontallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs xGap gapCount widths widthToAllocate leftOver x height y cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].
	
	xGap := self xGap.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	widthToAllocate := boundsForLayout width - (gapCount * xGap).
	cache := IdentityDictionary new.
	widths := self widthsFor: visibleSubmorphs within: widthToAllocate minLayoutExtentCache: cache.
	leftOver := widthToAllocate - widths sum.
	x := boundsForLayout left + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: widths do: [ :sm :smWidth |
		height := self offAxisHeightFor: sm within: boundsForLayout height minLayoutExtentCache: cache.
		y := self offAxisYOffsetFor: sm within: boundsForLayout height - height.
		sm fitInto: (x @ (boundsForLayout top + y) extent: smWidth @ height).
		x := x + smWidth + xGap.
	]! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 09:24:02' prior: 50381346!
                               layoutSubmorphsVerticallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs yGap gapCount heights heightToAllocate leftOver y width x cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	yGap := self yGap.
	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	heightToAllocate := boundsForLayout height - (gapCount * yGap).
	cache := IdentityDictionary new.
	heights := self heightsFor: visibleSubmorphs within: heightToAllocate minLayoutExtentCache: cache.
	leftOver := heightToAllocate - heights sum.
	y := boundsForLayout top + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: heights do: [ :sm :smHeight |
		width := self offAxisWidthFor: sm within: boundsForLayout width minLayoutExtentCache: cache.
		x := self offAxisXOffsetFor: sm within: boundsForLayout width - width.
		sm fitInto: (boundsForLayout left + x @ y extent: width @ smHeight).
		y := y + smHeight + yGap.
	]! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 09:28:10' prior: 50380545!
                      exampleEdgesColumn
	"Show 2 cases :1 useEdgeSpace true and 1 false"
	" self exampleEdgesColumn "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newColumn :: padding: (120 @ 40);  gap: 20.
	noEdge := self newColumn ::  padding: (0 @ 0);  gap: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 200; proportionalHeight: 0.8 minimum: 200.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 200; proportionalHeight: 0.5 minimum: 200.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 09:28:39' prior: 50380580!
              exampleEdgesRow
	"Show 2 cases: 1 useEdgeSpace true and 1 false"
	" self exampleEdgesRow "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newRow :: padding: (120 @ 40);  gap: 20.
	noEdge := self newRow :: padding: (0 @ 0);  gap: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (BoxedMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (BoxedMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (BoxedMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !

LayoutMorph removeSelector: #ySeparation!

!methodRemoval: LayoutMorph #ySeparation stamp: 'Install-6697-separation-is-paddingPLUSgap-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st 9/12/2024 11:39:26'!
ySeparation
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap y ]!

LayoutMorph removeSelector: #xSeparation!

!methodRemoval: LayoutMorph #xSeparation stamp: 'Install-6697-separation-is-paddingPLUSgap-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st 9/12/2024 11:39:26'!
xSeparation
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap x ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6697-separation-is-paddingPLUSgap-JuanVuletich-2024Sep11-09h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6697] on 11 September 2024 at 4:06:12 pm'!

BoxMorph subclass: #ColoredBoxMorph
	instanceVariableNames: 'color'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #ColoredBoxMorph category: #'Morphic-Kernel' stamp: 'Install-6698-ColoredBoxMorph-JuanVuletich-2024Sep11-16h01m-jmv.001.cs.st 9/12/2024 11:39:26'!
BoxMorph subclass: #ColoredBoxMorph
	instanceVariableNames: 'color'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!
!ColoredBoxMorph commentStamp: '<historical>' prior: 0!
                       ColoredRectMorph adds a customizable background color.!
!ColoredBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 16:01:35' overrides: 16903414!
          color

	^ color! !
!ColoredBoxMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 16:01:35'!
   color: aColor
	"Set the receiver's color. "
	color = aColor ifFalse: [
		color := aColor.
		self redrawNeeded ]! !
!ColoredBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 16:05:24'!
                              defaultColor
	^ `Color lightRed`! !
!ColoredBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 16:02:03' overrides: 50379728!
                         initialize
	super initialize.
	color := self defaultColor.! !
!ColoredBoxMorph methodsFor: 'drawing' stamp: 'jmv 9/11/2024 16:03:04' overrides: 50379733!
      drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color.! !
!ColoredBoxMorph methodsFor: 'testing' stamp: 'jmv 9/11/2024 16:03:21' overrides: 50380021!
         is: aSymbol
	^ aSymbol == #ColoredBoxMorph or: [ super is: aSymbol ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6698-ColoredBoxMorph-JuanVuletich-2024Sep11-16h01m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6697] on 11 September 2024 at 4:09:21 pm'!

ColoredBoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'borderWidth borderColor padding'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #BorderedBoxMorph category: #'Morphic-Kernel' stamp: 'Install-6699-BorderedBoxMorph-subClassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-16h06m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #BorderedBoxMorph
	instanceVariableNames: 'borderWidth borderColor padding'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 16:08:34' prior: 50380256 overrides: 50381741!
                               initialize
	super initialize.
	borderColor := self defaultBorderColor.
	borderWidth := self defaultBorderWidth.
	padding := self defaultPadding.! !

BorderedBoxMorph removeSelector: #color!

!methodRemoval: BorderedBoxMorph #color stamp: 'Install-6699-BorderedBoxMorph-subClassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-16h06m-jmv.001.cs.st 9/12/2024 11:39:27'!
color

	^ color!

BorderedBoxMorph removeSelector: #color:!

!methodRemoval: BorderedBoxMorph #color: stamp: 'Install-6699-BorderedBoxMorph-subClassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-16h06m-jmv.001.cs.st 9/12/2024 11:39:27'!
color: aColor
	"Set the receiver's color. "
	color = aColor ifFalse: [
		color := aColor.
		self redrawNeeded ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6699-BorderedBoxMorph-subClassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-16h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6697] on 11 September 2024 at 3:15:24 pm'!
!LayoutMorph commentStamp: 'jmv 9/11/2024 15:13:03' prior: 50368396!
                              A row or column of Morphs, does layout by placing them along either a horizontal axis or a vertical axis.

Submorphs might specify a LayoutSpec. If some don't, then, for a column, the column width is taken as the width, and any morph height is kept. Same for rows: submorph width would be maintained, and submorph height would be made equal to row height.

Notes:
  - Contained submorphs may have fixed or minimum sizes.
  - We can specify fixed separation.
  - We can offset to left or right.
  - Contained submorphs can, via LayoutSpecs, ask for a proportion of
    the space which is left over after the minimum extent.

  One subtlety with the proportional layouts is that the sum of
  proportions may add up to more than 100%.

  We want to allocate fairly.

  Say we have 2 submorphs which ask for 80% and 50%.

  They should be normalized to get 80/130 and 50/130 of the excess space.

Instance Variables:
  direction - either #horizontal (row) or #vertical (column).
  gap - Empty space between Morphs:
	gap for both x and y axes or a point: (xGap @ yGap)
  axisEdgeWeight  - Along the Major or Layout Axis, subMorphs may be attracted 
	toward one side (0.0) or the other (1.0).  
	See comment in method #axisEdgeWeight:
  doAdoptWidgetsColor - see method #adoptWidgetsColor:
  useEdgeSpace - When true, x and y separation are kept between submorphs and the
	edge of our extent, othersize no space is kept between submorphs 
	and our outer edge.

!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6700-LayoutMorph-classComment-JuanVuletich-2024Sep11-15h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6698] on 11 September 2024 at 3:27:29 pm'!

BoxMorph subclass: #DraggingGuideMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #DraggingGuideMorph category: #'Morphic-Widgets' stamp: 'Install-6701-DraggingGuideMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h24m-jmv.001.cs.st 9/12/2024 11:39:27'!
BoxMorph subclass: #DraggingGuideMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!DraggingGuideMorph methodsFor: 'drawing' stamp: 'jmv 9/11/2024 15:26:19' overrides: 50379733!
          drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."! !

DraggingGuideMorph removeSelector: #defaultColor!

!methodRemoval: DraggingGuideMorph #defaultColor stamp: 'Install-6701-DraggingGuideMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h24m-jmv.001.cs.st 9/12/2024 11:39:27'!
defaultColor

	^Color transparent!

DraggingGuideMorph removeSelector: #initialize!

!methodRemoval: DraggingGuideMorph #initialize stamp: 'Install-6701-DraggingGuideMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h24m-jmv.001.cs.st 9/12/2024 11:39:27'!
initialize

	super initialize.
	extent := `0@0`.!

DraggingGuideMorph removeSelector: #defaultBorderWidth!

!methodRemoval: DraggingGuideMorph #defaultBorderWidth stamp: 'Install-6701-DraggingGuideMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h24m-jmv.001.cs.st 9/12/2024 11:39:27'!
defaultBorderWidth
	"answer the default border width for the receiver"
	^ 0!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6701-DraggingGuideMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6700] on 11 September 2024 at 3:40:06 pm'!

BoxMorph subclass: #HaloMorph
	instanceVariableNames: 'target positionOffset angleOffset scaleOffset haloBox haloDelta '
	classVariableNames: 'Icons '
	poolDictionaries: ''
	category: 'Morphic-Halos'!

!classDefinition: #HaloMorph category: #'Morphic-Halos' stamp: 'Install-6702-HaloMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h39m-jmv.001.cs.st 9/12/2024 11:39:27'!
BoxMorph subclass: #HaloMorph
	instanceVariableNames: 'target positionOffset angleOffset scaleOffset haloBox haloDelta'
	classVariableNames: 'Icons'
	poolDictionaries: ''
	category: 'Morphic-Halos'!
!HaloMorph methodsFor: 'private' stamp: 'jmv 9/11/2024 15:39:56' prior: 50373437!
           addHandle: handleSpec
	"Add a handle within the halo box as per the haloSpec, and set it up to respond to the given event by sending the given selector to the given recipient. Return the handle."

	| handle aPoint colorToUse form icon e |
	aPoint := self 
				positionIn: haloBox
				horizontalPlacement: handleSpec horizontalPlacement
				verticalPlacement: handleSpec verticalPlacement.
	colorToUse := Color colorFrom: handleSpec color.
	handle := HaloHandleMorph new color: colorToUse.
	self addMorph: handle.
	e := (Preferences at: #haloHandleSize) asPoint.
	handle position: aPoint-(e//2) extent: e.
	handleSpec iconSymbol ifNotNil: [ :iconName |
			form := self class icons at: iconName ifAbsent: [self class perform: iconName].
			form ifNotNil: [
				form extent = e ifFalse: [ 
					": Non default size, scale that bugger!!"
					form := form  ": Be as smooth as possible, these images are small."
						magnify: form boundingBox
						to: e
						smoothing: 2 ].
				icon := (ImageMorph newWith: form)
					color: colorToUse makeForegroundColor;
					lock.
				handle addMorphFront: icon position: `0@0`.
				handle morphExtent: icon morphExtent+2 ]].
	handle mouseUpSelector: #endInteraction.
	handle setBalloonText: handleSpec hoverHelp.
	^ handle! !

BoxMorph subclass: #HaloMorph
	instanceVariableNames: 'target positionOffset angleOffset scaleOffset haloBox haloDelta'
	classVariableNames: 'Icons'
	poolDictionaries: ''
	category: 'Morphic-Halos'!

!classDefinition: #HaloMorph category: #'Morphic-Halos' stamp: 'Install-6702-HaloMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h39m-jmv.001.cs.st 9/12/2024 11:39:27'!
BoxMorph subclass: #HaloMorph
	instanceVariableNames: 'target positionOffset angleOffset scaleOffset haloBox haloDelta'
	classVariableNames: 'Icons'
	poolDictionaries: ''
	category: 'Morphic-Halos'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6702-HaloMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6701] on 11 September 2024 at 3:43:53 pm'!

BoxMorph subclass: #MenuLineMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

!classDefinition: #MenuLineMorph category: #'Morphic-Menus' stamp: 'Install-6703-MenuLineMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h43m-jmv.001.cs.st 9/12/2024 11:39:27'!
BoxMorph subclass: #MenuLineMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6703-MenuLineMorph-subClassOf-BoxMorph-JuanVuletich-2024Sep11-15h43m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6702] on 11 September 2024 at 4:26:11 pm'!

ColoredBoxMorph subclass: #HoverHelpMorph
	instanceVariableNames: 'contents textComposition '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #HoverHelpMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #HoverHelpMorph
	instanceVariableNames: 'contents textComposition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #TranscriptMorph
	instanceVariableNames: 'workspace lastIncludedIndex workspaceWindow lastUnfinishedEntrySize doImmediateUpdates '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #TranscriptMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #TranscriptMorph
	instanceVariableNames: 'workspace lastIncludedIndex workspaceWindow lastUnfinishedEntrySize doImmediateUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #HaloHandleMorph
	instanceVariableNames: 'mouseDownSelector mouseUpSelector mouseMoveSelector '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Halos'!

!classDefinition: #HaloHandleMorph category: #'Morphic-Halos' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #HaloHandleMorph
	instanceVariableNames: 'mouseDownSelector mouseUpSelector mouseMoveSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Halos'!

BorderedBoxMorph subclass: #ProgressBarMorph
	instanceVariableNames: 'value progressColor '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #ProgressBarMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #ProgressBarMorph
	instanceVariableNames: 'value progressColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #ResizeMorph
	instanceVariableNames: 'gridLineWidth gridColor selectionColor outlineMorph grid from to action '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #ResizeMorph category: #'Morphic-Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #ResizeMorph
	instanceVariableNames: 'gridLineWidth gridColor selectionColor outlineMorph grid from to action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!HoverHelpMorph methodsFor: 'drawing' stamp: 'jmv 9/11/2024 15:50:30' prior: 50372214 overrides: 50381746!
    drawOn: aCanvas

	| r |
	r := self localBounds.
	aCanvas roundRect: r color: color radius: 4.
	aCanvas
		drawTextComposition: textComposition
		at: `4@4`
		extent: extent - 8
		color: `Color black`
		selectionColor: (Theme current textHighlightFocused: false).! !

ResizeMorph removeSelector: #defaultBorderWidth!

!methodRemoval: ResizeMorph #defaultBorderWidth stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
defaultBorderWidth
	"answer the default border width for the receiver"
	^ 0!

TranscriptMorph removeSelector: #defaultBorderWidth!

!methodRemoval: TranscriptMorph #defaultBorderWidth stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
defaultBorderWidth
	"answer the default border width for the receiver"
	^ 0!

HoverHelpMorph removeSelector: #defaultBorderWidth!

!methodRemoval: HoverHelpMorph #defaultBorderWidth stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
defaultBorderWidth
	"answer the default border width for the receiver"
	^ 0!

ColoredBoxMorph subclass: #HoverHelpMorph
	instanceVariableNames: 'contents textComposition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #HoverHelpMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #HoverHelpMorph
	instanceVariableNames: 'contents textComposition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #TranscriptMorph
	instanceVariableNames: 'workspace lastIncludedIndex workspaceWindow lastUnfinishedEntrySize doImmediateUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #TranscriptMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #TranscriptMorph
	instanceVariableNames: 'workspace lastIncludedIndex workspaceWindow lastUnfinishedEntrySize doImmediateUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #HaloHandleMorph
	instanceVariableNames: 'mouseDownSelector mouseUpSelector mouseMoveSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Halos'!

!classDefinition: #HaloHandleMorph category: #'Morphic-Halos' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #HaloHandleMorph
	instanceVariableNames: 'mouseDownSelector mouseUpSelector mouseMoveSelector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Halos'!

BorderedBoxMorph subclass: #ProgressBarMorph
	instanceVariableNames: 'value progressColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

!classDefinition: #ProgressBarMorph category: #'Morphic-Composite Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #ProgressBarMorph
	instanceVariableNames: 'value progressColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

ColoredBoxMorph subclass: #ResizeMorph
	instanceVariableNames: 'gridLineWidth gridColor selectionColor outlineMorph grid from to action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #ResizeMorph category: #'Morphic-Widgets' stamp: 'Install-6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #ResizeMorph
	instanceVariableNames: 'gridLineWidth gridColor selectionColor outlineMorph grid from to action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6704-FiveMore-subClassesOf-ColoredBoxMorph-BorderedBoxMorph-JuanVuletich-2024Sep11-16h19m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6702] on 11 September 2024 at 4:27:13 pm'!
!TaskbarMorph methodsFor: 'services' stamp: 'jmv 9/11/2024 15:50:20' prior: 16974038!
                        addButtonFor: aMorph

	| button taskbarButtonIcon |
	aMorph == self ifFalse: [
		button := HoverableButtonMorph
			model: aMorph
			stateGetter: nil
			action: #showAndComeToFront
			onMouseEnterSend: #beginPreview
			onMouseLeaveSend: #endPreview.
		(aMorph is: #SystemWindow) ifTrue: [
			button
				secondaryActionSelector: #offerWindowMenu ].
		taskbarButtonIcon := aMorph
			valueOfProperty: #taskbarButtonIcon
			ifAbsentPut: [aMorph imageForm: self defaultHeight*5//4 @ self defaultHeight depth: 32].
		button
			color: color;
			icon: taskbarButtonIcon;
			setBalloonText: #label.
		viewBox
			addMorph: button
			fixedWidth: self defaultHeight ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6705-Tweak-JuanVuletich-2024Sep11-16h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6702] on 11 September 2024 at 4:28:57 pm'!

BorderedBoxMorph subclass: #MenuMorph
	instanceVariableNames: 'defaultTarget selectedItem stayUp titleMorph activeSubMenu popUpOwner prevKbdFocus prevMouseFocus '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

!classDefinition: #MenuMorph category: #'Morphic-Menus' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #MenuMorph
	instanceVariableNames: 'defaultTarget selectedItem stayUp titleMorph activeSubMenu popUpOwner prevKbdFocus prevMouseFocus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #TileResizeMorph category: #'Morphic-Widgets' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

BorderedBoxMorph subclass: #AutoCompleterMorph
	instanceVariableNames: 'completer selected firstVisible itemHeight lastActivity originalPosition showUp itemsPerPage downButtonForm upButtonForm '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Autocompletion'!

!classDefinition: #AutoCompleterMorph category: #'Tools-Autocompletion' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #AutoCompleterMorph
	instanceVariableNames: 'completer selected firstVisible itemHeight lastActivity originalPosition showUp itemsPerPage downButtonForm upButtonForm'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Autocompletion'!
!AutoCompleterMorph methodsFor: 'drawing' stamp: 'jmv 9/11/2024 15:51:03' prior: 50373134!
 drawContainingRectangle: aCanvas
	
	aCanvas frameAndFillRectangle: self localBounds fillColor: color borderWidth: borderWidth borderColor: borderColor.
! !

BorderedBoxMorph subclass: #MenuMorph
	instanceVariableNames: 'defaultTarget selectedItem stayUp titleMorph activeSubMenu popUpOwner prevKbdFocus prevMouseFocus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

!classDefinition: #MenuMorph category: #'Morphic-Menus' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #MenuMorph
	instanceVariableNames: 'defaultTarget selectedItem stayUp titleMorph activeSubMenu popUpOwner prevKbdFocus prevMouseFocus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Menus'!

BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #TileResizeMorph category: #'Morphic-Widgets' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

BorderedBoxMorph subclass: #AutoCompleterMorph
	instanceVariableNames: 'completer selected firstVisible itemHeight lastActivity originalPosition showUp itemsPerPage downButtonForm upButtonForm'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Autocompletion'!

!classDefinition: #AutoCompleterMorph category: #'Tools-Autocompletion' stamp: 'Install-6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #AutoCompleterMorph
	instanceVariableNames: 'completer selected firstVisible itemHeight lastActivity originalPosition showUp itemsPerPage downButtonForm upButtonForm'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tools-Autocompletion'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6706-Three-BorderedBoxMorph-subclasses-JuanVuletich-2024Sep11-16h27m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6706] on 11 September 2024 at 5:13:52 pm'!
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 17:11:02'!
                   gap
	^gap! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 17:07:27' prior: 50381481!
                             gap: aNumber

	gap = aNumber ifFalse: [
		self adjustExtentFor: [ gap := aNumber ]].
	self layoutSubmorphs.! !
!LayoutMorph methodsFor: 'accessing' stamp: 'jmv 9/11/2024 17:09:49' prior: 50381498!
                           separation: aNumberOrPoint

	| g |
	self padding: aNumberOrPoint.
	g := aNumberOrPoint.
	g isPoint ifTrue: [
		g := direction == #horizontal ifTrue: [ g x ] ifFalse: [ g y ]].
	self gap: g.! !
!LayoutMorph methodsFor: 'geometry' stamp: 'jmv 9/11/2024 17:12:38' prior: 50381504!
          minimumExtent: cachedValues
	"Answer size sufficient to frame my submorphs."
	
	| width height mle |
	width  := 0.
	height := 0.
	(self direction = #vertical)
		ifTrue: [ "Column"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"use maximum width across submorphs"
				width := width max: mle x.
				"sum up submorph heights, including separation between them"
				height := height + mle y + gap.
			].
			height := height - gap. "An extra gap was just added"
		]
		ifFalse: [ "Row"
			self submorphsToLayout do: [ :sm |
				mle := sm minimumLayoutExtent: cachedValues.
				"sum up submorphs width, include gap"
				width := width + mle x + gap.
				"use maximum height across submorph"
				height := height max: mle y.
			].
			width := width - gap. "An extra gap was just added"
		].
	^ (width @ height) + (2 * self interiorOrigin)! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 17:11:24' prior: 50381535!
                             layoutSubmorphsHorizontallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gapCount widths widthToAllocate leftOver x height y cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	widthToAllocate := boundsForLayout width - (gapCount * gap).
	cache := IdentityDictionary new.
	widths := self widthsFor: visibleSubmorphs within: widthToAllocate minLayoutExtentCache: cache.
	leftOver := widthToAllocate - widths sum.
	x := boundsForLayout left + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: widths do: [ :sm :smWidth |
		height := self offAxisHeightFor: sm within: boundsForLayout height minLayoutExtentCache: cache.
		y := self offAxisYOffsetFor: sm within: boundsForLayout height - height.
		sm fitInto: (x @ (boundsForLayout top + y) extent: smWidth @ height).
		x := x + smWidth + gap.
	].! !
!LayoutMorph methodsFor: 'layout' stamp: 'jmv 9/11/2024 17:12:07' prior: 50381574!
                          layoutSubmorphsVerticallyIn: boundsForLayout
	"Compute a new layout based on the given layout bounds."

	| visibleSubmorphs gapCount heights heightToAllocate leftOver y width x cache |
	"Preconditions: self isRow & morphExtent >= minimumLayoutExtent"
	(visibleSubmorphs := self submorphsToLayout reversed  "Display Order")
		ifEmpty: [ ^ self. "Nothing to layout, besides `sum` below, would fail" ].

	gapCount := visibleSubmorphs size - 1. "gap between each contained Morph"
	heightToAllocate := boundsForLayout height - (gapCount * gap).
	cache := IdentityDictionary new.
	heights := self heightsFor: visibleSubmorphs within: heightToAllocate minLayoutExtentCache: cache.
	leftOver := heightToAllocate - heights sum.
	y := boundsForLayout top + (leftOver * self axisEdgeWeight).

	visibleSubmorphs with: heights do: [ :sm :smHeight |
		width := self offAxisWidthFor: sm within: boundsForLayout width minLayoutExtentCache: cache.
		x := self offAxisXOffsetFor: sm within: boundsForLayout width - width.
		sm fitInto: (boundsForLayout left + x @ y extent: width @ smHeight).
		y := y + smHeight + gap.
	].! !

LayoutMorph removeSelector: #yGap!

!methodRemoval: LayoutMorph #yGap stamp: 'Install-6707-gap-canOnlyBeANumber-JuanVuletich-2024Sep11-17h07m-jmv.001.cs.st 9/12/2024 11:39:27'!
yGap
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap y ]!

LayoutMorph removeSelector: #xGap!

!methodRemoval: LayoutMorph #xGap stamp: 'Install-6707-gap-canOnlyBeANumber-JuanVuletich-2024Sep11-17h07m-jmv.001.cs.st 9/12/2024 11:39:27'!
xGap
	^gap isNumber
		ifTrue: [ gap ]
		ifFalse: [ gap x ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6707-gap-canOnlyBeANumber-JuanVuletich-2024Sep11-17h07m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6706] on 11 September 2024 at 5:46:15 pm'!

BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #TileResizeMorph category: #'Morphic-Widgets' stamp: 'Install-6708-RemoveDirectUsersOf-BoxedMorph-JuanVuletich-2024Sep11-17h13m-jmv.001.cs.st 9/12/2024 11:39:27'!
BorderedBoxMorph subclass: #TileResizeMorph
	instanceVariableNames: 'selectedResize selectionColor action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!
!TileResizeMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 17:43:17' overrides: 50380217!
   defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!HaloMorph methodsFor: 'private' stamp: 'jmv 9/11/2024 17:21:30' prior: 16871733!
                              addNameString: aString 
	"Add a name display centered beneath the bottom of the outer rectangle. Return the handle."

	| nameMorph verticalNamePosition namePosition nameBackground |
	nameBackground := ColoredBoxMorph new
		color: ((target is: #SystemWindow)
			ifTrue: [target windowColor]
			ifFalse: [`Color lightBlue alpha: 0.9`]).
	nameMorph := LabelMorph contents: aString.
	nameMorph color: `Color black`.
	nameBackground morphExtent: nameMorph morphExtent + 4.
	verticalNamePosition := haloBox bottom + (Preferences at: #haloHandleSize).
	namePosition := haloBox width - nameMorph morphWidth // 2 + haloBox left @ verticalNamePosition.
	self addMorph: nameBackground.
	nameBackground morphPosition: namePosition - 2.
	self addMorph: nameMorph.
	nameMorph morphPosition: namePosition.
	^nameMorph! !
!ColoredBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 17:37:41' prior: 50381736!
                           defaultColor
	^ `Color lightOrange duller`! !
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 16:08:34' prior: 50381787 overrides: 50381741!
                              initialize
	super initialize.
	borderColor := self defaultBorderColor.
	borderWidth := self defaultBorderWidth.
	padding := self defaultPadding.! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:17:55' prior: 50373734!
                 example1
"
	self example1
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:29:46' prior: 16890609!
        example10
"
	self example10 openInWorld
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example10.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
^ pane! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:30:11' prior: 50373799!
                             example101VG
"
	self example101VG
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (Sample09Clock new name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 100); 
	addMorph: (Sample01Star new name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Sample03Smiley new name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (Sample03Smiley new name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 200 fixedHeight: 200).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color lightRed;
	addMorph: (Sample02Bezier new name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (Sample02Bezier new  name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (Sample02Bezier new  name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:31:43' prior: 50373858!
example11
"
	self example11
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example11.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #B)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addAdjusterMorph; 
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #G)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:32:04' prior: 50373925!
                       example13
	"
	self example13
	"
	| pane row innerRow |
pane := (LayoutMorph newColumn separation: 5)	name: #example13.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	innerRow := (LayoutMorph newRow separation: 5) name: #InnerRow;
		color: Color red.
	innerRow
		addMorph: (ColoredBoxMorph new name: #Box1)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (ColoredBoxMorph new name: #Box2)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (ColoredBoxMorph new name: #Bar)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: innerRow
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 offAxisEdgeWeight: #center);
		addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 
		addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #Rect1)
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: LayoutAdjustingMorph new layoutSpec: (LayoutSpec fixedWidth: 5); 
		addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Rect2)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 250@130 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:32:29' prior: 50373971!
               example1b
"
Based on #example1, but using some ImageMorph instead of RectangleLikeMorph, so extent is not adjustable
	self example1b
"
| pane row |
pane := (LayoutMorph newColumn separation: 5)	name: #example1.
pane color: Color red.

row := LayoutMorph newRow name: #Row1.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #A)
		layoutSpec: (LayoutSpec fixedWidth: 10); 
	addMorph: (ImageMorph new name: #B);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #C)
		layoutSpec: (LayoutSpec proportionalWidth: 0.4);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #D)
		layoutSpec: (LayoutSpec proportionalWidth: 0.15);
	addMorph: (ColoredBoxMorph new color: (Color h: 60 s: 0.6 v: 0.6); name: #E)
		layoutSpec: (LayoutSpec fixedWidth: 20 fixedHeight: 20).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row2.
row
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color blue); name: #F)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8);
	addMorph: (ImageMorph new name: #G);
	addMorph: (ColoredBoxMorph new color: (Color h: 30 s: 0.6 v: 0.6); name: #H)
		layoutSpec: (LayoutSpec proportionalWidth: 0.2).
pane addMorph: row layoutSpec: LayoutSpec useAll.

row := (LayoutMorph newRow separation: 5) name: #Row3.
row
	color: Color red;
	addMorph: (ImageMorph new name: #J);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec  proportionalWidth: 0.5 fixedHeight: 40);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
pane addMorph: row layoutSpec: (LayoutSpec fixedHeight: 60).
pane position: 150@130 extent: 400@300.
pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:34:29' prior: 50374031!
                  example2
	"
	self example2
	"
	| pane row |
	pane := (LayoutMorph newColumn separation: 5)	name: #example2.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #A)
			layoutSpec: (LayoutSpec fixedWidth: 20 proportionalHeight: 0.8 offAxisEdgeWeight: #rightOrBottom);
		addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #B)
			layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #C)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 0.7 offAxisEdgeWeight: #center).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 200@180 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:34:47' prior: 50374062!
    example20
"
	self example20
"
| column |

column := (LayoutMorph newColumn separation: 5) name: #Column.
column
	color: Color red;
	addMorph: (ColoredBoxMorph new color: (Color h: 120 s: 0.6 v: 0.6); name: #J)
		layoutSpec: (LayoutSpec proportionalWidth: 0.8 fixedHeight: 20);
	addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #K)
		layoutSpec: (LayoutSpec fixedWidth: 40 proportionalHeight: 0.5);
	addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #L)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 30).
column position: 150@130 extent: 400@300.
column openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:35:19' prior: 50374085!
             example3
	"
	self example3
	"
	| pane row innerRow |
pane := (LayoutMorph newColumn separation: 5)	name: #example3.
	pane color: Color red.
	row := (LayoutMorph newRow separation: 5) name: #Row.
	innerRow := (LayoutMorph newRow separation: 5) name: #InnerRow;
		color: Color red.
	innerRow
		addMorph: (ColoredBoxMorph new name: #Box1)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (ColoredBoxMorph new name: #Box2)
			layoutSpec: (LayoutSpec fixedWidth: 10 fixedHeight: 10);
		addMorph: (ColoredBoxMorph new name: #Bar)
		layoutSpec: (LayoutSpec proportionalWidth: 1.0 fixedHeight: 10).
	row
		color: (Color h: 270 s: 0.2 v: 0.6);
		addMorph: innerRow
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 30 offAxisEdgeWeight: #center);
		addMorph: (ColoredBoxMorph new color: (Color h: 90 s: 0.6 v: 0.6); name: #Rect1)
			layoutSpec: (LayoutSpec proportionalWidth: 0.5 fixedHeight: 40 offAxisEdgeWeight: #leftOrTop);
		addMorph: (ColoredBoxMorph new color: (Color h: 150 s: 0.6 v: 0.6); name: #Rect2)
			layoutSpec: (LayoutSpec fixedWidth: 30 proportionalHeight: 1.0).
	pane addMorph: row layoutSpec: (LayoutSpec proportionalHeight: 0.9).
	pane position: 250@130 extent: 400@300.
	pane openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:35:39' prior: 50374126!
              example6
	"
	Useful example contributed by Ken Dickey
	All these should look the same, right? (mmmh this should be a test...)
	self example6
	"
| pane rect1 rect2 |
pane := LayoutMorph newRow separation: 5. "1"
pane addMorph: (LabelMorph contents: '1').

rect1 := ColoredBoxMorph new color: (Color lightOrange); 
	morphExtent: 20 @ 30.
pane addMorphFront: rect1.
rect2 := ColoredBoxMorph new color: (Color cyan); 
	morphExtent: 20 @ 30.
pane addMorphFront: rect2.
pane
	color: Color lightGreen;
	position: 120 @ 50 extent: 180 @ 100;
	openInWorld.

pane := LayoutMorph newRow separation: 5. "2"
pane addMorph: (LabelMorph contents: '2').

rect1 := ColoredBoxMorph new color: (Color lightOrange);
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane addMorph: rect1.
rect2 := ColoredBoxMorph new color: (Color cyan).
pane addMorph: rect2
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane
	color: Color lightGreen;
	position: 320 @ 50 extent: 180 @ 100;
	openInWorld.


pane := LayoutMorph newRow separation: 5. "3"
pane addMorph: (LabelMorph contents: '3').

rect1 := ColoredBoxMorph new color: (Color lightOrange).
pane addMorph: rect1 
         layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
rect2 := ColoredBoxMorph new color: (Color cyan);
	layoutSpec: (LayoutSpec  fixedWidth: 20 fixedHeight: 30 offAxisEdgeWeight: #center).
pane addMorph: rect2.
pane
	color: Color lightGreen;
	position: 520 @ 50 extent: 180 @ 100;
	openInWorld! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:37:00' prior: 16891050!
                   example7
	"
	Useful example contributed by Ken Dickey
	self example7
	"
	"============================================"
	| c colorHexValue colorName r w |
	w := SystemWindow new.
	r := LayoutMorph newRow separation: 30 @ 10.
	c := LayoutMorph newColumn separation: 20 @ 10.
	colorHexValue := LabelMorph contents:  'F97306'.
	colorName := LabelMorph contents: 'cornSilk'.

	r addMorph: colorHexValue.
	r addMorph: colorName.
	c addMorph: ColoredBoxMorph new.
	c addMorph: r.
	w addMorph: c .
	w openInWorld.
	"============================================"! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:37:15' prior: 50381613!
                       exampleEdgesColumn
	"Show 2 cases :1 useEdgeSpace true and 1 false"
	" self exampleEdgesColumn "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newColumn :: padding: (120 @ 40);  gap: 20.
	noEdge := self newColumn ::  padding: (0 @ 0);  gap: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 200; proportionalHeight: 0.8 minimum: 200.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 200; proportionalHeight: 0.5 minimum: 200.
	
	withEdge addMorph: (ColoredBoxMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (ColoredBoxMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (ColoredBoxMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (ColoredBoxMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !
!LayoutMorph class methodsFor: 'examples' stamp: 'jmv 9/11/2024 17:38:05' prior: 50381648!
                          exampleEdgesRow
	"Show 2 cases: 1 useEdgeSpace true and 1 false"
	" self exampleEdgesRow "
	| withEdge noEdge upSpec downSpec |
	withEdge := self newRow :: padding: (120 @ 40);  gap: 20.
	noEdge := self newRow :: padding: (0 @ 0);  gap: 20.
	upSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 0.
	upSpec proportionalWidth: 0.8 minimum: 100; proportionalHeight: 0.8 minimum: 100.
	downSpec := LayoutSpec keepMorphExtent :: offAxisEdgeWeight: 1.
	downSpec proportionalWidth: 0.5 minimum: 100; proportionalHeight: 0.5 minimum: 100.
	
	withEdge addMorph: (ColoredBoxMorph new :: color: Color blue;  layoutSpec: upSpec).
	noEdge addMorph: (ColoredBoxMorph new :: color: Color blue;  layoutSpec: upSpec).
	withEdge addMorph: (LabelMorph new :: contents: 'WITH Padding').
	noEdge addMorph: (LabelMorph new :: contents: 'withOUT Padding').
	withEdge addMorph: (ColoredBoxMorph new :: layoutSpec: downSpec).
	noEdge addMorph: (ColoredBoxMorph new ::  layoutSpec: downSpec).
	
	withEdge openInWorld.
	noEdge openInWorld.! !
!StringRequestMorph methodsFor: 'initialization' stamp: 'jmv 9/11/2024 17:21:47' prior: 16960913!
addTitle: aString
	| titleMorph s pp w |
	titleMorph := ColoredBoxMorph new.
	titleMorph color: Theme current menuTitleBar.
	pp := `8@2`.
	aString asPlainString linesDo: [ :line |
		s := LabelMorph new
			contents: line;
			font: (Preferences at: #standardMenuFont) bold.
		titleMorph addMorphBack: s position: pp.
		pp := pp + (0@(s morphHeight+2)) ].
	w := titleMorph submorphs inject: 0 into: [ :prev :each |
		prev max: each morphWidth ].
	titleMorph morphExtent: (w + 24) @ (pp y).
	self addMorphKeepMorphHeight: titleMorph.
	^titleMorph morphExtent! !
!MenuMorph methodsFor: 'construction' stamp: 'jmv 9/11/2024 17:24:15' prior: 16893844!
                           addStayUpIcons
	| closeButton pinButton w buttonHW |
	(Preferences at: #optionalButtons) ifFalse: [ ^self ].
	(self valueOfProperty: #hasStayUpIcons ifAbsent: [ false ])
		ifTrue: [
		 	self removeProperty: #needsStayUpIcons.
			^self ].
	titleMorph ifNil: [
		"Title not yet there. Flag ourself, so this method is called again when adding title."
		self setProperty: #needsStayUpIcons toValue: true.
		^ self].
	buttonHW := Theme current titleBarButtonsExtent x.
	closeButton := PluggableButtonMorph model: self action: #delete.
	closeButton iconDrawSelector: #drawCloseIcon; color: `Color transparent`.
	pinButton := PluggableButtonMorph model: self action: #stayUp.
	pinButton iconDrawSelector: #drawPushPinIcon; color: `Color transparent`.
	w := (titleMorph hasSubmorphs ifTrue: [ titleMorph firstSubmorph morphWidth ] ifFalse: [ 0 ]) + (buttonHW*2).
	self addMorphFront: 
		(LayoutMorph newRow
			"Make room for buttons"
			morphExtent: w @ (titleMorph morphHeight max: buttonHW * 12 // 10);
			color: `Color transparent`;
			addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedWidth: buttonHW//10;
			addMorph: (closeButton layoutSpec: (LayoutSpec fixedWidth: buttonHW fixedHeight: buttonHW));
			addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedWidth: buttonHW//7;
			addMorph: titleMorph proportionalWidth: 1;
			addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedWidth: buttonHW//7;
			addMorph: pinButton fixedWidth: buttonHW;
			addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedWidth: buttonHW//3).

	self setProperty: #hasStayUpIcons toValue: true.
	self removeProperty: #needsStayUpIcons! !
!MenuMorph methodsFor: 'construction' stamp: 'jmv 9/11/2024 17:24:56' prior: 16893899!
              addTitle: aString
	"Add a title line at the top of this menu Make aString its initial 
	contents.  
	If aSelector is not nil, then periodically obtain fresh values for its 
	contents by sending aSelector to aTarget.."

	| s pp w newMorph |
	
	newMorph := ColoredBoxMorph new.
	newMorph color: Theme current menuTitleBar.
	pp := `8@2`.
	aString asPlainString linesDo: [ :line | | font |
		font := Preferences at: #standardMenuFont.
		s := LabelMorph new
			contents: line;
			font: (titleMorph
				ifNil: [ font bold ]
				ifNotNil: [ font italic ])..
		newMorph addMorphBack: s position: pp.
		pp := pp + (0@(s morphHeight+2)) ].
	w := newMorph submorphs inject: 0 into: [ :prev :each |
		prev max: each morphWidth ].
	newMorph morphExtent: (w + 16) @ (pp y).
	titleMorph
		 ifNil: [
			titleMorph := newMorph.
			self addMorphFront: titleMorph ]
		ifNotNil: [ self addMorphBack: newMorph ].
	
	(self hasProperty: #needsStayUpIcons) ifTrue: [ self addStayUpIcons ]! !
!ResizeMorph methodsFor: 'events' stamp: 'jmv 9/11/2024 17:38:56' prior: 16940545 overrides: 16904196!
                 mouseButton1Down: aMouseButtonEvent localPosition: localEventPosition
	from := self toGridPoint: localEventPosition.
	outlineMorph := BorderedBoxMorph new
		borderColor: `Color black`;
		color: `Color transparent`;
		openInWorld;
		hide.
	self selectTo: localEventPosition! !
!ScrollBar methodsFor: 'initialization' stamp: 'jmv 9/11/2024 17:25:42' prior: 50375971!
                   initializeSlider
	"initialize the receiver's slider"

	sliderShadow := ColoredBoxMorph new.
	self addMorph: sliderShadow.
	sliderShadow hide.
		
	slider := DraggableButtonMorph new.
	slider actionTarget: self.
	slider grabSelector: #sliderGrabbedAt:.
	slider dragSelector: #scrollTo:.
	slider action: #sliderReleased.
	self addMorph: slider.

	self computeSlider! !
!CodePackageListWindow methodsFor: 'GUI building' stamp: 'jmv 9/11/2024 17:26:17' prior: 50332557!
               buildMorphicWindow
	" 
	CodePackageListWindow open: CodePackageList new
	"
	| names fileNames namesPane fileNamesPane 
	upperRow  description summary labelBackground |
	labelBackground := Theme current background.
	
	names := PluggableListMorph
		withModel: model 
		listGetter: #packageNames
		indexGetter: #selectionIndex
		indexSetter: #selectionIndex:.
	namesPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: ' Package Name');
		addMorphUseAll: names.

	fileNames := PluggableListMorph
		withModel: model 
		listGetter: #packageFullNames
		indexGetter: #selectionIndex
		indexSetter: #selectionIndex:.
	fileNames alwaysHideVerticalScrollbar.
	fileNamesPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: ' File Name');
		addMorphUseAll: fileNames.

	upperRow := LayoutMorph newRow.
	upperRow
		addMorph: namesPane proportionalWidth: 0.4;
		addAdjusterAndMorph: fileNamesPane proportionalWidth: 0.6.
		
	description := (TextModelMorph
		textProvider: model
		textGetter: #description 
		textSetter: #description:) emptyTextDisplayMessage: 'Please enter a description for this package'.

	summary := (TextModelMorph
		textProvider: model
		textGetter: #summary) emptyTextDisplayMessage: 'Package summary (No package selected?)'.
	
	names scrollSiblings: {fileNames}.
	fileNames scrollSiblings: {names}.

	self layoutMorph
		addMorph: upperRow proportionalHeight: 0.6;
		addAdjusterAndMorph: self buildButtonPane fixedHeight: Theme current buttonPaneHeight;
		addAdjusterAndMorph: summary fixedHeight: 60;
		addAdjusterAndMorph: description proportionalHeight: 0.25;
		addAdjusterAndMorph: self buildRequirementsPane proportionalHeight: 0.15.
	self setLabel: 'Installed Packages'! !
!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 9/11/2024 17:26:55' prior: 50337370!
                              buildMorphicWindow
	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."

	| changeSetList classList changeSetListPane classListPane
	  messageList upperPanes labelBackground |
	labelBackground := Theme current background.
	model myChangeSet ifNil: [
		"Or whatever was last changed, or is top of list, or whatever"
		model myChangeSet: ChangeSet changeSetForBaseSystem ].

	changeSetList := (PluggableListMorphByItem
				withModel: model
				listGetter: #changeSetList
				indexGetter: #currentChangeSetName
				indexSetter: #showChangeSetNamed:)
					menuNshortcutsKey: #changeSetListMenuSpec;
					autoDeselect: false.
	changeSetListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Change Set name');
		addMorphUseAll: changeSetList.

	classList := (PluggableListMorphByItem
				withModel: model
				listGetter: #classList
				indexGetter: #currentClassName
				indexSetter: #currentClassName:)
					menuNshortcutsKey: #classListMenuSpec.
	classListPane := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Classes');
		addMorphUseAll: classList.

	upperPanes := LayoutMorph newRow.
	upperPanes
		addMorph: changeSetListPane proportionalWidth: 0.6;
		addAdjusterAndMorph: classListPane proportionalWidth: 0.4.
	
	messageList := (PluggableListMorphByItem
				withModel: model
				listGetter: #messageList
				indexGetter: #currentSelector
				indexSetter: #currentSelector:)
					menuNshortcutsKey: #messageListMenuSpec.
	messageList := LayoutMorph newColumn
		color: labelBackground;
		addMorph: (ColoredBoxMorph new color: `Color transparent`) fixedHeight: 4;
		addMorphKeepMorphHeight: (LabelMorph new contents: 'Methods');
		addMorphUseAll: messageList.

	self layoutMorph
		addMorph: upperPanes proportionalHeight: 0.25;
		addAdjusterAndMorph: messageList proportionalHeight: 0.2;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.55.

	self setLabel: model labelString! !

BorderedBoxMorph removeSelector: #noBorder!

!methodRemoval: BorderedBoxMorph #noBorder stamp: 'Install-6708-RemoveDirectUsersOf-BoxedMorph-JuanVuletich-2024Sep11-17h13m-jmv.001.cs.st 9/12/2024 11:39:27'!
noBorder
	self borderWidth: 0.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6708-RemoveDirectUsersOf-BoxedMorph-JuanVuletich-2024Sep11-17h13m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6708] on 11 September 2024 at 5:52:25 pm'!
!BorderedBoxMorph commentStamp: '<historical>' prior: 50379718!
                            BorderedBoxMorph adds customizable border, see instanceVariables borderWidth and borderColor. Subclasses can use a variety of border styles: simple, inset, raised. It also adds padding, a separation between the border and inner contents. Some subclasses may ignore either border or padding.!
!BoxedMorph commentStamp: '<historical>' prior: 16796353!
  Hierarchy for morphs that are rectangle like, and that occupy an area that can be specified as a Rectangle. This means that, besides being of rectangular shape, sides are aligned with local coordinate axes. Including rectangles with rounded corners and such. The idea is that the 'extent' ivar is all that's needed to establish our dimensions and shape.

Subclasses can add things like 'roundedCornerRadius' or such.

Note: Answers false to #submorphsMightProtrude. This means that the framework assumes there is no need to check for any nested submorph drawing outside our bounds. This enables several optimizations.

If you need a box like morph that can hold submorphs that can protrude if (i.e. submorphs may extend beyond box bounds) DONT subclass from here. Create instead a new subclass of PlacedMorph.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6709-ClassCommentsTweaks-JuanVuletich-2024Sep11-17h48m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6709] on 11 September 2024 at 5:56:06 pm'!

ColoredBoxMorph subclass: #LayoutAdjustingMorph
	instanceVariableNames: 'hand '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

!classDefinition: #LayoutAdjustingMorph category: #'Morphic-Layouts' stamp: 'Install-6710-LayoutAdjustingMorph-subclassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-17h55m-jmv.001.cs.st 9/12/2024 11:39:27'!
ColoredBoxMorph subclass: #LayoutAdjustingMorph
	instanceVariableNames: 'hand'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Layouts'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6710-LayoutAdjustingMorph-subclassOf-ColoredBoxMorph-JuanVuletich-2024Sep11-17h55m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6709] on 12 September 2024 at 10:09:05 am'!
!TextParagraphMorph methodsFor: 'initialization' stamp: 'hlsf 9/12/2024 10:06:26' overrides: 50380217!
       defaultPadding
	^ `0@0`! !
!TextParagraphMorph methodsFor: 'geometry' stamp: 'hlsf 9/12/2024 10:04:01' prior: 50380871!
        reflowAndMaybeResize
	"Reflow text. If appropriate, adjust height or extent."

	| newHeight |
	textComposition
		extentForComposing: self extentForComposing;
		composeAll.
	setsHeightOnContent ifTrue: [
		newHeight := textComposition usedHeight + (2 * self interiorOrigin y)
				max: self minimumExtent y.
		extent y = newHeight ifFalse: [
			extent := extent x @ newHeight.
			self redrawNeeded.
			owner ifNotNil: [
				owner someSubmorphPositionOrExtentChanged ]].
		(owner is: #ScrollPane) ifTrue: [
			owner
				updateScrollBarsBounds;
				setScrollDeltas ].
		^self ].
	shrinkFromExtent ifNotNil: [
		extent := textComposition usedExtent + (2 * self interiorOrigin) ].
	self redrawNeeded.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6711-TextParagraphMorph-HilaireFernandes-2024Sep12-10h04m-hlsf.001.cs.st----!

'From Cuis7.1 [latest update: #6711] on 12 September 2024 at 8:37:55 am'!
!ProgressBarMorph methodsFor: 'as yet unclassified' stamp: 'jmv 9/12/2024 08:36:21' overrides: 50380217!
                      defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!PluggableMorph methodsFor: 'initialization' stamp: 'jmv 9/12/2024 08:35:36'!
  defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`! !
!WorldMorph methodsFor: 'caching' stamp: 'jmv 9/12/2024 08:37:19' prior: 50378820 overrides: 16921308!
         releaseCachedState
	super releaseCachedState.
	self cleanseStepList.
	canvas ifNotNil: [
		canvas unpinAndFreeMemory ].
	canvas := nil.
	damageRecorder := nil.
	activeHand releaseCachedState.! !

WorldMorph removeSelector: #handsReverseDo:!

!methodRemoval: WorldMorph #handsReverseDo: stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:27'!
handsReverseDo: aBlock

	^ hands reverseDo: aBlock!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
| ui oldAuthor |
ui := UISupervisor ui.
oldAuthor := Utilities authorInitialsPerSe.
oldAuthor ifNil: [ Utilities setAuthorName: 'update 6712' initials: 'update 6712' ].
(nil confirm: 'Update 6712: After this update,
we need to restart the User Interface process.
Please do World / Changes... / [Install New Updates] again.

Select "yes" to continue.
')
	ifFalse: [ self halt ].
[
	Delay forSeconds: 0.1 :: wait.
	ChangeSet installing: '6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st' do: [
		ClassBuilder beSilentDuring: [
			ColoredBoxMorph subclass: #InnerPluggableMorph
				instanceVariableNames: ''
				classVariableNames: ''
				poolDictionaries: ''
				category: 'Morphic-Widgets'.
			BorderedBoxMorph subclass: #PluggableMorph
				instanceVariableNames: 'model menuNshortcutsKey'
				classVariableNames: ''
				poolDictionaries: ''
				category: 'Morphic-Widgets'.
			PluggableMorph allSubInstancesDo: [ :m |
				m instVarNamed: 'padding' put: 0@0 ].
			BoxMorph subclass: #HandMorph
				instanceVariableNames: 'mouseFocus keyboardFocus mouseClickState mouseOverHandler lastMouseEvent hasChanged savedPatch lastEventBuffer lastKeyDownValue lastMouseEventTime prevFullBounds grabMorphData lastPosition'
				classVariableNames: ''
				poolDictionaries: ''
				category: 'Morphic-Kernel'.
			ColoredBoxMorph subclass: #PasteUpMorph
				instanceVariableNames: 'backgroundImage backgroundImageData'
				classVariableNames: ''
				poolDictionaries: ''
				category: 'Morphic-Kernel'.
			PasteUpMorph subclass: #WorldMorph
				instanceVariableNames: 'activeHand canvas damageRecorder stepList lastCycleTime alarms lastAlarmTime deferredUIMessages drawingFailingMorphs waitDelay pause lastCycleHadAnyEvent taskbar'
				classVariableNames: 'ScaleFactor'
				poolDictionaries: ''
				category: 'Morphic-Kernel' ]].
	[ 'Installed ChangeSet: 6712. Reshaped main Morphic classes.' print.
	  'Please do World / Changes... / [Install New Updates] again.' print ] forkAt: 38.
	oldAuthor ifNil: [ Utilities clearAuthor ].
	UISupervisor spawnNewMorphicProcessFor: ui.
] forkAt: 39.
UISupervisor stopUIProcess.
!

!classDefinition: #InnerPluggableMorph category: #'Morphic-Widgets' stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:29'!
ColoredBoxMorph subclass: #InnerPluggableMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #PluggableMorph category: #'Morphic-Widgets' stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:30'!
BorderedBoxMorph subclass: #PluggableMorph
	instanceVariableNames: 'model menuNshortcutsKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Widgets'!

!classDefinition: #HandMorph category: #'Morphic-Kernel' stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:30'!
BoxMorph subclass: #HandMorph
	instanceVariableNames: 'mouseFocus keyboardFocus mouseClickState mouseOverHandler lastMouseEvent hasChanged savedPatch lastEventBuffer lastKeyDownValue lastMouseEventTime prevFullBounds grabMorphData lastPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #PasteUpMorph category: #'Morphic-Kernel' stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:30'!
ColoredBoxMorph subclass: #PasteUpMorph
	instanceVariableNames: 'backgroundImage backgroundImageData'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

!classDefinition: #WorldMorph category: #'Morphic-Kernel' stamp: 'Install-6712-Hand-World-Pluggables-NewHierarchy-JuanVuletich-2024Sep12-08h32m-jmv.006.cs.st 9/12/2024 11:39:30'!
PasteUpMorph subclass: #WorldMorph
	instanceVariableNames: 'activeHand canvas damageRecorder stepList lastCycleTime alarms lastAlarmTime deferredUIMessages drawingFailingMorphs waitDelay pause lastCycleHadAnyEvent taskbar'
	classVariableNames: 'ScaleFactor'
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

----QUIT----(12 September 2024 11:39:48) Cuis7.1-6668-32.image priorSource: 1489404!

----STARTUP---- (12 September 2024 11:39:57) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6668-32.image!


'From Cuis7.1 [latest update: #6712] on 12 September 2024 at 11:32:08 am'!
!WorldMorph class methodsFor: 'instance creation' stamp: 'jmv 9/12/2024 11:31:55' prior: 50379056!
              newWorld
	"
[
	UISupervisor stopUIProcess.
	UISupervisor spawnNewMorphicProcessFor: WorldMorph newWorld
] fork.
	"
	| w |
	w := self new.
	w color: (Color r: 0.167 g: 0.344 b: 0.629).
	w position: `0@0` extent: Display extent.
	w activeHand privateOwner: w.
	^w! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6713-newWorld-fix-JuanVuletich-2024Sep12-11h31m-jmv.001.cs.st----!

----QUIT----(12 September 2024 11:40:01) Cuis7.1-6713-32.image priorSource: 1670548!

----STARTUP---- (10 October 2024 15:39:34) as C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\Cuis7.1-6713-32.image!


'From Cuis7.1 [latest update: #6712] on 12 September 2024 at 10:07:18 am'!
!PluggableScrollPane commentStamp: 'jmv 9/12/2024 10:06:27' prior: 16924493!
 Allows viewing just part of a larger Morph. The scroll values vary from 0.0 to 1.0.

| p |
p := PluggableScrollPane new.
p scroller: BoxMorph new.
p openInWorld.

| p |
p := PluggableScrollPane new.
p scroller: Sample01Star new.
p openInWorld.!
!MethodInCallStackToBecomeInvalid methodsFor: 'exception handling' stamp: 'jmv 9/12/2024 09:54:14' prior: 50334494 overrides: 16856165!
   defaultAction
	"defaultAction aborts the become or clas reshape.
	See references to MethodInCallStackToBecomeInvalid.
	To go ahead with the become or class reshape, do something like:
	[
		BorderedBoxMorph subclass: #PluggableMorph
			instanceVariableNames: 'model menuNshortcutsKey newIvarThatBreaksRunningMethods'
			classVariableNames: ''
			poolDictionaries: ''
			category: 'Morphic-Widgets'.
	] on: MethodInCallStackToBecomeInvalid do: [ :ex | ex resume: true ]
	"
	self resume: false! !
!ClassDescription methodsFor: 'instance variables' stamp: 'jmv 9/12/2024 09:54:29' prior: 16819907!
              allInstVarNamesEverywhere
	"Answer the set of inst var names used by the receiver, all superclasses, and all subclasses"

	| aList |
	aList := OrderedCollection new.
	(self allSuperclasses , self withAllSubclasses asOrderedCollection) do:
		[:cls | aList addAll: cls instVarNames].
	^ aList asSet

	"BorderedBoxMorph allInstVarNamesEverywhere"! !
!Morph methodsFor: 'geometry services' stamp: 'jmv 9/12/2024 10:04:38' prior: 16905308!
             collides: aMorph
	"Answer whether the pixels used by morphs touch at least at one place.
	Morphs not in the BoxMorph hierarchy should answer #true to #wantsContour,
	in order to use this service."

	privateDisplayBounds ifNil: [
		^false ].

	"Quick check with display bounds"
	aMorph displayFullBounds
		ifNil: [ ^false ]
		ifNotNil: [ :r |
			(self displayFullBounds
				ifNil: [ ^ false ]
				ifNotNil: [ :myFullBounds | myFullBounds intersects: r ]) ifFalse: [ ^false ]].

	"Precise check with contour, if available"
	(self valueOfProperty: #contour) ifNotNil: [ :contour | | contourTop contourBottom |
		contourTop := self valueOfProperty: #contourY0.
		contourBottom := self valueOfProperty: #contourY1.
		^ aMorph contourIntersects: contour top: contourTop bottom: contourBottom ].

	"If contour is not available, and both displayBounds overlap, answer true, as it is the best we can know."
	^ true! !
!Morph methodsFor: 'geometry services' stamp: 'jmv 9/12/2024 10:05:10' prior: 16905418!
                           coversPixel: worldPoint
	"Answer true if pixel worldPoint is covered by us (or a submorph of ours), even if we are not visible a it
	because of some other morph above us also covers it.

	WARNING: Might answer nil when we simply don't know. It is generally advisable to call this method only for
	morphs where the answer is not nil:
		- BoxMorphs. No special care needed. (Senders in the base Cuis image are of this kind).
		- Morphs drawn by VectorCanvas (i.e. they #requiresVectorCanvas). See notes below.
	
	Note: If your morph #requiresVectorCanvas, and depends on this general implementation, remember to 
	`removeProperty: #bitMask` whenever it becomes invalid due to changes in your morphs. You may consider
	using #ownsPixel: if appropriate, that doesn't require any maintenance and is cheaper (in cpu and memory).
	See #bitMask.

	See #ownsPixel:
	See #includesPixel:"

	self visible ifTrue: [
		"Expensive way for morphs with arbitrary shape in VectorGraphics.
		The base Cuis System doesn't use this.
		Use this in applications if the expense of maintaining #bitMask is worth it."
		self mainCanvas ifNotNil: [ :mainCanvas |
			mainCanvas canDoVectorGraphics ifTrue: [
				^(self bitMask pixelValueAt: worldPoint - self displayFullBounds topLeft) = 1 ]]].

	"If we don't know."
	^ nil.! !
!Morph methodsFor: 'geometry services' stamp: 'jmv 9/12/2024 10:05:20' prior: 16905490!
                    includesPixel: worldPoint
	"Answer true if the grabbing from the pixel argument pixel with the mouse should grab us:

	- Answer true if we own the pixel, i.e. we are the last morph drawn at worldPoint.

	- Some implementations (BoxMorph) may also answer true if we cover but don't own the pixel,
	meaning that some other morph was drawn later, covering us.

	- For other morphs, not BoxMorph, (i.e. they run this implementation), if VectorGraphics is not active,
	answer true for any point that lies within our bounds. If this is the case, consider using VectorGraphics: In addition to
	many other advantages, this method will always answer a strictly correct answer.

	Therefore, senders need to be aware that the answer is meaningful only when it is known that no other morph
	covers us. A common case is to find the topmost morph at some position. In that case, iterating front to back ensures
	that if any other morph covers us, it is found first.

	Note: This method is redefined by some subclasses. This implementation is only used for morphs drawn by VectorCanvas,
	either because the main canvas is a VectorCanvas, or because it is a HybridCanvas and we answer true to #requiresVectorCanvas.
	(See other implementors)

	Note: Also see #ownsPixel: and #coversPixel:"

	"Check if #ownsPixel:, if possible."
	self mainCanvas ifNotNil: [ :mainCanvas |
		mainCanvas canDoVectorGraphics ifTrue: [
			^ (mainCanvas morphIdAt: worldPoint) = self morphId ]].

	^ false.! !
!Morph methodsFor: 'geometry services' stamp: 'jmv 9/12/2024 10:05:36' prior: 16905539!
        isCloserThan: maxDistance toPixel: worldPoint
	"Answer true if our closest point to aPoint is less than aNumber pixels away.
	In target surface (i.e. Display) coordinates.
	Uses precise testing of the morph contour if available:
	Morphs not in the BoxMorph hierarchy should answer #true to #wantsContour in order to use this service.
	Note: Considers only the external border. Any inner pixel is considered 'inside' regardless of us being transparent there.
	Note: Cheaper than #coversAnyPixelCloserThan:to: . Doesn't use #bitMask. Doesn't require maintenance."

	| center contourTop contourBottom |
	privateDisplayBounds ifNil: [
		^false ].
	center := privateDisplayBounds center.
	"Quick checks: If not even within aNumber distance to display bounds, fail"
	(center y - worldPoint y) abs < (privateDisplayBounds height  // 2 + maxDistance) ifFalse: [
		^false ].
	(center x - worldPoint x) abs < (privateDisplayBounds width // 2 + maxDistance) ifFalse: [
		^false ].
	"Precise check with contour, if available"
	(self valueOfProperty: #contour) ifNotNil: [ :contour | | y0 y1 x0 x1 |
		contourTop := self valueOfProperty: #contourY0.
		contourBottom := self valueOfProperty: #contourY1.
		"Contour rows to consider are those within requested distance."
		y0 := worldPoint y - maxDistance max: contourTop.
		y1 := worldPoint y + maxDistance min: contourBottom.
		y0 to: y1 do: [ :y |
			x0 := (contour at: (y - contourTop) * 2 + 1) - maxDistance.
			x1 := (contour at: (y - contourTop) * 2 + 2) + maxDistance.
			"If a vertical line of 2*aNumber height centered on aPoint is inside the contour, quick exit"
			(worldPoint x between: x0 and: x1) ifTrue: [ ^true ].
			"Check if aPoint is close enough to contour"
			(x0@y - worldPoint) r < maxDistance ifTrue: [ ^true ].
			(x1@y - worldPoint) r < maxDistance ifTrue: [ ^true ]].
		"Not inside, not close enough to contour"
		^ false ].
	"If contour is not available, and aPoint is close enough to displayBounds, answer true, as it is the best we can know."
	^ true! !
!Morph methodsFor: 'geometry testing' stamp: 'jmv 9/12/2024 10:06:07' prior: 16905707!
     wantsContour
	"True if a morph requires the Canvas to update a #morphContour property on us.
	Any subclass might answer true, if it #requiresVectorCanvas.
	But if #requiresVectorCanvas is false, #contour can not be computed.
	This is not a problem, as #contour is useless for BoxMorph.
	
	Also see #bitMask"

	"^self requiresVectorCanvas and: [ self isOwnedByWorldOrHand ]"
	^false! !
!Morph methodsFor: 'stepping' stamp: 'jmv 9/12/2024 10:05:43' prior: 16906576 overrides: 16915328!
                            stepAt: millisecondSinceLast
	"Do some periodic activity. Use startStepping/stopStepping to start and stop getting sent this message. 
	The desired time between steps is specified by this morph's answer to the stepTime message.
	The millisecondSinceLast parameter gives the time elapsed since the previous step."
	"
	m := BoxMorph new.
	m color: Color random.
	m openInWorld.
	m morphPosition: 10@10.
	t := 0.
	m when: #morphicStep evaluate: [ :delta |
		t := t + delta.
		t < 10000
			ifTrue: [
				(m owner is: #HandMorph) ifFalse: [
					m morphPosition: 3@2 * t // 100 ]]
			ifFalse: [ m stopStepping ]].
	m startSteppingStepTime: 20.
	"
	self step.
	self triggerEvent: #morphicStep with: millisecondSinceLast! !
!PlacedMorph methodsFor: 'geometry' stamp: 'jmv 9/12/2024 10:06:20' prior: 16922074!
                              fitInto: aRectangle
	"Scale and position ourselves in such way that our #findFullBoundsInOwner are in aRectangle.
	BoxMorph, and maybe others will not scale, but resize, changing the actual extent."

	| currentBounds scale slackForAntiAliasing |
	currentBounds := self findFullBoundsInOwner.
	slackForAntiAliasing := 0.
	scale := (aRectangle width-slackForAntiAliasing / (currentBounds width-slackForAntiAliasing))
		min: (aRectangle height-slackForAntiAliasing / (currentBounds height-slackForAntiAliasing)).
	scale := scale asFloat.
	self scaleBy: scale.

	currentBounds := self findFullBoundsInOwner.
	self morphPosition: aRectangle origin - (currentBounds origin - self morphPosition) + (aRectangle extent - currentBounds extent // 2).! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6714-Cleanup-JuanVuletich-2024Sep12-09h54m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6714] on 12 September 2024 at 12:11:15 pm'!
!StringRequestMorph class methodsFor: 'instance creation' stamp: 'jmv 9/12/2024 12:01:00'!
      request: queryString
	"Create an instance of me whose question is queryString. Invoke it centered at the cursor, and answer the string the user accepts. Answer the empty string if the user cancels."
	"
	StringRequestMorph request: 'What is your favorite color?'
	"

	^ self request: queryString initialAnswer: '' orCancel: nil! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6715-StringRequestMorph-request-JuanVuletich-2024Sep12-12h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6715] on 12 September 2024 at 12:23:55 pm'!
!BorderedBoxMorph methodsFor: 'drawing' stamp: 'jmv 9/12/2024 12:23:42' prior: 50380265 overrides: 50381746!
                              drawOn: aCanvas
	"A canvas is already set with a proper transformation from our coordinates to those of the Canvas target."

	aCanvas
		fillRectangle: self localBounds
		color: color
		borderWidth: borderWidth
		borderStyleSymbol: #simple
		baseColorForBorder: borderColor.

	"Make the existence of the normal invisible padding evident.
	This is usually not done, and subclasses may assume this inherited behavior.
	The following code is only included for throw-away experimentation."
"
	aCanvas
		frameRectangle: (self localBounds insetBy: borderWidth)
		borderWidth: padding x
		color: `Color lightGreen alpha: 0.5`.
	aCanvas
		frameRectangle: (self localBounds insetBy: borderWidth)
		borderWidth: padding y
		color: `Color lightGreen alpha: 0.5`.
"! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6716-tweak-JuanVuletich-2024Sep12-12h23m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6716] on 12 September 2024 at 3:45:55 pm'!
!Parser methodsFor: 'expression types' stamp: 'jmv 9/12/2024 15:44:03' prior: 16919964!
                               chain
	" {: message} => more messages"

	self advance.
	"The following three lines implement double colon chains"
	hereType == #colon ifFalse: [self expected: 'Chain'].
	hereMark-prevMark = 1 ifFalse: [self expected: 'Chain'].
	self advance.

	(self messagePart: 3 repeat: true) ifFalse: [self expected: 'Chain'].
	hereType == #semicolon ifTrue: [self cascade].
	hereType == #colon ifTrue: [self chain]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6717-ChainOperator-dontAllowSpaceBetweenColons-JuanVuletich-2024Sep12-15h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6717] on 13 September 2024 at 11:35:22 am'!
!SHParserST80 methodsFor: 'parse' stamp: 'jmv 9/13/2024 11:32:52' prior: 16942210!
                             parseBlockTemporaries

	currentToken = '||' "Empty temp declaration without whitespace"
		ifTrue: [ ^self scanPast: #blockTempBar ].

	currentTokenFirst = $| 
		ifTrue: [
			self scanPast: #blockTempBar.
			[self isName] 
				whileTrue: [self scanPast: #blockPatternTempVar].
			self failUnless: currentToken = '|'.
			self scanPast: #blockTempBar]! !
!SHParserST80 methodsFor: 'parse' stamp: 'jmv 9/13/2024 11:33:12' prior: 16942412!
             parseMethodTemporaries

	currentToken = '||' "Empty temp declaration without whitespace"
		ifTrue: [ ^self scanPast: #methodTempBar ].

	currentTokenFirst = $| 
		ifTrue: [
			self scanPast: #methodTempBar.
			[self isName] 
				whileTrue: [self scanPast: #patternTempVar].
			self failUnless: currentToken = '|'.
			self scanPast: #methodTempBar]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6718-Shout-EmptyTempDeclarationsWithoutAnyWhitespace-JuanVuletich-2024Sep13-11h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6717] on 13 September 2024 at 11:39:09 am'!
!SHParserST80 methodsFor: 'parse' stamp: 'jmv 9/13/2024 11:38:10' prior: 16942516!
              parseStatementListForBraceArray
	"same as parseStatementList, but does not allow empty statements e.g {...$a...}.
	A single terminating . IS allowed e.g. {$a.} "

	
	[currentTokenFirst ~= $} ifTrue: [self parseExpression].
	currentTokenFirst = $.] 
		whileTrue: [self scanPast: #statementSeparator]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6719-Shout-BraceArraysCantReturn-JuanVuletich-2024Sep13-11h35m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6719] on 14 September 2024 at 3:51:01 pm'!
!BorderedBoxMorph methodsFor: 'initialization' stamp: 'jmv 9/14/2024 15:45:01' prior: 50380217!
       defaultPadding
	"Answer the default inner padding for the receiver.
	Redefine this method for a different initial padding in your morphs."

	^ `0@0`! !
!ImageMorph class methodsFor: 'instance creation' stamp: 'jmv 9/14/2024 15:47:29' prior: 50380717 overrides: 16787725!
                 new
	^super new
		image: self defaultForm.! !

TileResizeMorph removeSelector: #defaultPadding!

!methodRemoval: TileResizeMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

TextParagraphMorph removeSelector: #defaultPadding!

!methodRemoval: TextParagraphMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	^ `0@0`!

PluggableMorph removeSelector: #defaultPadding!

!methodRemoval: PluggableMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

LabelMorph removeSelector: #defaultPadding!

!methodRemoval: LabelMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

ImageMorph removeSelector: #defaultPadding!

!methodRemoval: ImageMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

LayoutMorph removeSelector: #defaultPadding!

!methodRemoval: LayoutMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

ProgressBarMorph removeSelector: #defaultPadding!

!methodRemoval: ProgressBarMorph #defaultPadding stamp: 'Install-6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st 10/10/2024 15:39:34'!
defaultPadding
	"answer the default inner padding for the receiver"
	^ `0@0`!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6720-MakeDefaultPaddingZero-JuanVuletich-2024Sep14-15h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6719] on 14 September 2024 at 3:57:44 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 9/14/2024 15:56:19' prior: 50378536!
knownInitialsAndNames
	"This list could include people who hasn't contributed code to the Cuis image, but to some optional package."
"
| all ok |
all := Smalltalk allContributors asSet.
ok := (Smalltalk knownInitialsAndNames collect: [ :pair | pair first ]) asSet.
(all copyWithoutAll: ok) print

		initials         				name"
^ #(
	#('ab' 						'Alexandre Bergel')
	#('abc' 						'Colin Putney')
	#('acg' 						'Andrew C. Greenberg')
	#('ads' 						'Adam Spitz')
	#('AFi' 						'Alain Fischer')
	#('ajh' 						'Anthony Hannan')
	#('al' 						'Adrian Lienhard')
	#('and' 						'Alan Dao')
	#('aoy' 						'Andres Otaduy')
	#('apb' 						'Andrew P. Black')
	#('ar' 						'Andreas Raab')
	#('asm' 						'Alejandro Magistrello')
	#('avi' 						'Avi Bryant')
	#('AY'						'Angel Yan')
	#('BAP'						'Barry Perryman')
	#('BenComan' 						'Ben Coman')
	#('bf' 						'Bert Freudenberg')
	#('BG' 						'Boris Gaertner')
	#('bgs' 						'Boris G. Shingarov')
	#('BJP' 						'Bijan Parsia')
	#('bkv' 						'Brent Vukmer')
	#('bolot' 						'Bolot Kerimbaev')
	#('bp' 						'Bernhard Pieber')
	#('BP' 						'Brent Pinkney') 
	#('brp' 						'Brent Pinkney')
	#('cbc' 						'Chris Cunningham')
	#('cbr'						'Casey Ransberger')
	#('ccn' 						'Chris Norton')
	#('chaider'						'Christian Haider')
	#('cmm' 						'Chris Muller')
	#('crl' 						'Craig Latta')
	#('cwp' 						'Colin Putney')
	#('das' 						'David A Smith')
	#('db' 						'Douglas Brebner')
	#('dc' 						'Damien Cassou')
	#('dew' 						'Doug Way')
	#('DF'						'David Faitelson')
	#('dgd' 						'Diego Gomez Deck')
	#('dhn'	 					'Dan Norton')
	#('dhhi' 						'Dan Ingalls')
	#('di' 						'Dan Ingalls')
	#('djp' 						'David J. Pennell')
	#('dkh'						'Dale Henrichs')
	#('DKL'						'Daniel K Lyons')
	#('DM' 						'Duncan Mak')
	#('DSG'						'David Graham')
	#('DSM' 						'Duane Maxwell')
	#('dtl' 						'Dave Lewis')
	#('dvf'	 					'Daniel Vainsencher')
	#('eat' 						'Eric Arseneau Tremblay')
	#('EB'						'Eric Brandwein')
	#('eem'						'Eliot Emilio Miranda')
	#('eliot'						'Eliot Emilio Miranda')
	#('efc' 						'Eddie Cottongim')
	#('em' 						'Ernest Micklei?')
	#('emm' 						'Ernest Micklei')
	#('Ez3' 						'Ezequiel Birman')
	#('fbs' 						'Frank Shearar')
	#('FBS' 						'Frank Shearar')
	#('fc' 						'Frank Caggiano')
	#('fcs' 						'Frank Sergeant')
	#('FernandoOlivero' 						'Fernando Olivero')
	#('FernanodOlivero' 						'Fernando Olivero')
	#('FGJ'						'Fernando Gasperi Jabalera')
	#('fgz'						'Felipe Zak')
	#('FJG'				 		'Facundo Javier Gelatti')
	#('GabrielOmarCotelli' 						'Gabriel Omar Cotelli')
	#('GC' 						'Gast√≥n Caruso')
	#('gera' 						'Gerardo Richarte')
	#('gh' 						'Goran Krampe (nee Hultgren)')
	#('gk' 						'Goran Krampe (nee Hultgren)')
	#('gm' 						'German Morales')
	#('go' 						'Georg Gollmann')
	#('gsa' 						'German Arduino')
	#('HAW' 						'Hernan Wilkinson')
	#('HB' 						'Hari Balaraman')
	#('hjh' 						'Hannes Hirzel')
	#('hlsf' 						'Hilaire Fernandes')
	#('hmm' 						'Hans-Martin Mosner')
	#('hsj' 						'Henrik Sperre Johansen')
	#('Igor.Stasenko' 						'Igor Stasenko')
	#('ikp' 						'Ian Piumarta')
	#('jar' 						'Jaromir Matas')
	#('Jb' 						'Jean Baptiste Arnaud')
	#('jcg' 						'Joshua Gargus')
	#('JCM'						'Juan Cruz Montero')
	#('jdr' 						'Javier Diaz-Reinoso')
	#('je' 						'Joern Eyrich')
	#('jf' 						'Julian Fitzell')
	#('JF' 						'Julian Fitzell')
	#('jfr' 						'Jon Raiford')
	#('jhm' 						'John Maloney')
	#('jk'						'Jonathan Kelly')
	#('jlb' 						'Jim Benson')
	#('jm' 						'John Maloney')
	#('jmb' 						'Hans Baveco')
	#('JMG'						'Jeff Gonis')
	#('JMM' 						'John McIntosh')
	#('jmv' 						'Juan Vuletich')
	#('JMV' 						'Juan Vuletich')
	#('JO'						'Javier Olaechea')
	#('jp' 						'Joseph Pelrine')
	#('jrm' 						'John-Reed Maffeo')
	#('jrp' 						'John Pierce')
	#('jsp' 						'Jeff Pierce')
	#('kdpm' 						'Kevin P√©rez Machado')
	#('KenD' 						'Ken Dickey')
	#('kfr' 						'Karl Ramberg')
	#('KLC'			 			'Ken Causey')
	#('KLG'			 			'Gerald Klix')
	#('kph'						'Keith Hodges')
	#('KTT' 						'Kurt Thams')
	#('laza' 						'Alexander Lazarevic')
	#('LC' 						'Leandro Caniglia')
	#('len' 						'Luciano Esteban Notarfrancesco')
	#('lpc'						'Laura Perez Cerrato')
	#('lr' 						'Lukas Renggli')
	#('Lukas Renggli' 						'Lukas Renggli')
	#('ls' 						'Lex Spoon')
	#('md' 						'Marcus Denker')
	#('MarcusDenker' 						'Marcus Denker')
	#('marcus.denker' 						'Marcus Denker')
	#('mdr' 						'Mike Rutenberg')
	#('MEGL' 						'MarceloLamperti')
	#('mga' 						'Markus Galli')
	#('MGD'						'Mat√≠as Dinota')
	#('MH'						'Mat√≠as Halperin')
	#('mha' 						'Michael Haupt')
	#('mir' 						'Michael Rueger')
	#('mjg' 						'Mark Guzdial')
	#('mk'	 					'Matej Kosik')
	#('MM'	 					'Mariano Montone')
	#('mnqpr'	 					'Szabolcs Komaromi')
	#('MPH'	 					'Michael Hewner')
	#('mpw' 						'Marcel Weiher')
	#('MPW' 						'Marcel Weiher')
	#('mrm' 						'Martin McClure')
	#('mtf' 						'Matthew Fulmer')
	#('mu' 						'Masashi Umezawa')
	#('nb' 						'Naala Brewer')
	#('nice'					 	'Nicolas Cellier')
	#('nk' 						'Ned Konz')
	#('NM' 						'Nicola Mingotti')
	#('NMS'						'Nicol√°s Sarfati')
	#('nop' 						'Jay Carlson')
	#('NS' 						'Nathanael Schaerli')
	#('ovv' 						'Octavio Valent√≠n Vives')
	#('panda' 						'Michael Rueger')
	#('pau'						'Paula Perez Bianchi')
	#('pb'						'Phil Bellalouna')
	#('PB'						'Paolo Belforte')
	#('PHK' 						'Peter Keeler')
	#('pmon'						'Paolo Montrasi')
	#('PM' 						'Peter Mikkelsen')
	#('Pmm' 						'Philippe Marschall')
	#('pnm' 						'Paul McDonough')
	#('r++' 						'Gerardo Richarte')
	#('raa' 						'Bob Arning')
	#('RAA' 						'Bob Arning')
	#('raok' 						'Richard A. O''Keefe')
	#('rca' 						'Russell Allen')
	#('reThink'				 		'Paul McDonough')
	#('rew' 						'Roger Whitney')
	#('rhi' 						'Robert Hirschfeld')
	#('RJT' 						'Ron Teitelbaum')
	#('RMV' 						'R. Mark Volkmann')
	#('RNG' 						'Nahuel Garbezza')
	#('rr' 						'Romain Robbes')
	#('rss' 						'Ron Spengler')
	#('rw' 						'Robert Withers')
	#('rww' 						'Robert Withers')
	#('Sames' 						'Samuel S. Shuster')
	#('sbw' 						'Stephan B. Wessels')
	#('sd' 						'Stephane Ducasse')
	#('SD' 						'Stephane Ducasse')
	#('sge' 						'Steve Elkins')
	#('sjd' 						'Santiago Jose Dandois')
	#('SLD'						'Steve Davies')
	#('sma' 						'Stefan Matthias Aust')
	#('sps' 						'Steven Swerling')
	#('SqR' 						'Andres Valloud')
	#('sqr' 						'Andres Valloud')
	#('Squeak1.0'						'Squeak 1.0, September 20, 1996')
	#('Squeak1.1'						'Squeak 1.1, September 23, 1996')
	#('Squeak1.2'						'Squeak 1.2, June 29, 1997')
	#('Squeak1.3'						'Squeak 1.3, January 16, 1998')
	#('sr' 						'Stephan Rudlof')
	#('ss'						'Sebastian Sujarchuk')
	#('SSC' 						'Santiago Salvador Cubino')
	#('SSS' 						'Samuel S. Shuster')
	#('ST-80'						'Smalltalk-80, version 2, of April 1, 1983')
	#('stephane.ducasse' 						'Stephane Ducasse')
	#('stephaneducasse'	 					'Stephane Ducasse')
	#('stp' 						'Stephen Travis Pope')
	#('sumim' 						'Masato Sumi')
	#('S.V.' 						'Sebasti√°n M. Vinto√±uke')
	#('svc' 						'Sven Van Caekenberghe')
	#('svp' 						'Stephen Vincent Pair')
	#('sw' 						'Scott Wallace')
	#('TAG' 						'Travis Griggs')
	#('tak' 						'Takashi Yamamiya')
	#('tao' 						'Tim Olson')
	#('TBn' 						'Torsten Bergmann')
	#('tfei' 						'The Fourth Estate, Inc.')
	#('tfel' 						'Tim Felgentreff')
	#('th' 						'Torge Husfeldt')
	#('tk' 						'Ted Kaehler')
	#('tlk' 						'Tom Koenig')
	#('tpr' 						'Tim Rowledge')
	#('TPR' 						'Tim Rowledge')
	#('TS' 						'Tom√°s Spognardi')
	#('tsl' 						'Thiago da Silva Lino')
	#('tween' 						'Andy Tween')
	#('ul' 						'Levente Uzonyi')
	#('vb' 						'Vassili Bykov')
	#('ward' 						'Ward Cunningham')
	#('wiz' 						'Jerome Peace')
	#('wod' 						'Bill Dargel')
	#('yo' 						'Yoshiki Ohshima')
	#('zz' 						'Serge Stinckwich'))! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6721-AddValentinAsKnownAuthor-JuanVuletich-2024Sep14-15h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6719] on 14 September 2024 at 2:41:24 am'!
!FileList methodsFor: 'volume list and pattern' stamp: 'ovv 9/14/2024 02:19:34'!
                               renameDirectory
	"Rename the currently selected directory"

	self request: 'New directory name?'
	initialAnswer: directory 	name
	verifying: [:newDirectoryName | newDirectoryName notEmpty and: [newDirectoryName ~= directory name]]
	do: [:newDirectoryName |
			[directory rename: newDirectoryName]
			on: Error
			do: [:anError | PopUpMenu inform: self renameErrorMsg].
			self changed: #topDirectoryWrappers
		].! !
!FileList methodsFor: 'private' stamp: 'ovv 9/14/2024 02:21:35'!
                               renameErrorMsg
	^'An error occurred while renaming the directory.
Perhaps a directory with that name already exists in this path?'! !
!FileListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'ovv 9/14/2024 02:41:07' prior: 50342614!
                      directoryTreeMenuSpec
	"Spec for the menu and shortcut keys for our tree nodes.
	See coment at Morph >> #getMenu
	"
	| showHiddenTogleAndLabel |
	showHiddenTogleAndLabel := model showHidden asMenuItemTextPrefix, 'show hidden folders and files'.
	^{
		{10. 'rename directory...'. 								nil. 	#model. 			#renameDirectory. 							#saveAsIcon.
			'Rename the selected directory'}.
		{20. 'delete directory...'. 								nil. 	#model. 			#deleteDirectory. 							#warningIcon.
			'Delete the selected directory'}.
		{30. 	showHiddenTogleAndLabel. 							nil. 	#model. 			#toggleShowHidden. 							nil.
			'show or hide files and directories that begin with a dot'}.
		{40. 	'show Cuis top as tree root'. 							nil. 	#window. 			#useCuisTopAsTreeRoot. 							nil.
			'use the default Cuis top directory'}.
		{50. 'show OS roots as tree root'. 								nil. 	#window. 			#useOSrootsAsTreeRoot. 							nil.
			'use the host OS root directories. Drives on Windows; "/" on Unix'}
	}! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6722-FileList-RenameDirectoryOption-OctavioValentinVives-2024Sep14-02h18m-ovv.002.cs.st----!

'From Cuis7.1 [latest update: #6722] on 15 September 2024 at 7:42:56 pm'!
!HandMorph methodsFor: 'grabbing/dropping' stamp: 'jmv 9/15/2024 19:41:46' prior: 50372542!
                             grabMorph: aMorph moveUnderHand: moveUnderHand
	"Grab the given morph (i.e., add it to this hand and remove it from its current owner).
	If moveUnderHand is requested or it seems neccesary anyway, move the grabbed morph under the hand."

	| grabbed positionInHandCoordinates tx bounds |
	self releaseMouseFocus.	"Break focus"
	grabbed := aMorph.
	aMorph owner ifNotNil: [ :o | grabbed := o aboutToGrab: aMorph ].
	grabbed ifNil: [ ^ self ].
	grabbed := grabbed aboutToBeGrabbedBy: self.
	grabbed ifNil: [ ^ self ].
	self hideHardwareCursor.
	self redrawNeeded.

	moveUnderHand ifTrue: [
		bounds := grabbed displayBounds ifNil: [grabbed fullBoundsInOwner ].
		positionInHandCoordinates := (bounds center + bounds bottomRight //2) negated + 
			grabbed morphPosition.
		self grabMorph: grabbed delta: positionInHandCoordinates.
		^self ].

	positionInHandCoordinates := (grabbed isInWorld ifTrue: [grabbed] ifFalse: [aMorph])
		positionInWorld - self positionInWorld.

	tx := GeometryTransformation identity.
	(grabbed isInWorld ifTrue: [grabbed] ifFalse: [aMorph]) withAllOwnersDo: [ :o |
		tx := o location composedWith: tx ].
	self withAllOwnersReverseDo: [ :o |
		tx := o location inverseTransformation composedWith: tx ].
	self grabMorph: grabbed delta: positionInHandCoordinates.

	grabbed location: tx.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6723-GrabMorph-fix-JuanVuletich-2024Sep15-19h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6723] on 16 September 2024 at 10:17:38 am'!
!SHParserST80 methodsFor: 'parse' stamp: 'jmv 9/16/2024 10:17:00' prior: 16942242!
               parseCascadeAndChain

	| beforeKeywordPos |
	beforeKeywordPos := currentTokenSourcePosition.
	self parseKeyword.

	"At least one message send before cascade and chain"
	beforeKeywordPos =‚Äã currentTokenSourcePosition ifTrue: [ ^self ].

	currentTokenFirst = $; ifTrue:
		[
			self scanPast: #cascadeSeparator.
			^self parseCascadeAndChain
		].
	currentTokenFirst = $: ifTrue:
		[
			self scanPast: #chainSeparator.

			"These lines implement double colon chains"
			currentTokenFirst = $: ifFalse: [^self].
			self scanPast: #chainSeparator.
			
			^self parseCascadeAndChain
		].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6724-Shout-atLeastOneMessageSendBeforeCascadeAndChain-JuanVuletich-2024Sep16-10h16m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6723] on 16 September 2024 at 10:20:00 am'!

Smalltalk removeClassNamed: #FillInTheBlankMorph!

!classRemoval: #FillInTheBlankMorph stamp: 'Install-6725-Remove-FillInTheBlankMorph-JuanVuletich-2024Sep16-10h17m-jmv.001.cs.st 10/10/2024 15:39:34'!
BoxedMorph subclass: #FillInTheBlankMorph
	instanceVariableNames: 'response done textPane responseUponCancel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Composite Widgets'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6725-Remove-FillInTheBlankMorph-JuanVuletich-2024Sep16-10h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6723] on 16 September 2024 at 10:20:21 am'!

Smalltalk removeClassNamed: #BoxedMorph!

!classRemoval: #BoxedMorph stamp: 'Install-6726-Remove-BoxedMorph-JuanVuletich-2024Sep16-10h20m-jmv.001.cs.st 10/10/2024 15:39:34'!
PlacedMorph subclass: #BoxedMorph
	instanceVariableNames: 'extent color borderWidth borderColor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Kernel'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6726-Remove-BoxedMorph-JuanVuletich-2024Sep16-10h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6719] on 13 September 2024 at 5:00:22 pm'!
!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 9/13/2024 16:58:41' prior: 50363127!
                               listForSelectingPatterns: patternsThatSelect rejectingPatterns: patternsThatReject
	"Make the list be those file names which match the patterns."

	| sizePad selected newList namePad sizeWithCommasPad font |
	directory ifNil: [^#()].
	directory invalidateChildren.
	selected := Set new.
	patternsThatSelect do: [ :selPat |
		directory childrenDo: [ :entry |
			(entry isDirectory
				ifTrue: [ showDirsInFileList ]
				ifFalse: [ 
					(self doesPattern: selPat allow: entry) and: [
							patternsThatReject noneSatisfy: [ :rejPat | rejPat match: entry name ]]])
						ifTrue: [ selected add: entry ]]].
		
	newList := selected asArray sort: self sortBlock.
	font := Preferences at: #standardListFont.
	namePad := newList inject: 0 into: [ :mx :entry | mx max: (font widthOfString: entry name)].
	sizePad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printString size.
	sizeWithCommasPad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printStringWithCommas size.
	newList := newList collect: [ :e |
		self fileNameFormattedFrom: e namePad: namePad sizePad: sizePad sizeWithCommasPad: sizeWithCommasPad ].
	^ newList.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6727-FileList-rejectingPatternsFix-JuanVuletich-2024Sep13-16h58m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6727] on 17 September 2024 at 10:32:12 am'!
!LayoutMorph class methodsFor: 'instance creation' stamp: 'jmv 9/17/2024 10:32:02' prior: 50363974 overrides: 16787725!
          new

	^self error: 'Use LayoutMorph newRow or LayoutMorph newColumn'.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6728-LayoutMorph-new-removeIncorrectComment-JuanVuletich-2024Sep17-10h32m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6729] on 17 September 2024 at 5:23:13 pm'!
!PluggableMorph commentStamp: '<historical>' prior: 16924390!
   PluggableMorph have a model we observe upon, and whose state we reflect for the user to see and interact with.

We are "pluggable" in the sense of PluggableViews in MVC.
See subclasses for details.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6729-PluggableMorph-ClassComment-JuanVuletich-2024Sep17-17h22m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6729] on 17 September 2024 at 5:12:13 pm'!
!PluggableScrollPane methodsFor: 'initialization' stamp: 'jmv 9/17/2024 17:08:46' overrides: 50384345!
       defaultPadding
	"Answer the default inner padding for the receiver.
	Redefine this method for a different initial padding in your morphs."

	^ `3@3`! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:10:07' prior: 16924797 overrides: 50380237!
                       minimumExtent
	| minW minH h w |
	w := theScrollerExtent ifNotNil: [ theScrollerExtent x ] ifNil: [ 0 ].
	h := theScrollerExtent ifNotNil: [ theScrollerExtent y ] ifNil: [ 0 ].
	"Figure out the minimum extent for this pane so that either content, or at least required scrollbars, will fit"
	minW := padding x * 2 + w min: ScrollBar scrollbarThickness * 2.
	self vIsScrollbarShowing
		ifTrue: [
			minW := minW + ScrollBar scrollbarThickness].
	minH := padding y * 2 + h.
	self hIsScrollbarShowing
		ifTrue: [
			minH := minH + ScrollBar scrollbarThickness].
	minH := minH min: ScrollBar scrollbarThickness * 2.
	^ (minW + (borderWidth * 2)) @ (minH + (borderWidth * 2))! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:10:13' prior: 16924969!
  viewableAreaBottom
	^ self focusIndicatorBottom - padding y! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:10:19' prior: 16924974!
    viewableAreaLeft
	^ self focusIndicatorLeft + padding x! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:10:24' prior: 16924979!
        viewableAreaRight
	^ self focusIndicatorRight - padding x! !
!PluggableScrollPane methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:10:28' prior: 16924984!
      viewableAreaTop
	^ self focusIndicatorTop + padding y! !
!PluggableListMorph methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:11:09' prior: 16923559!
           desiredExtent
	^ scroller desiredExtent + (padding + borderWidth + 1 * 2)! !
!PluggableListMorph methodsFor: 'geometry' stamp: 'jmv 9/17/2024 17:11:17' prior: 16923565!
                       desiredHeight
	^ scroller desiredHeight + (padding y + borderWidth + 1 * 2)! !

PluggableScrollPane removeSelector: #xtraBorder!

!methodRemoval: PluggableScrollPane #xtraBorder stamp: 'Install-6730-PluggableScrollPane-padding-not-xtraBorder-JuanVuletich-2024Sep17-17h08m-jmv.001.cs.st 10/10/2024 15:39:34'!
xtraBorder
	"Answer the width of an extra white border to look nicer"
	^3!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
PluggableScrollPane allSubInstancesDo: [ :m | m padding: 3@3 ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6730-PluggableScrollPane-padding-not-xtraBorder-JuanVuletich-2024Sep17-17h08m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6727] on 18 September 2024 at 1:05:16 pm'!
!Browser methodsFor: 'class list' stamp: 'jmv 9/18/2024 13:05:07' prior: 50364745!
                            classListIndex: anInteger
	"Set anInteger to be the index of the current class selection."

	| className recent canSelectClass classList prevSelectedClassName prevSelectedMessage |
	classList := self classList.
	canSelectClass := classList isInBounds: anInteger.
	prevSelectedClassName := selectedClassName.
	selectedClassName := canSelectClass ifTrue: [
		| newClassName |
		newClassName := classList at: anInteger ifAbsent: [ nil ].
		newClassName := newClassName ifNotNil: [newClassName withoutLeadingBlanks asSymbol].
		newClassName ].
	self setClassOrganizer.
	prevSelectedMessage := selectedMessage.
	selectedMessage := nil.

	self classCommentIndicated ifFalse: [
		self editSelection: (canSelectClass
			ifTrue: [#editClass]
			ifFalse: [ metaClassIndicated | selectedSystemCategory isNil
				ifTrue: [#none]
				ifFalse: [#newClass]])].

	self selectedClass ifNotNil: [
		recent := self class recentClasses.
		className := self selectedClass name.
		(recent includes: className) ifTrue: [recent remove: className].
		recent addFirst: className.
		recent size > 16 ifTrue: [recent removeLast]].

	"Clear selectedMessageCategory if there is no match in the new list of categories"
	(self messageCategoryList indexOf: selectedMessageCategory) = 0 ifTrue: [
		selectedMessageCategory := nil].

	self changed: #classSelectionChanged.
	self changed: #classCommentText.
	self changed: #classListIndex.	"update my selection"
	self changed: #messageCategoryList.
	self changed: #messageList.
	self changed: #relabel.
	self acceptedContentsChanged.
	prevSelectedClassName = selectedClassName ifFalse: [
		"If clicked on already selected class, deselect selector, so class definition is shown"
		self setSelector: prevSelectedMessage ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6731-Cleanup-JuanVuletich-2024Sep18-13h01m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6731] on 19 September 2024 at 12:57:46 pm'!
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 9/19/2024 11:46:48' prior: 16967702!
    browseMessageList: methodReferences name: labelString autoHighlight: autoHighlightString allOccurrences: aBoolean
	"Create and schedule a MessageSet browser on the message list."

	| messageListSize title |

	messageListSize := methodReferences size.
	messageListSize = 0 ifTrue: [
		PopUpMenu inform: ('There are no\' , labelString) withNewLines.
		^nil ].

	title := messageListSize > 1
		ifFalse: [ labelString ]
		ifTrue: [ '[', messageListSize printString, '] ', labelString].

	^ MethodSetWindow
		openMessageList: methodReferences
		label: title
		autoHighlight: autoHighlightString
		allOccurrences: aBoolean! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:54:39' prior: 16827055!
                           browseHierarchy
	"Create and schedule a new hierarchy browser
	on the currently selected class or meta."

	| answer |
	answer := nil.
	model selectedClassOrMetaClass ifNotNil: [ :myClass |
		answer := HierarchyBrowserWindow
			onClass: myClass selector: model selectedMessageName ].
	^answer! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:43:20' prior: 50374406!
browseHierarchyAndReplaceMe
	"Create and schedule a new hierarchy browser on the currently selected class or meta.
	Resize and position it over me and dismiss me."

	self browseHierarchy ifNotNil: [ :newBrowserWindow |
		newBrowserWindow
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ].! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:41:50' prior: 16827146!
               browseMethodFull
	"Create and schedule a full Browser and then select the current class and message."

	| answer |
	answer := nil.
	model selectedClassOrMetaClass ifNotNil: [ :myClass |
		answer := BrowserWindow
			fullOnClass: myClass selector: model selectedMessageName ].
	^answer! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:43:54' prior: 50374425!
        browseMethodFullAndReplaceMe
	"Create and schedule a full Browser and then select the current class and message.
	Resize and position it over me and dismiss me."

	self browseMethodFull ifNotNil: [ :newBrowserWindow |
		newBrowserWindow
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ].! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:46:13' prior: 50370992!
                methodInheritance
	"Create and schedule a method browser on the inheritance of implementors."

	| list aClassNonMeta isMeta theClassOrMeta aClass sel |
	aClass := model selectedClassOrMetaClass.
	sel := model selectedMessageName.
	aClass ifNil: [ ^ nil ].
	sel ifNil: [ ^ nil ].
	aClassNonMeta := aClass theNonMetaClass.
	isMeta := aClassNonMeta ~~ aClass.
	list := OrderedCollection new.
	aClass allSuperclasses reverseDo: [ :cl |
		(cl includesSelector: sel) ifTrue: [
			list addLast: (MethodReference class: cl selector: sel) ]].
	aClassNonMeta
		allSubclassesWithLevelDo: [ :cl :level |
			theClassOrMeta := isMeta
				ifTrue: [ cl class ]
				ifFalse: [ cl ].
			(theClassOrMeta includesSelector: sel) ifTrue: [
				list addLast: (MethodReference class: theClassOrMeta selector: sel) ]]
		startingLevel: 0.
	^ Smalltalk
		browseMessageList: list
		name: 'Implementors of ' , sel, ' in ', aClass name, ' and super / sub classes'.! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:47:31' prior: 50374443!
                             methodInheritanceAndReplaceMe
	"Create and schedule a method browser on the inheritance of implementors.
	Resize and position it over me and dismiss me."

	self browseHierarchy ifNotNil: [ :newBrowserWindow |
		newBrowserWindow
			positionInWorld: self positionInWorld;
			extentInWorld: self extentInWorld.
		self dismissMorph ].! !
!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:55:33' prior: 16823482 overrides: 50385163!
                          browseMethodFull
	"Create and schedule a full Browser and then select the current class and message."

	|  answer myClass |
	answer := nil.
	(myClass := model selectedClassOrMetaClass) ifNotNil: [
		answer := BrowserWindow fullOnClass: myClass realClass selector: model selectedMessageName ].
	^answer! !
!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 11:45:57' prior: 16823514 overrides: 50385189!
                       methodInheritance
	(model selectedClassOrMetaClass isNil or:
		[model selectedClassOrMetaClass hasDefinition])
			ifFalse: [^super methodInheritance].
	^nil! !
!HierarchyBrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 9/19/2024 11:57:57' prior: 16875084!
                      forClassesNamed: nameList title: aTitle
	"Initialize the receiver for the class-name-list and title provided"

	| browser |
	browser := ClassListBrowser new initForClassesNamed: nameList title: aTitle.
	self openNoSysCat: browser label: aTitle

	"HierarchyBrowserWindow forClassesNamed: #(Browser Morph Float) title: 'Frogs'"! !

CodeProvider removeSelector: #hierarchyBrowser!

!methodRemoval: CodeProvider #hierarchyBrowser stamp: 'Install-6732-Browsing-cleanup-JuanVuletich-2024Sep19-12h55m-jmv.001.cs.st 10/10/2024 15:39:34'!
hierarchyBrowser
	"Create and schedule a new hierarchy browser on the currently selected class or meta."

	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |
	(selectedClassOrMetaClass := self selectedClassOrMetaClass)
		ifNil: [^ nil].
	newBrowser := HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.
	((aSymbol := self selectedMessageName) notNil and: [(MethodSet isPseudoSelector: aSymbol) not])
		ifTrue: [
			aBehavior := selectedClassOrMetaClass.
			messageCatIndex := aBehavior organization numberOfCategoryOfElement: aSymbol.
			messageCatIndex = 0 ifFalse: [
				newBrowser messageCategoryListIndex: messageCatIndex + 1.
				newBrowser messageListIndex:
					((aBehavior organization listAtCategoryNumber: messageCatIndex) indexOf: aSymbol) ]].
	^newBrowser!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6732-Browsing-cleanup-JuanVuletich-2024Sep19-12h55m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6731] on 19 September 2024 at 12:59:43 pm'!
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:11:25'!
                 browseFull: aClass
	"
	Smalltalk browseFull: Float.
	Smalltalk browseFull: Float class.
	"
	^self browserWindowClass fullOnClass: aClass selector: nil! !
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:11:28'!
                     browseFull: aClass selector: aSymbol
	"
	Smalltalk browseFull: Float selector: nil.
	Smalltalk browseFull: Float selector: #abs.
	Smalltalk browseFull: Float class selector: nil.
	Smalltalk browseFull: Float class selector: #pi.
	"
	^self browserWindowClass fullOnClass: aClass selector: aSymbol! !
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:13:10'!
    browseHierarchy: aClass
	"
	Smalltalk browseHierarchy: Float.
	Smalltalk browseHierarchy: Float class.
	"
	^self browserWindowClass hierarchyOnClass: aClass selector: nil! !
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:13:00'!
 browseHierarchy: aClass selector: aSymbol
	"
	Smalltalk browseHierarchy: Float selector: nil.
	Smalltalk browseHierarchy: Float selector: #abs.
	Smalltalk browseHierarchy: Float class selector: nil.
	Smalltalk browseHierarchy: Float class selector: #pi.
	"
	^self browserWindowClass hierarchyOnClass: aClass selector: aSymbol.! !
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:11:18'!
     browserWindowClass
	^BrowserWindow! !
!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 9/19/2024 12:12:57'!
         hierarchyOnClass: aClass selector: aSymbol
	"Open a new full browser set to class."

	^HierarchyBrowserWindow onClass: aClass selector: aSymbol! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6733-SystemDictionary-BrowsingServices-JuanVuletich-2024Sep19-12h57m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6731] on 19 September 2024 at 1:02:53 pm'!
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:35:24'!
           findAndBrowseClass
	"
	Smalltalk findAndBrowseClass.
	"
	^self browserWindowClass findAndBrowseClass.! !
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/19/2024 12:35:57'!
      findInSourceCode
	self request: 'Text to search source code for?' do: [:aString|
		Smalltalk browseMethodsWithSourceString: aString]! !
!SystemDictionary methodsFor: 'browsing' stamp: 'jmv 9/19/2024 12:25:55'!
              browseAllClasses
	"Create and schedule a new browser on all classes alphabetically."
	| newBrowser |
	newBrowser := HierarchyBrowser new initAlphabeticListing.
	HierarchyBrowserWindow openNoSysCat: newBrowser label: 'All Classes Alphabetically'! !
!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 9/19/2024 12:39:55'!
                       findAndBrowseClass

	| allClassNames |
	allClassNames := Smalltalk classNames asOrderedCollection.
	self findClassFrom: allClassNames ifFound: [ :foundClass | self fullOnClass: foundClass selector: nil ].
 	
	! !
!Object methodsFor: 'user interface' stamp: 'jmv 9/19/2024 12:24:18' prior: 16915511!
                     browseClassHierarchy
	| targetClass |
	targetClass := self class isMeta
				ifTrue: [self class theNonMetaClass]
				ifFalse: [self class ].
	Smalltalk browseHierarchy: targetClass.! !
!CompiledMethod methodsFor: 'user interface support' stamp: 'jmv 9/19/2024 12:39:02' prior: 16835164!
 browse

	Smalltalk browseFull: self methodClass selector: self selector.! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:20:13' prior: 50385137!
                           browseHierarchy
	"Create and schedule a new hierarchy browser
	on the currently selected class or meta."

	| answer |
	answer := nil.
	model selectedClassOrMetaClass ifNotNil: [ :myClass |
		answer := Smalltalk browseHierarchy: myClass
			selector: model selectedMessageName ].
	^answer! !
!CodeWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:21:32' prior: 50385163!
     browseMethodFull
	"Create and schedule a full Browser and then select
	the current class and message."

	| answer |
	answer := nil.
	model selectedClassOrMetaClass ifNotNil: [ :myClass |
		answer := Smalltalk browseFull: myClass
			selector: model selectedMessageName ].
	^answer! !
!BrowserWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:48:56' prior: 16799597!
         browseAllClasses
	Smalltalk browseAllClasses! !
!CodeFileBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:21:26' prior: 50385237 overrides: 50385435!
                        browseMethodFull
	"Create and schedule a full Browser and then select
	the current class and message."

	|  answer myClass |
	answer := nil.
	(myClass := model selectedClassOrMetaClass) ifNotNil: [
		answer := Smalltalk browseFull: myClass realClass
			selector: model selectedMessageName ].
	^answer! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:40:12' prior: 50337710!
                   contextClassBrowse

	Smalltalk browseFull: model contextVariablesInspector selectedClassOrMetaClass.! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:27:58' prior: 16845328!
                           contextClassHierarchy

	Smalltalk
		browseHierarchy: model contextVariablesInspector selectedClassOrMetaClass
		selector: nil.! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:40:18' prior: 50337738!
 receiverClassBrowse

	Smalltalk browseFull: model receiverInspector selectedClassOrMetaClass.! !
!DebuggerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:28:20' prior: 16845350!
  receiverClassHierarchy

	Smalltalk
		browseHierarchy: model receiverInspector selectedClassOrMetaClass
		selector: nil.! !
!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:28:45' prior: 16883209!
       browseHierarchy
	"Create and schedule a class list browser on the receiver's hierarchy."

	Smalltalk
		browseHierarchy: model selectedClassOrMetaClass
		selector: nil.! !
!InspectorWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:41:56' prior: 16883217!
                       browseMethodFull
	"Create and schedule a full Browser and then select the current class and message."

	|  myClass |
	(myClass := model selectedClassOrMetaClass) ifNotNil: [
		Smalltalk browseFull: myClass selector: nil ].! !
!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:28:57' prior: 16916621!
                           browseHierarchy
	"Create and schedule a class list browser on the receiver's hierarchy."

	Smalltalk
		browseHierarchy: model selectedClass
		selector: nil.! !
!ObjectExplorerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:41:51' prior: 16916629!
                             browseMethodFull
	"Create and schedule a full Browser and then select the current class and message."

	|  myClass |
	(myClass := model selectedClass) ifNotNil: [
		Smalltalk browseFull: myClass selector: nil ].! !
!ProcessBrowserWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:41:46' prior: 16930822!
      browseContext
	model selectedContext
		ifNil: [^ self].
	Smalltalk browseFull: model selectedClass selector: model selectedSelector.! !
!TestRunnerWindow methodsFor: 'menu commands' stamp: 'jmv 9/19/2024 12:42:11' prior: 50339506!
                         browseSelected
	| cls |
	cls := (model tests at: model selectedSuite ifAbsent: ['']) copyUpTo: Character space.
	cls := cls asSymbol.
	cls := (Smalltalk at: cls ifAbsent: nil).
	cls ifNotNil: [
		Smalltalk browseFull: cls selector: nil ]! !
!WorldMorph methodsFor: 'events' stamp: 'jmv 9/19/2024 12:36:07' prior: 50335204 overrides: 50335628!
         keyStroke: aKeyboardEvent

	self flag: #definesKeyboardShortcuts.
	super keyStroke: aKeyboardEvent.
	aKeyboardEvent wasHandled ifTrue: [ ^self ].

	"Handle a keystroke event."
	(aKeyboardEvent commandAltKeyPressed or: [ aKeyboardEvent controlKeyPressed ])
		ifTrue: [
			aKeyboardEvent keyCharacter = $b ifTrue: [
				Smalltalk browseFull: nil.
				aKeyboardEvent wasHandled: true. ].
			aKeyboardEvent keyCharacter = $f ifTrue: [
				Smalltalk findAndBrowseClass.
				aKeyboardEvent wasHandled: true. ].
			aKeyboardEvent keyCharacter = $F ifTrue: [
				Smalltalk findInSourceCode.
				aKeyboardEvent wasHandled: true. ].
		].
	"aKeyboardEvent keyCharacter print."! !
!PreferenceSet class methodsFor: 'sys preference' stamp: 'jmv 9/19/2024 12:44:50' prior: 16928552!
installMiscPreferences
" Preference value defined with closure. We could insert in a dynamic array...
  Preference with event handler "
	self sysPreferences

		name: #haloHandleSize 
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 5 // 3 max: 16];
		
		name: #halosMorphBoundsFrameColor
		description: 'When set, use this color for a rectangle on halos morph bounds. Useful for debugging morph sizes.' 
		category: #gui 
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;
		
		name: #halosMorphBoundsFillColor
		description: 'When set, use this color for filling a rectangle on halos morph bounds. Useful for debugging morph sizes.'
		category: #gui
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;
	
		name: #roundedButtonRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 8 // 14];
		
		name: #roundedWindowRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize] ;
		
		name: #scrollbarThickness 
		category: #gui 		
		value: [(Preferences at: #windowTitleFont) pointSize + 2];
		
		name: #classFinder 
		category: #programming 
		value: [ Smalltalk findAndBrowseClass ];
		
		name: #defaultAuthorName 
		category: #programming 
		value: [Utilities authorName];
		
		name: #worldMenu
		category: #system
		value: TheWorldMenu ! !
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 9/19/2024 12:46:10' prior: 16954120!
            browseClassFromIt
	"Launch a hierarchy browser for the class indicated by the current selection.  If multiple classes matching the selection exist, let the user choose among them."

	| aClass |
	self wordSelectAndEmptyCheck: [^ self].

	aClass := Utilities
		classFromPattern: self selectedString withBlanksCondensed
		withCaption: 'choose a class to browse...'.
	aClass ifNil: [^ morph flash ].

	Smalltalk
		browseHierarchy: aClass
		selector: nil.! !
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 9/19/2024 12:42:25' prior: 16954137!
                            browseImplementorsAt: aPosition

	self 
		withSelectorAt: aPosition 
		do: [ :selector | Smalltalk browseAllImplementorsOf: selector ]
		ifBehavior: [ :behavior | Smalltalk browseFull: behavior selector: nil ]
		otherwise: [ self implementorsOfItWhenErrorsParsing ].! !
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 9/19/2024 12:43:13' prior: 16954149!
                    browseIt
	"Launch a browser for the current selection, if appropriate"

	| aSymbol anEntry |
	(Preferences at: #alternativeBrowseIt) ifTrue: [^ self browseClassFromIt].

	self wordSelectAndEmptyCheck: [^ self].
	aSymbol := self selectedSymbol ifNil: [
		self
			evaluate: self selection string
			andDo: [ :result | result class name ]
			ifFail: [ ^morph flash ]
			profiled: false ].

	aSymbol first isUppercase
		ifTrue: [
			anEntry := (Smalltalk
				at: aSymbol
				ifAbsent: [
					Smalltalk browseAllImplementorsOf: aSymbol.
					^ nil]).
			anEntry ifNil: [^ morph flash].
			(anEntry isKindOf: Class)
				ifFalse: [anEntry := anEntry class].
			Smalltalk browseFull: anEntry selector: nil ]
		ifFalse: [
			Smalltalk browseAllImplementorsOf: aSymbol ].! !

MethodSetWindow class removeSelector: #findInSourceCode!

!methodRemoval: MethodSetWindow class #findInSourceCode stamp: 'Install-6734-UseNew-Smalltalk-BrowsingServices-JuanVuletich-2024Sep19-12h59m-jmv.001.cs.st 10/10/2024 15:39:34'!
findInSourceCode
	self request: 'Text to search source code for?' do: [:aString|
		Smalltalk browseMethodsWithSourceString: aString]!

BrowserWindow class removeSelector: #fullOnClass:!

!methodRemoval: BrowserWindow class #fullOnClass: stamp: 'Install-6734-UseNew-Smalltalk-BrowsingServices-JuanVuletich-2024Sep19-12h59m-jmv.001.cs.st 10/10/2024 15:39:34'!
fullOnClass: aClass

	self fullOnClass: aClass selector: nil!

BrowserWindow class removeSelector: #findClass!

!methodRemoval: BrowserWindow class #findClass stamp: 'Install-6734-UseNew-Smalltalk-BrowsingServices-JuanVuletich-2024Sep19-12h59m-jmv.001.cs.st 10/10/2024 15:39:34'!
findClass

	| allClassNames |
	
	allClassNames := Smalltalk classNames asOrderedCollection.
	
	self findClassFrom: allClassNames ifFound: [:foundClass | self fullOnClass: foundClass ]
 	
	!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6734-UseNew-Smalltalk-BrowsingServices-JuanVuletich-2024Sep19-12h59m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6734] on 20 September 2024 at 11:27:18 am'!
!Class methodsFor: 'class name' stamp: 'jmv 9/20/2024 11:11:38' prior: 16815049!
                        rename: aString
	"The new name of the receiver is the argument, aString."

	| newName |
	(newName := aString asSymbol) ~= self name
		ifFalse: [^ self].
	(Smalltalk includesKey: newName)
		ifTrue: [^ self error: newName , ' already exists'].
	(Undeclared includesKey: newName)
		ifTrue: [
			Undeclared removeUnreferencedKeys.
			(Undeclared includesKey: newName)
				ifTrue: [
					self inform: 'There are references to, ' , aString printString , '
from Undeclared. Check them after this change.']].

	self safeRenameTo: newName.! !
!RenameObject methodsFor: 'applying - private' stamp: 'jmv 9/20/2024 11:25:07' prior: 16940145!
          renameReferences

	| references |

	references := self referencesToRename.
	references := self rejectReferencesToClassVariablesFrom: references.
	references do: [ :aReference | self renameReference: aReference compiledMethod ].
	"See #newSourceCodeOf: . These spurious undeclared entries may be a problem later."
	Smalltalk cleanOutUndeclared.
	^references! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6735-ClassRename-avoidAndProtectAgainstSpuriousUndeclared-JuanVuletich-2024Sep20-11h26m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6735] on 20 September 2024 at 3:26:55 pm'!
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/20/2024 15:24:04' prior: 50385354!
                   browserWindowClass
	^Preferences at: #browserWindowClass! !
!PreferenceSet class methodsFor: 'sys preference' stamp: 'jmv 9/20/2024 15:26:34' prior: 50385575!
 installMiscPreferences
" Preference value defined with closure. We could insert in a dynamic array...
  Preference with event handler "
	self sysPreferences

		name: #haloHandleSize 
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 5 // 3 max: 16];
		
		name: #halosMorphBoundsFrameColor
		description: 'When set, use this color for a rectangle on halos morph bounds. Useful for debugging morph sizes.' 
		category: #gui 
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;
		
		name: #halosMorphBoundsFillColor
		description: 'When set, use this color for filling a rectangle on halos morph bounds. Useful for debugging morph sizes.'
		category: #gui
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;
	
		name: #roundedButtonRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 8 // 14];
		
		name: #roundedWindowRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize] ;
		
		name: #scrollbarThickness 
		category: #gui 		
		value: [(Preferences at: #windowTitleFont) pointSize + 2];
		
		name: #classFinder 
		category: #programming 
		value: [ Smalltalk findAndBrowseClass ];
		
		name: #defaultAuthorName 
		category: #programming 
		value: [Utilities authorName];
		
		name: #worldMenu
		category: #system
		value: TheWorldMenu;
		
		name: #browserWindowClass
		category: #programming
		value: BrowserWindow.! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Preferences name: #browserWindowClass category: #programming value: BrowserWindow.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6736-BrowserWindowClass-Preference-JuanVuletich-2024Sep20-15h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6736] on 20 September 2024 at 4:11:01 pm'!
!Class methodsFor: 'enumerating' stamp: 'jmv 9/20/2024 16:08:28' overrides: 50368033!
            allSubclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's subclasses.
	At each level, sort subclasses."

	self subclassesSortedDo: [ :cl | 
		aBlock value: cl.
		cl allSubclassesSortedDo: aBlock ].! !
!Class methodsFor: 'enumerating' stamp: 'jmv 9/20/2024 16:10:25' overrides: 50368024!
 subclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses.
	Sort by name."

	subclasses notNil ifTrue: [
		((subclasses reject: [ :c | c isMeta ]) sort: [:c1 :c2 | c1 name < c2 name ]) do: aBlock ].! !

ClassDescription removeSelector: #subclassesSortedDo:!

ClassDescription removeSelector: #allSubclassesSortedDo:!

Behavior removeSelector: #subclassesSortedDo:!

!methodRemoval: Behavior #subclassesSortedDo: stamp: 'Install-6737-Class-subclassesIteration-JuanVuletich-2024Sep20-16h05m-jmv.001.cs.st 10/10/2024 15:39:34'!
subclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses.
	Sort by name."

	^(self subclasses sort: [:c1 :c2 | c1 name < c2 name ]) do: aBlock!

Behavior removeSelector: #allSubclassesSortedDo:!

!methodRemoval: Behavior #allSubclassesSortedDo: stamp: 'Install-6737-Class-subclassesIteration-JuanVuletich-2024Sep20-16h05m-jmv.001.cs.st 10/10/2024 15:39:34'!
allSubclassesSortedDo: aBlock
	"Evaluate the argument, aBlock, for each of the receiver's subclasses.
	At each level, sort subclasses."

	self subclassesSortedDo: [ :cl | 
		aBlock value: cl.
		cl allSubclassesSortedDo: aBlock ].!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6737-Class-subclassesIteration-JuanVuletich-2024Sep20-16h05m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6737] on 20 September 2024 at 4:24:51 pm'!
!SystemDictionary methodsFor: 'browsing - main' stamp: 'jmv 9/20/2024 16:24:14'!
       browse
	"
	Smalltalk browse
	"
	^self browserWindowClass fullOnClass: Object selector: nil! !
!BrowserWindow class methodsFor: 'menu-world' stamp: 'jmv 9/20/2024 16:24:24' prior: 16800675!
   worldMenuOptions
	^ `{{
			#submenuOf 			-> 		TheWorldMenu openLabel.
			#itemGroup 			-> 		10.
			#itemOrder 			-> 		30.
			#label 			-> 		'Browser'.
			#object 			-> 		Smalltalk.
			#selector 			-> 		#browse.
			#icon 			-> 		#editFindReplaceIcon.
			#balloonText 			-> 		'A Smalltalk code browser, for studying and modifying the system'.
		} asDictionary}`! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6738-WorldMenu-honorBrowserPreference-JuanVuletich-2024Sep20-16h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6738] on 22 September 2024 at 10:22:27 pm'!
!SmalltalkEditor methodsFor: 'explain' stamp: 'jmv 9/22/2024 22:18:22'!
                            explainDelimiter: string
	"Is string enclosed in delimiters?"

	| str |
	(string at: 1) isLetter ifTrue: [^nil].  "only special chars"
	(string first = string last) ifTrue:
			[^ self explainChar: (String with: string first)]
		ifFalse:
			[(string first = $( and: [string last = $)]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $[ and: [string last = $]]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = ${ and: [string last = $}]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $< and: [string last = $>]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $# and: [string last = $)]) ifTrue:
				[^'An instance of class Array.  The Numbers, Characters, or Symbols between the parenthesis are the elements of the Array.'].
			string first = $# ifTrue:
				[^'An instance of class Symbol.'].
			(string first = $$ and: [string size = 2]) ifTrue:
				[^'An instance of class Character.  This one is the character ', (String with: string last), '.'].
			(string first = $:) ifTrue:
				[str := string allButFirst.
				(self explainTemp: str) ifNotNil: [
					^'An argument to this block will be bound to the temporary variable ',
						str, '.']]].
	^ nil! !
!PositionableStream methodsFor: 'fileIn/Out' stamp: 'jmv 9/22/2024 22:15:36' prior: 16927261!
                  fileIn
	"This is special for reading expressions from text that has been formatted 
	with exclamation delimiters. The expressions are read and passed to the 
	Compiler."

	self fileInAnnouncing: 'Reading ' , self name.
	Smalltalk cleanOutUndeclared.
	Undeclared notEmpty ifTrue: [
		('Undeclared: ', Undeclared printString) print ]! !
!PositionableStream methodsFor: 'fileIn/Out' stamp: 'jmv 9/22/2024 22:15:41' prior: 16927274!
                   fileInAnnouncing: announcement
	"This is special for reading expressions from text that has been formatted 
	with exclamation delimiters. The expressions are read and passed to the 
	Compiler. Put up a progress report with the given announcement as the title."

	Utilities logsUserChanges: false.

	announcement 
		displayProgressAt: Sensor mousePoint
		from: 0
		to: self size
		during: [ :barBlock | self fileInInformingTo: barBlock ].

	"Note:  The main purpose of this banner is to flush the changes file."
	Utilities logsUserChanges: true.
	Smalltalk logChange: '----End fileIn of ' , self name , '----'.
	! !
!Scanner methodsFor: 'public access' stamp: 'jmv 9/22/2024 22:15:49' prior: 16944903!
   scanTokens: textOrString 
	"Answer an Array that has been tokenized as though the input text, 
	textOrString, had appeared between the array delimiters #( and ) in a 
	Smalltalk literal expression."

	self initScannerForTokenization.
	self scan: textOrString asPlainString readStream.
	self scanLitVec.
	^token

	"Scanner new scanTokens: 'identifier keyword: 8r31 ''string'' .'"! !
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 9/22/2024 22:18:55' prior: 50353873!
    explain
	"Try to shed some light on what kind of entity the current selection is. 
	The selection must be a single token or construct. Insert the answer after 
	the selection. Send private messages whose names begin with 'explain' 
	that return a string if they recognize the selection, else nil."

	| string tiVars cgVars selectors delimiters numbers sorry reply symbol provider |
	sorry := 'Sorry, I can''t explain that.  Please select a single
token, construct, or special character.'.
	(string := self selectedString) isEmpty
		ifTrue: [reply := '']
		ifFalse: [
			string := string withBlanksTrimmed.
			"Remove space, tab, cr"
			"Temps and Instance vars need only test strings that are all letters"
			(string detect: [:char | char isValidInIdentifiers not]
				ifNone: nil) ifNil: [
					tiVars := (self explainTemp: string)
						ifNil: [self explainInst: string]].
					
			provider := self codeProvider.
			(tiVars == nil and: [provider respondsTo: #explainSpecial:])
				ifTrue: [tiVars := provider explainSpecial: string].
			tiVars := tiVars
				ifNil: [ '']
				ifNotNil: [ tiVars , '\' withNewLines].
			"Context, Class, Pool, and Global vars, and Selectors need 
			only test symbols"
			(Symbol hasInterned: string ifTrue: [:s | symbol := s])
				ifTrue: [
					cgVars := (self explainCtxt: symbol) 
						ifNil: [ (self explainClass: symbol)
							ifNil: [ self explainGlobal: symbol]].
					"See if it is a Selector (sent here or not)"
					selectors := (self explainMySel: symbol)
						ifNil: [(self explainPartSel: string)
							ifNil: [ self explainAnySel: symbol]]]
				ifFalse: [selectors := self explainPartSel: string].
			cgVars := cgVars
				ifNil: [ '']
				ifNotNil: [cgVars , '\' withNewLines].
			selectors := selectors
				ifNil: [ '']
				ifNotNil: [ selectors , '\' withNewLines].
			delimiters := string size = 1
				ifTrue: ["single special characters"
					self explainChar: string]
				ifFalse: ["matched delimiters"
					self explainDelimiter: string].
			numbers := self explainNumber: string.
			numbers ifNil: [numbers := ''].
			delimiters ifNil: [delimiters := ''].
			reply := tiVars , cgVars , selectors , delimiters , numbers].
	reply isEmpty ifTrue: [reply := sorry].

	"morph showBalloon: reply.
	self runningWorld ifNotNil: [ :w | w findATranscript ].
	reply print."
	"This could be a preference."
	self afterSelectionInsertAndSelect: reply! !

SmalltalkEditor removeSelector: #explainDelimitor:!

!methodRemoval: SmalltalkEditor #explainDelimitor: stamp: 'Install-6739-Typo-Fix-JuanVuletich-2024Sep22-22h20m-jmv.001.cs.st 10/10/2024 15:39:34'!
explainDelimitor: string
	"Is string enclosed in delimitors?"

	| str |
	(string at: 1) isLetter ifTrue: [^nil].  "only special chars"
	(string first = string last) ifTrue:
			[^ self explainChar: (String with: string first)]
		ifFalse:
			[(string first = $( and: [string last = $)]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $[ and: [string last = $]]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = ${ and: [string last = $}]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $< and: [string last = $>]) ifTrue:
				[^ self explainChar: (String with: string first)].
			(string first = $# and: [string last = $)]) ifTrue:
				[^'An instance of class Array.  The Numbers, Characters, or Symbols between the parenthesis are the elements of the Array.'].
			string first = $# ifTrue:
				[^'An instance of class Symbol.'].
			(string first = $$ and: [string size = 2]) ifTrue:
				[^'An instance of class Character.  This one is the character ', (String with: string last), '.'].
			(string first = $:) ifTrue:
				[str := string allButFirst.
				(self explainTemp: str) ifNotNil: [
					^'An argument to this block will be bound to the temporary variable ',
						str, '.']]].
	^ nil!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6739-Typo-Fix-JuanVuletich-2024Sep22-22h20m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6739] on 23 September 2024 at 11:00:30 am'!
!UnicodeString class methodsFor: 'services' stamp: 'jmv 9/23/2024 10:45:40' prior: 16994406!
                    utf8FromUtf16Bytes: utf16ByteArray bigEndianHint: bigEndianHintOrNil
	"Convert the given string from UTF-16 to UTF-8.
	Use BOM if present to detect endianess, or bigEndianHintOrNil ifnotNil.
	If no BOM and bigEndianHintOrNil is nil, assume little endian."

	| isBigEndian startIndex |
	utf16ByteArray size = 0 ifTrue: [
		^#[] ].
	isBigEndian := bigEndianHintOrNil ifNil: [false]. "best guess"
	startIndex := 1.
	(utf16ByteArray uint16At: 1 bigEndian: true) = 16rFEFF ifTrue: [
		isBigEndian := true.
		startIndex := 3 ].
	(utf16ByteArray uint16At: 1 bigEndian: false) = 16rFEFF  ifTrue: [
		isBigEndian := false.
		startIndex := 3 ].
	^ByteArray streamContents: [ :strm | | s byteIndex word |
		s := utf16ByteArray size.
		byteIndex := startIndex.
		[ byteIndex <= s ] whileTrue: [
			word := utf16ByteArray uint16At: byteIndex bigEndian: isBigEndian.
			(word between: 16rD800 and: 16rDFFF)
				ifFalse: [
					Character
						evaluate: [ :byte | strm nextPut: byte ]
						withUtf8BytesOf: word.
					byteIndex := byteIndex + 2 ]
				ifTrue: [ | highSurrogatePart lowSurrogatePart codePoint |
					(word between: 16rD800 and: 16rDBFF) ifFalse: [ self error: 'Invalid UTF-16' ].
					highSurrogatePart := word - 16rD800.
					word := utf16ByteArray uint16At: byteIndex+2 bigEndian: isBigEndian.
					(word between: 16rDC00 and: 16rDFFF) ifFalse: [ self error: 'Invalid UTF-16' ].
					lowSurrogatePart := word - 16rDC00.
					codePoint := highSurrogatePart << 10 + lowSurrogatePart + 16r10000.
					Character
						evaluate: [ :byte | strm nextPut: byte ]
						withUtf8BytesOf: codePoint.
					byteIndex := byteIndex + 4 ]]].! !
!UnicodeString class methodsFor: 'services' stamp: 'jmv 9/23/2024 10:47:06' prior: 16994458!
   utf8FromUtf16Words: utf16WordArray
	"Convert the given string from UTF-16 to UTF-8.
	Skip BOM if present."

	| startIndex |
	utf16WordArray size = 0 ifTrue: [
		^#[] ].
	startIndex := 1.
	(utf16WordArray at: 1) = 16rFEFF ifTrue: [
		startIndex := 2 ].
	^ByteArray streamContents: [ :strm | | s wordIndex word |
		s := utf16WordArray size.
		wordIndex := startIndex.
		[ wordIndex <= s ] whileTrue: [
			word := utf16WordArray at: wordIndex.
			(word between: 16rD800 and: 16rDFFF)
				ifFalse: [
					Character
						evaluate: [ :byte | strm nextPut: byte ]
						withUtf8BytesOf: word.
					wordIndex := wordIndex + 1 ]
				ifTrue: [ | highSurrogatePart lowSurrogatePart codePoint |
					(word between: 16rD800 and: 16rDBFF) ifFalse: [ self error: 'Invalid UTF-16' ].
					highSurrogatePart := word - 16rD800.
					word := utf16WordArray at: wordIndex+1.
					(word between: 16rDC00 and: 16rDFFF) ifFalse: [ self error: 'Invalid UTF-16' ].
					lowSurrogatePart := word - 16rDC00.
					codePoint := highSurrogatePart << 10 + lowSurrogatePart + 16r10000.
					Character
						evaluate: [ :byte | strm nextPut: byte ]
						withUtf8BytesOf: codePoint.
					wordIndex := wordIndex + 2 ]]].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6740-UTF8fromEmptyUTF16-fixes-JuanVuletich-2024Sep23-10h45m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6740] on 23 September 2024 at 12:21:59 pm'!
!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 9/23/2024 11:31:55' prior: 16881019!
                         acceptContents
	"The message is sent when the user hits return or Cmd-S.
	Accept the current contents and end editing."
	"Inform the model of text to be accepted, and return true if OK."

	| accepted prevSelection prevScrollValue |
	
	prevSelection := self editor selectionInterval copy.
	prevScrollValue := owner verticalScrollBar scrollValue.
	
	hasUnacceptedEdits ifFalse: [ self flash. ^true ].
	hasEditingConflicts ifTrue: [
		self confirmAcceptAnyway ifFalse: [self flash. ^false]].
	
	accepted := model acceptContentsFrom: owner.
	"During the step for the browser, updatePaneIfNeeded is called, and 
		invariably resets the contents of the code-holding PluggableTextMorph
		at that time, resetting the cursor position and scroller in the process.
		The following line forces that update without waiting for the step,
 		then restores the cursor and scrollbar"
	
	"some implementors of acceptContentsFrom: answer self :("
	^accepted == true 
		ifTrue: [
			model refetch.
			self editor selectFrom: prevSelection first to: prevSelection last.
			UISupervisor whenUIinSafeState: [
				"The next line would make PopUpMenu to auto close because of losing focus..."
				"self world ifNotNil: [ :w | w activeHand newKeyboardFocus: self ]."
				(owner is: #ScrollPane) ifTrue: [
					owner verticalScrollBar internalScrollValue: prevScrollValue]].
			true]
		ifFalse: [ false ]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6741-UnwantedPopUpAutoClose-fix-JuanVuletich-2024Sep23-12h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6740] on 23 September 2024 at 12:22:26 pm'!
!Parser methodsFor: 'error correction' stamp: 'jmv 9/23/2024 12:15:14' prior: 16920893!
                        rangesForRemovableUnusedTempsInBlockNode: aNodeWithTemporaries
	
	| definedButUnusedTemps unusedTemps removableTemps |
	
	definedButUnusedTemps := aNodeWithTemporaries temporaries select: [ :temporaryNode |
		temporaryNode isUnusedTemp & temporaryNode isUndefTemp not ].
	definedButUnusedTemps notEmpty ifTrue: [
		definedButUnusedTemps := definedButUnusedTemps collect: [ :tempNode | tempNode name ].
		'There are defined but unused temporal variables.' print.
		('Consider removing them: ', definedButUnusedTemps asArray printString) print ].
	
	unusedTemps := aNodeWithTemporaries temporaries select: [ :temporaryNode |
		temporaryNode isUnusedTemp & temporaryNode isUndefTemp ].

	removableTemps := unusedTemps select: [ :temporaryNode |
		UnusedVariable name: temporaryNode name ].
	
	^self declarationRangesForTemps: removableTemps.! !

Parser removeSelector: #selectRemovableUnusedTempsFrom:!

!methodRemoval: Parser #selectRemovableUnusedTempsFrom: stamp: 'Install-6742-DontAnnoyUserForDefinedButUnusedTemps-JuanVuletich-2024Sep23-12h21m-jmv.001.cs.st 10/10/2024 15:39:35'!
selectRemovableUnusedTempsFrom: someUnusedTemps

	^someUnusedTemps select: [ :temporaryNode |
		(UnusedVariable name: temporaryNode name) and: [
			temporaryNode isUndefTemp 
				ifTrue: [ true ] 
				ifFalse: [ 
					self inform: 'You''ll first have to remove the\statement where it''s stored into' withNewLines.
					false ]
			]
		].!

Parser removeSelector: #unusedTempsOf:!

!methodRemoval: Parser #unusedTempsOf: stamp: 'Install-6742-DontAnnoyUserForDefinedButUnusedTemps-JuanVuletich-2024Sep23-12h21m-jmv.001.cs.st 10/10/2024 15:39:35'!
unusedTempsOf: aNodeWithTemporaries

	^aNodeWithTemporaries temporaries select: [ :temporaryNode | temporaryNode isUnusedTemp ]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6742-DontAnnoyUserForDefinedButUnusedTemps-JuanVuletich-2024Sep23-12h21m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6742] on 25 September 2024 at 10:46:00 AM'!
!UnicodeString methodsFor: 'copying' stamp: 'jfr 9/25/2024 10:43:24' prior: 50374999 overrides: 16947368!
     copyFrom: startIndex to: stopIndex
	"Return a new string, a copy of me from startIndex to stopIndex, both character indices.
	Signal SubscriptOutOfBounds or CollectionIsEmpty in case of illegal indices."
	
	| startByteIndex stopByteIndex |
	startIndex > self size ifTrue: [ ^ self species empty ].
	stopIndex <= 0 ifTrue: [ ^ self species empty ].
	self boundsCheck: startIndex. 
	self boundsCheck: stopIndex. 
	startByteIndex := self byteIndexAt: startIndex.
	stopByteIndex := self byteIndexAt: stopIndex.
	stopByteIndex := stopByteIndex + (self encodedByteCountAt: stopByteIndex) - 1.
	^ self species
		fromUtf8Bytes: (bytes copyFrom: startByteIndex to: stopByteIndex)
		codePointCount: stopIndex-startIndex+1.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6743-UnicodeString-copyFromto-fix-JonRaiford-2024Sep25-10h35m-jfr.001.cs.st----!

'From Cuis7.1 [latest update: #6742] on 25 September 2024 at 12:40:28 pm'!
!SortedCollection methodsFor: 'private' stamp: 'jmv 9/25/2024 12:40:01' overrides: 16917652!
            species
	"aSortedCollection collect: should answer an OrderedCollection"

	^OrderedCollection! !

OrderedCollection removeSelector: #species!

!methodRemoval: OrderedCollection #species stamp: 'Install-6744-Allow-OrderedCollection-subclasses-JuanVuletich-2024Sep25-12h40m-jmv.001.cs.st 10/10/2024 15:39:35'!
species
	"aSortedCollection collect: should answer an OrderedCollection"

	^OrderedCollection!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6744-Allow-OrderedCollection-subclasses-JuanVuletich-2024Sep25-12h40m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6742] on 24 September 2024 at 12:46:42 pm'!
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 12:29:02'!
     editSubmenuSpec
	" 'Edit' SubMenu"

	^#(
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon 									'Find')
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 									'Find again')
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 									'Set selection as search string for find again')
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 									'Undo (multiple levels)')
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 									'Redo (multiple levels)')
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 									'Copy selection to the Clipboard')
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon 									'Cut selection and store it in the Clipboard')
		#(1120		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 									'Paste Clipboard contents')
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 									'Set font')
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
	).! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 12:31:45'!
         keyboardShortuctsSubmenuSpec
	"Keyboard shortcuts only"

	^#(
		#(1500		nil 							$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 							$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 							$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 							$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 							$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 							$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 							$T 	editor 			displayIfTrue)
		#(1511		nil 							$F 	editor 			displayIfFalse)
		#(1601 		nil 							$a 	editor 			selectAll 									nil 		'Select all')
		#(1602 		nil 							$C 	editor 			compareToClipboard 									nil 		'Compare argument to clipboard')
		#(1603 		nil 							$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 							$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 							$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 							$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')
	).! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 12:30:40'!
                   refactoringsSubmenuSpec
	" 'Refactorings' SubMenu"

	^#(
		#(2010 		'-----')
		#(2020		'Rename... (R)' 									$R 	editor 			contextualRename 										saveAsIcon 				'Renames what is under cursor')
		#(2030		'Extract as Parameter... (V)' 									$V 	editor 			contextualExtractAsParameter 										listAddIcon 				'Extracts the selected code as parameter')
		#(2040		'Add Parameter... (A)' 									$A 	editor 			contextualAddParameter 										listAddIcon 				'Adds parameter to message that is under cursor')
		#(2050		'Remove Parameter... (S)' 									$S 	editor 			contextualRemoveParameter 										listRemoveIcon 'Removes parameter to message that is under cursor')
		#(2060 		'-----')
		#(2070		'Extract Temporary... (J)' 									$J 	editor 			extractToTemporary 										saveAsIcon 				'Extracts the selected code into a temporary variable')
		#(2080		'Extract Method... (K)' 									$K 	editor 			extractMethod 										saveAsIcon 				'Extracts the selected code into a separate method')
		#(2090 		'-----')
		#(2100		'Inline Temporary... (O)' 									$O 	editor 			inlineTemporaryVariable 										saveAsIcon 				'Inlines the selected temporary variable into each usage')
		#(2110		'Inline Method... (F)' 									$F 	editor 			contextualInlineMethod 										saveAsIcon  				'Inlines the selected message send into desired colaborations')
		#(2120 		'-----')
		#(2130		'Temporary to Instance Variable (G)' 									$G 	editor 			temporaryToInstanceVariable 										saveAsIcon 				'Extracts temporary variable to instance variable')
		#(2140		'Push Up Instance Variable' 									nil 	editor 			contextualPushUpInClassDefinition 										goTopIcon)
		#(2150		'Push Down Instance Variable' 									nil 	editor 			contextualPushDownInClassDefinition 										goBottomIcon)
	).! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 12:45:55' prior: 50371660 overrides: 50360509!
                        defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| codeProvider acceptEntry methodEntries isEditingAMethod |
	isEditingAMethod := false.
	codeProvider := self codeProvider.
	((codeProvider is: #CodeProvider) and: [ codeProvider isEditingMethod ])
		ifTrue: [
			isEditingAMethod := true.
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(240				'Accept (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save') ]
				ifFalse: [ #(240 				'Accept' 							nil 	editor 			nil 						acceptIcon 							'Save') ].
			methodEntries := #(
				#(170 		'-----')
				#(180		'Refactorings' 									nil 	nil 			2000 						listAddIcon)
				#(250		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
				#(260		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
				#(270		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')
			) ]
		ifFalse: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(240				'Save to file (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save contents to a file') ]
				ifFalse: [ #(240 				'Save to file' 							nil 	editor 			nil 						acceptIcon 							'Save contents to a file') ]].
	^Array streamContents: [ :strm |
		strm nextPutAll:
			#(
				#(0 		'Smalltalk Editor' 					true)
				#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
				#(20 		'-----')
				#(30		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
				#(40		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
				#(50		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
				#(60		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon							'Inspect via Object Explorer')
				#(70		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon							'Debug it')
				#(80		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
				#(90 		'-----')
				#(100		'Edit' 							nil 	nil 			1000 						textEditorIcon)
				#(110 		'-----')
				#(120		'Explain' 							nil 	editor 			explain 						helpIcon)
				#(130		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
				#(140		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(150		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(160		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
				#(190 		'-----')
				#(200		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
				#(210		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
				#(220		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
				#(230 		'-----')
			);
			nextPut: acceptEntry.
		isEditingAMethod ifTrue: [
			strm nextPutAll: methodEntries ].
		strm
			nextPutAll: self editSubmenuSpec;
			nextPutAll: self keyboardShortuctsSubmenuSpec.
		isEditingAMethod ifTrue: [
			strm nextPutAll: self refactoringsSubmenuSpec ].
	].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6745-SmalltalkEditor-menuSpec-refactor-JuanVuletich-2024Sep24-12h28m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6748] on 25 September 2024 at 4:13:35 pm'!
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:02:54'!
 showByteCodes
	self contentsSymbol: #byteCodes! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:37:03'!
    showDecompile
	self contentsSymbol: #decompile! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:05:46'!
    showLineDiffs
	self contentsSymbol: #lineDiffs! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:33:39'!
    showPrettyLineDiffs
	self contentsSymbol: #prettyLineDiffs! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:04:47'!
                        showPrettyPrint
	self contentsSymbol: #prettyPrint! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:33:49'!
showPrettyWordDiffs
	self contentsSymbol: #prettyWordDiffs! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 12:58:48'!
                        showSource
	self contentsSymbol: #source! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:34:00'!
          showWordDiffs
	self contentsSymbol: #wordDiffs! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:25:11'!
    showingPrettyPrintString
	"Answer whether the receiver is showing pretty-print"

	^ self showingPrettyPrint asMenuItemTextPrefix,
		'prettyPrint'! !
!CodeProvider methodsFor: 'what to show' stamp: 'jmv 9/24/2024 13:24:22'!
 showingSourceString
	"Answer a string telling whether the receiver is showing plain source"

	^ self showingSource asMenuItemTextPrefix,
		'source'! !
!CodeProvider methodsFor: 'contents' stamp: 'jmv 9/24/2024 13:53:19' prior: 16825649 overrides: 16983601!
                               acceptedStringOrText
	"Answer the source code or documentation for the selected method"

	self showingByteCodes ifTrue: [
		^ self selectedBytecodes].

	^ self selectedMessage! !
!CodeProvider methodsFor: 'diffs' stamp: 'jmv 9/25/2024 16:01:04' prior: 16826047!
                          toggleLineDiffing
	"Toggle whether regular-diffing should be shown in the code pane"

	self showingLineDiffs
		ifFalse: [self showLineDiffs]
		ifTrue: [self showSource]! !
!CodeProvider methodsFor: 'diffs' stamp: 'jmv 9/25/2024 16:00:39' prior: 16826063!
 togglePrettyLineDiffing
	"Toggle whether pretty-diffing should be shown in the code pane"

	self showingPrettyLineDiffs
		ifFalse: [self showPrettyLineDiffs]
		ifTrue: [self showSource]! !
!CodeProvider methodsFor: 'diffs' stamp: 'jmv 9/25/2024 16:00:53' prior: 16826079!
                togglePrettyWordDiffing
	"Toggle whether pretty-diffing should be shown in the code pane"

	self showingPrettyWordDiffs
		ifFalse: [self showPrettyWordDiffs]
		ifTrue: [self showSource]! !
!CodeProvider methodsFor: 'diffs' stamp: 'jmv 9/25/2024 16:01:21' prior: 16826086!
                toggleWordDiffing
	"Toggle whether regular-diffing should be shown in the code pane"

	self showingWordDiffs
		ifFalse: [self showWordDiffs]
		ifTrue: [self showSource]! !
!CodeProvider methodsFor: 'misc' stamp: 'jmv 9/24/2024 13:53:25' prior: 16826119!
  okayToAccept
	"Answer whether it is okay to accept the receiver's input"

	self showingByteCodes ifTrue: [
		self inform: 
'Sorry, you can only submit changes here 
when you are showing source.'.
		^ false].

	self showingAnyKindOfDiffs ifTrue: [
		^ SelectionMenu confirm: 
'Caution!!  You are "showing diffs" here, so 
there is a danger that some of the text in the
code pane is contaminated by the "diff" display'
		trueChoice: 'accept anyway -- I''ll take my chances' falseChoice: 'um, let me reconsider' icons: #(acceptIcon cancelIcon)
	].

	^ true! !
!CodeProvider methodsFor: 'message list' stamp: 'jmv 9/24/2024 13:54:35' prior: 16826357!
                         selectedMessage
	"Answer a copy of the source code for the selected message.  This generic version is probably actually never reached, since every subclass probably reimplements and does not send to super.  In time, ideally, most, or all, reimplementors would vanish and all would defer instead to a universal version right here.  Everything in good time."

	| class selector method |

	self showingDecompile ifTrue: [
		^ self decompiledSource ].

	class := self selectedClassOrMetaClass.
	(class isNil or: [(selector := self selectedMessageName) isNil]) ifTrue: [^ ''].
	method := class compiledMethodAt: selector ifAbsent: [^ ''].	"method deleted while in another project"
	currentCompiledMethod := method.

	^ self sourceStringPrettifiedAndDiffed
			copy! !
!Browser methodsFor: 'message list' stamp: 'jmv 9/24/2024 13:53:37' prior: 16798489 overrides: 50386883!
                             selectedMessage
	"Answer a copy of the source code for the selected message."

	| class selector method |
	self showingDecompile ifTrue: [
		^ self decompiledSource ].

	class := self selectedClassOrMetaClass.
	selector := self selectedMessageName.
	method := class compiledMethodAt: selector ifAbsent: [^ ''].	"method deleted while in another project"
	currentCompiledMethod := method.

	^ self sourceStringPrettifiedAndDiffed
			copy! !
!MethodSet methodsFor: 'message list' stamp: 'jmv 9/24/2024 13:53:46' prior: 16901341 overrides: 50386883!
                              selectedMessage
	"Answer the source method for the currently selected message."

	| class selector |
	selectedMessage ifNil: [^ 'Class vanished'].
	
	class := selectedMessage actualClass.
	selector := selectedMessage methodSymbol.
	selector ifNil: [ ^'prims'].

	selector first isUppercase ifTrue: [
		selector == #Comment ifTrue: [
			currentCompiledMethod := class organization commentRemoteStr.
			^ class comment ].
		selector == #Definition ifTrue: [
			^ class definition ].].

	(class notNil and: [ class includesSelector: selector]) ifFalse: [
		currentCompiledMethod := nil.
		^ 'Missing'].

	self showingDecompile ifTrue: [
		^ self decompiledSource ].

	currentCompiledMethod := class compiledMethodAt: selector ifAbsent: nil.

	^self sourceStringPrettifiedAndDiffed! !
!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 9/24/2024 13:16:21' prior: 16826731!
                           optionalButtonRow
	"Answer a row of control buttons"

	| row buttons widths buttonColor |
	buttons := OrderedCollection new.
	widths := OrderedCollection new.
	buttonColor := self buttonColor.
	self optionalButtonTuples do: [ :tuple | | button |
		widths add: tuple first.
		button := PluggableButtonMorph
			model: self
			action: tuple third.
		button color: buttonColor.
		button label: tuple second.
		tuple size > 3 ifTrue: [ button setBalloonText: tuple fourth ].
		tuple size > 4 ifTrue: [ button secondaryActionSelector: tuple fifth ].
		buttons add: button ].
	row := LayoutMorph newRow.
	row doAdoptWidgetsColor.
	row color: buttonColor.
	row
		addMorphs: buttons
		widthProportionalTo: widths.
	^ row.! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 13:57:21' prior: 50371151!
                 messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 									preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 									debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(70 		'-----')
		#(80		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(90		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(100		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(110		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(120 		'-----')
		#(130		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(140		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(150		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 									developmentIcon)
		#(160		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(170		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(180 		'-----')
		#(190		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(200		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(210		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(2020		'local implementors of...' 								nil 	window 			browseLocalImplementorsOfMessages 											classIcon)
		#(2030 		'-----')
		#(2040		'sample instance' 								nil 	window 			makeSampleInstance 											instanceIcon)
		#(2050		'inspect instances' 								nil 	window 			inspectInstances 											inspectIcon)
		#(2060		'inspect subinstances' 								nil 	window 			inspectSubInstances 											inspectIcon)
		#(2070 		'-----')
		#(2080		'change category...' 								nil 	model 			changeCategory 											saveAsIcon)
		#(2090		'select method category (C)' 								$C 	model 			showHomeCategory 											editFindReplaceIcon)
		#(2100		'change sets with this method' 								nil 	window 			findMethodInChangeSets 											changesIcon)
		#(2110		'revert to previous version' 								nil 	model 			revertToPreviousVersion 											undoIcon)
	)! !
!ChangeListWindow methodsFor: 'GUI building' stamp: 'jmv 9/25/2024 15:47:50' prior: 16805343 overrides: 50386957!
  optionalButtonRow
	"Answer a row of buttons to occur in a tool pane"

	| row buttons widths buttonColor |
	buttons := OrderedCollection new.
	widths := OrderedCollection new.
	buttonColor := self buttonColor.
	self optionalModelButtonTuples do: [ :tuple | | button |
		widths add: tuple first.
		button := PluggableButtonMorph 
					model: model
					action: tuple third.
		button color: buttonColor.
		button label: tuple second.
		buttons add: button.
		button setBalloonText: tuple fourth].
	buttons add: self lineDiffButton.
	widths add: 14.
	buttons add: self wordDiffButton.
	widths add: 16.
	model wantsPrettyDiffOption ifTrue: [
		buttons add:  self prettyLineDiffButton.
		widths add: 21.
		buttons add:  self prettyWordDiffButton.
		widths add: 23 ].
	row := LayoutMorph newRow.
	row doAdoptWidgetsColor.
	row color: buttonColor.
	row addMorphs: buttons widthProportionalTo: widths.
	^row! !
!ChangeListWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 13:59:38' prior: 50345339!
                    listMenuSpec
	"Spec for the menu and shortcut keys for the changes list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Change List' 									true)
		#(10		'fileIn selections' 									nil 	model 			fileInSelections 										nil
					'import the selected items into the image')
		#(20		'fileOut selections...	' 								nil 	model 			fileOutSelections 										nil
		 			'create a new file containing the selected items')
		#(30		'fileOut current version of selections...' 					nil 					model 			fileOutCurrentVersionsOfSelections 										nil
 					'create a new file containing the current (in-image) counterparts of the selected methods')
		#(40 		'-----')
		#(50		'compare to current' 									nil 	model 			compareToCurrentVersion 										nil
 					'open a separate window which shows the text differences between the on-file version and the in-image version.')
		#(60 		'-----')
		#(70		'select new methods' 									nil 	model 			selectNewMethods 										nil
 					'select methods in the file that do not currently exist in the image')
		#(80		'select changes for absent classes' 									nil 	model 			selectAllForAbsentClasses 										nil
					'select methods in the file for classes that are not defined in the image')
		#(90		'select all changes for this class' 									nil 	model 			selectAllForThisClass 										nil
					'select all methods in the file that belong to the currently-selected class')
		#(100		'select unchanged methods' 									nil 	model 			selectUnchangedMethods 										nil
					'select methods in the file whose in-image versions are the same as their in-file counterparts')
		#(110		'select methods equivalent to current' 									nil 	model 			selectEquivalentMethods 										nil
					'select methods in the file whose in-image versions have the same behavior as their in-file counterparts')
		#(120		'select methods older than current' 									nil 	model 			selectMethodsOlderThanCurrent 										nil
					'select methods in the file that are older than the one currently in the image')
		#(130		'select removals of sent methods' 									nil 	model 			selectRemovalsOfSent 										nil
					'select all method removals of methods that have some sender in the image')
		#(140 		'-----')
		#(150		'select all (a)' 									$a 	model 			selectAll 										nil
					'select all the items in the list')
		#(160		'deselect all (A)' 									$A 	model 			deselectAll 										nil
					'deselect all the items in the list')
		#(170		'invert selections' 									nil 	model 			invertSelections 										nil
					'select every item that is not currently selected, and deselect every item that *is* currently selected')
		#(180 		'-----')
		#(190		'browse class and method' 									nil 	window 			browseMethodFull 										nil
					'open a full browser showing the selected method')
		#(200		'browse all versions of single selection' 									nil 	window 			browseVersions 										nil
					'open a version browser showing the versions of the currently selected method')
		#(210		'browse current versions of selections' 									nil 	window 			browseCurrentVersionsOfSelections 										nil
					'open a message-list browser showing the current (in-image) counterparts of the selected methods')
		#(220		'destroy current methods of selections' 									nil 	model 			destroyCurrentCodeOfSelections 										nil
					'remove (*destroy*) the in-image counterparts of all selected methods')
		#(230 		'-----')
		#(240		'remove doIts' 									nil 	model 			removeDoIts 										nil
					'remove all items that are doIts rather than definitions')
		#(250		'remove older versions' 									nil 	model 			removeOlderMethodVersions 										nil
					'remove all but the most recent versions of methods in the list')
		#(260		'remove up-to-date versions' 									nil 	model 			removeUpToDate 										nil
					'remove all items whose code is the same as the counterpart in-image code')
		#(270		'remove empty class comments' 									nil 	model 			removeEmptyClassComments 										nil
					'remove all empty class comments')
		#(280		'remove selected items' 									nil 	model 			removeSelections 										nil
					'remove the selected items from the change-list')
		#(290		'remove unselected items' 									nil 	model 			removeNonSelections 										nil
					'remove all the items not currently selected from the change-list')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 14:00:02' prior: 50342267!
              classCommentVersionsMenuSpec
	"Spec for the menu and shortcut keys for a class comment version in the versions list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Versions' 							true)
		#(10		'compare to current' 							nil 	model 			compareToCurrentVersion 										nil
					'compare selected version to the current version')
		#(20		'revert to selected version' 							nil 	model 			fileInSelections 										nil
					'resubmit the selected version, so that it becomes the current version')
		#(30 		'-----')
		#(40		'update list' 							nil 	model 			reformulateList 										nil
					'reformulate the list of versions, in case it somehow got out of synch with reality')
		#(50 		'-----')
		#(60		'help...' 							nil 	model 			offerVersionsHelp 										nil
					'provide an explanation of the use of this tool')
	)! !
!VersionsBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 14:00:20' prior: 50342301!
                    methodVersionsMenuSpec
	"Spec for the menu and shortcut keys for a method version in the versions list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
				#(0 		'Versions' 									true)
	).
	model listIndex > 0 ifTrue: [
		(model list size > 1 ) ifTrue: [
			answer := answer, #(
				#(10		'compare to current' 									nil 	model 			compareToCurrentVersion 									nil
							'compare selected version to the current version')
				#(20		'compare to version...' 									nil 	model 			compareToOtherVersion 									nil
							'compare selected version to another selected version'))].
		answer := answer, #(
				#(30		'revert to selected version (z)' 									$z 	model 			fileInSelections 									nil
							'resubmit the selected version, so that it becomes the current version'))].
	answer := answer, #(
				#(40		'edit current method (O)' 									$O 	window 			openSingleMessageBrowser 									nil
							'open a single-message browser on the current version of this method')
				#(50 		'-----')
				#(60		'update list' 									nil 	model 			reformulateList 									nil
							'reformulate the list of versions, in case it somehow got out of synch with reality')
				#(70 		'-----')
				#(80		'senders (n)' 									$n 	window 			browseSenders 									nil
							'browse all senders of this selector')
				#(90		'implementors (m)' 									$m 	window 			browseImplementors 									nil
							'browse all implementors of this selector')
				#(100 		'-----')
				#(110		'help...' 									nil 	model 			offerVersionsHelp 									nil
							'provide an explanation of the use of this tool')
	).
	^answer! !
!DebuggerWindow methodsFor: 'GUI building' stamp: 'jmv 9/24/2024 13:17:09' prior: 16845141!
  customButtonRow
	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'customButtonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"

	| button buttons row buttonColor |
	
	buttons := OrderedCollection new.
	buttonColor := self buttonColor.
	"button with target = self"
	button := PluggableButtonMorph 
		model: self
		action: #proceed.
	button color: buttonColor.
	button label: 'Proceed'.
	button setBalloonText: 'close the debugger and proceed.'.
	buttons add: button.
	"buttons with model target"
	self customButtonSpecs do: [ :tuple |
		button := PluggableButtonMorph 
					model: self
					action: tuple second.
		button color: buttonColor.
		button label: tuple first.
		tuple size > 2 ifTrue: [button setBalloonText: tuple third].
		buttons add: button].

	row := LayoutMorph newRow.
	row doAdoptWidgetsColor.
	row color: buttonColor.
	row addMorphs: buttons.
	^row! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 14:00:57' prior: 50374728!
                              messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'what to show...' 							nil 	window 			offerWhatToShowMenu 											preferencesIcon)
		#(20		'toggle break on entry' 							nil 	model 			toggleBreakOnEntry 											debugIcon)
		#(30 		'-----')
		#(40		'browse full (b)' 							$b 	window 			browseMethodFull 											editFindReplaceIcon)
		#(50		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 											goTopIcon)
		#(60		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 											scriptIcon)
		#(70		'browse protocol (p)' 							$p 	window 			browseFullProtocol 											spreadsheetIcon)
		#(80 		'-----')
		#(90		'fileOut' 							nil 	model 			fileOutMessage 											fileOutIcon)
		#(100		'run test (t)' 							$t 	model 			runMethodTest 											weatherFewCloudsIcon)
		#(110		'debug test (r)' 							$r 	model 			debugMethodTest 											weatherFewCloudsIcon)
		#(120		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 											exploreIcon)
		#(130 		'-----')
		#(140		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 											mailForwardIcon)
		#(150		'local senders of...' 							nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(160		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 											developmentIcon)
		#(170		'local implementors of...' 							nil 	window 			browseLocalImplementorsOfMessages 											developmentIcon)
		#(180		'inheritance (i)' 							$i 	window 			methodInheritance 											goDownIcon)
		#(190		'versions (v)' 							$v 	window 			browseVersions 											clockIcon)
		#(200 		'-----')
		#(210		'remove method (x)' 							$x 	model 			removeMessage 											deleteIcon)
		#(220		'more' 							nil 	nil 			2000 											listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)
		#(994		nil 							$N 	window 			browseClassRefs)

		" 'more' SubMenu"
		#(2010		'sample instance' 								nil 	window 			makeSampleInstance 										instanceIcon)
		#(2020		'inspect instances' 								nil 	window 			inspectInstances 										inspectIcon)
		#(2030		'inspect subinstances' 								nil 	window 			inspectSubInstances 										inspectIcon)
		#(2040 		'-----')
		#(2050 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 										listRemoveIcon)
		#(2060 		'filter message list...' 								nil 	window 			filterMessageList 										findIcon)
		#(2070		'change category...' 								nil 	model 			changeCategory 										saveAsIcon)
		#(2080		'change sets with this method' 								nil 	window 			findMethodInChangeSets 										changesIcon)
		#(2090		'revert to previous version' 								nil 	model 			revertToPreviousVersion 										undoIcon)
		#(2100 		'-----')
		#(2110 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 										classIcon)
		#(2120 		'sort by class name' 								nil 	model 			sortByClassName 										classIcon)
		#(2130 		'sort by selector' 								nil 	model 			sortBySelector 										scriptIcon)
		#(2140 		'sort by date' 								nil 	model 			sortByDate 										dateIcon)
		#(2150 		'reverse sort' 								nil 	model 			sortReverse 										redoIcon)
	).
! !
!ProtocolBrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 14:18:08' prior: 50346902 overrides: 50387405!
            messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^ super messageListMenuSpec, #(
		#(81		'select method category (C)' 							$C 	model 			showHomeCategory 						editFindReplaceIcon)
		#(2050 		'XXremove from this browser')
		#(2060 		'XXfilter message list...'))! !
!FileListWindow methodsFor: 'GUI building' stamp: 'jmv 9/24/2024 13:17:13' prior: 16862696!
                     buttonToTriggerIn: aFileList for: service
	"Answer a button that will trigger the receiver service in a file list"

	| aButton |
	service argumentProvider: aFileList.
	aButton := PluggableButtonMorph 
				model: service
				action: #performService.
	aButton label: service buttonLabel.
	aButton color: self buttonColor.
	aButton setBalloonText: service description.
	^aButton! !

ChangeSorter removeSelector: #toggleDiffing!

!methodRemoval: ChangeSorter #toggleDiffing stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
toggleDiffing
	"Toggle whether diffs should be shown in the code pane"

	super toggleDiffing.
	self acceptedContentsChanged.
	self update!

CodeProvider removeSelector: #toggleDecompile!

!methodRemoval: CodeProvider #toggleDecompile stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
toggleDecompile
	"Toggle the setting of the showingDecompile flag, unless there are unsaved edits that the user declines to discard"

	self showDecompile: self showingDecompile not!

CodeProvider removeSelector: #showingDocumentationString!

!methodRemoval: CodeProvider #showingDocumentationString stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showingDocumentationString
	"Answer a string characerizing whether documentation is showing"

	^ self showingDocumentation asMenuItemTextPrefix,
		'documentation'!

CodeProvider removeSelector: #showDecompile:!

!methodRemoval: CodeProvider #showDecompile: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showDecompile: aBoolean
	"Set the decompile toggle as indicated"

	self contentsSymbol: (aBoolean ifFalse: [#source] ifTrue: [#decompile])!

CodeProvider removeSelector: #prettyPrintString!

!methodRemoval: CodeProvider #prettyPrintString stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
prettyPrintString
	"Answer whether the receiver is showing pretty-print"

	^ self showingPrettyPrint asMenuItemTextPrefix,
		'prettyPrint'!

CodeProvider removeSelector: #showWordDiffs:!

!methodRemoval: CodeProvider #showWordDiffs: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showWordDiffs: aBoolean
	"Set whether I'm showing regular diffs as indicated"

	self showingWordDiffs
		ifFalse: [
			aBoolean ifTrue: [
				self contentsSymbol: #wordDiffs]]
		ifTrue: [
			aBoolean ifFalse: [
				self contentsSymbol: #source]]!

CodeProvider removeSelector: #showPrettyWordDiffs:!

!methodRemoval: CodeProvider #showPrettyWordDiffs: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showPrettyWordDiffs: aBoolean
	"Set whether I'm showing pretty diffs as indicated"

	self showingPrettyWordDiffs
		ifFalse: [
			aBoolean ifTrue: [
				self contentsSymbol: #prettyWordDiffs]]
		ifTrue: [
			aBoolean ifFalse: [
				self contentsSymbol: #source]]!

CodeProvider removeSelector: #showComment!

!methodRemoval: CodeProvider #showComment stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showComment
	"Answer whether the receiver should show documentation rather than, say, source code"

	^ self contentsSymbol == #documentation
!

CodeProvider removeSelector: #showingDocumentation!

!methodRemoval: CodeProvider #showingDocumentation stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showingDocumentation
	"Answer whether the receiver should show documentation rather than, say, source code"

	^ self contentsSymbol == #documentation
!

CodeProvider removeSelector: #showingPlainSourceString!

!methodRemoval: CodeProvider #showingPlainSourceString stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showingPlainSourceString
	"Answer a string telling whether the receiver is showing plain source"

	^ self showingPlainSource asMenuItemTextPrefix,
		'source'!

CodeProvider removeSelector: #togglePrettyPrint!

!methodRemoval: CodeProvider #togglePrettyPrint stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
togglePrettyPrint
	"Toggle whether pretty-print is in effectin the code pane"

	self showingPrettyPrint
		ifTrue: [
			self contentsSymbol: #source]
		ifFalse: [
			self contentsSymbol: #prettyPrint]!

CodeProvider removeSelector: #showDocumentation:!

!methodRemoval: CodeProvider #showDocumentation: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showDocumentation: aBoolean
	"Set the showDocumentation toggle as indicated"

	self contentsSymbol: (aBoolean ifFalse: [#source] ifTrue: [#documentation])!

CodeProvider removeSelector: #togglePlainSource!

!methodRemoval: CodeProvider #togglePlainSource stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
togglePlainSource
	"Toggle whether plain source shown in the code pane"
	self showingPlainSource
		ifTrue: [
			self contentsSymbol: #documentation]
		ifFalse: [
			self contentsSymbol: #source]!

CodeProvider removeSelector: #commentContents!

!methodRemoval: CodeProvider #commentContents stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
commentContents
	"documentation for the selected method"

	| poss aClass aSelector |
	^ (poss := (aClass := self selectedClassOrMetaClass)
						ifNil:
							['----']
						ifNotNil:
							[(aSelector := self selectedMessageName)
								ifNil:
									['---']
								ifNotNil:
									[(aClass precodeCommentOrInheritedCommentFor: aSelector)", String crString, String crString, self timeStamp"
"which however misses comments that are between the temps  declaration and the body of the method; those are picked up by [aClass commentOrInheritedCommentFor: aSelector] but that method will get false positives from comments *anywhere* in the method source"]])
		isEmptyOrNil
			ifTrue:
				[aSelector
					ifNotNil:
						[((aClass methodHeaderFor: aSelector), '

Has no comment') ]
					ifNil:
						['Hamna']]
			ifFalse:	[aSelector
				ifNotNil: [((aClass methodHeaderFor: aSelector), '

', poss) ]
				ifNil: [poss]]!

CodeProvider removeSelector: #showByteCodes:!

!methodRemoval: CodeProvider #showByteCodes: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showByteCodes: aBoolean
	"Get into or out of bytecode-showoing mode"

	aBoolean
		ifTrue: [
			self contentsSymbol: #byteCodes]
		ifFalse: [
			self contentsSymbol == #byteCodes ifTrue: [
				self contentsSymbol: #source]]!

CodeProvider removeSelector: #showDiffs:!

!methodRemoval: CodeProvider #showDiffs: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showDiffs: aBoolean
	"Set whether I'm showing diffs as indicated; use the global preference to determine which kind of diffs to institute."

	self showingAnyKindOfDiffs
		ifFalse: [
			aBoolean ifTrue: [
				self contentsSymbol: self defaultDiffsSymbol]]
		ifTrue: [
			aBoolean ifFalse: [
				self contentsSymbol: #source]]!

CodeProvider removeSelector: #showLineDiffs:!

!methodRemoval: CodeProvider #showLineDiffs: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showLineDiffs: aBoolean
	"Set whether I'm showing regular diffs as indicated"

	self showingLineDiffs
		ifFalse: [
			aBoolean ifTrue: [
				self contentsSymbol: #lineDiffs]]
		ifTrue: [
			aBoolean ifFalse: [
				self contentsSymbol: #source]]!

CodeProvider removeSelector: #toggleShowDocumentation!

!methodRemoval: CodeProvider #toggleShowDocumentation stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
toggleShowDocumentation
	"Toggle the setting of the showingDocumentation flag, unless there are unsaved edits that the user declines to discard"

	self showDocumentation: self showingDocumentation not!

CodeProvider removeSelector: #toggleDiffing!

!methodRemoval: CodeProvider #toggleDiffing stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
toggleDiffing
	"Toggle whether diffs should be shown in the code pane.  If any kind of diffs were being shown, stop showing diffs.  If no kind of diffs were being shown, start showing whatever kind of diffs are called for by default."

	self showDiffs: self showingAnyKindOfDiffs not!

CodeProvider removeSelector: #showingPlainSource!

!methodRemoval: CodeProvider #showingPlainSource stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showingPlainSource
	"Answer whether the receiver is showing plain source"

	^ self contentsSymbol == #source!

CodeProvider removeSelector: #toggleShowingByteCodes!

!methodRemoval: CodeProvider #toggleShowingByteCodes stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
toggleShowingByteCodes
	"Toggle whether the receiver is showing bytecodes"

	self showByteCodes: self showingByteCodes not!

CodeProvider removeSelector: #showPrettyLineDiffs:!

!methodRemoval: CodeProvider #showPrettyLineDiffs: stamp: 'Install-6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
showPrettyLineDiffs: aBoolean
	"Set whether I'm showing pretty diffs as indicated"

	self showingPrettyLineDiffs
		ifFalse: [
			aBoolean ifTrue: [
				self contentsSymbol: #prettyLineDiffs]]
		ifTrue: [
			aBoolean ifFalse: [
				self contentsSymbol: #source]]!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6746-WhatToShow-simplification-cleanup-JuanVuletich-2024Sep25-16h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6744] on 24 September 2024 at 4:24:11 pm'!
!CodeProvider methodsFor: 'controls' stamp: 'jmv 9/24/2024 15:48:03'!
           whatToShowSubmenuSpec
	" 'What to Show' SubMenu"
	^{
		{3010. 		'-----'}.
		{3020.	 	self showingSourceString. 								nil. 	#codeProvider. 					#showSource. 							nil. 'the textual source code as written'}.
		{3030. 		'-----'}.
		{3040.		self showingPrettyPrintString. 								nil. 	#codeProvider. 					#showPrettyPrint. 							nil. 'the method source presented in a standard text format'}.
		{3050. 		'-----'}.
		{3060.		self showingLineDiffsString. 								nil. 	#codeProvider. 					#showLineDiffs. 			 				nil. 'the textual source lines diffed from its prior version'}.
		{3070.		self showingWordDiffsString. 								nil. 	#codeProvider. 					#showWordDiffs. 			 				nil. 'the textual source words diffed from its prior version'}.
		{3080.		self showingPrettyLineDiffsString. 								nil. 	#codeProvider. 					#showPrettyLineDiffs. 			 				nil. 'formatted source lines diffed from formatted prior version'}.
		{3090.		self showingPrettyWordDiffsString. 								nil. 	#codeProvider. 					#showPrettyWordDiffs. 			 				nil. 'formatted source words diffed from formatted prior version'}.
		{3100. 		'-----'}.
		{3110.		self showingDecompileString. 								nil. 	#codeProvider. 					#showDecompile. 			 				nil. 'source code decompiled from byteCodes'}.
		{3120.		self showingByteCodesString. 								nil. 	#codeProvider. 					#showByteCodes. 			 				nil. 'the bytecodes that comprise the compiled method'}.
	}.
! !
!CodeFileBrowser methodsFor: 'controls' stamp: 'jmv 9/24/2024 16:10:45' overrides: 50387862!
                          whatToShowSubmenuSpec
	" 'What to Show' SubMenu"
	^{
		{3010. 		'-----'}.
		{3020.	 	self showingSourceString. 								nil. 	#codeProvider. 					#showSource. 							nil. 'the textual source code as written'}.
		{3030. 		'-----'}.
		{3040.		self showingLineDiffsString. 								nil. 	#codeProvider. 					#showLineDiffs. 			 				nil. 'the textual source lines diffed from its prior version'}.
		{3050.		self showingWordDiffsString. 								nil. 	#codeProvider. 					#showWordDiffs. 			 				nil. 'the textual source words diffed from its prior version'}.
		{3060.		self showingPrettyLineDiffsString. 								nil. 	#codeProvider. 					#showPrettyLineDiffs. 			 				nil. 'formatted source lines diffed from formatted prior version'}.
		{3070.		self showingPrettyWordDiffsString. 								nil. 	#codeProvider. 					#showPrettyWordDiffs. 			 				nil. 'formatted source words diffed from formatted prior version'}.
	}.
! !
!ChangeList methodsFor: 'controls' stamp: 'jmv 9/24/2024 16:10:58' overrides: 50387862!
                      whatToShowSubmenuSpec
	" 'What to Show' SubMenu"
	^{
		{3010. 		'-----'}.
		{3020.	 	self showingSourceString. 								nil. 	#codeProvider. 					#showSource. 							nil. 'the textual source code as written'}.
		{3030. 		'-----'}.
		{3040.		self showingLineDiffsString. 								nil. 	#codeProvider. 					#showLineDiffs. 			 				nil. 'the textual source lines diffed from its prior version'}.
		{3050.		self showingWordDiffsString. 								nil. 	#codeProvider. 					#showWordDiffs. 			 				nil. 'the textual source words diffed from its prior version'}.
		{3060.		self showingPrettyLineDiffsString. 								nil. 	#codeProvider. 					#showPrettyLineDiffs. 			 				nil. 'formatted source lines diffed from formatted prior version'}.
		{3070.		self showingPrettyWordDiffsString. 								nil. 	#codeProvider. 					#showPrettyWordDiffs. 			 				nil. 'formatted source words diffed from formatted prior version'}.
	}.
! !
!ClassCommentVersionsBrowser methodsFor: 'controls' stamp: 'jmv 9/24/2024 16:10:19' overrides: 50387942!
     whatToShowSubmenuSpec
	" 'What to Show' SubMenu"
	^{
		{3010. 		'-----'}.
		{3020.	 	self showingSourceString. 								nil. 	#codeProvider. 					#showSource. 							nil. 'the textual source code as written'}.
		{3030. 		'-----'}.
		{3040.		self showingLineDiffsString. 								nil. 	#codeProvider. 					#showLineDiffs. 			 				nil. 'the textual source lines diffed from its prior version'}.
	}.
! !
!InnerTextMorph methodsFor: 'accessing' stamp: 'jmv 9/24/2024 10:25:58'!
        codeProvider
	"Return my Text Provider."
	editor ifNil: [ self installEditorAndTextComposition ].
	^editor codeProvider! !
!InnerTextMorph methodsFor: 'editing' stamp: 'jmv 9/24/2024 10:15:18'!
                              model
	^model! !
!CodeWindow methodsFor: 'GUI building' stamp: 'jmv 9/24/2024 15:57:15' prior: 50370924!
                       optionalButtonTuples
	"Answer a tuple buttons, in the format:
			button label
			selector to send
			help message"

	| aList textConstructor |
	textConstructor := [ :string :backgroundColor | 
		string asText addAttribute: (TextBackgroundColor color: backgroundColor) ].

	aList := #(
		(10	'browse'				browseMethodFull									'view this method in a browser'								browseMethodFullAndReplaceMe)
		(11	'senders' 				browseSendersOfMessages									'browse senders of...'								browseSenders)
		(16	'implementors'				browseImplementorsOfMessages									'browse implementors of...' 								browseImplementors)
		(12	'versions'				browseVersions									'browse versions')), 

		((Preferences at: #decorateBrowserButtons)
			ifTrue: [
				{{13	. 'inheritance'.	 #methodInheritance. 	'Browse Method Inheritance

', (textConstructor value: 'green' value: `Color green muchLighter`),': sends to super
', (textConstructor value: 'tan' value: `Color tan`), ': has override(s)
', (textConstructor value: 'mauve' value: `Color blue muchLighter`), ': both of the above
', (textConstructor value: 'pink' value: `Color red muchLighter`), ': is an override but doesn''t call super
', (textConstructor value: 'pinkish tan' value: `Color r: 0.94 g: 0.823 b: 0.673`), ': has override(s), also is an override but doesn''t call super
'. #methodInheritanceAndReplaceMe }}]
			ifFalse: [
				{#(13	'inheritance'		 methodInheritance	 'browse method inheritance'. #methodInheritanceAndReplaceMe)}]),

		#(
		(12	'hierarchy'				browseHierarchy									'browse class hierarchy'								browseHierarchyAndReplaceMe)
		(10	'inst vars'				browseInstVarRefs									'inst var refs...')
		(11	'class vars'				browseClassVarRefs									'class var refs...')).

	^ aList! !
!BrowserWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 16:18:17' prior: 50386983!
             messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message List' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 									editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 									goTopIcon)
		#(30		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 									scriptIcon)
		#(40 		'-----')
		#(50		'fileOut' 							nil 	model 			fileOutMessage 									fileOutIcon)
		#(60		'run test (t)' 							$t 	model 			runMethodTest 									weatherFewCloudsIcon)
		#(70		'debug test (r)' 							$r 	model 			debugMethodTest 									weatherFewCloudsIcon)
		#(80		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 									exploreIcon)
		#(90 		'-----')
		#(100		'refactorings' 							nil 	nil 			1000 									listAddIcon)
		#(110		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 									mailForwardIcon)
		#(120		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 									developmentIcon)
		#(130		'inheritance (i)' 							$i 	window 			methodInheritance 									goDownIcon)
		#(140		'versions (v)' 							$v 	window 			browseVersions 									clockIcon)
		#(150 		'-----')
		#(160		'remove method (x)' 							$x 	model 			removeMessage 									deleteIcon)
		#(170		'remove method in hierarchy' 							nil 	model 			removeMessageInHierarchy 									deleteIcon)
		#(180		'more' 							nil 	nil 			2000 									listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)

		" 'refactorings' SubMenu"
		#(1010		'rename... (R)' 											$R 	model 			renameSelector 											saveAsIcon)
		#(1020		'change keyword order...' 											nil 	model 			changeKeywordOrder 											sendReceiveIcon)
		#(1030		'add parameter... (A)' 											$A 	model 			addParameter 											listAddIcon)
		#(1040		'remove parameter... (S)' 											$S 	model 			removeParameter 											listRemoveIcon)
		#(1050 		'-----')
		#(1060		'inline method... (F)' 											$F 	model 			inlineMethod 											saveAsIcon)
		#(1070		'move to instance/class method' 											nil 	model 			moveToInstanceOrClassMethod 											changesIcon)
		#(1080		'push up' 											nil 	model 			pushUpSelector 											goTopIcon)
		#(1090		'add in superclass as subclassResponsability' 											nil 	model 			addAsSubclassResponsabilitySelector 											goTopIcon)
		#(1100		'push down to subclasses' 											nil 	model 			pushDownSelectorToSubclasses 											goBottomIcon)
		#(1110		'push down to one subclass' 											nil 	model 			pushDownSelectorToOneSubclass 											goBottomIcon)

		" 'more' SubMenu"
		#(2010		'local senders of...' 								nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(2020		'local implementors of...' 								nil 	window 			browseLocalImplementorsOfMessages 											classIcon)
		#(2030 		'-----')
		#(2040		'sample instance' 								nil 	window 			makeSampleInstance 											instanceIcon)
		#(2050		'inspect instances' 								nil 	window 			inspectInstances 											inspectIcon)
		#(2060		'inspect subinstances' 								nil 	window 			inspectSubInstances 											inspectIcon)
		#(2070 		'-----')
		#(2080		'change category...' 								nil 	model 			changeCategory 											saveAsIcon)
		#(2090		'select method category (C)' 								$C 	model 			showHomeCategory 											editFindReplaceIcon)
		#(2100		'change sets with this method' 								nil 	window 			findMethodInChangeSets 											changesIcon)
		#(2110		'revert to previous version' 								nil 	model 			revertToPreviousVersion 											undoIcon)
	)! !
!CodeFileBrowserWindow methodsFor: 'GUI building' stamp: 'jmv 9/24/2024 15:57:51' prior: 50379328 overrides: 50388000!
            optionalButtonTuples
	"Answer a tuple buttons, in the format:
			button label
			selector to send
			help message"
	^ (model baseCodeSource isLiveSmalltalkImage and: [ model caseCodeSource isLiveSmalltalkImage not ])
		ifTrue: [ super optionalButtonTuples ]
		ifFalse: [
			"For non-standard browser configurations assume most of the default buttons are invalid"
			#(
			) ].! !
!MethodSetWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 16:18:51' prior: 50387405!
                               messageListMenuSpec
	"Spec for the menu and shortcut keys for the messages list.
	See coment at Morph >> #getMenu
	"
	^#(
		#(0 		'Message Set' 					false)
		#(10		'browse full (b)' 							$b 	window 			browseMethodFull 											editFindReplaceIcon)
		#(20		'browse hierarchy (h)' 							$h 	window 			browseHierarchy 											goTopIcon)
		#(30		'browse method (O)' 							$O 	window 			openSingleMessageBrowser 											scriptIcon)
		#(40		'browse protocol (p)' 							$p 	window 			browseFullProtocol 											spreadsheetIcon)
		#(50 		'-----')
		#(60		'fileOut' 							nil 	model 			fileOutMessage 											fileOutIcon)
		#(70		'run test (t)' 							$t 	model 			runMethodTest 											weatherFewCloudsIcon)
		#(80		'debug test (r)' 							$r 	model 			debugMethodTest 											weatherFewCloudsIcon)
		#(90		'inspect CompiledMethod' 							nil 	model 			inspectCompiledMethod 											exploreIcon)
		#(100 		'-----')
		#(110		'senders of... (n)' 							nil 	window 			browseSendersOfMessages 											mailForwardIcon)
		#(120		'local senders of...' 							nil 	window 			browseLocalSendersOfMessages 											mailForwardIcon)
		#(130		'implementors of... (m)' 							nil 	window 			browseImplementorsOfMessages 											developmentIcon)
		#(140		'local implementors of...' 							nil 	window 			browseLocalImplementorsOfMessages 											developmentIcon)
		#(150		'inheritance (i)' 							$i 	window 			methodInheritance 											goDownIcon)
		#(160		'versions (v)' 							$v 	window 			browseVersions 											clockIcon)
		#(170 		'-----')
		#(180		'remove method (x)' 							$x 	model 			removeMessage 											deleteIcon)
		#(190		'more' 							nil 	nil 			2000 											listAddIcon)

		"Shortcut only. No menu entry."
		#(991		nil 							$m 	window 			browseImplementors)
		#(992		nil 							$n 	window 			browseSenders)
		#(993		nil 							$c 	model 			copySelector)
		#(994		nil 							$N 	window 			browseClassRefs)

		" 'more' SubMenu"
		#(2010		'sample instance' 								nil 	window 			makeSampleInstance 										instanceIcon)
		#(2020		'inspect instances' 								nil 	window 			inspectInstances 										inspectIcon)
		#(2030		'inspect subinstances' 								nil 	window 			inspectSubInstances 										inspectIcon)
		#(2040 		'-----')
		#(2050 		'remove from this browser' 								nil 	model 			removeMessageFromBrowser 										listRemoveIcon)
		#(2060 		'filter message list...' 								nil 	window 			filterMessageList 										findIcon)
		#(2070		'change category...' 								nil 	model 			changeCategory 										saveAsIcon)
		#(2080		'change sets with this method' 								nil 	window 			findMethodInChangeSets 										changesIcon)
		#(2090		'revert to previous version' 								nil 	model 			revertToPreviousVersion 										undoIcon)
		#(2100 		'-----')
		#(2110 		'sort by class hierarchy' 								nil 	model 			sortByClassHierarchy 										classIcon)
		#(2120 		'sort by class name' 								nil 	model 			sortByClassName 										classIcon)
		#(2130 		'sort by selector' 								nil 	model 			sortBySelector 										scriptIcon)
		#(2140 		'sort by date' 								nil 	model 			sortByDate 										dateIcon)
		#(2150 		'reverse sort' 								nil 	model 			sortReverse 										redoIcon)
	).
! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 16:23:52' prior: 50386629 overrides: 50360509!
     defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| codeProvider acceptEntry methodEntries isEditingAMethod |
	isEditingAMethod := false.
	codeProvider := self codeProvider.
	((codeProvider is: #CodeProvider) and: [ codeProvider isEditingMethod ])
		ifTrue: [
			isEditingAMethod := true.
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(250				'Accept (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save') ]
				ifFalse: [ #(250 				'Accept' 							nil 	editor 			nil 						acceptIcon 							'Save') ].
			methodEntries := #(
				#(20 		'-----')
				#(30		'What to Show' 									nil 	nil 			3000 						preferencesIcon 							'Select alternative views of the method')
				#(40		'Toggle Break' 									nil 	model 			toggleBreakOnEntry 						debugIcon 							'Add o remove a Breakpoint')
				#(170 		'-----')
				#(180		'Refactorings' 									nil 	nil 			2000 						listAddIcon)
				#(260		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
				#(270		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
				#(280		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')
			) ]
		ifFalse: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(250				'Save to file (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save contents to a file') ]
				ifFalse: [ #(250 				'Save to file' 							nil 	editor 			nil 						acceptIcon 							'Save contents to a file') ]].
	^Array streamContents: [ :strm |
		strm nextPutAll:
			#(
				#(0 		'Smalltalk Editor' 					true)
				#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
				#(50 		'-----')
				#(60		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
				#(70		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
				#(80		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
				#(90		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon							'Inspect via Object Explorer')
				#(100		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon							'Debug it')
				#(110		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
				#(120 		'-----')
				#(130		'Edit' 							nil 	nil 			1000 						textEditorIcon)
				#(140 		'-----')
				#(150		'Explain' 							nil 	editor 			explain 						helpIcon)
				#(160		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
				#(170		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(180		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(190		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
				#(200 		'-----')
				#(210		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
				#(220		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
				#(230		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
				#(240 		'-----')
			);
			nextPut: acceptEntry.
		isEditingAMethod ifTrue: [
			strm nextPutAll: methodEntries ].
		strm
			nextPutAll: self editSubmenuSpec;
			nextPutAll: self keyboardShortuctsSubmenuSpec.
		isEditingAMethod ifTrue: [
			strm nextPutAll: self refactoringsSubmenuSpec ].
		isEditingAMethod ifTrue: [
			strm nextPutAll: self codeProvider whatToShowSubmenuSpec ].
	].! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 16:15:05' prior: 50386491!
                   keyboardShortuctsSubmenuSpec
	"Keyboard shortcuts only"

	^#(
		#(1500		nil 	$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 	$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 	$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 	$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 	$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 	$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 	$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 	$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 	$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 	$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 	$T 	editor 			displayIfTrue)
		#(1511		nil 	$F 	editor 			displayIfFalse)
		#(1601 		nil 	$a 	editor 			selectAll 									nil 		'Select all')
		#(1602 		nil 	$C 	editor 			compareToClipboard 									nil 		'Compare argument to clipboard')
		#(1603 		nil 	$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 	$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 	$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 	${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 	$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 	$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 	$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 	$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 	$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')
	).! !

DebuggerWindow removeSelector: #optionalButtonTuples!

!methodRemoval: DebuggerWindow #optionalButtonTuples stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
optionalButtonTuples
	"No [show...] button in debugger"
	^super optionalButtonTuples reject: [ :tuple |
		tuple third = #offerWhatToShowMenu ]!

CodeWindow removeSelector: #addContentsTogglesTo:!

!methodRemoval: CodeWindow #addContentsTogglesTo: stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
addContentsTogglesTo: aMenu
	"Add updating menu toggles governing contents to aMenu."

	model contentsSymbolQuints do: [ :aQuint |
			aQuint == #-
				ifTrue: [
					aMenu addLine]
				ifFalse: [
					(aMenu addUpdating: aQuint third target: model action: aQuint second)
						setBalloonText: aQuint fifth ]]!

CodeWindow removeSelector: #offerWhatToShowMenu!

!methodRemoval: CodeWindow #offerWhatToShowMenu stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
offerWhatToShowMenu
	"Offer a menu governing what to show"

	 | aMenu  |
	aMenu := MenuMorph new defaultTarget: model.
	aMenu addTitle: 'What to show'.
	aMenu addStayUpIcons.
	self addContentsTogglesTo: aMenu.
	aMenu popUpInWorld !

ClassCommentVersionsBrowser removeSelector: #contentsSymbolQuints!

!methodRemoval: ClassCommentVersionsBrowser #contentsSymbolQuints stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
contentsSymbolQuints
	"Answer a list of quintuplets representing information on the alternative views available in the code pane"

	^ #(
(source		togglePlainSource 		showingPlainSourceString		'source'	'the textual source code as writen')
(lineDiffs		toggleLineDiffing		showingLineDiffsString	'showDiffs'	'the textual source diffed from its prior version')
	)!

ChangeList removeSelector: #contentsSymbolQuints!

!methodRemoval: ChangeList #contentsSymbolQuints stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
contentsSymbolQuints
	"Answer a list of quintuplets representing information on the alternative views available in the code pane"

	^ self sourceAndDiffsQuintsOnly!

CodeFileBrowser removeSelector: #contentsSymbolQuints!

!methodRemoval: CodeFileBrowser #contentsSymbolQuints stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
contentsSymbolQuints
	"Answer a list of quintuplets representing information on the alternative views available in the code pane.  For the file-contents browser, the choices are restricted to source and the diffing options"

	^ self sourceAndDiffsQuintsOnly!

CodeProvider removeSelector: #contentsSymbolQuints!

!methodRemoval: CodeProvider #contentsSymbolQuints stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
contentsSymbolQuints
	"Answer a list of quintuplets representing information on the alternative views available in the code pane
		first element:	the contentsSymbol used
		second element:	the selector to call when this item is chosen.
		third element:	the selector to call to obtain the wording of the menu item.
		fourth element:	the wording to represent this view
		fifth element:	balloon help
	A hypen indicates a need for a seperator line in a menu of such choices"

	^ #(
(source				togglePlainSource 			showingPlainSourceString
														'source'			'the textual source code as writen')
(documentation		toggleShowDocumentation showingDocumentationString
														'documentation'	'the first comment in the method')
-
(prettyPrint			togglePrettyPrint 			prettyPrintString
														'prettyPrint'			'the method source presented in a standard text format')
-
(lineDiffs				toggleLineDiffing			showingLineDiffsString
														'lineDiffs'			'the textual source lines diffed from its prior version')
(wordDiffs			toggleWordDiffing			showingWordDiffsString
														'wordDiffs'			'the textual source words diffed from its prior version')
(prettyLineDiffs		togglePrettyLineDiffing	showingPrettyLineDiffsString
														'prettyLineDiffs'		'formatted source lines diffed from formatted prior version')
(prettyWordDiffs	togglePrettyWordDiffing	showingPrettyWordDiffsString
														'prettyWordDiffs'	'formatted source words diffed from prior version')
-
(decompile			toggleDecompile			showingDecompileString
														'decompile'			'source code decompiled from byteCodes')
(byteCodes			toggleShowingByteCodes	showingByteCodesString
														'byteCodes'		'the bytecodes that comprise the compiled method')
	)!

CodeProvider removeSelector: #sourceAndDiffsQuintsOnly!

!methodRemoval: CodeProvider #sourceAndDiffsQuintsOnly stamp: 'Install-6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st 10/10/2024 15:39:35'!
sourceAndDiffsQuintsOnly
	"Answer a list of quintuplets representing information on the alternative views available in the code pane for the case where the only plausible choices are showing source or either of the two kinds of diffs"

	^ #(
(source				togglePlainSource 			showingPlainSourceString
														'source'			'the textual source code as writen')
(lineDiffs				toggleLineDiffing			showingLineDiffsString
														'lineDiffs'			'the textual source diffed from its prior version')
(wordDiffs			toggleWordDiffing			showingWordDiffsString
														'wordDiffs'			'the textual source words diffed from its prior version')
(prettyLineDiffs		togglePrettyLineDiffing	showingPrettyLineDiffsString
														'linePrettyDiffs'		'formatted source diffed from formatted prior version')
(prettyWordDiffs	togglePrettyWordDiffing	showingPrettyWordDiffsString
														'linePrettyDiffs'		'formatted source words diffed from prior version')
	)!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6747-WhatToShow-MoveToCodeEditorMenu-JuanVuletich-2024Sep24-16h09m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6745] on 24 September 2024 at 8:34:52 pm'!
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/24/2024 20:24:21' prior: 50388304 overrides: 50360509!
                         defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| codeProvider acceptEntry methodEntries isEditingAMethod |
	isEditingAMethod := false.
	codeProvider := self codeProvider.
	((codeProvider is: #CodeProvider) and: [ codeProvider isEditingMethod ])
		ifTrue: [
			isEditingAMethod := true.
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(270				'Accept (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save') ]
				ifFalse: [ #(270 				'Accept' 							nil 	editor 			nil 						acceptIcon 							'Save') ].
			methodEntries := #(
				#(20 		'-----')
				#(30		'What to Show' 									nil 	nil 			3000 						preferencesIcon 							'Select alternative views of the method')
				#(40		'Toggle Break' 									nil 	model 			toggleBreakOnEntry 						debugIcon 							'Add o remove a Breakpoint')
				#(200 		'-----')
				#(210		'Refactorings' 									nil 	nil 			2000 						listAddIcon)
				#(280		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
				#(290		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
				#(300		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')
			) ]
		ifFalse: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(270				'Save to file (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save contents to a file') ]
				ifFalse: [ #(270 				'Save to file' 							nil 	editor 			nil 						acceptIcon 							'Save contents to a file') ]].
	^Array streamContents: [ :strm |
		strm nextPutAll:
			#(
				#(0 		'Smalltalk Editor' 					true)
				#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
				#(50 		'-----')
				#(60		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
				#(70		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
				#(80		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
				#(90		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon							'Inspect via Object Explorer')
				#(100		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon							'Debug it')
				#(110		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
				#(120 		'-----')
				#(130		'Edit' 							nil 	nil 			1000 						textEditorIcon)
				#(140 		'-----')
				#(150		'Explain' 							nil 	editor 			explain 						helpIcon)
				#(160		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
				#(170		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(180		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(190		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
				#(220 		'-----')
				#(230		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
				#(240		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
				#(250		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
				#(260 		'-----')
			);
			nextPut: acceptEntry.
		isEditingAMethod ifTrue: [
			strm nextPutAll: methodEntries ].
		strm
			nextPutAll: self editSubmenuSpec;
			nextPutAll: self keyboardShortuctsSubmenuSpec.
		isEditingAMethod ifTrue: [
			strm nextPutAll: self refactoringsSubmenuSpec ].
		isEditingAMethod ifTrue: [
			strm nextPutAll: self codeProvider whatToShowSubmenuSpec ].
	].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6748-SmalltalkEditor-menu-fix-JuanVuletich-2024Sep24-20h24m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6748] on 25 September 2024 at 2:43:50 pm'!
!Browser methodsFor: 'system category list' stamp: 'jmv 9/25/2024 14:36:53' prior: 16798883!
                   setSelectedSystemCategory: aStringOrNil
	"Set the selected system category and update all other selections to be deselected."
	selectedSystemCategory := aStringOrNil.
	selectedClassName := nil.
	selectedMessageCategory := nil.
	selectedMessage := nil.
	self editSelection: (aStringOrNil isNil ifTrue: [#none] ifFalse: [#newClass]).
	metaClassIndicated := false.
	self setClassOrganizer.
	self changed: #selectedSystemCategory.
	self changed: #classList.
	self changed: #messageCategoryList.
	self changed: #messageList.
	self changed: #relabel.
	self changed: #instanceMessagesIndicated.
	self changed: #classCommentIndicated.
	self changed: #classMessagesIndicated.
	self acceptedContentsChanged! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6749-Tweak-JuanVuletich-2024Sep25-14h36m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6749] on 26 September 2024 at 10:06:45 am'!
!SmalltalkEditor methodsFor: 'menu messages' stamp: 'jmv 9/26/2024 09:40:15'!
toggleBreakOnEntry
	"Install or uninstall a halt-on-entry breakpoint on our method."

	self codeProvider toggleBreakOnEntry! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/26/2024 09:38:01' prior: 50388718 overrides: 50360509!
        defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| codeProvider acceptEntry methodEntries isEditingAMethod |
	isEditingAMethod := false.
	codeProvider := self codeProvider.
	((codeProvider is: #CodeProvider) and: [ codeProvider isEditingMethod ])
		ifTrue: [
			isEditingAMethod := true.
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(270				'Accept (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save') ]
				ifFalse: [ #(270 				'Accept' 							nil 	editor 			nil 						acceptIcon 							'Save') ].
			methodEntries := #(
				#(20 		'-----')
				#(30		'What to Show' 									nil 	nil 			3000 						preferencesIcon 							'Select alternative views of the method')
				#(40		'Toggle Break' 									nil 	editor 			toggleBreakOnEntry 						debugIcon 							'Add o remove a Breakpoint')
				#(200 		'-----')
				#(210		'Refactorings' 									nil 	nil 			2000 						listAddIcon)
				#(280		'Accept & Run Test in Class (t)' 									$t 	editor 			acceptAndTest 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class. Opens debugger if error.')
				#(290		'Accept & Run Test in Category (y)' 									$y 	editor 			acceptAndTestAll 						weatherFewCloudsIcon 							'Saves method, runs it as test and then all tests in class category. Opens debugger if error.')
				#(300		'Accept & Debug Test (r)' 									$r 	editor 			acceptAndDebugTest 						weatherFewCloudsIcon 							'Saves method and debugs it')
			) ]
		ifFalse: [
			acceptEntry := self hasUnacceptedEdits
				ifTrue: [ #(270				'Save to file (s)' 							$s 	editor 			acceptContents 						acceptIcon 							'Save contents to a file') ]
				ifFalse: [ #(270 				'Save to file' 							nil 	editor 			nil 						acceptIcon 							'Save contents to a file') ]].
	^Array streamContents: [ :strm |
		strm nextPutAll:
			#(
				#(0 		'Smalltalk Editor' 					true)
				#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 							'Open Help')
				#(50 		'-----')
				#(60		'Do it (d)' 							$d 	editor 			doIt 						doItIcon 							'Do it (selection is a valid expression)')
				#(70		'Print it (p)' 							$p 	editor 			printIt 						printIcon 							'Print it (selection is a valid expression)')
				#(80		'Inspect it (i)' 							$i 	editor 			inspectIt 						inspectIcon 							'Inspect it (selection is a valid expression, or selection is over an inspect-ilst)')
				#(90		'Explore it (I)' 							$I 	editor 			exploreIt 						exploreIcon							'Inspect via Object Explorer')
				#(100		'Debug it (D)' 							$D 	editor 			debugIt 						debugIcon							'Debug it')
				#(110		'Profile it' 							nil 	editor 			profileIt 						clockIcon)
				#(120 		'-----')
				#(130		'Edit' 							nil 	nil 			1000 						textEditorIcon)
				#(140 		'-----')
				#(150		'Explain' 							nil 	editor 			explain 						helpIcon)
				#(160		'Browse it (b)' 							$b 	editor 			browseIt 						editFindReplaceIcon 							'Browse it (selection is a class name or cursor is over a class-list or message-list)')
				#(170		'Senders of it (n)' 							$n 	editor 			sendersOfIt 						mailForwardIcon 							'Senders of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(180		'Implementors of it (m)' 							$m 	editor 			implementorsOfIt 						developmentIcon 							'Implementors of it (selection is a message selector or cursor is over a class-list or message-list)')
				#(190		'References to it (N)' 							$N 	editor 			referencesToIt 						addressBookIcon 							'References to it (selection is a class name, or cursor is over a class-list or message-list)')
				#(220 		'-----')
				#(230		'Method Strings with it (E)' 							$E	editor 			methodStringsContainingIt 								genericTextIcon 					'Method strings containing it')
				#(240		'Method Source with it (e)' 							$e 	editor 			methodSourceContainingIt 								scriptIcon 					'Method source containing it')
				#(250		'Class Comments with it' 							nil 	editor 			classCommentsContainingIt 								chatIcon)
				#(260 		'-----')
			);
			nextPut: acceptEntry.
		isEditingAMethod ifTrue: [
			strm nextPutAll: methodEntries ].
		strm
			nextPutAll: self editSubmenuSpec;
			nextPutAll: self keyboardShortuctsSubmenuSpec.
		isEditingAMethod ifTrue: [
			strm nextPutAll: self refactoringsSubmenuSpec ].
		isEditingAMethod ifTrue: [
			strm nextPutAll: self codeProvider whatToShowSubmenuSpec ].
	].! !
!BreakingMethodWrapper methodsFor: 'system primitives' stamp: 'jmv 9/26/2024 10:06:29' prior: 16797111!
               run: aSelector with: arguments in: aReceiver
	"I am sent by the virtual machine, if an instance of a class other
	than CompiledMethod is bound in a method dictionary.

	See SystemDictionary>>#recreateSpecialObjectsArray at index 50."


	"Get rid of that break point, we don't want debuggers popping up while debugging."
	self uninstall.

	"Halt so users gets their debugger."
	Smalltalk isDevelopmentEnvironmentPresent ifTrue: [
		Halt signal ].

	"Evaluate our method. Maybe in the debugger or as usual if user proceeded.
	Answer result."
	^aReceiver withArgs: arguments executeMethod: method! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6750-Breakpoints-fix-JuanVuletich-2024Sep26-10h04m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6750] on 26 September 2024 at 2:06:13 pm'!
!Categorizer class methodsFor: 'class initialization' stamp: 'jmv 9/26/2024 10:50:53'!
                     defaultCategory
	^Default! !
!SystemOrganizer class methodsFor: 'class initialization' stamp: 'jmv 9/26/2024 10:52:37' overrides: 50389084!
                    defaultCategory
	^  self defaultClassCategory! !
!Categorizer methodsFor: 'accessing' stamp: 'jmv 9/26/2024 10:55:35' prior: 16803147!
                         addCategory: catString before: nextCategory
	"Add a new category named heading.
	If default category exists and is empty, remove it.
	If nextCategory is nil, then add the new one at the end,
	otherwise, insert it before nextCategory."
	
	| index newCategory default |
	
	newCategory := catString withBlanksTrimmed asSymbol.
	
	"heading already exists, so done"
	(categoryArray indexOf: newCategory) > 0 ifTrue: [^self].	
	
	index := categoryArray indexOf: nextCategory ifAbsent: [categoryArray size + 1].
	categoryArray := categoryArray
		copyReplaceFrom: index
		to: index-1
		with: (Array with: newCategory).
	categoryStops := categoryStops
		copyReplaceFrom: index
		to: index-1
		with: (Array with: (index = 1
				ifTrue: [0]
				ifFalse: [categoryStops at: index-1])).

	"remove empty default category"
	default := self class defaultCategory.
	(newCategory ~= default and: [(self listAtCategoryNamed: default) isEmpty])
		ifTrue: [self removeCategory: default]! !
!Categorizer methodsFor: 'accessing' stamp: 'jmv 9/26/2024 10:56:07' prior: 16803301!
 classify: element under: heading suppressIfDefault: aBoolean
	"Store the argument, element, in the category named heading.   If aBoolean is true, then invoke special logic such that the classification is NOT done if the new heading is the Default and the element already had a non-Default classification -- useful for filein"

	| catName catIndex elemIndex realHeading default |

	default := self class defaultCategory.

	realHeading := heading isNil
		ifTrue: [default]
		ifFalse: [heading withBlanksTrimmed ].

	"done if already under that category"
	(catName := self categoryOfElement: element) = realHeading ifTrue: [^ self].  

	catName ifNotNil: [
		"return if non-Default category already assigned in memory"
		(aBoolean and: [realHeading = default]) ifTrue: [^ self].	 
		"remove if in another category"
		self removeElement: element].

	(categoryArray indexOf: realHeading) = 0 ifTrue: [self addCategory: realHeading].

	catIndex := categoryArray indexOf: realHeading.
	elemIndex := catIndex > 1
		ifTrue: [categoryStops at: catIndex - 1]
		ifFalse: [0].
	[(elemIndex := elemIndex + 1) <= (categoryStops at: catIndex) 
		and: [element >= (elementArray at: elemIndex)]] whileTrue.

	"elemIndex is now the index for inserting the element. Do the insertion before it."
	elementArray := elementArray copyReplaceFrom: elemIndex to: elemIndex-1 with: (Array with: element).

	"add one to stops for this and later categories"
	catIndex to: categoryArray size do: [ :i |
		categoryStops at: i put: (categoryStops at: i) + 1].

	(self listAtCategoryNamed: default) isEmpty ifTrue: [self removeCategory: default]! !
!Categorizer methodsFor: 'accessing' stamp: 'jmv 9/26/2024 10:56:35' prior: 16803475!
                           removeCategory: cat 
	"Remove the category named, cat. Create an error notificiation if the 
	category has any elements in it."

	| index lastStop |
	index := categoryArray indexOf: cat ifAbsent: [^self].
	lastStop := 
		index = 1
			ifTrue: [0]
			ifFalse: [categoryStops at: index - 1].
	(categoryStops at: index) - lastStop > 0 
		ifTrue: [^self error: 'cannot remove non-empty category'].
	categoryArray := categoryArray copyReplaceFrom: index to: index with: #().
	categoryStops := categoryStops copyReplaceFrom: index to: index with: #().
	categoryArray isEmpty
		ifTrue: [
			categoryArray := Array with: self class defaultCategory.
			categoryStops := Array with: 0]
! !
!Categorizer methodsFor: 'accessing' stamp: 'jmv 9/26/2024 10:56:43' prior: 16803529!
   removeEmptyCategories
	"Remove empty categories."

	| categoryIndex currentStop keptCategories keptStops |
	keptCategories := WriteStream on: (Array new: 16).
	keptStops := WriteStream on: (Array new: 16).
	currentStop := categoryIndex := 0.
	[(categoryIndex := categoryIndex + 1) <= categoryArray size]
		whileTrue: 
			[(categoryStops at: categoryIndex) > currentStop
				ifTrue: 
					[keptCategories nextPut: (categoryArray at: categoryIndex).
					keptStops nextPut: (currentStop := categoryStops at: categoryIndex)]].
	categoryArray := keptCategories contents.
	categoryStops := keptStops contents.
	categoryArray isEmpty
		ifTrue: [
			categoryArray := Array with: self class defaultCategory.
			categoryStops := Array with: 0]

	"ClassOrganizer allInstancesDo: [:co | co removeEmptyCategories]."! !
!Categorizer methodsFor: 'private' stamp: 'jmv 9/26/2024 10:56:52' prior: 16803656!
     setDefaultList: anArray

	categoryArray := Array with: self class defaultCategory.
	categoryStops := Array with: anArray size.
	elementArray := anArray! !
!Categorizer methodsFor: 'testing' stamp: 'jmv 9/26/2024 10:56:25' prior: 16803670!
                 hasAnyCategoriesSuchThat: aBlock
	"Answer an Array of categories (names)."
	categoryArray ifNil: [^ false].
	(categoryArray size = 1 
		and: [categoryArray first = self class defaultCategory & elementArray isEmpty])
		ifTrue: [^false].
	^categoryArray anySatisfy: aBlock! !
!SystemOrganizer class methodsFor: 'class initialization' stamp: 'jmv 9/26/2024 10:52:51' prior: 16970425!
   defaultClassCategory
	^ #Unclassified! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6751-DefaultClassCategory-is-Unclassified-JuanVuletich-2024Sep26-14h04m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6751] on 26 September 2024 at 3:07:39 pm'!
!TextEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/26/2024 15:01:07' prior: 50360509 overrides: 50361022!
               defaultMenuSpec
	"Spec for the menu and shortcut keys for the regular text editors.
	See coment at Morph >> #getMenu
	"
	| acceptEntry |
	acceptEntry := self hasUnacceptedEdits
		ifTrue: [ #((110				'Accept (s)' 					$s 	editor 			acceptContents 						acceptIcon 								'Save')) ]
		ifFalse: [ #((110 				'Accept' 					nil 	editor 			nil 						acceptIcon 								'Save')) ].
	^#(
		#(0 		'Text Editor' 					true)
		#(10		'Help... (h)' 							$h 	editor 			openHelp 						helpIcon 								'Open Help')
		#(20 		'-----')
		#(30		'Find...(f)' 							$f 	editor 			find 						findIcon 								'Find')
		#(40		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 								'Find again')
		#(50		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 								'Set selection as search string for find again')
		#(60 		'-----')
		#(70		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 								'Undo (multiple levels)')
		#(80		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 								'Redo (multiple levels)')
		#(90		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(100 		'-----')
	),
	acceptEntry,
	#(
		#(120		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 								'Copy selection to the Clipboard')
		#(130		'Cut (x)' 							$x 	editor 			cut 						cutIcon 								'Cut selection and store it in the Clipboard')
		#(140 		'Compare to Clipboard (C)' 							$C 	editor 			compareToClipboard 						changesIcon 								'Compare selection to clipboard')
		#(150		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 								'Paste Clipboard contents')
		#(160		'Paste without Format' 							nil 	editor 			pasteString 						pasteIcon)
		#(170		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(180 		'-----')
		#(190		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(200		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(210		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 								'Set font')
		#(220		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
		#(230		'Set Style' 							nil 	editor 			offerFontStyleMenu 						preferencesDesktopFontIcon)
		#(240		'Set Text Color (8)' 							$8 	editor 			offerColorMenu 						graphicsIcon)
		#(250		'Set Alignment... (u)' 							$u 	editor 			chooseAlignment 						formatJustifyLeftIcon 								'Toggle alignment')

		"Keyboard shortcuts only"
		#(500		nil 							$0 	editor 			changeEmphasisNormal 									nil 			'Normal')
		#(501		nil 							$1 	editor 			changeEmphasisBold 									nil 			'Bold')
		#(502		nil 							$2 	editor 			changeEmphasisItalic 									nil 			'Italic')
		#(503		nil 							$3 	editor 			changeEmphasisUnderlined 									nil 			'Underlined')
		#(504		nil 							$4 	editor 			changeEmphasisStruckThrough 									nil 			'Struck Through')
		#(505		nil 							$5 	editor 			changeEmphasisSuperscript 									nil 			'Superscript')
		#(506		nil 							$6 	editor 			changeEmphasisSubscript 									nil 			'Subscript')
		#(601 		nil 							$a 	editor 			selectAll 									nil 			'Select all')
		#(602 		nil 							$U 	editor 			changeLineEndsToLf 									nil 			'Convert line endings to LF characters (Cuis convention) in selection')
		#(603 		nil 							$( 	editor 			encloseWithParenthesis 									nil 			'Enclose within ( and ), or remove enclosing ( and )')
		#(604 		nil 							$[ 	editor 			encloseWithSquareBrackets 									nil 			'Enclose within [ and ], or remove enclosing [ and ]')
		#(605 		nil 							${ 	editor 			encloseWithCurlyBrackets 									nil 			'Enclose within { and }, or remove enclosing { and }')
		#(606 		nil 							$' 	editor 			encloseWithSingleQuotes 									nil 			'Enclose within single quotes, or remove enclosing single quotes')
		#(607 		nil 							$" 	editor 			encloseWithDoubleQuotes 									nil 			'Enclose within double quotes, or remove enclosing double quotes')
		#(608 		nil 							$` 	editor 			encloseWithBackTicks 									nil 			'Enclose within backticks, or remove enclosing backticks')
		"#(609 		nil 							$< 	editor 			encloseWithAngleBrackets 									nil 			'Enclose within < and >, or remove enclosing ( and )')"
		#(610 		nil 							$H 	editor 			cursorTopHome 									nil 			'Move cursor to start of text')
	).
! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/26/2024 15:01:14' prior: 50386440!
            editSubmenuSpec
	" 'Edit' SubMenu"

	^#(
		#(1010 		'-----')
		#(1020		'Find...(f)' 							$f 	editor 			find 						findIcon 									'Find')
		#(1030		'Find Again (g)' 							$g 	editor 			findAgain 						systemIcon 									'Find again')
		#(1040		'Use Selection for Find (j)' 							$j 	editor 			setSearchString 						saveAsIcon 									'Set selection as search string for find again')
		#(1050 		'-----')
		#(1060		'Undo - multiple (z)' 							$z 	editor 			undo 						undoIcon 									'Undo (multiple levels)')
		#(1070		'Redo - multiple (Z)' 							$Z 	editor 			redo 						redoIcon 									'Redo (multiple levels)')
		#(1080		'Undo / Redo history' 							nil 	editor 			offerUndoHistory 						changesIcon)
		#(1090 		'-----')
		#(1100		'Copy (c)' 							$c 	editor 			copySelection 						copyIcon 									'Copy selection to the Clipboard')
		#(1110		'Cut (x)' 							$x 	editor 			cut 						cutIcon 									'Cut selection and store it in the Clipboard')
		#(1120 		'Compare to Clipboard (C)' 							$C 	editor 			compareToClipboard 						changesIcon 									'Compare selection to clipboard')
		#(1130		'Paste (v)' 							$v 	editor 			paste 						pasteIcon 									'Paste Clipboard contents')
		#(1140		'Paste...' 							nil 	editor 			pasteRecent 						worldIcon)
		#(1150 		'-----')
		#(1160		'Toggle WordWrap' 							nil 	editor 			wrapOnOff 						genericTextIcon)
		#(1170		'Clear Font' 							nil 	editor 			clearFont 						newIcon)
		#(1180		'Set Font... (k)' 							$k 	editor 			offerFontMenu 						preferencesDesktopFontIcon 									'Set font')
		#(1190		'Set Font Size' 							nil 	editor 			offerFontSizeMenu 						preferencesDesktopFontIcon)
	).! !
!SmalltalkEditor methodsFor: 'menu & kbd shortcuts' stamp: 'jmv 9/26/2024 14:59:30' prior: 50388448!
              keyboardShortuctsSubmenuSpec
	"Keyboard shortcuts only"

	^#(
		#(1500		nil 	$0 	editor 			changeEmphasisNormal 									nil 		'Normal')
		#(1501		nil 	$1 	editor 			changeEmphasisBold 									nil 		'Bold')
		#(1502		nil 	$2 	editor 			changeEmphasisItalic 									nil 		'Italic')
		#(1503		nil 	$3 	editor 			changeEmphasisUnderlined 									nil 		'Underlined')
		#(1504		nil 	$4 	editor 			changeEmphasisStruckThrough 									nil 		'Struck Through')
		#(1505		nil 	$5 	editor 			changeEmphasisSuperscript 									nil 		'Superscript')
		#(1506		nil 	$6 	editor 			changeEmphasisSubscript 									nil 		'Subscript')
		#(1507		nil 	$l 	editor 			cancel 									nil 		'Cancel all edits')
		#(1508		nil 	$Q 	editor 			argPrev 									nil 		'Previous argument')
		#(1509		nil 	$W 	editor 			argNext 									nil 		'Next argument')
		#(1510		nil 	$T 	editor 			displayIfTrue)
		#(1511		nil 	$F 	editor 			displayIfFalse)
		#(1601 		nil 	$a 	editor 			selectAll 									nil 		'Select all')
		#(1603 		nil 	$U 	editor 			changeLineEndsToLf 									nil 		'Convert line endings to LF characters (Cuis convention) in selection')
		#(1604 		nil 	$( 	editor 			encloseWithParenthesis 									nil 		'Enclose within ( and ), or remove enclosing ( and )')
		#(1605 		nil 	$[ 	editor 			encloseWithSquareBrackets 									nil 		'Enclose within [ and ], or remove enclosing [ and ]')
		#(1606 		nil 	${ 	editor 			encloseWithCurlyBrackets 									nil 		'Enclose within { and }, or remove enclosing { and }')
		#(1607 		nil 	$' 	editor 			encloseWithSingleQuotes 									nil 		'Enclose within single quotes, or remove enclosing single quotes')
		#(1608 		nil 	$" 	editor 			encloseWithDoubleQuotes 									nil 		'Enclose within double quotes, or remove enclosing double quotes')
		#(1609 		nil 	$` 	editor 			encloseWithBackTicks 									nil 		'Enclose within backticks, or remove enclosing backticks')
		"#(1610 		nil 	$< 	editor 			encloseWithAngleBrackets 									nil 		'Enclose within < and >, or remove enclosing ( and )')"
		#(1611 		nil 	$H 	editor 			cursorTopHome 									nil 		'Move cursor to start of text')
	).! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6752-CompareToClipboardMenuOptionInEditors-JuanVuletich-2024Sep26-14h29m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6752] on 26 September 2024 at 4:47:13 pm'!
!ClassDescription class methodsFor: 'utilities' stamp: 'jmv 9/26/2024 16:43:57'!
             commentOf: aClassOrMetaclass
	"Answer the receiver's comment. (If missing, supply a template).
	This method is intended to replace sending `aClass comment`, to protect the system against some
	class implementing a non-compliant class side #comment method... (yes, that has actually happened)."

	| aString |
	aString := aClassOrMetaclass theNonMetaClass organization classComment.
	aString isEmpty ifFalse: [^ aString].
	^
'Main comment stating the purpose of this class and relevant relationship to other classes.

Possible useful expressions for doIt or printIt.

Structure:
 instVar1		type -- comment about the purpose of instVar1
 instVar2		type -- comment about the purpose of instVar2

Any further useful comments about the general approach of this implementation.'! !
!ClassDescription methodsFor: 'accessing' stamp: 'jmv 9/26/2024 16:37:13' prior: 16818580!
                              comment
	"Answer the receiver's comment. (If missing, supply a template) "

	^ClassDescription commentOf: self! !
!Browser methodsFor: 'accessing' stamp: 'jmv 9/26/2024 16:38:05' prior: 16797255 overrides: 50386819!
        acceptedStringOrText
	"Depending on the current selection, different information is retrieved.
	Answer a string description of that information. This information is the
	method of the currently selected class and message."

	| comment theClass latestCompiledMethod |
	latestCompiledMethod := currentCompiledMethod.
	currentCompiledMethod := nil.

	editSelection == #none ifTrue: [^ ''].
	editSelection == #editSystemCategories 
		ifTrue: [^ systemOrganizer printString].
	self isEditingNewClass ifTrue: [
		selectedSystemCategory ifNil: [ ^'' ].
		^ (theClass := self selectedClass)
			ifNil: [
				Class template: selectedSystemCategory]
			ifNotNil: [
				Class templateForSubclassOf: theClass category: selectedSystemCategory]].
	self isEditingExistingClass 
		ifTrue: [^ self classDefinitionText ].
	editSelection == #editComment 
		ifTrue: [
			(theClass := self selectedClass) ifNil: [^ ''].
			comment := ClassDescription commentOf: theClass.
			currentCompiledMethod := theClass organization commentRemoteStr.
			^ comment isEmpty
				ifTrue: ['This class has not yet been commented.']
				ifFalse: [comment]].
	editSelection == #editMessageCategories 
		ifTrue: [^ self classOrMetaClassOrganizer printString].
	editSelection == #newMessage
		ifTrue: [
			^ (theClass := self selectedClassOrMetaClass) 
				ifNil: ['']
				ifNotNil: [theClass sourceCodeTemplate]].
	editSelection == #editMessage
		ifTrue: [
			self showingByteCodes ifTrue: [^ self selectedBytecodes].
			currentCompiledMethod := latestCompiledMethod.
			^ self selectedMessage].

	self error: 'Browser internal error: unknown edit selection.'! !
!Browser methodsFor: 'class functions' stamp: 'jmv 9/26/2024 16:39:50' prior: 16797446!
                  classCommentText
	"return the text to display for the comment of the currently selected class"
	| theClass |
	theClass := self selectedClassOrMetaClass.
	^ Text
		initialFont: (Preferences at: #standardCodeFont)
		stringOrText:
			((theClass notNil and: [ theClass hasComment ])
				ifTrue: [ ClassDescription commentOf: theClass ]
				ifFalse: [ '' ]).! !
!Browser methodsFor: 'class functions' stamp: 'jmv 9/26/2024 16:40:13' prior: 16797468!
   copyClass
	| originalClass originalName copysName newDefinition newMetaDefinition newClass |
	selectedClassName ifNil: [^ self].
	originalClass := self selectedClass.
	originalName := originalClass name.
	self request: 'New class name?'
		initialAnswer: originalName
		verifying: [:aString| aString notEmpty and: [aString ~= originalName]]
		do: [:aString|
			copysName := aString asSymbol.
			(Smalltalk includesKey: copysName)
				ifTrue: [self error: copysName , ' already exists'].
			newDefinition := originalClass definition
				copyReplaceAll: originalName printString
				with: copysName printString.
			newClass := Compiler evaluate: newDefinition logged: true.
			newMetaDefinition := originalClass class definition
				copyReplaceAll: originalClass class name
				with: newClass class name.
			Compiler evaluate: newMetaDefinition logged: true.
			newClass copyAllCategoriesFrom: originalClass.
			newClass class copyAllCategoriesFrom: originalClass class.
			originalClass hasComment ifTrue: [newClass comment: (ClassDescription commentOf: originalClass)].
			self classListIndex: 0.
			self changed: #classList]! !
!MethodSet methodsFor: 'message list' stamp: 'jmv 9/26/2024 16:40:27' prior: 50386929 overrides: 50386883!
             selectedMessage
	"Answer the source method for the currently selected message."

	| class selector |
	selectedMessage ifNil: [^ 'Class vanished'].
	
	class := selectedMessage actualClass.
	selector := selectedMessage methodSymbol.
	selector ifNil: [ ^'prims'].

	selector first isUppercase ifTrue: [
		selector == #Comment ifTrue: [
			currentCompiledMethod := class organization commentRemoteStr.
			^ ClassDescription commentOf: class ].
		selector == #Definition ifTrue: [
			^ class definition ].].

	(class notNil and: [ class includesSelector: selector]) ifFalse: [
		currentCompiledMethod := nil.
		^ 'Missing'].

	self showingDecompile ifTrue: [
		^ self decompiledSource ].

	currentCompiledMethod := class compiledMethodAt: selector ifAbsent: nil.

	^self sourceStringPrettifiedAndDiffed! !
!ChangeList methodsFor: 'viewing access' stamp: 'jmv 9/26/2024 16:40:51' prior: 16804786!
     contentsDiffedFromCurrent
	"Answer the contents diffed forward from current (in-memory) method version"

	|  aChange aClass  name aSelector |
	listIndex = 0
		ifTrue: [^ ''].
	aChange := changeList at: listIndex.
	((aChange changeType == #method 
			and: [(aClass := aChange changeClass) notNil]) 
			and: [aClass includesSelector: aChange methodSelector]) ifTrue: [
		aSelector := aChange methodSelector.
		(aClass notNil and: [aClass includesSelector: aSelector])
			ifFalse: [ ^aChange text copy ].
		^DifferenceFinder
				displayPatchFrom: (aClass sourceCodeAt: aSelector)
				to: aChange text
				tryWords: self shouldDiffWords
				prettyPrintedIn: (self showingAnyKindOfPrettyDiffs ifTrue: [aClass]) ].
	(aChange changeType == #classDefinition and: [
			name := aChange changeClassName.
			Smalltalk includesKey: name]) ifTrue: [
		aClass := Smalltalk at: name.
		aChange isMetaClassChange ifTrue: [ aClass := aClass class ].
		^DifferenceFinder
				displayPatchFrom: aClass definition to: aChange text tryWords: true].
	(aChange changeType == #classComment
			and: [(aClass := aChange changeClass) notNil]) ifTrue: [
		^DifferenceFinder
				displayPatchFrom: (ClassDescription commentOf: aClass)
				to: aChange text tryWords: self shouldDiffWords].
	^(changeList at: listIndex) text! !
!PseudoClass methodsFor: 'removing' stamp: 'jmv 9/26/2024 16:41:09' prior: 16932658!
                             removeAllUnmodified
	| stClass |
	self exists ifFalse:[^self].
	self removeUnmodifiedMethods: self selectors.
	stClass := self realClass.
	(self hasDefinition and:[stClass definition = self definition]) ifTrue:[definition := nil].
	(self hasComment and:[(ClassDescription commentOf: stClass) asPlainString = self comment asPlainString]) ifTrue:[ self classComment: nil].
	metaClass ifNotNil: [ metaClass removeAllUnmodified]! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6753-ProtectAgainst-comment-JuanVuletich-2024Sep26-16h46m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6752] on 30 September 2024 at 9:42:45 am'!
!MorphicCanvas methodsFor: 'morphic world' stamp: 'jmv 9/30/2024 09:40:39' prior: 50377938!
                  beMainCanvasOfWorld
	world mainCanvas: self.
	self doOwnEngine.
	world displayWorldOn: self.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6754-DisplayWorldOnDebuggerResume-JuanVuletich-2024Sep30-09h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6752] on 26 September 2024 at 4:15:27 pm'!
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 9/26/2024 16:12:16' prior: 16966790!
               openSourceFiles
	self imageName = LastImageName ifFalse: [
		LastImageName := self imageName.
		"Reset the author initials to blank when the image gets moved"
		Utilities clearAuthor.
		"And clear any absolute path that is most likely invalid now."
		(Preferences at: #clearPackagePathsOnImageMove) ifTrue: [
			CodePackage clearPaths ]].
	"Warning: Do open the source files only if nil.
	If not nil, it is because they are internalized and the files should not be opened"
	self openSourcesAndChanges.
	CuisSourceFileArray install! !
!PreferenceSet class methodsFor: 'sys preference' stamp: 'jmv 9/26/2024 16:08:00' prior: 50385771!
       installMiscPreferences
" Preference value defined with closure. We could insert in a dynamic array...
  Preference with event handler "
	self sysPreferences

		name: #haloHandleSize 
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 5 // 3 max: 16];

		name: #halosMorphBoundsFrameColor
		description: 'When set, use this color for a rectangle on halos morph bounds. Useful for debugging morph sizes.' 
		category: #gui 
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;

		name: #halosMorphBoundsFillColor
		description: 'When set, use this color for filling a rectangle on halos morph bounds. Useful for debugging morph sizes.'
		category: #gui
		type: Object "Using Object as type as the property value can be either nil or a Color."
		value: nil;

		name: #roundedButtonRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize * 8 // 14];

		name: #roundedWindowRadius 	
		category: #gui 
		value: [(Preferences at: #standardListFont) pointSize] ;

		name: #scrollbarThickness 
		category: #gui 		
		value: [(Preferences at: #windowTitleFont) pointSize + 2];

		name: #classFinder 
		category: #programming 
		value: [ Smalltalk findAndBrowseClass ];

		name: #defaultAuthorName 
		category: #programming 
		value: [Utilities authorName];

		name: #worldMenu
		category: #system
		value: TheWorldMenu;

		name: #browserWindowClass
		category: #programming
		value: BrowserWindow;

		name: #clearPackagePathsOnImageMove
		category: #programming
		value: true.! !

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
Preferences name: #clearPackagePathsOnImageMove category: #programming value: true.!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6755-ClearPackagePathPreference-JuanVuletich-2024Sep26-15h44m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6755] on 30 September 2024 at 3:12:27 pm'!
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jvm 9/30/2024 15:07:49' prior: 50345495!
                              changeSetListMenuSpec
	"Spec for the menu and shortcut keys for the changesets list.
	See coment at Morph >> #getMenu
	"
	| answer |
	answer := #(
			#(0 		'Change Set' 						true)
			#(10 		'File out + Start an empty one (o)' 							$o 	model 			fileOutAndRemove 								fileOutIcon)
			#(20 		'File out + keep adding to same (k)' 							$k 	model 			fileOutAndKeep 								fileOutIcon)
			#(30 		'-----')
			#(40 		'Rename change set (R)' 					 		$R 	model 			rename 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			remove 								warningIcon)
	).
	model currentCanHavePreambleAndPostscript ifTrue: [
		model currentHasPreamble
			ifTrue: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Edit preamble (p)' 						$p 	model 			addPreamble 								textEditorIcon)
				#(80 		'Remove preamble' 						nil 	model 			removePreamble 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(60 		'-----')
				#(70 		'Add preamble (p)' 						$p 	model 			addPreamble 								listAddIcon) )].
		model currentHasPostscript
			ifTrue: [ answer  := answer, #(
				#(90 		'Edit postscript...' 						nil 	model 			editPostscript 								textEditorIcon)
				#(100 		'Remove postscript' 						nil 	model 			removePostscript 								listRemoveIcon)) ]
			ifFalse: [ answer  := answer, #(
				#(90 		'Add postscript...' 						nil 	model 			editPostscript 								listAddIcon) )].
	].

	answer  := answer, #(
		#(110 		'-----')
		#(120 		'Conflicts with other change sets' 								nil 	window			browseMethodConflicts 								emblemImportantIcon
			'Browse all methods that occur both in this change set and in at least one other change set.')
		#(130 		'-----')
		#(140 		'Trim history' 								nil 	model			trimHistory 								clockIcon
			'Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.
 NOTE: can cause confusion if later filed in over an earlier version of these changes.')
		#(150 		'View affected class categories' 								nil 	model 			viewAffectedClassCategories 								packageIcon
			'Show class categories affected by any contained change')
	).
	model csIsForBase ifFalse: [ "Maybe disable a few: Copy them the same as above, but without selector."
		answer := answer, #(
			#(40 		'Rename change set (R)' 					 		$R 	model 			nil 								saveAsIcon)
			#(50 		'Destroy change set (x)' 			 				$x 	model 			nil 								warningIcon)
			#(140 		'Trim history' 							nil 	model			nil 								clockIcon)) ].
	^answer! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jvm 9/30/2024 15:11:07' prior: 50371285!
      classListMenuSpec
	"Spec for the menu and shortcut keys for the class list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Class List' 						false)
			#(10 		'Delete class from change set (d)' 								$d 	model 			forgetClass 						warningIcon)
			#(20 		'Remove class from system (x)' 								$x 	model 			removeClass 						deleteIcon)
			#(30 		'-----')
			#(40 		'Browse full (b)' 								$b 	window 			browseMethodFull 						editFindReplaceIcon)
			#(50 		'browse hierarchy (h)' 								$h 	window 			browseHierarchy 						goTopIcon)
			#(60 		'browse protocol (p)' 								$p 	window 			browseFullProtocol 						spreadsheetIcon)
			#(70 		'-----')		
			#(80 		'Class refs (N)' 								$N 	window 			browseClassRefs 						classIcon)
	).
! !
!ChangeSorterWindow methodsFor: 'menu & kbd shortcuts' stamp: 'jvm 9/30/2024 15:12:03' prior: 50371312!
           messageListMenuSpec
	"Spec for the menu and shortcut keys for the message list.
	See coment at Morph >> #getMenu
	"
	^#(
			#(0 		'Message List' 						true)
			#(10 		'Delete method from change set (d)' 									$d 	model 			forget 									warningIcon)
			#(20 		'Remove method from system (x)' 									$x 	model 			removeMessage 									deleteIcon)
			#(30 		'-----')
			#(40 		'Browse full (b)' 									$b 	window 			browseMethodFull 									editFindReplaceIcon)
			#(50 		'Browse hierarchy (h)' 									$h 	window 			browseHierarchy 									goTopIcon)
			#(60 		'Browse method (O)' 									$O 	window 			openSingleMessageBrowser 									scriptIcon)
			#(80 		'-----')		
			#(90 		'FileOut (o)' 									$o 	model 			fileOutMessage 									fileOutIcon)
			#(100 		'-----')		
			#(110		'Senders of... (n)' 									nil 	window 			browseSendersOfMessages 									mailForwardIcon)
			#(120		'Implementors of... (m)' 									nil 	window 			browseImplementorsOfMessages 									developmentIcon)
			#(130 		'Inheritance (i)' 									$i 	window 			methodInheritance 									goDownIcon)
			#(140 		'Versions (v)' 									$v 	window 			browseVersions 									clockIcon)

			"Shortcut only. No menu entry."
			#(991		nil 									$m 	window 			browseImplementors)
			#(992		nil 									$n 	window 			browseSenders)
	).
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6756-ChangeSorterMenuTweaks-YourName-2024Sep30-15h02m-jvm.001.cs.st----!

'From Cuis7.1 [latest update: #6756] on 30 September 2024 at 9:30:17 pm'!
!PasteUpMorph methodsFor: 'misc' stamp: 'RMV 9/30/2024 21:29:56' prior: 16921392!
                       backgroundImageData: aByteArray
	"
	| filename |
	filename := 'bg/free-3d-art-pictures-gallery-wallpaper-desktop-18.jpg'.
	filename := 'bg/free-desktop-wallpaper.jpg'.
	filename := 'bg/jellyfish-thumb.jpg'.
	filename := 'bg/splash_by_beefpepsi.jpg'.
	filename := 'bg/gray ocean and pier.jpg'.
	filename := 'bg/newyork.jpg'.
	filename := 'bg/download-free-desktop-wallpaper-nature-conquestofparadise-marirs-pic.jpg'.
	filename := 'bg/desktop-wallpaper-tropical-1280x1024.jpg'.

	self runningWorld backgroundImageData: (filename asFileEntry readStream) binary contentsOfEntireFile.
	"
	backgroundImageData := aByteArray.
	self buildMagnifiedBackgroundImage! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6757-backgroundImageData-comment-fix-R.MarkVolkmann-2024Sep30-21h26m-RMV.001.cs.st----!

'From Cuis7.1 [latest update: #6752] on 3 October 2024 at 3:11:55 pm'!
!ClassDescription methodsFor: 'accessing' stamp: 'jmv 10/3/2024 15:08:15'!
                     smalltalkComment
	"Answer the receiver's comment. (If missing, supply a template) "
	| aString |
	aString := self theNonMetaClass organization classComment.
	aString isEmpty ifFalse: [^ aString].
	^
'Main comment stating the purpose of this class and relevant relationship to other classes.

Possible useful expressions for doIt or printIt.

Structure:
 instVar1		type -- comment about the purpose of instVar1
 instVar2		type -- comment about the purpose of instVar2

Any further useful comments about the general approach of this implementation.'! !
!PseudoClass methodsFor: 'class' stamp: 'jmv 10/3/2024 15:08:20'!
                       smalltalkComment
	| rStr |
	rStr := self organization commentRemoteStr.
	^rStr
		ifNil: [ self name,' has not been commented in this file']
		ifNotNil: [ rStr string]! !
!ClassDescription methodsFor: 'accessing' stamp: 'jmv 10/3/2024 15:08:36' prior: 50389570!
                           comment
	"Answer the receiver's comment. (If missing, supply a template) "
	^self smalltalkComment.! !
!Browser methodsFor: 'accessing' stamp: 'jmv 10/3/2024 15:09:58' prior: 50389577 overrides: 50386819!
                   acceptedStringOrText
	"Depending on the current selection, different information is retrieved.
	Answer a string description of that information. This information is the
	method of the currently selected class and message."

	| comment theClass latestCompiledMethod |
	latestCompiledMethod := currentCompiledMethod.
	currentCompiledMethod := nil.

	editSelection == #none ifTrue: [^ ''].
	editSelection == #editSystemCategories 
		ifTrue: [^ systemOrganizer printString].
	self isEditingNewClass ifTrue: [
		selectedSystemCategory ifNil: [ ^'' ].
		^ (theClass := self selectedClass)
			ifNil: [
				Class template: selectedSystemCategory]
			ifNotNil: [
				Class templateForSubclassOf: theClass category: selectedSystemCategory]].
	self isEditingExistingClass 
		ifTrue: [^ self classDefinitionText ].
	editSelection == #editComment 
		ifTrue: [
			(theClass := self selectedClass) ifNil: [^ ''].
			comment := theClass smalltalkComment.
			currentCompiledMethod := theClass organization commentRemoteStr.
			^ comment isEmpty
				ifTrue: ['This class has not yet been commented.']
				ifFalse: [comment]].
	editSelection == #editMessageCategories 
		ifTrue: [^ self classOrMetaClassOrganizer printString].
	editSelection == #newMessage
		ifTrue: [
			^ (theClass := self selectedClassOrMetaClass) 
				ifNil: ['']
				ifNotNil: [theClass sourceCodeTemplate]].
	editSelection == #editMessage
		ifTrue: [
			self showingByteCodes ifTrue: [^ self selectedBytecodes].
			currentCompiledMethod := latestCompiledMethod.
			^ self selectedMessage].

	self error: 'Browser internal error: unknown edit selection.'! !
!Browser methodsFor: 'class functions' stamp: 'jmv 10/3/2024 15:10:06' prior: 50389631!
                             classCommentText
	"return the text to display for the comment of the currently selected class"
	| theClass |
	theClass := self selectedClassOrMetaClass.
	^ Text
		initialFont: (Preferences at: #standardCodeFont)
		stringOrText:
			((theClass notNil and: [ theClass hasComment ])
				ifTrue: [ theClass smalltalkComment ]
				ifFalse: [ '' ]).! !
!Browser methodsFor: 'class functions' stamp: 'jmv 10/3/2024 15:10:17' prior: 50389645!
              copyClass
	| originalClass originalName copysName newDefinition newMetaDefinition newClass |
	selectedClassName ifNil: [^ self].
	originalClass := self selectedClass.
	originalName := originalClass name.
	self request: 'New class name?'
		initialAnswer: originalName
		verifying: [:aString| aString notEmpty and: [aString ~= originalName]]
		do: [:aString|
			copysName := aString asSymbol.
			(Smalltalk includesKey: copysName)
				ifTrue: [self error: copysName , ' already exists'].
			newDefinition := originalClass definition
				copyReplaceAll: originalName printString
				with: copysName printString.
			newClass := Compiler evaluate: newDefinition logged: true.
			newMetaDefinition := originalClass class definition
				copyReplaceAll: originalClass class name
				with: newClass class name.
			Compiler evaluate: newMetaDefinition logged: true.
			newClass copyAllCategoriesFrom: originalClass.
			newClass class copyAllCategoriesFrom: originalClass class.
			originalClass hasComment ifTrue: [newClass comment: originalClass smalltalkComment].
			self classListIndex: 0.
			self changed: #classList]! !
!MethodSet methodsFor: 'message list' stamp: 'jmv 10/3/2024 15:10:39' prior: 50389684 overrides: 50386883!
                          selectedMessage
	"Answer the source method for the currently selected message."

	| class selector |
	selectedMessage ifNil: [^ 'Class vanished'].
	
	class := selectedMessage actualClass.
	selector := selectedMessage methodSymbol.
	selector ifNil: [ ^'prims'].

	selector first isUppercase ifTrue: [
		selector == #Comment ifTrue: [
			currentCompiledMethod := class organization commentRemoteStr.
			^ class smalltalkComment ].
		selector == #Definition ifTrue: [
			^ class definition ].].

	(class notNil and: [ class includesSelector: selector]) ifFalse: [
		currentCompiledMethod := nil.
		^ 'Missing'].

	self showingDecompile ifTrue: [
		^ self decompiledSource ].

	currentCompiledMethod := class compiledMethodAt: selector ifAbsent: nil.

	^self sourceStringPrettifiedAndDiffed! !
!ChangeList methodsFor: 'viewing access' stamp: 'jmv 10/3/2024 15:11:04' prior: 50389712!
                contentsDiffedFromCurrent
	"Answer the contents diffed forward from current (in-memory) method version"

	|  aChange aClass  name aSelector |
	listIndex = 0
		ifTrue: [^ ''].
	aChange := changeList at: listIndex.
	((aChange changeType == #method 
			and: [(aClass := aChange changeClass) notNil]) 
			and: [aClass includesSelector: aChange methodSelector]) ifTrue: [
		aSelector := aChange methodSelector.
		(aClass notNil and: [aClass includesSelector: aSelector])
			ifFalse: [ ^aChange text copy ].
		^DifferenceFinder
				displayPatchFrom: (aClass sourceCodeAt: aSelector)
				to: aChange text
				tryWords: self shouldDiffWords
				prettyPrintedIn: (self showingAnyKindOfPrettyDiffs ifTrue: [aClass]) ].
	(aChange changeType == #classDefinition and: [
			name := aChange changeClassName.
			Smalltalk includesKey: name]) ifTrue: [
		aClass := Smalltalk at: name.
		aChange isMetaClassChange ifTrue: [ aClass := aClass class ].
		^DifferenceFinder
				displayPatchFrom: aClass definition to: aChange text tryWords: true].
	(aChange changeType == #classComment
			and: [(aClass := aChange changeClass) notNil]) ifTrue: [
		^DifferenceFinder
				displayPatchFrom: aClass smalltalkComment to: aChange text tryWords: self shouldDiffWords].
	^(changeList at: listIndex) text! !
!PseudoClass methodsFor: 'class' stamp: 'jmv 10/3/2024 15:08:47' prior: 16932545!
                 comment

	^self smalltalkComment.! !
!PseudoClass methodsFor: 'removing' stamp: 'jmv 10/3/2024 15:11:25' prior: 50389756!
      removeAllUnmodified
	| stClass |
	self exists ifFalse:[^self].
	self removeUnmodifiedMethods: self selectors.
	stClass := self realClass.
	(self hasDefinition and:[stClass definition = self definition]) ifTrue:[definition := nil].
	(self hasComment and:[stClass smalltalkComment asPlainString = self smalltalkComment asPlainString]) ifTrue: [
		self classComment: nil].
	metaClass ifNotNil: [ metaClass removeAllUnmodified]! !

ClassDescription class removeSelector: #commentOf:!

!methodRemoval: ClassDescription class #commentOf: stamp: 'Install-6758-fixFor-6753-JuanVuletich-2024Oct03-15h06m-jmv.001.cs.st 10/10/2024 15:39:35'!
commentOf: aClassOrMetaclass
	"Answer the receiver's comment. (If missing, supply a template).
	This method is intended to replace sending `aClass comment`, to protect the system against some
	class implementing a non-compliant class side #comment method... (yes, that has actually happened)."

	| aString |
	aString := aClassOrMetaclass theNonMetaClass organization classComment.
	aString isEmpty ifFalse: [^ aString].
	^
'Main comment stating the purpose of this class and relevant relationship to other classes.

Possible useful expressions for doIt or printIt.

Structure:
 instVar1		type -- comment about the purpose of instVar1
 instVar2		type -- comment about the purpose of instVar2

Any further useful comments about the general approach of this implementation.'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6758-fixFor-6753-JuanVuletich-2024Oct03-15h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6758] on 4 October 2024 at 10:52:37 am'!
!FileList methodsFor: 'private' stamp: 'jmv 10/4/2024 10:43:02' prior: 16862298!
                          defaultContents
	| n |
	acceptedContentsCache := list
			ifNil: [String new]
			ifNotNil: [
				"In the contents pane, list only up to a certain number of files."
				n := list size min: 100.
				String streamContents: [ :s | 
					s nextPutAll: 'NO FILE SELECTED'; newLine.
					s nextPutAll: '  -- Folder Summary --'; newLine.
					s nextPutAll: 'MANY FILES'; newLine.
					1 to: n do: [ :i | s nextPutAll: (list at: i); newLine].
					n < list size ifTrue: [
						s nextPutAll: '  -- End of this Folder Summary --'; newLine.
						s nextPutAll: '  -- Additional files not listed here --'; newLine ]]].
	brevityState := #FileList.
	^ acceptedContentsCache! !
!FileList methodsFor: 'stepping' stamp: 'jmv 10/4/2024 10:51:00' prior: 50363107 overrides: 16915328!
    stepAt: millisecondSinceLast

	"Do not auto-update the list if there are too many files. It could take too long."
	list size <= 1000 ifTrue: [
		self updateFileList ].! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6759-FileList-DontSlowDownAndFreezeWhenTooManyFiles-JuanVuletich-2024Oct04-10h50m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6758] on 4 October 2024 at 11:13:47 am'!
!Character class methodsFor: 'class initialization' stamp: 'jmv 10/4/2024 11:13:02' prior: 50357088 overrides: 16916245!
initialize
	"https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
	http://www.unicode.org/L2/L1999/UnicodeData.html
	Character initialize
	"

	| fields codePoint codePointName generalCategory canonicalCombiningClass characterDecompositionMapping decomposition composition |
	UppercaseLettersTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	LowercaseLettersTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	SymbolsLikeTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	DiacriticalMarksTable := ByteArray newBits: 16r1FFFF. "Basic Multilingual Plane 	+ Supplementary Multilingual Plane"
	CanonicalCombiningClasses := Dictionary new.
	DecompositionMapping := Dictionary new.
	CompositionMapping := Dictionary new.
	(DirectoryEntry smalltalkImageDirectory // 'UnicodeData.txt') readStreamDo: [ :strm |
		[strm atEnd] whileFalse: [
			fields := strm nextLine substringsSeparatedBy: $;.
			(#(4 5 6) includes: fields first size) ifFalse: [ fields first print. self error: 'Bad UnicodeData.txt file' ].
			codePoint := ('16r', fields first) asNumber.
			codePointName := fields at: 2.
			generalCategory := fields at: 3.
			codePoint <= 16r1FFFF ifTrue: [
				({ 'Lu'. 'Lt' } includes: generalCategory) ifTrue: [ UppercaseLettersTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Ll'. 'Lo' } includes: generalCategory) ifTrue: [ LowercaseLettersTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Pc'. 'Pd'. 'Po'. 'Sm'. 'Sc'. 'Sk'. 'So' } includes: generalCategory) ifTrue: [ SymbolsLikeTable bitBooleanAt: codePoint+1 put: true ].
				({ 'Mn'. 'Mc'. 'Me' } includes: generalCategory) ifTrue: [ DiacriticalMarksTable bitBooleanAt: codePoint+1 put: true ]].
			canonicalCombiningClass := (fields at: 4) asNumber.
			canonicalCombiningClass = 0 ifFalse: [
				CanonicalCombiningClasses at: codePoint put: canonicalCombiningClass ].
			characterDecompositionMapping := fields at: 6.
			(characterDecompositionMapping size > 0 and: [ characterDecompositionMapping first ~= $< ]) ifTrue: [
				decomposition := characterDecompositionMapping substrings collect: [ :s | ('16r', s) asNumber].
				DecompositionMapping at: codePoint put: decomposition.
				decomposition size > 1 ifTrue: [
					composition := CompositionMapping at: decomposition first ifAbsentPut: [Dictionary new].
					composition at: decomposition second put: codePoint.
					decomposition size > 2 ifTrue: [self error: decomposition printString print].
					]].
			"
			uppercaseMapping := fields at: 13. lowercaseMapping := fields at: 14. titlecaseMapping := fields at: 15.
			Random next > 10.999 | (generalCategory = 'So') ifTrue: [
				{codePoint hex. codePointName. generalCategory} print ].
			decimalDigitValue := fields at: 7. digitValue := fields at: 8. numericValue := fields at: 9.
			decimalDigitValue isEmpty & digitValue isEmpty & numericValue isEmpty ifFalse: [
				{'numeric'. codePoint. codePointName. generalCategory. decimalDigitValue. digitValue. numericValue} print].
			"
			]].
	self initializeNamedCharactersMap.! !
!Character class methodsFor: 'class initialization' stamp: 'jmv 10/4/2024 11:12:55' prior: 16811144!
                               initializeNamedCharactersMap
	"Dictionary of named characters that we can enter in an editor using \name.
	Please keep the names short and try to follow the naming convention used in LaTeX."

	NamedCharactersMap := Dictionary new.
	"Superscripts:"
	4 to: 9 do: [:each| NamedCharactersMap at: '^', each printString put: (self codePoint: 16r2070 + each)].
	"Subscripts:"
	0 to: 9 do: [:each| NamedCharactersMap at: '_', each printString put: (self codePoint: 16r2080 + each)].
	'hklmnpst' withIndexDo: [:each :i| NamedCharactersMap at: '_', each asString put: (self codePoint: 16r2094 + i)].
	'iruv' withIndexDo: [:each :i| NamedCharactersMap at: '_', each asString put: (self codePoint: 16r1D61 + i)].
	"Combining characters:"
	#(
		(acute 16r0301) "('''' 16r0301)"
		(grave 16r0300) "('`' 16r0300)"
		(tilde 16r0303) "('~' 16r0303)"
		(diaeresis 16r0308) "('THEDOUBLEQUOTECHAR' 16r0308)" "When uncommenting, replace THEDOUBLEQUOTECHAR with an actual double quote..."
		(bar 16r0304) (breve 16r0306) (check 16r030C)
		(hat 16r0302) (not 16r0338) (overline 16r0305)
		(vec 16r20D7)
	) do: [:each| NamedCharactersMap at: each first put: (self codePoint: each second)].
	#(
		"Some more superscripts and subscripts:"
		('^0' $‚Å∞) ('^1' $¬π) ('^2' $¬≤) ('^3' $¬≥) ('^i' $‚Å±) ('^n' $‚Åø) ('_j' $‚±º) ('^+' $‚Å∫) ('^-' $‚Åª) ('_+' $‚Çä) ('_-' $‚Çã)
		"Arrows:"
		(left $‚Üê) (right $‚Üí) (up $‚Üë) (down $‚Üì) (leftright $‚Üî) (updown $‚Üï)
		(Left $‚áê) (Up $‚áë) (Right $‚áí) (Down $‚áì) (Leftright $‚áî) (Updown $‚áï)
		(gets $‚Üê) (to $‚Üí) (mapsto $‚Ü¶) (mapsfrom $‚Ü§) (implies $‚üπ) (impliedby $‚ü∏) (iff $‚ü∫)
		(from $‚Üê) (iso $‚Üî) (From $‚áê) (To $‚áí) (dfrom $‚áá) (dto $‚áâ) "non-standard"
		"Greek alphabet:"
		(alpha $Œ±) (beta $Œ≤) (gamma $Œ≥) (delta $Œ¥) (epsilon $Œµ) (zeta $Œ∂) (eta $Œ∑) (theta $Œ∏) (iota $Œπ) (kappa $Œ∫) (lambda $Œª) (mu $Œº) (nu $ŒΩ) (xi $Œæ) (omicron $Œø) (pi $œÄ) (rho $œÅ) (sigmaf $œÇ) (sigma $œÉ) (tau $œÑ) (upsilon $œÖ) (phi $œÜ) (chi $œá) (psi $œà) (omega $œâ) (thetasym $œë) (upsih $œí) (piv $œñ)
		(Alpha $Œë) (Beta $Œí) (Gamma $Œì) (Delta $Œî) (Epsilon $Œï) (Zeta $Œñ) (Eta $Œó) (Theta $Œò) (Iota $Œô) (Kappa $Œö) (Lambda $Œõ) (Mu $Œú) (Nu $Œù) (Xi $Œû) (Omicron $Œü) (Pi $Œ†) (Rho $Œ°) (Sigma $Œ£) (Tau $Œ§) (Upsilon $Œ•) (Phi $Œ¶) (Chi $Œß) (Psi $Œ®) (Omega $Œ©)
		"Blackboard bold:"
		(A $ùî∏) (B $ùîπ) (C $‚ÑÇ) (D $ùîª) (E $ùîº) (F $ùîΩ) (G $ùîæ) (H $‚Ñç) (I $ùïÄ) (J $ùïÅ) (K $ùïÇ) (L $ùïÉ) (M $ùïÑ) (N $‚Ñï) (O $ùïÜ) (P $‚Ñô) (Q $‚Ñö) (R $‚Ñù) (S $ùïä) (T $ùïã) (U $ùïå) (V $ùïç) (W $ùïé) (X $ùïè) (Y $ùïê) (Z $‚Ñ§)
		"Math symbols:"
		(oplus $‚äï) (otimes $‚äó) (ominus $‚äñ) (odot $‚äô) (oslash $‚äò)
		(times $√ó) (div $√∑) (circ $‚àò) (bullet $‚àô) (cdot $¬∑) (pm $¬±) (wr $‚âÄ)
		(perp $‚ä•)		
		(cap $‚à©) (cup $‚à™) (sqcap $‚äì) (sqcup $‚äî) (wedge $‚àß) (vee $‚à®) (perp $‚ä•) (parallel $‚à•)	
		(in $‚àà) (notin $‚àâ) (exists $‚àÉ) (nexists $‚àÑ) (forall $‚àÄ) (emptyset $‚àÖ) (infty $‚àû) (aleph $‚Ñµ) (ell $‚Ñì)
		(Im $‚Ñë) (Re $‚Ñú) (wp $‚Ñò)
		(sqrt $‚àö) (partial $‚àÇ) (deg $¬∞)
(leq $‚â§) (geq $‚â•) (neq $‚â†) (prec $‚â∫) (succ $‚âª) (simeq $‚âÉ) (cong $‚âÖ) (equiv $‚â°) (approx $‚âà) (subset $‚äÇ) (supset $‚äÉ)
		(ldots $‚Ä¶) (cdots $‚ãØ) (ddots $‚ã±) (iddots $‚ã∞) (vdots $‚ãÆ) "(prime $‚Ä≤) (dprime $‚Ä≥) (tprime $‚Ä¥)"
		"Other:"
		(langle $‚ü®) (rangle $‚ü©) (lceil $‚åà) (rceil $‚åâ) (lfloor $‚åä) (rfloor $‚åã) (ltimes $‚ãâ) (rtimes $‚ãä) 
		(lowast $‚Åé) (dag $‚Ä†) (ddag $‚Ä°) (emdash $‚Äî) (endash $‚Äì) (questiondown $¬ø) (exclamdown $¬°)
		(euro $‚Ç¨) (pounds $¬£) (celsius $‚ÑÉ) (farenheit $‚Ñâ)
		(registered $¬Æ) (copyright $¬©) (trademark $‚Ñ¢) (snowman $‚òÉ) (section $¬ß))
	do: [:each| NamedCharactersMap at: each first put: each second].
	
	"Some synonyms:"
	#((prod sqcap) (coprod sqcup) (stack sqcap) (augment sqcup) (and wedge) (or vee) (xor oplus))
	do: [:each| NamedCharactersMap at: each first put: (NamedCharactersMap at: each second)]! !

Character initialize!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6760-DisableTroublesomeLatexInputSequences-JuanVuletich-2024Oct04-10h52m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6760] on 4 October 2024 at 2:12:18 pm'!
!Class methodsFor: 'subclass creation' stamp: 'jmv 10/4/2024 13:52:21'!
                              subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s
	"Some chunk files may not include class category in the class declarations."
	^self
		subclass: t
		instanceVariableNames: f
		classVariableNames: d
		poolDictionaries: s
		category: SystemOrganizer defaultClassCategory.! !
!ClassDescription methodsFor: 'fileIn/Out' stamp: 'jmv 10/4/2024 13:53:50' prior: 16819501!
                    methods
	"Answer a ClassCategoryReader for compiling messages that are not classified.
	Some chunk files may not include class category in the class declarations."

	^ ClassCategoryReader new setClass: self category: ClassOrganizer defaultMethodCategory.! !
!Class methodsFor: 'subclass creation' stamp: 'jmv 10/4/2024 13:50:25' prior: 16815412!
      subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s category: cat
	"This is the standard initialization message for creating a new class as a 
	subclass of an existing class (the receiver)."

	| answer |
	answer := ClassBuilder new
		superclass: self
		subclass: t
		instanceVariableNames: f
		classVariableNames: d
		poolDictionaries: s
		category: cat.

	Smalltalk
		logChange: answer definition
		preamble: answer definitionPreamble.
	^answer 
	
! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6761-chunkFilesCompatibility-JuanVuletich-2024Oct04-14h10m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6761] on 7 October 2024 at 9:56:47 am'!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6762-TweakToMakeATestHappy-JuanVuletich-2024Oct07-09h51m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6761] on 8 October 2024 at 01:28:41 PM'!
!Halt methodsFor: 'description' stamp: 'jfr 10/8/2024 13:27:48' overrides: 16856185!
    noHandler
	"Halt should not be caught by an UnhandledError handler"
	
	UnhandledError defaultActionForException: self! !
!UnhandledError class methodsFor: 'as yet unclassified' stamp: 'jfr 10/8/2024 13:25:39'!
              defaultActionForException: anError

	^ self new
		exception: anError;
		defaultAction! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6763-DoHaltEvenIfIn-UnhandledError-HandledCode-JonRaiford-2024Oct08-13h20m-jfr.001.cs.st----!

'From Cuis7.1 [latest update: #6763] on 9 October 2024 at 4:21:20 pm'!

Exception subclass: #AssertionFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Exceptions-Extensions'!

!classDefinition: #AssertionFailure category: #'Exceptions-Extensions' stamp: 'Install-6764-AssertionFailureIsNotA-Halt-JuanVuletich-2024Oct09-16h17m-jmv.001.cs.st 10/10/2024 15:39:40'!
Exception subclass: #AssertionFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Exceptions-Extensions'!
!AssertionFailure commentStamp: '<historical>' prior: 16783941!
                 AssertionFailure is the exception signaled from Object>>assert: when the assertion block evaluates to false.!
!AssertionFailure methodsFor: 'description' stamp: 'tfei 5/10/1999 14:24' overrides: 16856391!
                   isResumable

	^true! !
!AssertionFailure methodsFor: 'priv handling' stamp: 'SqR 3/6/2015 20:57' overrides: 16856165!
          defaultAction

	self noHandler! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6764-AssertionFailureIsNotA-Halt-JuanVuletich-2024Oct09-16h17m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6764] on 10 October 2024 at 11:29:12 am'!
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:58:16'!
           exists: fullPathName
	^self primFileExists: fullPathName asUtf8Bytes ! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:58:29'!
              fileMode: fullPathName
	^self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 2! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:58:41'!
                       getModificationDate: fullPathName
	^self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 10! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:58:48'!
           isDirectory: fullPathName
	"
		S_IFSOCK   0140000   socket
		S_IFLNK    0120000   symbolic link
		S_IFREG    0100000   regular file
		S_IFBLK    0060000   block device
		S_IFDIR    0040000   directory
		S_IFCHR    0020000   character device
		S_IFIFO    0010000   FIFO
	"

	| mode |
	mode := [self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 2] on: Error do: [0].
	^(mode bitAnd:  8r0040000) ~~ 0! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:58:56'!
                      isFile: fullPathName
	"
		S_IFSOCK   0140000   socket
		S_IFLNK    0120000   symbolic link
		S_IFREG    0100000   regular file
		S_IFBLK    0060000   block device
		S_IFDIR    0040000   directory
		S_IFCHR    0020000   character device
		S_IFIFO    0010000   FIFO
	"

	| mode |
	mode := [self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 2] on: Error do: [0].
	^(mode bitAnd:  8r0100000) ~~ 0! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'JMM 8/30/2024 11:20:23'!
                           isReadOnly: fullPathName
	^(self isWriteable: fullPathName) not! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:59:13'!
                    isReadable: fullPathName
	^self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 13! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:59:17'!
                    isWriteable: fullPathName
	^self primFileAttribute: fullPathName asUtf8Bytes attributeNumber: 14! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:59:22'!
                   makeReadOnly: fullPathName
	| currentMode newMode |
	currentMode := self fileMode: fullPathName.
	newMode := currentMode bitAnd: 8r777577.
	^(self primitiveChangeMode: fullPathName asUtf8Bytes mode: newMode) isNil! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jfr 8/16/2024 09:59:28'!
                              makeReadWrite: fullPathName
	| currentMode newMode |
	currentMode := self fileMode: fullPathName.
	newMode := currentMode bitOr: 8r000600.
	^(self primitiveChangeMode: fullPathName asUtf8Bytes mode: newMode) isNil! !
!FileIOAccessor methodsFor: 'primitives-FileAttributesPlugin' stamp: 'mir 7/29/2024 09:21:44'!
        primFileAttribute: aString attributeNumber: attributeNumber
	"Answer a single file attribute.
	primFileAttributes: aString attributeNumber: attributeNumber
	aString is the path to the file
	attributeNumber identifies which attribute to return:
	1 - 12: stat(): name, mode, ino, dev, nlink, uid, gid, size, accessDate,
	modifiedDate, changeDate, creationDate
	13 - 15: access(): R_OK, W_OK, X_OK
	16: isSymlink"

 	<primitive: 'primitiveFileAttribute' module: 'FileAttributesPlugin'>
	self primitiveFailed
! !
!FileIOAccessor methodsFor: 'primitives-FileAttributesPlugin' stamp: 'mir 7/29/2024 09:21:25'!
    primFileAttributes: aString mask: attributeMask
	"Answer an array of file attributes.
	primFileAttributes: aString mask: attributeMask
	aString is the path to the file
	attributeMask indicates which attributes to retrieve:
	bit 0 - get stat() attributes
	bit 1 - get access() attributes
	bit 2 - use lstat() instead of stat()
	On error answer the appropriate error code (Integer)"

 	<primitive: 'primitiveFileAttributes' module: 'FileAttributesPlugin'>
	self primitiveFailed
! !
!FileIOAccessor methodsFor: 'primitives-FileAttributesPlugin' stamp: 'mir 7/31/2024 11:53:03'!
 primFileExists: aPathString

 	<primitive: 'primitiveFileExists' module: 'FileAttributesPlugin'>
	self primitiveFailed
! !
!FileIOAccessor methodsFor: 'primitives-FileAttributesPlugin' stamp: 'mir 7/29/2024 11:58:09'!
      primFileMasks
	"
		masks[0] = (integerObjectOf(S_IFMT));
		masks[1] = (integerObjectOf(S_IFSOCK));
		masks[2] = (integerObjectOf(S_IFLNK));
		masks[3] = (integerObjectOf(S_IFREG));
		masks[4] = (integerObjectOf(S_IFBLK));
		masks[5] = (integerObjectOf(S_IFDIR));
		masks[6] = (integerObjectOf(S_IFCHR));
		masks[7] = (integerObjectOf(S_IFIFO))
	"

 	<primitive: 'primitiveFileMasks' module: 'FileAttributesPlugin'>
	self primitiveFailed
! !
!FileIOAccessor methodsFor: 'primitives-FileAttributesPlugin' stamp: 'mir 7/29/2024 09:42:46'!
        primitiveChangeMode: aString mode: ModeFlags
	""

 	<primitive: 'primitiveChangeMode' module: 'FileAttributesPlugin'>
	self primitiveFailed
! !
!FileSystemEntry methodsFor: 'testing' stamp: 'mir 7/29/2024 12:22:46'!
        existsAsDirectory
	^FileIOAccessor default isDirectory: self pathName! !
!FileSystemEntry methodsFor: 'testing' stamp: 'mir 7/29/2024 12:23:12'!
               existsAsFile
	^FileIOAccessor default isFile: self pathName! !
!FileSystemEntry methodsFor: 'testing' stamp: 'mir 7/29/2024 09:56:41'!
                         isReadOnly
	^FileIOAccessor default isReadOnly: self pathName! !
!FileSystemEntry methodsFor: 'testing' stamp: 'mir 7/29/2024 10:05:33'!
                       isReadable
	^FileIOAccessor default isReadable: self pathName! !
!FileSystemEntry methodsFor: 'testing' stamp: 'mir 7/29/2024 10:03:38'!
                       isWriteable
	^FileIOAccessor default isWriteable: self pathName! !
!FileSystemEntry methodsFor: 'attributes' stamp: 'mir 7/29/2024 10:18:33'!
                  makeReadOnly
	^FileIOAccessor default makeReadOnly: self pathName! !
!FileSystemEntry methodsFor: 'attributes' stamp: 'mir 7/29/2024 10:30:04'!
                makeReadWrite
	^FileIOAccessor default makeReadWrite: self pathName! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6765-FileAttributesSupport-MichaelRueger-JohnMcIntosh-JonRaiford-2024Oct10-11h17m-mir.001.cs.st----!

'From Cuis7.1 [latest update: #6765] on 10 October 2024 at 11:31:17 am'!
!ChangeListWindow methodsFor: 'menu commands' stamp: 'jmv 10/10/2024 10:00:06' prior: 16805406 overrides: 50350738!
        browseVersions

	| method class browser firstChange |
	method := model currentCompiledMethod.
	method isNil ifTrue: [
		model selectedClass ifNotNil: [ :selectedClass |
			^ VersionsBrowserWindow
				browseCommentOf: selectedClass ]].
	firstChange := model xtraVersion.
	firstChange ifNil: [ ^self ].
	class := method methodClass.
	browser := VersionsBrowserWindow
		browseVersionsOf: method
		class: class
		meta: class isMeta
		category: (class organization categoryOfElement: method selector)
		selector: method selector
		extraChangeRecord: firstChange.
	^browser! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6766-ChangeListWindow-bugfix-JuanVuletich-2024Oct10-11h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6765] on 10 October 2024 at 11:39:27 am'!
!FileSystemEntry methodsFor: 'testing' stamp: 'jmv 10/10/2024 11:32:20'!
                      isDirectoryEntry
	^false! !
!FileSystemEntry methodsFor: 'testing' stamp: 'jmv 10/10/2024 11:32:28'!
                           isFileEntry
	^false! !
!DirectoryEntry methodsFor: 'testing' stamp: 'jmv 10/10/2024 11:32:23' overrides: 50390982!
             isDirectoryEntry
	^true! !
!FileEntry methodsFor: 'testing' stamp: 'jmv 10/10/2024 11:32:32' overrides: 50390986!
              isFileEntry
	^true! !
!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 10/10/2024 11:34:24' prior: 16862149!
        fileNameFormattedFrom: entry namePad: namePad sizePad: sizePad sizeWithCommasPad: sizeWithCommasPad
	"entry is a 5-element array of the form:
		(name creationTime modificationTime dirFlag fileSize)"
	| sizeStr nameStr paddedNameStr dateStr someSpaces sizeDigits sizeDigitsAndCommas spacesToAdd font spaceWidth |
	font := Preferences at: #standardListFont.
	spaceWidth := font widthOf: $ .
	nameStr := entry isDirectoryEntry
		ifTrue: [ entry name , self folderString ]
		ifFalse: [ entry name ].
	spacesToAdd := namePad - (font widthOfString: nameStr) // spaceWidth.
	paddedNameStr := nameStr ,
		(String
			new: spacesToAdd
			withAll: $ ).
	dateStr := (entry modificationTime date printFormat: #(3 2 1 $/ 1 1 2 )) , '  ' ,
		(String streamContents: [ :s |
			entry modificationTime time
				print24: true
				showSeconds: true
				on: s ]).
	sizeDigits := entry fileSize printString size.
	sizeStr := entry fileSize printStringWithCommas.
	sizeDigitsAndCommas := sizeStr size.
	spacesToAdd := sizeWithCommasPad - sizeDigitsAndCommas.
	"Usually a space takes the same space as a comma, and half the space of a digit.
	Pad with 2 spaces for each missing digit and 1 space for each missing comma"
	(font widthOf: Character space) ~= (font widthOf: $, )
		ifTrue: [spacesToAdd := spacesToAdd + sizePad - sizeDigits max: 0].
	sizeStr := (String new: spacesToAdd withAll: $ ) , sizeStr.
	someSpaces := String new: 6 withAll: $ .
	"
	sortMode = #name ifTrue: [ ^ paddedNameStr , someSpaces , '( ' , dateStr , someSpaces , sizeStr , ' )' ].
	sortMode = #date ifTrue: [ ^ '( ' , dateStr , someSpaces , sizeStr , ' )' , someSpaces , nameStr ].
	sortMode = #size ifTrue: [ ^ '( ' , sizeStr , someSpaces , dateStr , ' )' , someSpaces , nameStr ].
	"
	^ paddedNameStr , someSpaces , '( ' , dateStr , someSpaces , sizeStr , ' )' .! !
!FileList methodsFor: 'volume list and pattern' stamp: 'jmv 10/10/2024 11:34:30' prior: 50384875!
listForSelectingPatterns: patternsThatSelect rejectingPatterns: patternsThatReject
	"Make the list be those file names which match the patterns."

	| sizePad selected newList namePad sizeWithCommasPad font |
	directory ifNil: [^#()].
	directory invalidateChildren.
	selected := Set new.
	patternsThatSelect do: [ :selPat |
		directory childrenDo: [ :entry |
			(entry isDirectoryEntry
				ifTrue: [ showDirsInFileList ]
				ifFalse: [ 
					(self doesPattern: selPat allow: entry) and: [
							patternsThatReject noneSatisfy: [ :rejPat | rejPat match: entry name ]]])
						ifTrue: [ selected add: entry ]]].
		
	newList := selected asArray sort: self sortBlock.
	font := Preferences at: #standardListFont.
	namePad := newList inject: 0 into: [ :mx :entry | mx max: (font widthOfString: entry name)].
	sizePad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printString size.
	sizeWithCommasPad := (newList inject: 0 into: [ :mx :entry | mx max: (entry fileSize)]) printStringWithCommas size.
	newList := newList collect: [ :e |
		self fileNameFormattedFrom: e namePad: namePad sizePad: sizePad sizeWithCommasPad: sizeWithCommasPad ].
	^ newList.! !
!FileList methodsFor: 'private' stamp: 'jmv 10/10/2024 11:34:39' prior: 16862503!
                         sortBlock
	"Answer block to decide what order to display the directory entries."

	^ [ :xx :yy | | x y |
		(xx isDirectoryEntry == yy isDirectoryEntry) 
			ifTrue: [  
				sortAscending
					ifTrue: [ x := xx. y := yy ]
					ifFalse: [ x := yy. y := xx ].
				"sort by user-specified criterion"
				sortMode = #name 
					ifTrue: [x name <= y name]
					ifFalse: [ sortMode = #date
						ifTrue: [ x modificationTime = y modificationTime
								ifTrue: [ x name <= y name ]
								ifFalse: [ x modificationTime <= y modificationTime ] ]
						ifFalse: [ "size"
							x fileSize = y fileSize 
								ifTrue: [ x name <= y name ]
								ifFalse: [ x fileSize <= y fileSize ] ] ] ]
			ifFalse: [
				"directories always precede files"
				xx isDirectoryEntry ] ]! !
!FileIOAccessor methodsFor: 'private' stamp: 'jmv 10/10/2024 11:35:59' prior: 16861124!
        updateEntry: aFileSystemEntry
	| entryArray index lookIn isDirectory |

	"If the index in aFileSystemEntry is valid, use it. No need to iterate over all entries."
	aFileSystemEntry primEntryInParent ifNotNil: [ :tentativeIndex |
		(self primFixedNameLookupEntryIn: aFileSystemEntry parent pathName asUtf8Bytes index: tentativeIndex) ifNotNil: [ :found |
	 		found == #badDirectoryPath ifFalse: [
				aFileSystemEntry name = (found at: 1) ifTrue: [
					aFileSystemEntry updateFrom: found entryInParent: tentativeIndex.
					^ self ]]]].

	"Otherwise, do a full iteration"
	lookIn := aFileSystemEntry parent pathName.
	index := 1.
	[
		entryArray := self primFixedNameLookupEntryIn: lookIn asUtf8Bytes index: index.
		#badDirectoryPath == entryArray ifTrue: [
			^ self].
		entryArray == nil ifTrue: [
			^ self].
		isDirectory := entryArray at: 4.
		aFileSystemEntry name = (entryArray at: 1) ifTrue: [
			isDirectory == aFileSystemEntry isDirectoryEntry ifTrue: [
				aFileSystemEntry updateFrom: entryArray entryInParent: index ].
			"If found, exit even if invalid. No point to keep iterating."
			^ self ].
		index := index + 1] repeat! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jmv 10/10/2024 11:34:58' prior: 16861266!
               directoryNamesIn: aDirectoryEntry
	"
	FileIOAccessor default directoryNamesIn: 'C:\Windows' asDirectoryEntry
	"
	
	^(self entriesIn: aDirectoryEntry)
		select: [ :each | each isDirectoryEntry]
		thenCollect: [ :each | each name]! !
!FileIOAccessor methodsFor: 'utilities' stamp: 'jmv 10/10/2024 11:35:42' prior: 16861336!
                              fileNamesIn: aDirectoryEntry
	"
	FileIOAccessor default fileNamesIn: 'C:\Windows' asDirectoryEntry
	"
	
	^(self entriesIn: aDirectoryEntry)
		select: [ :each | each isFileEntry ]
		thenCollect: [ :each | each name ]! !
!DirectoryEntry methodsFor: 'enumeration' stamp: 'jmv 10/10/2024 11:33:08' prior: 16848868!
         allFilesDo: aBlock
	self childrenDo: 
		[:child | 
		child isFileEntry ifTrue: [aBlock value: child] ifFalse: [child allFilesDo: aBlock]]! !
!DirectoryEntry methodsFor: 'enumeration' stamp: 'jmv 10/10/2024 11:33:14' prior: 16848875!
                       allFilesDo: aBlock matches: selectionBlock
	self childrenDo: 
		[:child | 
		child isFileEntry
			ifTrue: [(selectionBlock value: child) ifTrue: [aBlock value: child]]
			ifFalse: [child allFilesDo: aBlock matches: selectionBlock]]! !
!DirectoryEntry methodsFor: 'enumeration' stamp: 'jmv 10/10/2024 11:33:34' prior: 16848896!
                         directoriesDo: aBlock
	self childrenDo: [ :each |
		each isDirectoryEntry ifTrue: [
			aBlock value: each ]]! !
!DirectoryEntry methodsFor: 'enumeration' stamp: 'jmv 10/10/2024 11:33:46' prior: 16848944!
                    filesDo: aBlock
	self childrenDo: [ :each |
		each isFileEntry ifTrue: [
			aBlock value: each ]]! !
!DirectoryEntry methodsFor: 'enumeration' stamp: 'jmv 10/10/2024 11:34:02' prior: 16848973!
                               regularDirectoriesDo: aBlock
	self childrenDo: [ :each |
		each isDirectoryEntry ifTrue: [
			each isRegularDirectory ifTrue: [
				aBlock value: each ]]]! !
!DirectoryEntry methodsFor: 'accessing' stamp: 'jmv 10/10/2024 11:33:25' prior: 16849134!
        directories
	^self children select: [:each | each isDirectoryEntry]! !
!DirectoryEntry methodsFor: 'accessing' stamp: 'jmv 10/10/2024 11:33:42' prior: 16849155!
                               files
	^self children select: [:each | each isFileEntry]! !
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 10/10/2024 11:39:14' prior: 16860580!
            copyTo: filename 
	| targetEntry |
	
	targetEntry := filename asFileEntry.
	"
	targetEntry isDirectory
		ifTrue: [ targetEntry := targetEntry // self name ].
	"
	self assureExistence.
	targetEntry assureExistence.
	self fileAccessor copy: self to: targetEntry! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6767-isFileEntry-isDirectoryEntry-NOT-isFile-isDirectory-JuanVuletich-2024Oct10-11h31m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6765] on 10 October 2024 at 11:40:18 am'!
!FileEntry methodsFor: 'actions-file' stamp: 'jmv 10/10/2024 11:40:10' prior: 50391237!
                               copyTo: filename 
	| targetEntry |
	
	targetEntry := filename asFileEntry.
	targetEntry existsAsDirectory
		ifTrue: [
			targetEntry := filename asDirectoryEntry // self name ].
	self assureExistence.
	targetEntry assureExistence.
	self fileAccessor copy: self to: targetEntry! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6768-UseFileAttributes-JuanVuletich-2024Oct10-11h39m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6768] on 10 October 2024 at 12:07:29 pm'!

FileEntry removeSelector: #isFile!

!methodRemoval: FileEntry #isFile stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isFile
	^true!

DirectoryEntry removeSelector: #isDirectory!

!methodRemoval: DirectoryEntry #isDirectory stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isDirectory
	^true!

DirectoryEntry removeSelector: #isFile!

!methodRemoval: DirectoryEntry #isFile stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isFile
	^false!

FileSystemEntry removeSelector: #isDirectory!

!methodRemoval: FileSystemEntry #isDirectory stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isDirectory
	^false!

FileSystemEntry removeSelector: #isFile!

!methodRemoval: FileSystemEntry #isFile stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isFile
	^false!

UniFileStream removeSelector: #isDirectory!

!methodRemoval: UniFileStream #isDirectory stamp: 'Install-6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st 10/10/2024 15:39:40'!
isDirectory
	^false!

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6769-remove-isFile-isDirectory-JuanVuletich-2024Oct10-12h06m-jmv.001.cs.st----!

'From Cuis7.1 [latest update: #6769] on 10 October 2024 at 4:16:01 pm'!
!BrowserWindow class methodsFor: 'GUI building' stamp: 'jmv 10/10/2024 16:00:06' prior: 16799916!
                findClassFrom: potentialClassNames ifFound: aBlock with: pattern

	| exactMatch foundClass index  classNames toMatch |
	pattern isEmpty ifTrue: [^self flash].

	"If the user entered an exact class name (including case), just use it."
	(potentialClassNames includes: pattern) ifTrue: [
		foundClass := Smalltalk at: pattern asSymbol.
		aBlock value: foundClass.
		^self ].

	toMatch := (pattern copyWithout: $.) asLowercase withBlanksTrimmed.
	classNames := self classNamesFrom: potentialClassNames with: pattern matching: toMatch.
	classNames isEmpty ifTrue: [^self flash].

	exactMatch := classNames detect: [ :each | each asLowercase = toMatch] ifNone: [ nil ].
	index := self indexOfClassFrom: classNames exactMatch: exactMatch.
	index = 0 ifTrue: [^self flash].

	foundClass := Smalltalk at: (classNames at: index) asSymbol.
	aBlock value: foundClass.! !

----End fileIn of C:\Users\Juan Vuletich\Cuis-Smalltalk\Cuis-Smalltalk-Dev\CuisImage\32BitsImage\CoreUpdates\6770-FindClass-exactMatchNoMenu-JuanVuletich-2024Oct10-16h15m-jmv.001.cs.st----!

----QUIT----(10 October 2024 15:39:44) Cuis7.1-6770-32.image priorSource: 1671417!