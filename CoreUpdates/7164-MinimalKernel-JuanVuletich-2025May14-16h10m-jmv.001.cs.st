'From Cuis7.3 [latest update: #7160] on 14 May 2025 at 4:42:52 pm'!

!Behavior reorganize!
('[mk] accessing' definesInstanceVariableNamed: format instSize instSpec instVarNames name theNonMetaClass typeOfClass)
('[mk] testing' isBehavior isBits isBytes isCompiledMethodClass isDoubleBytes isDoubleWords isEphemeronClass isFixed isImmediateClass isMeta isPointers isVariable isWeak isWords)
('[mk] printing' printOn:)
('[mk] instance creation' basicNew basicNew: new new:)
('[mk] class hierarchy' superclass)
('[mk] instances' allInstancesOrNil someInstance)
('[mk] enumerating' allSubclassesDo:)
('[mk] comparing' identityHash)
('[mk] constants' maxInstSize)
('[mkObjectCopying] copying' postCopy)
('[mkClassAndMethodCreation] initialization' superclass:methodDictionary:format:)
('[mkClassAndMethodCreation] accessing' binding bindingOf: classBindingOf:)
('[mkClassAndMethodCreation] method dictionary' addSelectorSilently:withMethod: compiledMethodAt: includesSelector: lookupSelector: methodDict methodDict:)
('[mkClassAndMethodCreation] private' flushCache)
('[mkClassAndMethodCreation] instances and variables' maxAccessibleInstSize)
('accessing' classDepth decompilerClass parserClass sourceCodeTemplate)
('testing' canZapMethodDictionary hasChangedComparedTo: isObsolete shouldNotBeRedefined sourceMatchesBytecodeAt:)
('copying' copyOfMethodDictionary)
('printing' literalScannedAs:notifying: longPrintOn: printSubclassesOn:level: printWithClosureAnalysisOn: storeLiteral:on:)
('compiling' compile: compile:notifying: compileAll compileAllFrom: compilerClass decompile: defaultMethodTrailer instVarNamesAndOffsetsDo: recompile: recompile:from: recompileChanges recompileNonResidentMethod:atSelector:from: variablesAndOffsetsDo:)
('instance creation' adoptInstance: initializedInstance)
('accessing class hierarchy' allSubclasses allSubclassesWithLevelDo:startingLevel: allSubclassesWithLevelDo:startingLevel:sortByCategory: allSuperclasses allSuperclassesUpTo: hasSubclasses subclasses subclassesDo: superclass: withAllSubclasses withAllSuperclasses withAllSuperclassesDownFrom: withAllSuperclassesUpTo:)
('accessing method dictionary' >> allSelectors compiledMethodAt:ifAbsent: compiledMethodAt:ifPresent:ifAbsent: compress firstCommentAt: firstPrecodeCommentFor: highestClassImplementing:ifNone: methodDictionary methodHeaderFor: methodsDo: methodsSelect: methodsWithArgumentOrTemporaryNamed: precodeCommentOrInheritedCommentFor: recoverFromMDFaultWithTrace removeSelector: selectorAtMethod:setClass: selectors selectorsAndMethodsDo: selectorsDo: sourceCodeAt: sourceCodeAt:ifAbsent: standardMethodHeaderFor: supermostPrecodeCommentFor: ultimateSourceCodeAt:ifAbsent: withSuperclassThatIncludesSelector:do:ifNone: zapAllMethods)
('accessing instances and variables' addReferencesOf:at:to: allAccessesTo: allBroadAccessesTo: allClassVarNames allInstVarNames allInstances allRegularInstVarNames allSubInstances allowsSubInstVars byteSizeOfInstance byteSizeOfInstanceOfSize: classVarNames definesClassVariableNamedInHierarchy: definesInstanceVariableNamedInHierarchy: elementSize hasReferencesToInstanceVariableNamed: indexOfInstanceVariable: inspectAllInstances inspectSubInstances instanceCount isInstanceVariableNamedReferencedInHierarchy: sharedPools unreferencedInstanceVariables whichClassDefinesInstanceVariable:ifNone:)
('testing class hierarchy' includesBehavior: inheritsFrom: kindOfSubclass)
('testing method dictionary' allUnsentMessages canUnderstand: hasMethods thoroughWhichSelectorsReferTo:special:byte: whichClassIncludesSelector: whichSelectorsAccess: whichSelectorsReferTo: whichSelectorsReferTo:special:byte: whichSelectorsStoreInto:)
('enumerating' allInstancesDo: allSubInstancesDo: allSuperclassesDo: selectSuperclasses: withAllSubclassesDo: withAllSuperAndSubclassesDo: withAllSuperclassesDo:)
('user interface' allLocalCallsOn: crossReference lastUnderscoreMeansSubscript withAllSubAndSuperclassesDo:)
('private' basicCompile:notifying:trailer:ifFail: basicCompile:notifying:trailer:ifFail:optimizeSpecialSends: basicRemoveSelector: handleFailingBasicNew handleFailingBasicNew: handleFailingFailingBasicNew handleFailingFailingBasicNew: setFormat: spaceUsed)
('system startup' initClassCachedState releaseClassCachedState releaseClassState shutDown shutDown: startUp startUp:)
('obsolete subclasses' addObsoleteSubclass: obsoleteSubclasses recreateObsoleteSubclassesCollection removeAllObsoleteSubclasses removeObsoleteSubclass:)
('auto complete' typeName)
('methods' addMethodsTo:thatReferenceTo:special:byte: addTo:methodsThatReferenceInHierarchyTo:special:byte: closuresInfoAt: methodNodeFor: methodNodeFor:noPattern: methodNodeFor:noPattern:optimizeSpecialSends: methodNodeWithoutImplicitSelfReturnFor: rejectSelectorsFrom:thatReferenceTo:byte: stampAt:)
('system-support' allCallsOn)
('release' obsolete)
('SUnit tests' testCaseClass withTestCaseClassDo:ifNone:)
('creating method dictionary' methodDictionary:)
!


!Metaclass reorganize!
('[mk] accessing' allClassInstVarNames name theMetaClass theNonMetaClass)
('[mk] testing' isMeta)
('[mk] class hierarchy' subclassesDo:)
('[mk] printing' printNameOn:)
('[mk] class variables' classPool)
('[mkObjectCopying] copying' postCopy)
('[mkClassAndMethodCreation] instance creation' new)
('[mkClassAndMethodCreation] accessing' bindingOf: localBindingOf:)
('accessing' allInstances category soleInstance)
('instance variables' addInstVarName: removeInstVarName:)
('class hierarchy' addObsoleteSubclass: addSubclass: hasSubclasses obsoleteSubclasses removeObsoleteSubclass: removeSubclass: subclasses)
('compiling' acceptsLoggingOfCompilation possibleVariablesFor:continuedFrom: wantsChangeSetLogging wantsRecompilationProgressReported)
('fileIn/Out' definition fileOutInitializerOn: fileOutOn:moveSource:toFile:initializing:sortMethodsByCategory: nonTrivial objectForDataStream: storeDataOn:)
('testing' canZapMethodDictionary isObsolete)
('enumerating' allInstancesDo:)
('private' replaceObsoleteInstanceWith:)
('initialization' adoptInstance:from: instanceVariableNames:)
('SUnit tests' testCaseClass)
('accessing variables' allClassVarNames)
!


!Collection reorganize!
('[mk] accessing' size)
('[mk] enumerating' allSatisfy: anySatisfy: count: reject: select:)
('[mk] testing' includes: is: isSequenceable)
('[mk] comparing' = emptyCollectionHash hash)
('[mk] private' species)
('[mkHashedCollections] enumerating' associationsDo:)
('accessing' anyOne atRandom atRandom:)
('adapting' adaptToCollection:andSend: adaptToNumber:andSend: adaptToPoint:andSend:)
('adding' add: add:withOccurrences: addAll:)
('arithmetic' * + - / // \\ raisedTo:)
('converting' as:on:delimiter:last: asArray asBag asByteArray asCommaSeparated:on: asCommaStringAnd asDictionary asFloat32Array asFloat64Array asIdentitySet asIntegerArray asNewArray asOrderedCollection asPointArray asSet asSortedCollection asSortedCollection: asStringOn:delimiter:last: asWordArray)
('copying' , copyWith: copyWithout: copyWithoutAll: flatten flattenTo:)
('enumerating' associationsDo:separatedBy: collect: collect:andFold: collect:andFold:ifEmpty: collect:thenSelect: detect: detect:ifFound:ifNone: detect:ifNone: detectMax: detectMin: difference: do: do:separatedBy: do:without: fold: fold:ifEmpty: groupBy: groupBy:having: inject:into: intersection: noneSatisfy: reduce: reject:thenCollect: reject:thenDo: select:thenCollect: select:thenDo: union:)
('filter streaming' contents)
('math functions' abs arcCos arcSin arcTan ceiling cos degreeCos degreeSin exp floor ln log log2 negated reciprocal roundTo: rounded sign sin sqrt squared tan truncateTo: truncated)
('printing' printElementsOn: printNameOn: printOn: storeOn:)
('private' emptyCheck errorCollectionTooSmall errorEmptyCollection errorNoMatch errorNotFound: errorNotKeyed)
('removing' remove: remove:ifAbsent: removeAll: removeAllFoundIn: removeAllSuchThat:)
('testing' canHoldAnyCodePoint identityIncludes: ifEmpty: ifEmpty:ifNotEmpty: ifNotEmpty: ifNotEmpty:ifEmpty: includesAllOf: includesAnyOf: includesSubstringAnywhere: isCollection isEmpty isEmptyOrNil notEmpty occurrencesOf:)
('sorting' sorted sorted:)
('statistics' average average: average:ifEmpty: max max: mean min min: product product: range sum sum: sum:ifEmpty:)
('inspecting' hasContentsInExplorer)
!


!CompiledMethod reorganize!
('[mk] accessing' methodClass numLiterals selector withPropertiesDo:ifSelector:)
('[mk] literals' header literalAt: objectAt:)
('[mk] printing' printClassAndSelectorOn: printOn:)
('[mk] converting' asString)
('[mk] testing' is:)
('[mk] private' penultimateLiteral)
('[mkObjectSerialization] object serialization' readDataFrom:size:)
('[mkClassAndMethodCreation] accessing' endPC initialPC methodClass:)
('[mkClassAndMethodCreation] literals' literalAt:put: objectAt:put:)
('[mkClassAndMethodCreation] private' flushCache penultimateLiteral: voidCogVMState)
('accessing' accessorDescriptionOf:at: bytecodeSetName bytecodes clearFlag clearSignFlag defaultSelector encoderClass flag frameSize methodClassAssociation methodClassAssociation: methodReference numArgs numTemps primitive properties properties: returnField scanner searchForClass searchForSelector selector: setSignFlag signFlag trailer)
('accessing-pragmas & properties' addPragma: pragmaAt: pragmas propertyKeysAndValuesDo: propertyValueAt: propertyValueAt:ifAbsent: propertyValueAt:put: removeProperties removeProperty: removeProperty:ifAbsent: withPropertiesDo:)
('auto complete' autoCompleterDocumentationAppendingToParameter:toReturn: commentAutoCompleterDocumentationAppendigTo:using: commentAutoCompleterDocumentationOf: dynamicTypingAutoCompleterDocumentation receiverTextAutoCompleterDocumentation selectorAutoCompleterDocumentationAppendingTo:using:appendingToParameter:)
('breakpoints' hasBreakpoint)
('closures' containsBlockClosures embeddedBlockClosures)
('code analysis' scanForEqSmallConstant)
('comparing' = equivalentTo: hash)
('converting' asMethodReference)
('copying' flattenTo:)
('debugger support' abstractPCForConcretePC: blockExtentsInto:from:to:scanner:numberer: debuggerMap mapFromBlockKeys:toSchematicTemps: pcPreviousTo: startpcsToBlockExtents tempsSubSequenceFrom:)
('decompiling' compilerClass decompile decompilerClass methodForDecompile parserClass selectorAndArgumentsAsString)
('evaluating' valueWithReceiver:arguments:)
('file in/out' objectForDataStream: storeDataOn: zapSourcePointer)
('initialization' copyWithTrailerBytes: needsFrameSize:)
('inspecting' explorerContents inspectorClass)
('literals' allImplicitLiteralsDo: allLiterals allLiteralsDo: allLiteralsDo:scanForSpecial: codeLiterals codeLiteralsDo: hasLiteral: hasLiteralSuchThat: hasLiteralThorough: headerDescription implicitLiteralsDo: indexOfLiteral: literalStrings literals literalsDo: refersToLiteral: regularLiterals sendsSelector: xtraBindings)
('method node' createMethodNode createMethodNodeOptimizeSpecialSends: methodNode methodNode: methodNodeForLookingEquivalentNodes methodNodeWithoutImplicitSelfReturn notOptimizedMethodNode sourceRangesOfNodesEquivalentTo: sourceRangesOfNodesEquivalentTo:keepingSelection:)
('organization' category)
('printing' abstractSymbolic classAndSelector decompileString longPrintOn: longPrintOn:indent: longPrintRelativeOn:indent: primitiveErrorVariableName printPrimitiveOn: storeLiteralsOn:forClass: storeOn: symbolic symbolicLinesDo:)
('scanning' messages messagesDo: messagesSequence readsField: readsRef: scanFor: scanLongLoad: scanLongStore: scanVeryLongLoad:offset: scanVeryLongStore:offset: sendsToSuper writesField: writesFieldCode:with:using: writesRef:)
('source code management' checkOKToAdd:at:in: destroySourcePointer fileIndex filePosition getPreamble getSource getSourceFor:in: getSourceFromFile linesOfCode messageSendsCount putSource:fromParseNode:class:category:inFile:priorMethod: putSource:fromParseNode:class:category:withStamp:inFile:priorMethod:overridesMethod: putSource:fromParseNode:inFile:withPreamble: setSourcePointer: setSourcePosition:inFile: sourceCode sourcePointer)
('source code ranges' messageSendsRangesOf:)
('testing' accessesInstanceVariable: hasArgumentOrTemporaryNamed: hasNewPropertyFormat hasReportableSlip hasVariableBindingTo: isAbstract isCompiledBlock isCompiledCode isCompiledMethod isGetterOf:at: isInstalled isLinkedNamedPrimitive isNamedPrimitive isQuick isReturnField isReturnSelf isReturnSpecial isSetterOf:at: isTestMethod isValid readsInstanceVariable: referencesParameterAt: referencesSelf referencesSuper sendsOrRefersTo: usesClosureBytecodes writesInstanceVariable:)
('time stamp' author dateAndTime dateMethodLastSaved dateSortingValue timeStamp)
('tracing' outboundPointersDo:)
('user interface support' browse)
!


!CompiledMethod class reorganize!
('[mkClassAndMethodCreation] instance creation' basicNew: createMethod:trailer:header: new new: newMethod:header:)
('[mkClassAndMethodCreation] accessing' preferredBytecodeSetEncoderClass)
('class initialization' fullFrameSize initialize installPrimaryBytecodeSet: installSecondaryBytecodeSet: smallFrameSize)
('instance creation' newBytes:trailerBytes:nArgs:nTemps:nStack:nLits:primitive: newFrom: newInstanceFrom:variable:size:map: toReturnConstant:trailerBytes: toReturnField:trailerBytes: toReturnSelf toReturnSelfTrailerBytes:)
('services' displaceInstVarAccessesIn:starting:by:doIt: remapInstVarAccessesIn:asPer:doIt: timeStamp:partsDo: unboundMethods)
('evaluating' receiver:withArguments:executeMethod:)
('method encoding' headerFlagForEncoder: primaryBytecodeSetEncoderClass secondaryBytecodeSetEncoderClass)
('private' handleFailingFailingNewMethod:header: handleFailingNewMethod:header:)
('constants' maxNumLiterals)
('source code management aux' classCategoryFrom: field:from:ifAbsentOrNil: overridenMethodReferenceFrom: priorReferenceFrom: stampFrom:)
('preferences' preferredBytecodeSetEncoderClass:)
!


!Set reorganize!
('[mkHashedCollections] accessing' size)
('[mkHashedCollections] testing' includes: is:)
('[mkHashedCollections] comparing' = emptyCollectionHash)
('[mkHashedCollections] lookup' lookup:)
('[mkHashedCollections] enumerating' do:)
('[mkHashedCollections] private' atNewIndex:put: findElementOrNil: fullCheck grow growSize init: noCheckAdd: scanFor:)
('[mkObjectCopying] copying' postCopy)
('[mkObjectSerialization] object serialization' comeFullyUpOnReload:)
('accessing' atRandom: like:)
('adding' add: add:withOccurrences:)
('enumerating' collect: union:)
('private' array fixCollisionsFrom: keyAt: privateSwapArrayElement:with: rehash)
('removing' copyWithout: remove:ifAbsent: removeAll)
('testing' occurrencesOf:)
('inspecting' inspectorClass)
!


!Dictionary reorganize!
('[mkHashedCollections] lookup' lookup:)
('[mkHashedCollections] accessing' associationAt:ifAbsent: associationClass at: at:ifAbsent: at:ifPresent: at:put: bindingOf:)
('[mkHashedCollections] enumerating' associationsDo: do: select:)
('[mkHashedCollections] testing' includesKey: is:)
('[mkHashedCollections] comparing' = emptyCollectionHash hash)
('[mkHashedCollections] private' noCheckAdd: scanFor:)
('[mkHashedCollections] variable bindings' declare:from:)
('[mkObjectCopying] private' postCopy)
('accessing' associationAt: associations at:ifAbsentPut: at:ifPresent:ifAbsent: keyAtIdentityValue: keyAtIdentityValue:ifAbsent: keyAtValue: keyAtValue:ifAbsent: keys keysSortedSafely values)
('testing' hasBindingThatBeginsWith: keyForIdentity: occurrencesOf:)
('adding' add: addAll:)
('removing' keysAndValuesRemove: remove: remove:ifAbsent: removeKey: removeKey:ifAbsent: removeUnreferencedKeys unreferencedKeys)
('enumerating' collect: keysAndValuesDo: keysDo: valuesDo:)
('printing' printElementsOn: storeOn:)
('private' errorKeyNotFound: errorValueNotFound keyAt: rehash)
('inspecting' customizeExplorerContents explorerContents explorerContentsWithIndexCollect: inspectorClass)
('compiling' bindingsDo:)
!


!MethodDictionary reorganize!
('[mkHashedCollections] accessing' associationAt:ifAbsent: at:ifAbsent: at:put:)
('[mkHashedCollections] enumeration' associationsDo:)
('[mkHashedCollections] private' grow scanFor:)
('[mkObjectCopying] private' postCopy)
('accessing' add: keyAtIdentityValue:ifAbsent: keyAtValue:ifAbsent:)
('removing' removeAll removeKey:ifAbsent:)
('enumeration' keysAndValuesDo: keysDo: valuesDo: valuesSelect:)
('private' fixCollisionsFrom: keyAt: methodArray privateSwapArrayElement:with: rehash rehashWithoutBecome removeDangerouslyKey:ifAbsent:)
!


!WeakSet reorganize!
('[mkSymbol] accessing' estimatedSize size)
('[mkSymbol] adding and finding' add: includes: lookup: lookup:ifAbsentAddFrom:)
('[mkSymbol] initialization' init:)
('[mkSymbol] testing' = is:)
('[mkSymbol] comparing' emptyCollectionHash)
('[mkSymbol] private' basicAdd:withHash: basicLookup:withHash: bucketIndexFor: grow indexInBucketFor: rehash rehash:)
('[mkSymbol] private-equality or identity' areEqual:and: basicLook:inIterablePartOf: hashFor:)
('[mkSymbol] tuning constants' bucketDesiredMeanOccupation bucketDirectAccessMask bucketDirectAccessSize bucketIterablePartGrow bucketIterablePartStart bucketsHashShift)
('[mkSymbol] copying' postCopy)
('[mkObjectSerialization] object serialization' comeFullyUpOnReload:)
('adding and finding' add:withOccurrences: occurrencesOf:)
('enumerating' collect: do: union:)
('removing' copyWithout: remove:ifAbsent: removeAll)
!


!DataStream class reorganize!
('[mkObjectSerialization] instance creation' new on:)
('[mkObjectSerialization] cached state access' initCachedState typeMap)
('services' streamedRepresentationOf: unStream:)
('cached state access' releaseClassCachedState)
('examples' example exampleWithPictures testWith:)
!

