'From Cuis 4.2 of 25 July 2013 [latest update: #2322] on 13 May 2015 at 4:08:05.527325 pm'!
'Description Please enter a description for this package'!
!provides: 'SqueakCompatibility' 1 13!
!classDefinition: #KlattResonatorIndices category: #SqueakCompatibility!
SharedPool subclass: #KlattResonatorIndices
	instanceVariableNames: ''
	classVariableNames: 'R1c R1vp R2c R2fp R2vp R3c R3fp R3vp R4c R4fp R4vp R5c R5fp R6c R6fp R7c R8c Rnpc Rnpp Rnz Rout Rtpc Rtpp Rtz'
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'KlattResonatorIndices class' category: #SqueakCompatibility!
KlattResonatorIndices class
	instanceVariableNames: ''!

!classDefinition: #Model category: #SqueakCompatibility!
ActiveModel subclass: #Model
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'Model class' category: #SqueakCompatibility!
Model class
	instanceVariableNames: ''!

!classDefinition: #StringHolder category: #SqueakCompatibility!
TextModel subclass: #StringHolder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'StringHolder class' category: #SqueakCompatibility!
StringHolder class
	instanceVariableNames: ''!

!classDefinition: #ByteString category: #SqueakCompatibility!
String variableByteSubclass: #ByteString
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'ByteString class' category: #SqueakCompatibility!
ByteString class
	instanceVariableNames: ''!

!classDefinition: #TimeStamp category: #SqueakCompatibility!
DateAndTime subclass: #TimeStamp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TimeStamp class' category: #SqueakCompatibility!
TimeStamp class
	instanceVariableNames: ''!

!classDefinition: #SmalltalkImage category: #SqueakCompatibility!
Object subclass: #SmalltalkImage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'SmalltalkImage class' category: #SqueakCompatibility!
SmalltalkImage class
	instanceVariableNames: ''!

!classDefinition: #MultiByteFileStream category: #SqueakCompatibility!
StandardFileStream subclass: #MultiByteFileStream
	instanceVariableNames: 'lineEndConvention'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'MultiByteFileStream class' category: #SqueakCompatibility!
MultiByteFileStream class
	instanceVariableNames: ''!

!classDefinition: #CrLfFileStream category: #SqueakCompatibility!
MultiByteFileStream subclass: #CrLfFileStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'CrLfFileStream class' category: #SqueakCompatibility!
CrLfFileStream class
	instanceVariableNames: ''!

!classDefinition: #ClassTestCase category: #SqueakCompatibility!
TestCase subclass: #ClassTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'ClassTestCase class' category: #SqueakCompatibility!
ClassTestCase class
	instanceVariableNames: ''!

!classDefinition: #TestObjectsAsMethods category: #SqueakCompatibility!
TestCase subclass: #TestObjectsAsMethods
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TestObjectsAsMethods class' category: #SqueakCompatibility!
TestObjectsAsMethods class
	instanceVariableNames: ''!

!classDefinition: #UnsupportedInCuis category: #SqueakCompatibility!
Object subclass: #UnsupportedInCuis
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'UnsupportedInCuis class' category: #SqueakCompatibility!
UnsupportedInCuis class
	instanceVariableNames: ''!

!classDefinition: #AlignmentMorph category: #SqueakCompatibility!
UnsupportedInCuis subclass: #AlignmentMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'AlignmentMorph class' category: #SqueakCompatibility!
AlignmentMorph class
	instanceVariableNames: ''!

!classDefinition: #BorderStyle category: #SqueakCompatibility!
UnsupportedInCuis subclass: #BorderStyle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'BorderStyle class' category: #SqueakCompatibility!
BorderStyle class
	instanceVariableNames: ''!

!classDefinition: #ComponentInstance category: #SqueakCompatibility!
UnsupportedInCuis subclass: #ComponentInstance
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'ComponentInstance class' category: #SqueakCompatibility!
ComponentInstance class
	instanceVariableNames: ''!

!classDefinition: #LayoutFrame category: #SqueakCompatibility!
UnsupportedInCuis subclass: #LayoutFrame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'LayoutFrame class' category: #SqueakCompatibility!
LayoutFrame class
	instanceVariableNames: ''!

!classDefinition: #MCWorkingCopy category: #SqueakCompatibility!
UnsupportedInCuis subclass: #MCWorkingCopy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'MCWorkingCopy class' category: #SqueakCompatibility!
MCWorkingCopy class
	instanceVariableNames: ''!

!classDefinition: #PackageOrganizer category: #SqueakCompatibility!
UnsupportedInCuis subclass: #PackageOrganizer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'PackageOrganizer class' category: #SqueakCompatibility!
PackageOrganizer class
	instanceVariableNames: ''!

!classDefinition: #PluggableTextMorph category: #SqueakCompatibility!
UnsupportedInCuis subclass: #PluggableTextMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'PluggableTextMorph class' category: #SqueakCompatibility!
PluggableTextMorph class
	instanceVariableNames: ''!

!classDefinition: #ProportionalLayout category: #SqueakCompatibility!
UnsupportedInCuis subclass: #ProportionalLayout
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'ProportionalLayout class' category: #SqueakCompatibility!
ProportionalLayout class
	instanceVariableNames: ''!

!classDefinition: #SimpleButtonMorph category: #SqueakCompatibility!
UnsupportedInCuis subclass: #SimpleButtonMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'SimpleButtonMorph class' category: #SqueakCompatibility!
SimpleButtonMorph class
	instanceVariableNames: ''!

!classDefinition: #TableLayout category: #SqueakCompatibility!
UnsupportedInCuis subclass: #TableLayout
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TableLayout class' category: #SqueakCompatibility!
TableLayout class
	instanceVariableNames: ''!

!classDefinition: #TextMorph category: #SqueakCompatibility!
UnsupportedInCuis subclass: #TextMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TextMorph class' category: #SqueakCompatibility!
TextMorph class
	instanceVariableNames: ''!

!classDefinition: #TextStyle category: #SqueakCompatibility!
UnsupportedInCuis subclass: #TextStyle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TextStyle class' category: #SqueakCompatibility!
TextStyle class
	instanceVariableNames: ''!

!classDefinition: #TranscriptStream category: #SqueakCompatibility!
UnsupportedInCuis subclass: #TranscriptStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TranscriptStream class' category: #SqueakCompatibility!
TranscriptStream class
	instanceVariableNames: ''!

!classDefinition: #TransferMorph category: #SqueakCompatibility!
UnsupportedInCuis subclass: #TransferMorph
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'TransferMorph class' category: #SqueakCompatibility!
TransferMorph class
	instanceVariableNames: ''!

!classDefinition: #UIManager category: #SqueakCompatibility!
UnsupportedInCuis subclass: #UIManager
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SqueakCompatibility'!
!classDefinition: 'UIManager class' category: #SqueakCompatibility!
UIManager class
	instanceVariableNames: ''!


!Model commentStamp: '<historical>' prior: 0!
Compatibility. Prefer ActiveModel.!

!MultiByteFileStream commentStamp: 'jmv 5/8/2015 15:03' prior: 0!
Not really a MultiByteXXX. Accept #lineEndConvention and honor it, on Write. On Read, do no conversions.!

!CrLfFileStream commentStamp: '<historical>' prior: 0!
Do line ending conversion on write. By default, write files with host platform convention.!

!ProtoObject methodsFor: '*squeakCompatibility' stamp: 'jmv 12/18/2013 00:02'!
ifNotNilDo: ifNotNilBlock
	"Compatibility. Prefer #ifNotNil:"
	^self ifNotNil: ifNotNilBlock! !

!BlockClosure methodsFor: '*squeakCompatibility' stamp: 'bp 11/29/2014 17:29'!
cull: firstArg
	"Activate the receiver, with one or zero arguments."
	
	numArgs >= 1 ifTrue: [ ^self value: firstArg ].
	^self value! !

!BlockClosure methodsFor: '*squeakCompatibility' stamp: 'bp 11/29/2014 17:29'!
cull: firstArg cull: secondArg
	"Activate the receiver, with two or less arguments."
	
	numArgs >= 2 ifTrue: [ ^self value: firstArg value: secondArg ].	
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value! !

!BlockClosure methodsFor: '*squeakCompatibility' stamp: 'bp 11/29/2014 17:29'!
cull: firstArg cull: secondArg cull: thirdArg
	"Activate the receiver, with three or less arguments."
	
	numArgs >= 2 ifTrue: [ 
		numArgs >= 3 ifTrue: [ ^self value: firstArg value: secondArg value: thirdArg ].
		^self value: firstArg value: secondArg ].
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value! !

!BlockClosure methodsFor: '*squeakCompatibility' stamp: 'bp 11/29/2014 17:29'!
cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg
	"Activate the receiver, with four or less arguments."
	
	numArgs >= 3 ifTrue: [
		numArgs >= 4 ifTrue: [
			^self value: firstArg value: secondArg value: thirdArg value: fourthArg ].
		^self value: firstArg value: secondArg value: thirdArg ].
	numArgs = 2 ifTrue: [ ^self value: firstArg value: secondArg ].	
	numArgs = 1 ifTrue: [ ^self value: firstArg ].
	^self value! !

!CompiledMethod methodsFor: '*squeakCompatibility' stamp: 'NS 12/12/2003 15:18'!
isAbstract
	| marker |
	marker := self markerOrNil.
	^ marker notNil and: [self class abstractMarkers includes: marker].! !

!CompiledMethod methodsFor: '*squeakCompatibility' stamp: 'al 2/13/2006 17:44'!
markerOrNil
	"If I am a marker method, answer the symbol used to mark me.  Otherwise
	answer nil.

	What is a marker method?  It is method with body like 
		'self subclassResponsibility' or '^ self subclassResponsibility' 
	used to indicate ('mark') a special property.

	Marker methods compile to bytecode like:

		9 <70> self
		10 <D0> send: <literal 1>
		11 <87> pop
		12 <78> returnSelf

	for the first form, or 

		9 <70> self
		10 <D0> send: <literal 1>
		11 <7C> returnTop

	for the second form."

	| e |
	((e := self endPC) = 19 or: [e = 20]) ifFalse: [^ nil].
	(self numLiterals = 3) ifFalse:[^ nil].
	(self at: 17) =  16r70 ifFalse:[^ nil].		"push self"
	(self at: 18) = 16rD0 ifFalse:[^ nil].		"send <literal 1>"
	"If we reach this point, we have a marker method that sends self <literal 1>"
	^ self literalAt: 1
! !

!CompiledMethod class methodsFor: '*squeakCompatibility' stamp: 'NS 12/12/2003 15:17'!
abstractMarkers
	^ #(subclassResponsibility shouldNotImplement)! !

!String methodsFor: '*squeakCompatibility' stamp: 'eem 2/3/2015 12:04'!
subStrings: separators 
	"Answer an array containing the substrings in the receiver separated 
	by the elements of separators."
	| char result sourceStream subString |
	#Collectn.
	"Changed 2000/04/08 For ANSI <readableString> protocol."
	(separators isString or:[separators allSatisfy: [:element | element isCharacter]]) ifFalse:
		[^ self error: 'separators must be Characters.'].
	sourceStream := ReadStream on: self.
	result := OrderedCollection new.
	subString := String new.
	[sourceStream atEnd]
		whileFalse: 
			[char := sourceStream next.
			(separators includes: char)
				ifTrue: [subString notEmpty
						ifTrue: 
							[result add: subString copy.
							subString := String new]]
				ifFalse: [subString := subString , (String with: char)]].
	subString notEmpty ifTrue: [result add: subString copy].
	^ result asArray! !

!String methodsFor: '*squeakCompatibility' stamp: 'hjh 5/9/2015 17:03'!
withCRs
	"Return a copy of the receiver in which backslash (\) characters have been replaced with carriage returns."

	^ self collect: [ :c | c = $\ ifTrue: [ Character cr ] ifFalse: [ c ]].! !

!String class methodsFor: '*squeakCompatibility' stamp: 'jmv 12/18/2013 00:42'!
cr
	^self crString! !

!String class methodsFor: '*squeakCompatibility' stamp: 'jmv 12/18/2013 00:42'!
crlf
	^self crlfString! !

!String class methodsFor: '*squeakCompatibility' stamp: 'jmv 12/18/2013 00:42'!
lf
	^self lfString! !

!Symbol methodsFor: '*squeakCompatibility' stamp: 'hjh 5/9/2015 17:37'!
value: anObject 
	^anObject perform: self.! !

!InputSensor methodsFor: '*squeakCompatibility' stamp: 'jmv 5/8/2015 12:47'!
cursorPoint
	^self mousePoint! !

!Character methodsFor: '*squeakCompatibility' stamp: 'bp 11/29/2014 17:26'!
asUnicode
	"Answer the unicode encoding of the receiver"
	"self leadingChar = 0 ifTrue: [^ self asInteger].
	^self encodedCharSet charsetClass convertToUnicode: self charCode"
	^self asInteger! !

!Character methodsFor: '*squeakCompatibility' stamp: 'hjh 5/9/2015 17:11'!
isCharacter

	^ true.! !

!Time class methodsFor: '*squeakCompatibility' stamp: 'jmv 5/8/2015 10:52'!
totalSeconds
	^self primLocalSecondsClock ! !

!WriteStream methodsFor: '*squeakCompatibility' stamp: 'jmv 5/8/2015 14:58'!
crtab
	"Append a return character, followed by anInteger tab characters, to the 
	receiver."

	self cr; tab! !

!WriteStream methodsFor: '*squeakCompatibility' stamp: 'jmv 5/8/2015 14:59'!
crtab: anInteger
	"Append a return character, followed by anInteger tab characters, to the 
	receiver."

	self cr.
	anInteger timesRepeat: [self tab]! !

!Transcript class methodsFor: '*squeakCompatibility' stamp: 'jmv 5/8/2015 12:41'!
cr
	self newLine! !

!KlattResonatorIndices class methodsFor: 'pool initialization' stamp: 'ar 5/18/2003 20:17'!
initialize
	"KlattResonatorIndices initialize"
	Rnpp := 1.
	Rtpp := 2.
	R1vp := 3.
	R2vp := 4.
	R3vp := 5.
	R4vp := 6.
	R2fp := 7.
	R3fp := 8.
	R4fp := 9.
	R5fp := 10.
	R6fp := 11.
	R1c := 12.
	R2c := 13.
	R3c := 14.
	R4c := 15.
	R5c := 16.
	R6c := 17.
	R7c := 18.
	R8c := 19.
	Rnpc := 20.
	Rnz := 21.
	Rtpc := 22.
	Rtz := 23.
	Rout := 24.! !

!KlattResonatorIndices class methodsFor: 'frame parameter data' stamp: 'dtl 11/15/2009 10:30'!
parameterData
	"This is a table describing the Klatt parameters. The columns are: parameter name, minimum value, maximum, parameter description, unit."
	^ #(
	"Excitation source (voice, aspiration and friction):"
		(f0 20 1000 'Fundamental frequency (hz)' hz)
		(flutter 0 1 'Amount of flutter' value)
		(jitter 0 1 'Amount of jitter' value)
		(shimmer 0 1 'Amount of shimmer' value)
		(diplophonia 0 1 'Amount of diplophonia' value)
		(voicing 0 80 'Amplitude of voicing' hz)
		(ro 0.01 1 'Relative duration of open phase of voicing waveform = Te/T0 (0.01 - 1)' value)
		(ra 0.01 0.2 'Relative duration of return phase of voicing waveform = Ta/T0 (0.01 - 1)' value)
		(rk 0.01 1 'Simmetry of the glottal pulse = (Te-Tp)/Tp (0.01 - 1)' value)
		(aspiration 0 80 'Amplitude of aspiration' dB)
		(friction 0 80 'Amplitude of friction' dB)
		(turbulence 0 80 'Amplitude of turbulence (in open glottal phase)' dB)

	"Formants frequencies and bandwidths:"	
		(f1 200 1300 'Frequency of 1st formant' hz)
		(b1 40 1000 'Bandwidth of 1st formant' hz)
		(df1 0 100 'Change in F1 during open portion of period' hz)
		(db1 0 400 'Change in B1 during open portion of period' hz)
		(f2 550 3000 'Frequency of 2nd formant' hz)
		(b2 40 1000 'Bandwidth of 2nd formant' hz)
		(f3 1200 4999 'Frequency of 3rd formant' hz)
		(b3 40 1000 'Bandwidth of 3rd formant' hz)
		(f4 1200 4999 'Frequency of 4th formant' hz)
		(b4 40 1000 'Bandwidth of 4th formant' hz)
		(f5 1200 4999 'Frequency of 5th formant' hz)
		(b5 40 1000 'Bandwidth of 5th formant' hz)
		(f6 1200 4999 'Frequency of 6th formant' hz)
		(b6 40 1000 'Bandwidth of 6th formant' hz)
		(fnp 248 528 'Frequency of nasal pole' hz)
		(bnp 40 1000 'Bandwidth of nasal pole' hz)
		(fnz 248 528 'Frequency of nasal zero' hz)
		(bnz 40 1000 'Bandwidth of nasal zero' hz)
		(ftp 300 3000 'Frequency of tracheal pole' hz)
		(btp 40 1000 'Bandwidth of tracheal pole' hz)
		(ftz 300 3000 'Frequency of tracheal zero' hz)
		(btz 40 2000 'Bandwidth of tracheal zero' hz)

	"Parallel Friction-Excited:"
		(a2f 0 80 'Amplitude of friction-excited parallel 2nd formant' dB)
		(a3f 0 80 'Amplitude of friction-excited parallel 3rd formant' dB)
		(a4f 0 80 'Amplitude of friction-excited parallel 4th formant' dB)
		(a5f 0 80 'Amplitude of friction-excited parallel 5th formant' dB)
		(a6f 0 80 'Amplitude of friction-excited parallel 6th formant' dB)
		(bypass 0 80 'Amplitude of friction-excited parallel bypass path' dB)
		(b2f 40 1000 'Bandwidth of friction-excited parallel 2nd formant' hz)
		(b3f 60 1000 'Bandwidth of friction-excited parallel 2nd formant' hz)
		(b4f 100 1000 'Bandwidth of friction-excited parallel 2nd formant' hz)
		(b5f 100 1500 'Bandwidth of friction-excited parallel 2nd formant' hz)
		(b6f 100 4000 'Bandwidth of friction-excited parallel 2nd formant' hz)

	"Parallel Voice-Excited:"
		(anv 0 80 'Amplitude of voice-excited parallel nasal formant' dB)
		(a1v 0 80 'Amplitude of voice-excited parallel 1st formant' dB)
		(a2v 0 80 'Amplitude of voice-excited parallel 2nd formant' dB)
		(a3v 0 80 'Amplitude of voice-excited parallel 3rd formant' dB)
		(a4v 0 80 'Amplitude of voice-excited parallel 4th formant' dB)
		(atv 0 80 'Amplitude of voice-excited parallel tracheal formant' dB)

	"Overall gain:"
		(gain 0 80 'Overall gain' dB))! !

!KlattResonatorIndices class methodsFor: 'frame parameter data' stamp: 'dtl 11/15/2009 10:31'!
parameterNames
	^ self parameterData collect: [ :each | each first]! !

!SmalltalkImage class methodsFor: 'as yet unclassified' stamp: 'jmv 5/8/2015 09:46'!
current
	^Smalltalk! !

!MultiByteFileStream methodsFor: 'access' stamp: 'jmv 5/8/2015 15:12'!
lineEndConvention: aSymbol

	lineEndConvention _ aSymbol caseOf: {
		[ #lf ] -> [ String lfString ].
		[ #cr ] -> [ String crString ] }.! !

!MultiByteFileStream methodsFor: 'line end conversion' stamp: 'jmv 5/8/2015 15:17'!
nextPut: char
	(char isLineSeparator and: [ lineEndConvention notNil ])
		ifTrue: [self nextPutAll: lineEndConvention ]
		ifFalse: [super nextPut: char ].
	^char! !

!MultiByteFileStream methodsFor: 'line end conversion' stamp: 'jmv 5/8/2015 15:17'!
nextPutAll: aString
	| converted |
	converted _ lineEndConvention
		ifNil: [ aString ]
		ifNotNil: [ aString withLineEndings: lineEndConvention ].
	.super nextPutAll: converted.
	^aString! !

!CrLfFileStream methodsFor: 'initialization' stamp: 'jmv 5/8/2015 15:28'!
initialize
	"By default, use host platform convention"
	lineEndConvention _ FileDirectory pathNameDelimiter = $\
		ifFalse: [ String lfString ]
		ifTrue: [ String crlfString ]! !
KlattResonatorIndices initialize!
